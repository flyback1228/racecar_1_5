
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ff8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08015298  08015298  00025298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015898  08015898  00025898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080158a0  080158a0  000258a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080158a8  080158a8  000258a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  080158ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002bac  240000a0  0801594c  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002c4c  0801594c  00032c4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY
 11 .debug_info   00032894  00000000  00000000  00030111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004eba  00000000  00000000  000629a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002410  00000000  00000000  00067860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c52  00000000  00000000  00069c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e390  00000000  00000000  0006b8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002cf6c  00000000  00000000  000a9c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018a6fa  00000000  00000000  000d6bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a5ac  00000000  00000000  002612b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  0026b864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015280 	.word	0x08015280

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08015280 	.word	0x08015280

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f006 fb8c 	bl	8006dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f82e 	bl	80006f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f8aa 	bl	80007f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 feca 	bl	8001434 <MX_GPIO_Init>
  MX_BDMA_Init();
 80006a0:	f000 fe68 	bl	8001374 <MX_BDMA_Init>
  MX_DMA_Init();
 80006a4:	f000 fe86 	bl	80013b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80006a8:	f000 f8c0 	bl	800082c <MX_ADC1_Init>
  MX_I2C1_Init();
 80006ac:	f000 f9ac 	bl	8000a08 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80006b0:	f000 f9ea 	bl	8000a88 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80006b4:	f000 fa34 	bl	8000b20 <MX_UART4_Init>
  MX_UART5_Init();
 80006b8:	f000 fa7e 	bl	8000bb8 <MX_UART5_Init>
  MX_UART7_Init();
 80006bc:	f000 fac8 	bl	8000c50 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fb12 	bl	8000ce8 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 80006c4:	f000 fb5c 	bl	8000d80 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80006c8:	f000 fb86 	bl	8000dd8 <MX_SPI1_Init>
  MX_TIM5_Init();
 80006cc:	f000 fcba 	bl	8001044 <MX_TIM5_Init>
  MX_TIM2_Init();
 80006d0:	f000 fbd8 	bl	8000e84 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d4:	f000 fe1c 	bl	8001310 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80006d8:	f000 fc4e 	bl	8000f78 <MX_TIM3_Init>
  MX_TIM15_Init();
 80006dc:	f000 fd6c 	bl	80011b8 <MX_TIM15_Init>
  MX_TIM7_Init();
 80006e0:	f000 fd32 	bl	8001148 <MX_TIM7_Init>
  MX_TIM16_Init();
 80006e4:	f000 fdec 	bl	80012c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006e8:	f003 ffe6 	bl	80046b8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006ec:	f004 f82c 	bl	8004748 <loop>
 80006f0:	e7fc      	b.n	80006ec <main+0x60>
	...

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	; 0x70
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	224c      	movs	r2, #76	; 0x4c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f014 f9d0 	bl	8014aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f014 f9ca 	bl	8014aa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000714:	2002      	movs	r0, #2
 8000716:	f00b fb1d 	bl	800bd54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <SystemClock_Config+0xf4>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <SystemClock_Config+0xf4>)
 8000724:	f023 0301 	bic.w	r3, r3, #1
 8000728:	62d3      	str	r3, [r2, #44]	; 0x2c
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <SystemClock_Config+0xf4>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <SystemClock_Config+0xf8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <SystemClock_Config+0xf8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <SystemClock_Config+0xf8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	bf00      	nop
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0xf8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075a:	d1f8      	bne.n	800074e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000776:	2305      	movs	r3, #5
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000782:	2314      	movs	r3, #20
 8000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800078a:	2308      	movs	r3, #8
 800078c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078e:	2300      	movs	r3, #0
 8000790:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4618      	mov	r0, r3
 800079c:	f00b ff68 	bl	800c670 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007a6:	f000 ff1f 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b6:	2308      	movs	r3, #8
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80007be:	2350      	movs	r3, #80	; 0x50
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 80007c8:	2350      	movs	r3, #80	; 0x50
 80007ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00c fba7 	bl	800cf24 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007dc:	f000 ff04 	bl	80015e8 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3770      	adds	r7, #112	; 0x70
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58000400 	.word	0x58000400
 80007ec:	58024800 	.word	0x58024800

080007f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0b0      	sub	sp, #192	; 0xc0
 80007f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	22c0      	movs	r2, #192	; 0xc0
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f014 f953 	bl	8014aa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4618      	mov	r0, r3
 8000816:	f00c ff11 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 fee2 	bl	80015e8 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	37c0      	adds	r7, #192	; 0xc0
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000850:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000852:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <MX_ADC1_Init+0x1b8>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000856:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000858:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000864:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000866:	2201      	movs	r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000876:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000878:	2201      	movs	r2, #1
 800087a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 800087c:	4b58      	ldr	r3, [pc, #352]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800087e:	2208      	movs	r2, #8
 8000880:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000896:	2203      	movs	r2, #3
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a0:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ae:	484c      	ldr	r0, [pc, #304]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008b0:	f006 fd0c 	bl	80072cc <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008ba:	f000 fe95 	bl	80015e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4845      	ldr	r0, [pc, #276]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008ca:	f007 fdad 	bl	8008428 <HAL_ADCEx_MultiModeConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 fe88 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008d8:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <MX_ADC1_Init+0x1bc>)
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008dc:	2306      	movs	r3, #6
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80008e0:	2306      	movs	r3, #6
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ea:	2304      	movs	r3, #4
 80008ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4839      	ldr	r0, [pc, #228]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008fc:	f007 f8e0 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000906:	f000 fe6f 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_ADC1_Init+0x1c0>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800090e:	230c      	movs	r3, #12
 8000910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4832      	ldr	r0, [pc, #200]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000918:	f007 f8d2 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000922:	f000 fe61 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_ADC1_Init+0x1c4>)
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800092a:	2312      	movs	r3, #18
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000934:	f007 f8c4 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800093e:	f000 fe53 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_ADC1_Init+0x1c8>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000946:	2318      	movs	r3, #24
 8000948:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4824      	ldr	r0, [pc, #144]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000950:	f007 f8b6 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800095a:	f000 fe45 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC1_Init+0x1cc>)
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800096e:	f007 f8a7 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000978:	f000 fe36 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_ADC1_Init+0x1d0>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000980:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800098c:	f007 f898 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000996:	f000 fe27 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_ADC1_Init+0x1d4>)
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800099e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80009aa:	f007 f889 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80009b4:	f000 fe18 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_ADC1_Init+0x1d8>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009bc:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80009c8:	f007 f87a 	bl	8007ac0 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009d2:	f000 fe09 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	240000bc 	.word	0x240000bc
 80009e4:	40022000 	.word	0x40022000
 80009e8:	0c900008 	.word	0x0c900008
 80009ec:	10c00010 	.word	0x10c00010
 80009f0:	14f00020 	.word	0x14f00020
 80009f4:	21800100 	.word	0x21800100
 80009f8:	25b00200 	.word	0x25b00200
 80009fc:	2a000400 	.word	0x2a000400
 8000a00:	2e300800 	.word	0x2e300800
 8000a04:	4b840000 	.word	0x4b840000

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_I2C1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a44:	f00a ff16 	bl	800b874 <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 fdcb 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a56:	f00a ff9d 	bl	800b994 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 fdc2 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a68:	f00a ffdf 	bl	800ba2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 fdb9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000198 	.word	0x24000198
 8000a80:	40005400 	.word	0x40005400
 8000a84:	00c0eaff 	.word	0x00c0eaff

08000a88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_LPUART1_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ad2:	f011 facb 	bl	801206c <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 fd84 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ae4:	f013 fa88 	bl	8013ff8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 fd7b 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	f013 fabd 	bl	8014074 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 fd72 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000b06:	f013 fa3e 	bl	8013f86 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 fd6a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240001ec 	.word	0x240001ec
 8000b1c:	58000c00 	.word	0x58000c00

08000b20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_UART4_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b6a:	f011 fa7f 	bl	801206c <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b74:	f000 fd38 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b7c:	f013 fa3c 	bl	8013ff8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f000 fd2f 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b8e:	f013 fa71 	bl	8014074 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fd26 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b9e:	f013 f9f2 	bl	8013f86 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 fd1e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000280 	.word	0x24000280
 8000bb4:	40004c00 	.word	0x40004c00

08000bb8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <MX_UART5_Init+0x94>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_UART5_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c02:	f011 fa33 	bl	801206c <HAL_UART_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 fcec 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c14:	f013 f9f0 	bl	8013ff8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 fce3 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c26:	f013 fa25 	bl	8014074 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 fcda 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c36:	f013 f9a6 	bl	8013f86 <HAL_UARTEx_DisableFifoMode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 fcd2 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000314 	.word	0x24000314
 8000c4c:	40005000 	.word	0x40005000

08000c50 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <MX_UART7_Init+0x94>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c9a:	f011 f9e7 	bl	801206c <HAL_UART_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 fca0 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cac:	f013 f9a4 	bl	8013ff8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f000 fc97 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cbe:	f013 f9d9 	bl	8014074 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000cc8:	f000 fc8e 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cce:	f013 f95a 	bl	8013f86 <HAL_UARTEx_DisableFifoMode>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 fc86 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	240003a8 	.word	0x240003a8
 8000ce4:	40007800 	.word	0x40007800

08000ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <MX_USART3_UART_Init+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d32:	f011 f99b 	bl	801206c <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 fc54 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d44:	f013 f958 	bl	8013ff8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f000 fc4b 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d56:	f013 f98d 	bl	8014074 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 fc42 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d66:	f013 f90e 	bl	8013f86 <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 fc3a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2400043c 	.word	0x2400043c
 8000d7c:	40004800 	.word	0x40004800

08000d80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <MX_QUADSPI_Init+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d9e:	2216      	movs	r2, #22
 8000da0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000dbe:	f00b f813 	bl	800bde8 <HAL_QSPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 fc0e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000728 	.word	0x24000728
 8000dd4:	52005000 	.word	0x52005000

08000dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <MX_SPI1_Init+0xa8>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000de4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e68:	f00f f8e6 	bl	8010038 <HAL_SPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e72:	f000 fbb9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000774 	.word	0x24000774
 8000e80:	40013000 	.word	0x40013000

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eb2:	2263      	movs	r2, #99	; 0x63
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ed2:	f00f fabf 	bl	8010454 <HAL_TIM_PWM_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000edc:	f000 fb84 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4821      	ldr	r0, [pc, #132]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ef0:	f011 f810 	bl	8011f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000efa:	f000 fb75 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2360      	movs	r3, #96	; 0x60
 8000f00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f16:	f010 f86b 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f20:	f000 fb62 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2204      	movs	r2, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f2c:	f010 f860 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f36:	f000 fb57 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f42:	f010 f855 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000f4c:	f000 fb4c 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	220c      	movs	r2, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f58:	f010 f84a 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000f62:	f000 fb41 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f68:	f005 f9b2 	bl	80062d0 <HAL_TIM_MspPostInit>

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	240007fc 	.word	0x240007fc

08000f78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_TIM3_Init+0xc4>)
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <MX_TIM3_Init+0xc8>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fa4:	2263      	movs	r2, #99	; 0x63
 8000fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_TIM3_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15503;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fb0:	f643 428f 	movw	r2, #15503	; 0x3c8f
 8000fb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc2:	481e      	ldr	r0, [pc, #120]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fc4:	f00f fa46 	bl	8010454 <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f000 fb0b 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fe2:	f010 ff97 	bl	8011f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fec:	f000 fafc 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM3_Init+0xc4>)
 8001008:	f00f fff2 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001012:	f000 fae9 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	2204      	movs	r2, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM3_Init+0xc4>)
 800101e:	f00f ffe7 	bl	8010ff0 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001028:	f000 fade 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM3_Init+0xc4>)
 800102e:	f005 f94f 	bl	80062d0 <HAL_TIM_MspPostInit>

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000848 	.word	0x24000848
 8001040:	40000400 	.word	0x40000400

08001044 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001074:	4a33      	ldr	r2, [pc, #204]	; (8001144 <MX_TIM5_Init+0x100>)
 8001076:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <MX_TIM5_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_TIM5_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001098:	4829      	ldr	r0, [pc, #164]	; (8001140 <MX_TIM5_Init+0xfc>)
 800109a:	f00f fb41 	bl	8010720 <HAL_TIM_IC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80010a4:	f000 faa0 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010a8:	2304      	movs	r3, #4
 80010aa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	481f      	ldr	r0, [pc, #124]	; (8001140 <MX_TIM5_Init+0xfc>)
 80010c4:	f010 f8a8 	bl	8011218 <HAL_TIM_SlaveConfigSynchro>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80010ce:	f000 fa8b 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_TIM5_Init+0xfc>)
 80010ec:	f00f fee3 	bl	8010eb6 <HAL_TIM_IC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 80010f6:	f000 fa77 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2204      	movs	r2, #4
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM5_Init+0xfc>)
 800110c:	f00f fed3 	bl	8010eb6 <HAL_TIM_IC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001116:	f000 fa67 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001128:	f010 fef4 	bl	8011f14 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001132:	f000 fa59 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000894 	.word	0x24000894
 8001144:	40000c00 	.word	0x40000c00

08001148 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM7_Init+0x68>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <MX_TIM7_Init+0x6c>)
 800115c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001160:	f242 720f 	movw	r2, #9999	; 0x270f
 8001164:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_TIM7_Init+0x68>)
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_TIM7_Init+0x68>)
 800117c:	f00f f89b 	bl	80102b6 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001186:	f000 fa2f 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001198:	f010 febc 	bl	8011f14 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011a2:	f000 fa21 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240008e0 	.word	0x240008e0
 80011b4:	40001400 	.word	0x40001400

080011b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <MX_TIM15_Init+0x104>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_TIM15_Init+0x100>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001212:	4829      	ldr	r0, [pc, #164]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001214:	f00f fa84 	bl	8010720 <HAL_TIM_IC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 f9e3 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001222:	2304      	movs	r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001226:	2350      	movs	r3, #80	; 0x50
 8001228:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <MX_TIM15_Init+0x100>)
 800123e:	f00f ffeb 	bl	8011218 <HAL_TIM_SlaveConfigSynchro>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001248:	f000 f9ce 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001266:	f00f fe26 	bl	8010eb6 <HAL_TIM_IC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 8001270:	f000 f9ba 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001274:	2302      	movs	r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2204      	movs	r2, #4
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001286:	f00f fe16 	bl	8010eb6 <HAL_TIM_IC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 8001290:	f000 f9aa 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM15_Init+0x100>)
 80012a2:	f010 fe37 	bl	8011f14 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80012ac:	f000 f99c 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400092c 	.word	0x2400092c
 80012bc:	40014000 	.word	0x40014000

080012c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_TIM16_Init+0x48>)
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_TIM16_Init+0x4c>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_TIM16_Init+0x48>)
 80012cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_TIM16_Init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_TIM16_Init+0x48>)
 80012da:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_TIM16_Init+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_TIM16_Init+0x48>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_TIM16_Init+0x48>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM16_Init+0x48>)
 80012f4:	f00e ffdf 	bl	80102b6 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012fe:	f000 f973 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000978 	.word	0x24000978
 800130c:	40014400 	.word	0x40014400

08001310 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001318:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131c:	2209      	movs	r2, #9
 800131e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001322:	2202      	movs	r2, #2
 8001324:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132e:	2202      	movs	r2, #2
 8001330:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001358:	f00a fbb3 	bl	800bac2 <HAL_PCD_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001362:	f000 f941 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240009c4 	.word	0x240009c4
 8001370:	40080000 	.word	0x40080000

08001374 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_BDMA_Init+0x3c>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <MX_BDMA_Init+0x3c>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_BDMA_Init+0x3c>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2081      	movs	r0, #129	; 0x81
 800139e:	f007 f9fc 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80013a2:	2081      	movs	r0, #129	; 0x81
 80013a4:	f007 fa13 	bl	80087ce <HAL_NVIC_EnableIRQ>

}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58024400 	.word	0x58024400

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_DMA_Init+0x7c>)
 80013bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_DMA_Init+0x7c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_DMA_Init+0x7c>)
 80013cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	200b      	movs	r0, #11
 80013de:	f007 f9dc 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e2:	200b      	movs	r0, #11
 80013e4:	f007 f9f3 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	200c      	movs	r0, #12
 80013ee:	f007 f9d4 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013f2:	200c      	movs	r0, #12
 80013f4:	f007 f9eb 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200d      	movs	r0, #13
 80013fe:	f007 f9cc 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001402:	200d      	movs	r0, #13
 8001404:	f007 f9e3 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200e      	movs	r0, #14
 800140e:	f007 f9c4 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001412:	200e      	movs	r0, #14
 8001414:	f007 f9db 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	200f      	movs	r0, #15
 800141e:	f007 f9bc 	bl	800879a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001422:	200f      	movs	r0, #15
 8001424:	f007 f9d3 	bl	80087ce <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a60      	ldr	r2, [pc, #384]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a59      	ldr	r2, [pc, #356]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a3b      	ldr	r2, [pc, #236]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f248 0108 	movw	r1, #32776	; 0x8008
 8001504:	4834      	ldr	r0, [pc, #208]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 8001506:	f00a f981 	bl	800b80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f24c 0120 	movw	r1, #49184	; 0xc020
 8001510:	4832      	ldr	r0, [pc, #200]	; (80015dc <MX_GPIO_Init+0x1a8>)
 8001512:	f00a f97b 	bl	800b80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 800151c:	4830      	ldr	r0, [pc, #192]	; (80015e0 <MX_GPIO_Init+0x1ac>)
 800151e:	f00a f975 	bl	800b80c <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LED_RED_Pin;
 8001522:	f248 0308 	movw	r3, #32776	; 0x8008
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4827      	ldr	r0, [pc, #156]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 800153c:	f009 ff9e 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4823      	ldr	r0, [pc, #140]	; (80015e4 <MX_GPIO_Init+0x1b0>)
 8001558:	f009 ff90 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001560:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4819      	ldr	r0, [pc, #100]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 8001572:	f009 ff83 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 8001576:	f24c 0320 	movw	r3, #49184	; 0xc020
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_GPIO_Init+0x1a8>)
 8001590:	f009 ff74 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001594:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 8001598:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_GPIO_Init+0x1ac>)
 80015ae:	f009 ff65 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_GPIO_Init+0x1a8>)
 80015c6:	f009 ff59 	bl	800b47c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58020800 	.word	0x58020800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>

080015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	ed87 0a00 	vstr	s0, [r7]
 80015fe:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    std::memcpy(&val, &f, sizeof(val));
 8001600:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	15db      	asrs	r3, r3, #23
 8001606:	b21b      	sxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001612:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001614:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d103      	bne.n	8001624 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 800161c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001620:	82fb      	strh	r3, [r7, #22]
 8001622:	e02a      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 800162c:	8afb      	ldrh	r3, [r7, #22]
 800162e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001632:	b29b      	uxth	r3, r3
 8001634:	82fb      	strh	r3, [r7, #22]
 8001636:	e020      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e01a      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800164a:	b29b      	uxth	r3, r3
 800164c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001654:	e008      	b.n	8001668 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
          exp--;
 800165c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f1      	beq.n	8001656 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001678:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	6079      	str	r1, [r7, #4]
 80016a2:	0152      	lsls	r2, r2, #5
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	08d9      	lsrs	r1, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	0ad9      	lsrs	r1, r3, #11
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	b2d9      	uxtb	r1, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	0cdb      	lsrs	r3, r3, #19
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1c58      	adds	r0, r3, #1
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	430a      	orrs	r2, r1
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80016e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e8:	111b      	asrs	r3, r3, #4
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	6079      	str	r1, [r7, #4]
 80016f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80016fc:	edd7 7a00 	vldr	s15, [r7]
 8001700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d508      	bpl.n	800171c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3b01      	subs	r3, #1
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 800171c:	2308      	movs	r3, #8
  }
 800171e:	4618      	mov	r0, r3
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800172a:	b480      	push	{r7}
 800172c:	b087      	sub	sp, #28
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3303      	adds	r3, #3
 8001738:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	031b      	lsls	r3, r3, #12
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b21b      	sxth	r3, r3
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	b29b      	uxth	r3, r3
 800179a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80017a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 80017b4:	23ff      	movs	r3, #255	; 0xff
 80017b6:	82fb      	strh	r3, [r7, #22]
 80017b8:	e02c      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 80017ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017be:	f240 427e 	movw	r2, #1150	; 0x47e
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dd04      	ble.n	80017d0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e021      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80017d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017d4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80017d8:	dd05      	ble.n	80017e6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80017da:	8afb      	ldrh	r3, [r7, #22]
 80017dc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	82fb      	strh	r3, [r7, #22]
 80017e4:	e016      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80017e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ea:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80017ee:	dc02      	bgt.n	80017f6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80017f0:	2300      	movs	r3, #0
 80017f2:	82fb      	strh	r3, [r7, #22]
 80017f4:	e00e      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fc:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80017fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001802:	f240 3381 	movw	r3, #897	; 0x381
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800181a:	4293      	cmp	r3, r2
 800181c:	d002      	beq.n	8001824 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3301      	adds	r3, #1
 8001822:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	05da      	lsls	r2, r3, #23
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	061b      	lsls	r3, r3, #24
 8001844:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fa      	ldr	r2, [r7, #12]

    std::memcpy(f, &val, sizeof(val));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	601a      	str	r2, [r3, #0]
    return 8;
 8001854:	2308      	movs	r3, #8
  }
 8001856:	4618      	mov	r0, r3
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN3ros3MsgC1Ev>:
class Msg
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	08015814 	.word	0x08015814

080018a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
      data()
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffe8 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ffcf 	bl	8001862 <_ZN3ros4TimeC1Ev>
    {
    }
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	080157fc 	.word	0x080157fc

080018d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0a19      	lsrs	r1, r3, #8
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0c19      	lsrs	r1, r3, #16
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3302      	adds	r3, #2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0e19      	lsrs	r1, r3, #24
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3303      	adds	r3, #3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a19      	lsrs	r1, r3, #8
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	0c19      	lsrs	r1, r3, #16
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3302      	adds	r3, #2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0e19      	lsrs	r1, r3, #24
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3303      	adds	r3, #3
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3304      	adds	r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
      return offset;
 8001976:	68fb      	ldr	r3, [r7, #12]
    }
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	440b      	add	r3, r1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3302      	adds	r3, #2
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	440b      	add	r3, r1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3303      	adds	r3, #3
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	440b      	add	r3, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	061b      	lsls	r3, r3, #24
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	440b      	add	r3, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3302      	adds	r3, #2
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	440b      	add	r3, r1
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	440b      	add	r3, r1
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08015298 	.word	0x08015298

08001a68 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	080152a8 	.word	0x080152a8

08001a84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fef8 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aa4:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aaa:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ab0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
    {
    }
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	080157e4 	.word	0x080157e4
 8001ac8:	080152cc 	.word	0x080152cc

08001acc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	8899      	ldrh	r1, [r3, #4]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	889b      	ldrh	r3, [r3, #4]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	b299      	uxth	r1, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3302      	adds	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fbea 	bl	80002e0 <strlen>
 8001b0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fe52 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	18d0      	adds	r0, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f013 f842 	bl	8014bb8 <memcpy>
      offset += length_topic_name;
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4413      	add	r3, r2
 8001b3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fbcd 	bl	80002e0 <strlen>
 8001b46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fe35 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	18d0      	adds	r0, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f013 f825 	bl	8014bb8 <memcpy>
      offset += length_message_type;
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fbb0 	bl	80002e0 <strlen>
 8001b80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fe18 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3304      	adds	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	18d0      	adds	r0, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f013 f808 	bl	8014bb8 <memcpy>
      offset += length_md5sum;
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0a19      	lsrs	r1, r3, #8
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0c19      	lsrs	r1, r3, #16
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2ca      	uxtb	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0e19      	lsrs	r1, r3, #24
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3303      	adds	r3, #3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
    }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b08a      	sub	sp, #40	; 0x28
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	889b      	ldrh	r3, [r3, #4]
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fdd5 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	3304      	adds	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e00b      	b.n	8001c78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	441a      	add	r2, r3
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3ed      	bcc.n	8001c60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	441a      	add	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	441a      	add	r2, r3
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 fda2 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	e00b      	b.n	8001cde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	441a      	add	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	6a3a      	ldr	r2, [r7, #32]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3ed      	bcc.n	8001cc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	441a      	add	r2, r3
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fd6f 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	3304      	adds	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e00b      	b.n	8001d44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	441a      	add	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	440b      	add	r3, r1
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3ed      	bcc.n	8001d2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	3b01      	subs	r3, #1
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	441a      	add	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	440a      	add	r2, r1
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	440b      	add	r3, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	440b      	add	r3, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3303      	adds	r3, #3
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	440b      	add	r3, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
    }
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	080152d0 	.word	0x080152d0

08001df0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	080152ec 	.word	0x080152ec

08001e0c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fd34 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
      level(0),
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	711a      	strb	r2, [r3, #4]
      msg("")
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e2c:	609a      	str	r2, [r3, #8]
    {
    }
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	080157cc 	.word	0x080157cc
 8001e3c:	080152cc 	.word	0x080152cc

08001e40 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	7912      	ldrb	r2, [r2, #4]
 8001e58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa3b 	bl	80002e0 <strlen>
 8001e6a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fca3 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	18d0      	adds	r0, r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f012 fe93 	bl	8014bb8 <memcpy>
      offset += length_msg;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fc94 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00b      	b.n	8001efa <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	440b      	add	r3, r1
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3ed      	bcc.n	8001ee2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
     return offset;
 8001f2a:	693b      	ldr	r3, [r7, #16]
    }
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	08015310 	.word	0x08015310

08001f50 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	08015324 	.word	0x08015324

08001f6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc84 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	080157b4 	.word	0x080157b4

08001fc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0a19      	lsrs	r1, r3, #8
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b2ca      	uxtb	r2, r1
 8001ff4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0c19      	lsrs	r1, r3, #16
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	3302      	adds	r3, #2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	b2ca      	uxtb	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0e19      	lsrs	r1, r3, #24
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3303      	adds	r3, #3
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3304      	adds	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	e02a      	b.n	800207c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	0a19      	lsrs	r1, r3, #8
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	3301      	adds	r3, #1
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	0c19      	lsrs	r1, r3, #16
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3302      	adds	r3, #2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	0e19      	lsrs	r1, r3, #24
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	3303      	adds	r3, #3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4413      	add	r3, r2
 800206c:	b2ca      	uxtb	r2, r1
 800206e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3304      	adds	r3, #4
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	3301      	adds	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3cf      	bcc.n	8002026 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	0a19      	lsrs	r1, r3, #8
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	3301      	adds	r3, #1
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	0c19      	lsrs	r1, r3, #16
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	3302      	adds	r3, #2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	b2ca      	uxtb	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	0e19      	lsrs	r1, r3, #24
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3303      	adds	r3, #3
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3304      	adds	r3, #4
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	e02a      	b.n	800212c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2ca      	uxtb	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0a19      	lsrs	r1, r3, #8
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	3301      	adds	r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	0c19      	lsrs	r1, r3, #16
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3302      	adds	r3, #2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0e19      	lsrs	r1, r3, #24
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	3303      	adds	r3, #3
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	3304      	adds	r3, #4
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3cf      	bcc.n	80020d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69d9      	ldr	r1, [r3, #28]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b2ca      	uxtb	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	0a19      	lsrs	r1, r3, #8
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4413      	add	r3, r2
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	0c19      	lsrs	r1, r3, #16
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	3302      	adds	r3, #2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	0e19      	lsrs	r1, r3, #24
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3303      	adds	r3, #3
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	3304      	adds	r3, #4
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e027      	b.n	80021d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f8a4 	bl	80002e0 <strlen>
 8002198:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fb0c 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3304      	adds	r3, #4
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	18d0      	adds	r0, r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4619      	mov	r1, r3
 80021c4:	f012 fcf8 	bl	8014bb8 <memcpy>
      offset += length_stringsi;
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4413      	add	r3, r2
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	3301      	adds	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3d2      	bcc.n	8002186 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021e2:	4618      	mov	r0, r3
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b08e      	sub	sp, #56	; 0x38
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	3301      	adds	r3, #1
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	4313      	orrs	r3, r2
 8002212:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3302      	adds	r3, #2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	4313      	orrs	r3, r2
 8002224:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	3303      	adds	r3, #3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	6a3a      	ldr	r2, [r7, #32]
 8002234:	4313      	orrs	r3, r2
 8002236:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	3304      	adds	r3, #4
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d90a      	bls.n	800225e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f012 fbd0 	bl	80149f8 <realloc>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
 8002268:	e035      	b.n	80022d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	440a      	add	r2, r1
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	3301      	adds	r3, #1
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	440b      	add	r3, r1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	3302      	adds	r3, #2
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	440b      	add	r3, r1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	3303      	adds	r3, #3
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	440b      	add	r3, r1
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	3304      	adds	r3, #4
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	3301      	adds	r3, #1
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3c4      	bcc.n	800226a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	3301      	adds	r3, #1
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	3302      	adds	r3, #2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	3303      	adds	r3, #3
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4313      	orrs	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	3304      	adds	r3, #4
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	d90a      	bls.n	8002346 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f012 fb5c 	bl	80149f8 <realloc>
 8002340:	4602      	mov	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	e035      	b.n	80023be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	440a      	add	r2, r1
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	3301      	adds	r3, #1
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	3302      	adds	r3, #2
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	440b      	add	r3, r1
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	3303      	adds	r3, #3
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	440b      	add	r3, r1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	3304      	adds	r3, #4
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	3214      	adds	r2, #20
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	3301      	adds	r3, #1
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3c4      	bcc.n	8002352 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	3301      	adds	r3, #1
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	3302      	adds	r3, #2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	3303      	adds	r3, #3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	3304      	adds	r3, #4
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	429a      	cmp	r2, r3
 8002416:	d90a      	bls.n	800242e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f012 fae8 	bl	80149f8 <realloc>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
 8002438:	e03e      	b.n	80024b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	441a      	add	r2, r3
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f9d9 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	3304      	adds	r3, #4
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e00b      	b.n	8002470 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	441a      	add	r2, r3
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3b01      	subs	r3, #1
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	440b      	add	r3, r1
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ed      	bcc.n	8002458 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800247c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	3b01      	subs	r3, #1
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	3b01      	subs	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4413      	add	r3, r2
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	3220      	adds	r2, #32
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	3301      	adds	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3bb      	bcc.n	800243a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	08015678 	.word	0x08015678

080024e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	08015348 	.word	0x08015348

08002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68d8      	ldr	r0, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6891      	ldr	r1, [r2, #8]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
  };
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
  }
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d077      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d06f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a45      	ldr	r2, [pc, #276]	; (80026bc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d067      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d05f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d057      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	; (80026cc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d047      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d03f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d037      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2d      	ldr	r2, [pc, #180]	; (80026dc <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d017      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10a      	bne.n	8002692 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	e009      	b.n	80026a6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40020010 	.word	0x40020010
 80026b8:	40020028 	.word	0x40020028
 80026bc:	40020040 	.word	0x40020040
 80026c0:	40020058 	.word	0x40020058
 80026c4:	40020070 	.word	0x40020070
 80026c8:	40020088 	.word	0x40020088
 80026cc:	400200a0 	.word	0x400200a0
 80026d0:	400200b8 	.word	0x400200b8
 80026d4:	40020410 	.word	0x40020410
 80026d8:	40020428 	.word	0x40020428
 80026dc:	40020440 	.word	0x40020440
 80026e0:	40020458 	.word	0x40020458
 80026e4:	40020470 	.word	0x40020470
 80026e8:	40020488 	.word	0x40020488
 80026ec:	400204a0 	.word	0x400204a0
 80026f0:	400204b8 	.word	0x400204b8

080026f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <_ZN13STM32HardwareC1Ev+0x34>)
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	24000280 	.word	0x24000280

0800272c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f804 	bl	8002742 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002756:	4619      	mov	r1, r3
 8002758:	f00f fde6 	bl	8012328 <HAL_UART_Receive_DMA>
    }
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800276c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002770:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fefb 	bl	8002574 <_ZN13STM32Hardware10getRdmaIndEv>
 800277e:	4603      	mov	r3, r0
 8002780:	429c      	cmp	r4, r3
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002794:	1c59      	adds	r1, r3, #1
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80027b4:	68fb      	ldr	r3, [r7, #12]
    }
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
	...

080027c0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d108      	bne.n	80027e6 <_ZN13STM32Hardware5flushEv+0x26>
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZN13STM32Hardware5flushEv+0x26>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <_ZN13STM32Hardware5flushEv+0x28>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d03f      	beq.n	800286c <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d031      	beq.n	8002866 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800280e:	429a      	cmp	r2, r3
 8002810:	d20a      	bcs.n	8002828 <_ZN13STM32Hardware5flushEv+0x68>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002820:	b29b      	uxth	r3, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	e006      	b.n	8002836 <_ZN13STM32Hardware5flushEv+0x76>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800282e:	b29b      	uxth	r3, r3
 8002830:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002834:	b29b      	uxth	r3, r3
 8002836:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	89fa      	ldrh	r2, [r7, #14]
 800284c:	4619      	mov	r1, r3
 800284e:	f00f fceb 	bl	8012228 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	4413      	add	r3, r2
 800285c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002866:	4b03      	ldr	r3, [pc, #12]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
      }
    }
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	24000ed0 	.word	0x24000ed0

08002878 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
      int n = length;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288e:	bfa8      	it	ge
 8002890:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002894:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800289c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	bf28      	it	cs
 80028a6:	4613      	movcs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80028b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f012 f97b 	bl	8014bb8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4413      	add	r3, r2
 80028cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d00b      	beq.n	80028f6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	18d1      	adds	r1, r2, r3
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	f012 f961 	bl	8014bb8 <memcpy>
      }

      flush();
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff ff62 	bl	80027c0 <_ZN13STM32Hardware5flushEv>
    }
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	f004 fad4 	bl	8006eb8 <HAL_GetTick>
 8002910:	4603      	mov	r3, r0
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ffac 	bl	8001884 <_ZN3ros3MsgC1Ev>
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
      label(""),
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002936:	605a      	str	r2, [r3, #4]
      size(0),
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
      stride(0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	60da      	str	r2, [r3, #12]
    {
    }
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	08015770 	.word	0x08015770
 8002954:	080152cc 	.word	0x080152cc

08002958 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fcb8 	bl	80002e0 <strlen>
 8002970:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f001 ff20 	bl	80047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	18d0      	adds	r0, r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	4619      	mov	r1, r3
 8002994:	f012 f910 	bl	8014bb8 <memcpy>
      offset += length_label;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a19      	lsrs	r1, r3, #8
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	0c19      	lsrs	r1, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3302      	adds	r3, #2
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0e19      	lsrs	r1, r3, #24
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3303      	adds	r3, #3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3304      	adds	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	b2ca      	uxtb	r2, r1
 80029f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a19      	lsrs	r1, r3, #8
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	0c19      	lsrs	r1, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3302      	adds	r3, #2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	b2ca      	uxtb	r2, r1
 8002a1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0e19      	lsrs	r1, r3, #24
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3303      	adds	r3, #3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3304      	adds	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a34:	68fb      	ldr	r3, [r7, #12]
    }
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	441a      	add	r2, r3
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fed0 	bl	80047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3304      	adds	r3, #4
 8002a62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e00b      	b.n	8002a82 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	441a      	add	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	440b      	add	r3, r1
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3ed      	bcc.n	8002a6a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	3b01      	subs	r3, #1
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	440b      	add	r3, r1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3302      	adds	r3, #2
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	3303      	adds	r3, #3
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	440b      	add	r3, r1
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3304      	adds	r3, #4
 8002b06:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	440b      	add	r3, r1
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3302      	adds	r3, #2
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	440b      	add	r3, r1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	613b      	str	r3, [r7, #16]
     return offset;
 8002b5e:	693b      	ldr	r3, [r7, #16]
    }
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	0801536c 	.word	0x0801536c

08002b84 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0801538c 	.word	0x0801538c

08002ba0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fe6a 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff feab 	bl	800291c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
    {
    }
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	08015758 	.word	0x08015758

08002be0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b2ca      	uxtb	r2, r1
 8002bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0a19      	lsrs	r1, r3, #8
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2ca      	uxtb	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c19      	lsrs	r1, r3, #16
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3302      	adds	r3, #2
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0e19      	lsrs	r1, r3, #24
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	e017      	b.n	8002c6e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	18d0      	adds	r0, r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4413      	add	r3, r2
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4798      	blx	r3
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3e2      	bcc.n	8002c3e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	0a19      	lsrs	r1, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	0c19      	lsrs	r1, r3, #16
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	0e19      	lsrs	r1, r3, #24
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3303      	adds	r3, #3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90a      	bls.n	8002d40 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f011 fe5f 	bl	80149f8 <realloc>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e01a      	b.n	8002d82 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0008 	add.w	r0, r3, #8
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7ff fe70 	bl	8002a3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	18d0      	adds	r0, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3308      	adds	r3, #8
 8002d74:	2210      	movs	r2, #16
 8002d76:	4619      	mov	r1, r3
 8002d78:	f011 ff1e 	bl	8014bb8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3df      	bcc.n	8002d4c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	440b      	add	r3, r1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3302      	adds	r3, #2
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	440b      	add	r3, r1
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	440b      	add	r3, r1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3304      	adds	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
     return offset;
 8002de2:	697b      	ldr	r3, [r7, #20]
    }
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	080153b0 	.word	0x080153b0

08002e08 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	080153cc 	.word	0x080153cc

08002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fd28 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
      layout(),
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff feae 	bl	8002ba0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08015740 	.word	0x08015740

08002e68 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	1d18      	adds	r0, r3, #4
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff fead 	bl	8002be0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	0a19      	lsrs	r1, r3, #8
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	0c19      	lsrs	r1, r3, #16
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	0e19      	lsrs	r1, r3, #24
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e02a      	b.n	8002f34 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2ca      	uxtb	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0a19      	lsrs	r1, r3, #8
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0c19      	lsrs	r1, r3, #16
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	b2ca      	uxtb	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0e19      	lsrs	r1, r3, #24
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3301      	adds	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3cf      	bcc.n	8002ede <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002f3e:	697b      	ldr	r3, [r7, #20]
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1d18      	adds	r0, r3, #4
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7ff feb3 	bl	8002ccc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90a      	bls.n	8002fd4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f011 fd15 	bl	80149f8 <realloc>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e035      	b.n	800304c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	440a      	add	r2, r1
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	440b      	add	r3, r1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3302      	adds	r3, #2
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	440b      	add	r3, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3303      	adds	r3, #3
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	440b      	add	r3, r1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3304      	adds	r3, #4
 8003032:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	3228      	adds	r2, #40	; 0x28
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3301      	adds	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3c4      	bcc.n	8002fe0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003056:	697b      	ldr	r3, [r7, #20]
    }
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	080153f0 	.word	0x080153f0

0800307c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	0801540c 	.word	0x0801540c

08003098 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
      data(0)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fbee 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
    {
    }
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	08015728 	.word	0x08015728

080030c4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	b2ca      	uxtb	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0a19      	lsrs	r1, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3301      	adds	r3, #1
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	b2ca      	uxtb	r2, r1
 80030f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	0c19      	lsrs	r1, r3, #16
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3302      	adds	r3, #2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	b2ca      	uxtb	r2, r1
 8003102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0e19      	lsrs	r1, r3, #24
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3303      	adds	r3, #3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	b2ca      	uxtb	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
      return offset;
 800311a:	68fb      	ldr	r3, [r7, #12]
    }
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6839      	ldr	r1, [r7, #0]
 8003140:	440a      	add	r2, r1
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	440b      	add	r3, r1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	4313      	orrs	r3, r2
 8003158:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3302      	adds	r3, #2
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	440b      	add	r3, r1
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4313      	orrs	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3303      	adds	r3, #3
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	440b      	add	r3, r1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
     return offset;
 800318a:	68fb      	ldr	r3, [r7, #12]
    }
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	08015430 	.word	0x08015430

080031b4 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	08015444 	.word	0x08015444

080031d0 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
      data(0)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fb52 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80031e0:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	711a      	strb	r2, [r3, #4]
    {
    }
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	08015710 	.word	0x08015710

080031fc <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	791b      	ldrb	r3, [r3, #4]
 800320e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	4413      	add	r3, r2
 8003216:	7a3a      	ldrb	r2, [r7, #8]
 8003218:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3301      	adds	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003220:	68fb      	ldr	r3, [r7, #12]
    }
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003240:	7a3a      	ldrb	r2, [r7, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	440b      	add	r3, r1
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003250:	7a3a      	ldrb	r2, [r7, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
     return offset;
 800325c:	68fb      	ldr	r3, [r7, #12]
    }
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	08015468 	.word	0x08015468

08003288 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	08015478 	.word	0x08015478

080032a4 <_ZN9vesc_msgs9VescStateC1Ev>:
      enum { FAULT_CODE_DRV8302 = 3 };
      enum { FAULT_CODE_ABS_OVER_CURRENT = 4 };
      enum { FAULT_CODE_OVER_TEMP_FET = 5 };
      enum { FAULT_CODE_OVER_TEMP_MOTOR = 6 };

    VescState():
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
      charge_regen(0),
      energy_drawn(0),
      energy_regen(0),
      displacement(0),
      distance_traveled(0),
      fault_code(0)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fae8 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <_ZN9vesc_msgs9VescStateC1Ev+0x88>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
      voltage_input(0),
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	605a      	str	r2, [r3, #4]
      temperature_pcb(0),
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
      current_motor(0),
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
      current_input(0),
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
      speed(0),
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
      duty_cycle(0),
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
      charge_drawn(0),
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
      charge_regen(0),
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
      energy_drawn(0),
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
      energy_regen(0),
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
      displacement(0),
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c
      distance_traveled(0),
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
      fault_code(0)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	080156f8 	.word	0x080156f8

08003330 <_ZNK9vesc_msgs9VescState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->voltage_input);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	441a      	add	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	edd3 7a01 	vldr	s15, [r3, #4]
 800334a:	eeb0 0a67 	vmov.f32	s0, s15
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe f94f 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature_pcb);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	edd3 7a02 	vldr	s15, [r3, #8]
 8003368:	eeb0 0a67 	vmov.f32	s0, s15
 800336c:	4610      	mov	r0, r2
 800336e:	f7fe f940 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_motor);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	edd3 7a03 	vldr	s15, [r3, #12]
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	4610      	mov	r0, r2
 800338c:	f7fe f931 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_input);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80033a4:	eeb0 0a67 	vmov.f32	s0, s15
 80033a8:	4610      	mov	r0, r2
 80033aa:	f7fe f922 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edd3 7a05 	vldr	s15, [r3, #20]
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe f913 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->duty_cycle);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7fe f904 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_drawn);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	441a      	add	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	4610      	mov	r0, r2
 8003404:	f7fe f8f5 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_regen);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edd3 7a08 	vldr	s15, [r3, #32]
 800341c:	eeb0 0a67 	vmov.f32	s0, s15
 8003420:	4610      	mov	r0, r2
 8003422:	f7fe f8e6 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_drawn);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	441a      	add	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	4610      	mov	r0, r2
 8003440:	f7fe f8d7 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_regen);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003458:	eeb0 0a67 	vmov.f32	s0, s15
 800345c:	4610      	mov	r0, r2
 800345e:	f7fe f8c8 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->displacement);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	441a      	add	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	4610      	mov	r0, r2
 800347c:	f7fe f8b9 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->distance_traveled);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003494:	eeb0 0a67 	vmov.f32	s0, s15
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe f8aa 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.real = this->fault_code;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_fault_code.base >> (8 * 0)) & 0xFF;
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	b2ca      	uxtb	r2, r1
 80034b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_fault_code.base >> (8 * 1)) & 0xFF;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0a19      	lsrs	r1, r3, #8
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	b2ca      	uxtb	r2, r1
 80034c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_fault_code.base >> (8 * 2)) & 0xFF;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	0c19      	lsrs	r1, r3, #16
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3302      	adds	r3, #2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_fault_code.base >> (8 * 3)) & 0xFF;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0e19      	lsrs	r1, r3, #24
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3303      	adds	r3, #3
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	b2ca      	uxtb	r2, r1
 80034e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->fault_code);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3304      	adds	r3, #4
 80034ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80034ee:	68fb      	ldr	r3, [r7, #12]
    }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZN9vesc_msgs9VescState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->voltage_input));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7fe f909 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4413      	add	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature_pcb));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3308      	adds	r3, #8
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fe f8fc 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_motor));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	330c      	adds	r3, #12
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7fe f8ef 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_input));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	441a      	add	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3310      	adds	r3, #16
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fe f8e2 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3314      	adds	r3, #20
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7fe f8d5 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->duty_cycle));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3318      	adds	r3, #24
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7fe f8c8 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_drawn));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	331c      	adds	r3, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7fe f8bb 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_regen));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3320      	adds	r3, #32
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7fe f8ae 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_drawn));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7fe f8a1 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_regen));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	441a      	add	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3328      	adds	r3, #40	; 0x28
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f7fe f894 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->displacement));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	441a      	add	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	332c      	adds	r3, #44	; 0x2c
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f7fe f887 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4413      	add	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->distance_traveled));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3330      	adds	r3, #48	; 0x30
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7fe f87a 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.base = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	440a      	add	r2, r1
 800364a:	7812      	ldrb	r2, [r2, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3301      	adds	r3, #1
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	440b      	add	r3, r1
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	4313      	orrs	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3302      	adds	r3, #2
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	440b      	add	r3, r1
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	4313      	orrs	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3303      	adds	r3, #3
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	440b      	add	r3, r1
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	4313      	orrs	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
      this->fault_code = u_fault_code.real;
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->fault_code);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3304      	adds	r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
     return offset;
 8003692:	68fb      	ldr	r3, [r7, #12]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZN9vesc_msgs9VescState7getTypeEv>:

    const char * getType(){ return "vesc_msgs/VescState"; };
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <_ZN9vesc_msgs9VescState7getTypeEv+0x18>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	0801549c 	.word	0x0801549c

080036b8 <_ZN9vesc_msgs9VescState6getMD5Ev>:
    const char * getMD5(){ return "81214bb4c1945e7c159bd76ec397ac04"; };
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <_ZN9vesc_msgs9VescState6getMD5Ev+0x18>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	080154b0 	.word	0x080154b0

080036d4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	080157a0 	.word	0x080157a0

080036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ffe8 	bl	80036d4 <_ZN3ros15NodeHandleBase_C1Ev>
 8003704:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fff0 	bl	80026f4 <_ZN13STM32HardwareC1Ev>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f011 f9b1 	bl	8014aa8 <memset>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800374c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f011 f9a8 	bl	8014aa8 <memset>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800375e:	2264      	movs	r2, #100	; 0x64
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f011 f9a0 	bl	8014aa8 <memset>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800376e:	2264      	movs	r2, #100	; 0x64
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f011 f998 	bl	8014aa8 <memset>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fbcc 	bl	8001f6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	080156e4 	.word	0x080156e4

080037e4 <_Z13read_ble_dataPh>:


//char hello[] = "Hello world from STM32!";


HAL_StatusTypeDef read_ble_data(uint8_t* data){
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 80037ec:	4bac      	ldr	r3, [pc, #688]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	e01e      	b.n	8003832 <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2bfe      	cmp	r3, #254	; 0xfe
 80037fe:	d115      	bne.n	800382c <_Z13read_ble_dataPh+0x48>
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	3301      	adds	r3, #1
 8003804:	425a      	negs	r2, r3
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	f002 021f 	and.w	r2, r2, #31
 800380e:	bf58      	it	pl
 8003810:	4253      	negpl	r3, r2
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d106      	bne.n	800382c <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b9e      	ldr	r3, [pc, #632]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003828:	701a      	strb	r2, [r3, #0]
			break;
 800382a:	e009      	b.n	8003840 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	4b9b      	ldr	r3, [pc, #620]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	f103 021f 	add.w	r2, r3, #31
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	429a      	cmp	r2, r3
 800383e:	dad9      	bge.n	80037f4 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003840:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	3302      	adds	r3, #2
 8003846:	425a      	negs	r2, r3
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	f002 021f 	and.w	r2, r2, #31
 8003850:	bf58      	it	pl
 8003852:	4253      	negpl	r3, r2
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <_Z13read_ble_dataPh+0x80>
 8003860:	2301      	movs	r3, #1
 8003862:	e116      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003864:	4b8e      	ldr	r3, [pc, #568]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	3303      	adds	r3, #3
 800386a:	425a      	negs	r2, r3
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	f002 021f 	and.w	r2, r2, #31
 8003874:	bf58      	it	pl
 8003876:	4253      	negpl	r3, r2
 8003878:	461a      	mov	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d001      	beq.n	8003888 <_Z13read_ble_dataPh+0xa4>
 8003884:	2301      	movs	r3, #1
 8003886:	e104      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003888:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	3304      	adds	r3, #4
 800388e:	425a      	negs	r2, r3
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	bf58      	it	pl
 800389a:	4253      	negpl	r3, r2
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d001      	beq.n	80038ac <_Z13read_ble_dataPh+0xc8>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0f2      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 80038ac:	4b7c      	ldr	r3, [pc, #496]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3305      	adds	r3, #5
 80038b2:	425a      	negs	r2, r3
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	f002 021f 	and.w	r2, r2, #31
 80038bc:	bf58      	it	pl
 80038be:	4253      	negpl	r3, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b5c      	cmp	r3, #92	; 0x5c
 80038ca:	d001      	beq.n	80038d0 <_Z13read_ble_dataPh+0xec>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0e0      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 80038d0:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	3306      	adds	r3, #6
 80038d6:	425a      	negs	r2, r3
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	f002 021f 	and.w	r2, r2, #31
 80038e0:	bf58      	it	pl
 80038e2:	4253      	negpl	r3, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b17      	cmp	r3, #23
 80038ee:	d001      	beq.n	80038f4 <_Z13read_ble_dataPh+0x110>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0ce      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	3307      	adds	r3, #7
 80038fa:	425a      	negs	r2, r3
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	f002 021f 	and.w	r2, r2, #31
 8003904:	bf58      	it	pl
 8003906:	4253      	negpl	r3, r2
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b06      	cmp	r3, #6
 8003912:	d001      	beq.n	8003918 <_Z13read_ble_dataPh+0x134>
 8003914:	2301      	movs	r3, #1
 8003916:	e0bc      	b.n	8003a92 <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003918:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3309      	adds	r3, #9
 800391e:	425a      	negs	r2, r3
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	bf58      	it	pl
 800392a:	4253      	negpl	r3, r2
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b21a      	sxth	r2, r3
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 8003938:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 800393a:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	330b      	adds	r3, #11
 8003940:	425a      	negs	r2, r3
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	bf58      	it	pl
 800394c:	4253      	negpl	r3, r2
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d008      	beq.n	800396c <_Z13read_ble_dataPh+0x188>
 800395a:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 800395c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003960:	b29b      	uxth	r3, r3
 8003962:	425b      	negs	r3, r3
 8003964:	b29b      	uxth	r3, r3
 8003966:	b21a      	sxth	r2, r3
 8003968:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 800396a:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	330e      	adds	r3, #14
 8003972:	425a      	negs	r2, r3
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	f002 021f 	and.w	r2, r2, #31
 800397c:	bf58      	it	pl
 800397e:	4253      	negpl	r3, r2
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4619      	mov	r1, r3
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	330d      	adds	r3, #13
 8003992:	425a      	negs	r2, r3
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	bf58      	it	pl
 800399e:	4253      	negpl	r3, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	ea41 0203 	orr.w	r2, r1, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 80039b8:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	330f      	adds	r3, #15
 80039c0:	425a      	negs	r2, r3
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	f002 021f 	and.w	r2, r2, #31
 80039ca:	bf58      	it	pl
 80039cc:	4253      	negpl	r3, r2
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039de:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80039e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 80039e8:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 80039ec:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3310      	adds	r3, #16
 80039f2:	425a      	negs	r2, r3
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	f002 021f 	and.w	r2, r2, #31
 80039fc:	bf58      	it	pl
 80039fe:	4253      	negpl	r3, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	3311      	adds	r3, #17
 8003a16:	425a      	negs	r2, r3
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	f002 021f 	and.w	r2, r2, #31
 8003a20:	bf58      	it	pl
 8003a22:	4253      	negpl	r3, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a36:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003a3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 8003a44:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	3312      	adds	r3, #18
 8003a4e:	425a      	negs	r2, r3
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	f002 021f 	and.w	r2, r2, #31
 8003a58:	bf58      	it	pl
 8003a5a:	4253      	negpl	r3, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <_Z13read_ble_dataPh+0x2bc>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	3313      	adds	r3, #19
 8003a70:	4259      	negs	r1, r3
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	f001 011f 	and.w	r1, r1, #31
 8003a7a:	bf58      	it	pl
 8003a7c:	424b      	negpl	r3, r1
 8003a7e:	4619      	mov	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	440b      	add	r3, r1
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_Z13read_ble_dataPh+0x2c0>)
 8003a8e:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	24001a3c 	.word	0x24001a3c
 8003aa4:	240018e4 	.word	0x240018e4

08003aa8 <_Z15read_speed_dataPm>:

HAL_StatusTypeDef read_speed_data(uint32_t* data){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e00a      	b.n	8003acc <_Z15read_speed_dataPm+0x24>
		if(data[i]==acsr)break;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <_Z15read_speed_dataPm+0x7c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d006      	beq.n	8003ad4 <_Z15read_speed_dataPm+0x2c>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d9f1      	bls.n	8003ab6 <_Z15read_speed_dataPm+0xe>
 8003ad2:	e000      	b.n	8003ad6 <_Z15read_speed_dataPm+0x2e>
		if(data[i]==acsr)break;
 8003ad4:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b11      	cmp	r3, #17
 8003ada:	d101      	bne.n	8003ae0 <_Z15read_speed_dataPm+0x38>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e01c      	b.n	8003b1a <_Z15read_speed_dataPm+0x72>

	memcpy(speed,&data[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	18d1      	adds	r1, r2, r3
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	f1c3 0310 	rsb	r3, r3, #16
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	461a      	mov	r2, r3
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <_Z15read_speed_dataPm+0x80>)
 8003af6:	f011 f85f 	bl	8014bb8 <memcpy>
	if(i){
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <_Z15read_speed_dataPm+0x70>
		memcpy(&speed[SPEED_PIN_COUNT-i],data,i*sizeof(uint32_t));
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	f1c3 0310 	rsb	r3, r3, #16
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <_Z15read_speed_dataPm+0x80>)
 8003b0a:	1898      	adds	r0, r3, r2
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	461a      	mov	r2, r3
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	f011 f850 	bl	8014bb8 <memcpy>
	}
	return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	41435352 	.word	0x41435352
 8003b28:	2400195c 	.word	0x2400195c

08003b2c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_UART_TxCpltCallback+0x28>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d106      	bne.n	8003b4a <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003b3c:	4806      	ldr	r0, [pc, #24]	; (8003b58 <HAL_UART_TxCpltCallback+0x2c>)
 8003b3e:	f000 fe84 	bl	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fe3b 	bl	80027c0 <_ZN13STM32Hardware5flushEv>
	}

}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	24000280 	.word	0x24000280
 8003b58:	24000ed4 	.word	0x24000ed4

08003b5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <HAL_UART_RxCpltCallback+0x48>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d107      	bne.n	8003b7c <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8003b6c:	480e      	ldr	r0, [pc, #56]	; (8003ba8 <HAL_UART_RxCpltCallback+0x4c>)
 8003b6e:	f000 fe6c 	bl	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fde4 	bl	8002742 <_ZN13STM32Hardware10reset_rbufEv>
	}else if(huart==&huart_esc){
		read_ble_data(esc_receive);
	}else if(huart==&huart_f103){
		read_speed_data(speed_receive);
	}
}
 8003b7a:	e00e      	b.n	8003b9a <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_esc){
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <HAL_UART_RxCpltCallback+0x50>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <HAL_UART_RxCpltCallback+0x30>
		read_ble_data(esc_receive);
 8003b84:	480a      	ldr	r0, [pc, #40]	; (8003bb0 <HAL_UART_RxCpltCallback+0x54>)
 8003b86:	f7ff fe2d 	bl	80037e4 <_Z13read_ble_dataPh>
}
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_f103){
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_UART_RxCpltCallback+0x58>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_UART_RxCpltCallback+0x3e>
		read_speed_data(speed_receive);
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <HAL_UART_RxCpltCallback+0x5c>)
 8003b96:	f7ff ff87 	bl	8003aa8 <_Z15read_speed_dataPm>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	24000280 	.word	0x24000280
 8003ba8:	24000ed4 	.word	0x24000ed4
 8003bac:	240001ec 	.word	0x240001ec
 8003bb0:	240018f8 	.word	0x240018f8
 8003bb4:	24000314 	.word	0x24000314
 8003bb8:	24001918 	.word	0x24001918

08003bbc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	b096      	sub	sp, #88	; 0x58
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7d      	ldr	r2, [pc, #500]	; (8003dc4 <HAL_UARTEx_RxEventCallback+0x208>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f040 80f4 	bne.w	8003dbc <HAL_UARTEx_RxEventCallback+0x200>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 8003bd4:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b78      	cmp	r3, #120	; 0x78
 8003bda:	d116      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x4e>
 8003bdc:	4b7a      	ldr	r3, [pc, #488]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b69      	cmp	r3, #105	; 0x69
 8003be2:	d112      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x4e>
 8003be4:	4b78      	ldr	r3, [pc, #480]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003be6:	789b      	ldrb	r3, [r3, #2]
 8003be8:	2b6c      	cmp	r3, #108	; 0x6c
 8003bea:	d10e      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x4e>
 8003bec:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003bee:	78db      	ldrb	r3, [r3, #3]
 8003bf0:	2b69      	cmp	r3, #105	; 0x69
 8003bf2:	d10a      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x4e>
 8003bf4:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003bf6:	791b      	ldrb	r3, [r3, #4]
 8003bf8:	2b6e      	cmp	r3, #110	; 0x6e
 8003bfa:	d106      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	223c      	movs	r2, #60	; 0x3c
 8003c00:	4972      	ldr	r1, [pc, #456]	; (8003dcc <HAL_UARTEx_RxEventCallback+0x210>)
 8003c02:	4873      	ldr	r0, [pc, #460]	; (8003dd0 <HAL_UARTEx_RxEventCallback+0x214>)
 8003c04:	f00e fa82 	bl	801210c <HAL_UART_Transmit>
 8003c08:	e072      	b.n	8003cf0 <HAL_UARTEx_RxEventCallback+0x134>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 8003c0a:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b61      	cmp	r3, #97	; 0x61
 8003c10:	d15f      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x116>
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	2b63      	cmp	r3, #99	; 0x63
 8003c18:	d15b      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x116>
 8003c1a:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	2b73      	cmp	r3, #115	; 0x73
 8003c20:	d157      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x116>
 8003c22:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2b72      	cmp	r3, #114	; 0x72
 8003c28:	d153      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x116>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 8003c2a:	2338      	movs	r3, #56	; 0x38
 8003c2c:	657b      	str	r3, [r7, #84]	; 0x54
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b62      	cmp	r3, #98	; 0x62
 8003c38:	d111      	bne.n	8003c5e <HAL_UARTEx_RxEventCallback+0xa2>
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	4a62      	ldr	r2, [pc, #392]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c40:	5cd3      	ldrb	r3, [r2, r3]
 8003c42:	2b34      	cmp	r3, #52	; 0x34
 8003c44:	d10b      	bne.n	8003c5e <HAL_UARTEx_RxEventCallback+0xa2>
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	3302      	adds	r3, #2
 8003c4a:	4a5f      	ldr	r2, [pc, #380]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c4c:	5cd3      	ldrb	r3, [r2, r3]
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	d105      	bne.n	8003c5e <HAL_UARTEx_RxEventCallback+0xa2>
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	3303      	adds	r3, #3
 8003c56:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	2b31      	cmp	r3, #49	; 0x31
 8003c5c:	d010      	beq.n	8003c80 <HAL_UARTEx_RxEventCallback+0xc4>
				uint8_t data[]= "Receive Wrong Data\n";
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_UARTEx_RxEventCallback+0x218>)
 8003c60:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c64:	461d      	mov	r5, r3
 8003c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003c6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003c72:	230a      	movs	r3, #10
 8003c74:	2214      	movs	r2, #20
 8003c76:	4856      	ldr	r0, [pc, #344]	; (8003dd0 <HAL_UARTEx_RxEventCallback+0x214>)
 8003c78:	f00e fa48 	bl	801210c <HAL_UART_Transmit>
			}else{
 8003c7c:	bf00      	nop
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));

			}

		}else{
 8003c7e:	e037      	b.n	8003cf0 <HAL_UARTEx_RxEventCallback+0x134>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_UARTEx_RxEventCallback+0x210>)
 8003c82:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				uint8_t data[]= "Write the Configuration Complete!\n";
 8003c9c:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8003c9e:	f107 0408 	add.w	r4, r7, #8
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	8022      	strh	r2, [r4, #0]
 8003cb2:	3402      	adds	r4, #2
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003cb8:	f107 0108 	add.w	r1, r7, #8
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	2223      	movs	r2, #35	; 0x23
 8003cc0:	4843      	ldr	r0, [pc, #268]	; (8003dd0 <HAL_UARTEx_RxEventCallback+0x214>)
 8003cc2:	f00e fa23 	bl	801210c <HAL_UART_Transmit>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8003cc6:	223c      	movs	r2, #60	; 0x3c
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4840      	ldr	r0, [pc, #256]	; (8003dcc <HAL_UARTEx_RxEventCallback+0x210>)
 8003ccc:	f002 ff7c 	bl	8006bc8 <QSPI_W25Q64JV_Write>
		}else{
 8003cd0:	e00e      	b.n	8003cf0 <HAL_UARTEx_RxEventCallback+0x134>
			uint8_t data[]= "Receive Wrong Data\n";
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_UARTEx_RxEventCallback+0x218>)
 8003cd4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003cd8:	461d      	mov	r5, r3
 8003cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cde:	682b      	ldr	r3, [r5, #0]
 8003ce0:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003ce2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	2214      	movs	r2, #20
 8003cea:	4839      	ldr	r0, [pc, #228]	; (8003dd0 <HAL_UARTEx_RxEventCallback+0x214>)
 8003cec:	f00e fa0e 	bl	801210c <HAL_UART_Transmit>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8003cf0:	2264      	movs	r2, #100	; 0x64
 8003cf2:	4935      	ldr	r1, [pc, #212]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003cf4:	4836      	ldr	r0, [pc, #216]	; (8003dd0 <HAL_UARTEx_RxEventCallback+0x214>)
 8003cf6:	f010 f9fb 	bl	80140f0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <HAL_UARTEx_RxEventCallback+0x224>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a36      	ldr	r2, [pc, #216]	; (8003de4 <HAL_UARTEx_RxEventCallback+0x228>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <HAL_UARTEx_RxEventCallback+0x22c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a33      	ldr	r2, [pc, #204]	; (8003dec <HAL_UARTEx_RxEventCallback+0x230>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <HAL_UARTEx_RxEventCallback+0x234>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <HAL_UARTEx_RxEventCallback+0x238>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <HAL_UARTEx_RxEventCallback+0x23c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <HAL_UARTEx_RxEventCallback+0x240>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <HAL_UARTEx_RxEventCallback+0x244>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_UARTEx_RxEventCallback+0x248>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <HAL_UARTEx_RxEventCallback+0x24c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_UARTEx_RxEventCallback+0x250>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_UARTEx_RxEventCallback+0x254>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <HAL_UARTEx_RxEventCallback+0x258>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_UARTEx_RxEventCallback+0x1de>
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <HAL_UARTEx_RxEventCallback+0x260>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <HAL_UARTEx_RxEventCallback+0x1f0>
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
	}
}
 8003daa:	e007      	b.n	8003dbc <HAL_UARTEx_RxEventCallback+0x200>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_UARTEx_RxEventCallback+0x220>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3758      	adds	r7, #88	; 0x58
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc4:	40007800 	.word	0x40007800
 8003dc8:	240019b4 	.word	0x240019b4
 8003dcc:	24000004 	.word	0x24000004
 8003dd0:	240003a8 	.word	0x240003a8
 8003dd4:	080154d4 	.word	0x080154d4
 8003dd8:	080154e8 	.word	0x080154e8
 8003ddc:	240006b0 	.word	0x240006b0
 8003de0:	40020010 	.word	0x40020010
 8003de4:	40020028 	.word	0x40020028
 8003de8:	40020040 	.word	0x40020040
 8003dec:	40020058 	.word	0x40020058
 8003df0:	40020070 	.word	0x40020070
 8003df4:	40020088 	.word	0x40020088
 8003df8:	400200a0 	.word	0x400200a0
 8003dfc:	400200b8 	.word	0x400200b8
 8003e00:	40020410 	.word	0x40020410
 8003e04:	40020428 	.word	0x40020428
 8003e08:	40020440 	.word	0x40020440
 8003e0c:	40020458 	.word	0x40020458
 8003e10:	40020470 	.word	0x40020470
 8003e14:	40020488 	.word	0x40020488
 8003e18:	400204a0 	.word	0x400204a0
 8003e1c:	400204b8 	.word	0x400204b8

08003e20 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==LPUART1) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	; (8003e5c <HAL_UART_ErrorCallback+0x3c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d105      	bne.n	8003e3e <HAL_UART_ErrorCallback+0x1e>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8003e32:	2220      	movs	r2, #32
 8003e34:	490a      	ldr	r1, [pc, #40]	; (8003e60 <HAL_UART_ErrorCallback+0x40>)
 8003e36:	480b      	ldr	r0, [pc, #44]	; (8003e64 <HAL_UART_ErrorCallback+0x44>)
 8003e38:	f00e fa76 	bl	8012328 <HAL_UART_Receive_DMA>
    }else if(UartHandle->Instance==UART5) {
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
    }
}
 8003e3c:	e009      	b.n	8003e52 <HAL_UART_ErrorCallback+0x32>
    }else if(UartHandle->Instance==UART5) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_UART_ErrorCallback+0x48>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d104      	bne.n	8003e52 <HAL_UART_ErrorCallback+0x32>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8003e48:	2244      	movs	r2, #68	; 0x44
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <HAL_UART_ErrorCallback+0x4c>)
 8003e4c:	4808      	ldr	r0, [pc, #32]	; (8003e70 <HAL_UART_ErrorCallback+0x50>)
 8003e4e:	f00e fa6b 	bl	8012328 <HAL_UART_Receive_DMA>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	58000c00 	.word	0x58000c00
 8003e60:	240018f8 	.word	0x240018f8
 8003e64:	240001ec 	.word	0x240001ec
 8003e68:	40005000 	.word	0x40005000
 8003e6c:	24001918 	.word	0x24001918
 8003e70:	24000314 	.word	0x24000314

08003e74 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
//		freq=temp_freq;
//		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
//	}


}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM3){
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
//
//	}
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	0000      	movs	r0, r0
	...

08003ea0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5c      	ldr	r2, [pc, #368]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d15d      	bne.n	8003f6e <HAL_TIM_PeriodElapsedCallback+0xce>
		vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ec0:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8004008 <HAL_TIM_PeriodElapsedCallback+0x168>
 8003ec4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ec8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ecc:	4b56      	ldr	r3, [pc, #344]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003ece:	edc3 7a06 	vstr	s15, [r3, #24]
		vesc_state.voltage_input = esc_sensor.voltage;
 8003ed2:	4b54      	ldr	r3, [pc, #336]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003ed8:	6053      	str	r3, [r2, #4]
		vesc_state.current_input = esc_sensor.current;
 8003eda:	4b52      	ldr	r3, [pc, #328]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003ee0:	6113      	str	r3, [r2, #16]
		vesc_state.temperature_pcb = esc_sensor.temperature;
 8003ee2:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ee4:	8a1b      	ldrh	r3, [r3, #16]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003ef0:	edc3 7a02 	vstr	s15, [r3, #8]
		vesc_state.speed = esc_sensor.rpm;
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f00:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003f02:	edc3 7a05 	vstr	s15, [r3, #20]

		vesc_pub.publish(&vesc_state);
 8003f06:	4948      	ldr	r1, [pc, #288]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003f08:	4848      	ldr	r0, [pc, #288]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003f0a:	f7fe fb12 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wheel_speed_pub.publish(&wheel_speed);
 8003f0e:	4948      	ldr	r1, [pc, #288]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003f10:	4848      	ldr	r0, [pc, #288]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003f12:	f7fe fb0e 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		for(uint8_t i=0;i<8;++i){
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e01d      	b.n	8003f58 <HAL_TIM_PeriodElapsedCallback+0xb8>
			forces.data[i]=(float)force_raw[i]*3.3/0xFFFF;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	4a46      	ldr	r2, [pc, #280]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f30:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8004010 <HAL_TIM_PeriodElapsedCallback+0x170>
 8003f34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003f38:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8004018 <HAL_TIM_PeriodElapsedCallback+0x178>
 8003f3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f40:	4b3e      	ldr	r3, [pc, #248]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f4e:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<8;++i){
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	3301      	adds	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d9de      	bls.n	8003f1c <HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		force_pub.publish(&forces);
 8003f5e:	4937      	ldr	r1, [pc, #220]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003f60:	4837      	ldr	r0, [pc, #220]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003f62:	f7fe fae6 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		nh.spinOnce();
 8003f66:	4837      	ldr	r0, [pc, #220]	; (8004044 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003f68:	f000 fc7b 	bl	8004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 8003f6c:	e047      	b.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x15e>
	}else if(htim->Instance==TIM7){
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d142      	bne.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x15e>
		//no esc topic received
		if(pid_its++>10){
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	b2d1      	uxtb	r1, r2
 8003f80:	4a32      	ldr	r2, [pc, #200]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f82:	7011      	strb	r1, [r2, #0]
 8003f84:	2b0a      	cmp	r3, #10
 8003f86:	bf8c      	ite	hi
 8003f88:	2301      	movhi	r3, #1
 8003f8a:	2300      	movls	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_TIM_PeriodElapsedCallback+0x104>
			pid_its=10;
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f94:	220a      	movs	r2, #10
 8003f96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,parameters.esc_offset);
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
			return;
 8003fa2:	e02c      	b.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x15e>
		}

		if(pid_mode==PID_MODE_MANUAL){
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d128      	bne.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x15e>
			uint32_t esc_pulse=esc_duty_cycle_set*(parameters.esc_max-parameters.esc_offset)+parameters.esc_offset;
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc0:	4b26      	ldr	r3, [pc, #152]	; (800405c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fca:	4b21      	ldr	r3, [pc, #132]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fde:	ee17 3a90 	vmov	r3, s15
 8003fe2:	60bb      	str	r3, [r7, #8]
			//if(pre_esc_pulse==esc_pulse) no action needed.
			if(pre_esc_pulse!=esc_pulse){
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d007      	beq.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x15e>
				pre_esc_pulse=esc_pulse;
 8003fee:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pre_esc_pulse);
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
//	}
//	if(htim->Instance==TIM15){
//		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
//	}
}
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	f3af 8000 	nop.w
 8004008:	00000000 	.word	0x00000000
 800400c:	40590000 	.word	0x40590000
 8004010:	66666666 	.word	0x66666666
 8004014:	400a6666 	.word	0x400a6666
 8004018:	00000000 	.word	0x00000000
 800401c:	40efffe0 	.word	0x40efffe0
 8004020:	40001000 	.word	0x40001000
 8004024:	240018e4 	.word	0x240018e4
 8004028:	24001810 	.word	0x24001810
 800402c:	24001848 	.word	0x24001848
 8004030:	240018a0 	.word	0x240018a0
 8004034:	240018d0 	.word	0x240018d0
 8004038:	240019a0 	.word	0x240019a0
 800403c:	2400185c 	.word	0x2400185c
 8004040:	2400188c 	.word	0x2400188c
 8004044:	24000ed4 	.word	0x24000ed4
 8004048:	40001400 	.word	0x40001400
 800404c:	240019b0 	.word	0x240019b0
 8004050:	24000004 	.word	0x24000004
 8004054:	24000848 	.word	0x24000848
 8004058:	24000000 	.word	0x24000000
 800405c:	24001a18 	.word	0x24001a18
 8004060:	24001a28 	.word	0x24001a28

08004064 <_Z14speed_callbackRKN8std_msgs7Float32E>:
	default:
		break;
	}
}

void speed_callback(const std_msgs::Float32& msg){
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	pid_mode = PID_MODE_AUTOMATIC;
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <_Z14speed_callbackRKN8std_msgs7Float32E+0x2c>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a05      	ldr	r2, [pc, #20]	; (8004094 <_Z14speed_callbackRKN8std_msgs7Float32E+0x30>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	24000000 	.word	0x24000000
 8004090:	240019b0 	.word	0x240019b0
 8004094:	24001a1c 	.word	0x24001a1c

08004098 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

void duty_cycle_callback(const std_msgs::Float32& msg){
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	pid_mode=PID_MODE_MANUAL;
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x2c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
	esc_duty_cycle_set = msg.data;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x30>)
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	24000000 	.word	0x24000000
 80040c4:	240019b0 	.word	0x240019b0
 80040c8:	24001a18 	.word	0x24001a18

080040cc <_Z17steering_callbackRKN8std_msgs7Float32E>:

void steering_callback(const std_msgs::Float32& msg){
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	uint32_t steering_pulse = parameters.steering_ratio*(msg.data-parameters.steering_offset);
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 80040d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 80040e2:	8b9b      	ldrh	r3, [r3, #28]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f8:	ee17 3a90 	vmov	r3, s15
 80040fc:	60fb      	str	r3, [r7, #12]
	if(steering_pulse != pre_steering_pulse){
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	429a      	cmp	r2, r3
 8004106:	d007      	beq.n	8004118 <_Z17steering_callbackRKN8std_msgs7Float32E+0x4c>
		pre_steering_pulse = steering_pulse;
 8004108:	4a07      	ldr	r2, [pc, #28]	; (8004128 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pre_steering_pulse);
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <_Z17steering_callbackRKN8std_msgs7Float32E+0x60>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a05      	ldr	r2, [pc, #20]	; (8004128 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	24000004 	.word	0x24000004
 8004128:	24001a24 	.word	0x24001a24
 800412c:	24000848 	.word	0x24000848

08004130 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

void brake_callback(const std_msgs::Float32MultiArray& msg){
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*tim2_arr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	ed93 7a00 	vldr	s14, [r3]
 8004140:	4b3c      	ldr	r3, [pc, #240]	; (8004234 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004154:	ee17 3a90 	vmov	r3, s15
 8004158:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d006      	beq.n	8004172 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 8004164:	4a34      	ldr	r2, [pc, #208]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*tim2_arr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	3304      	adds	r3, #4
 8004178:	ed93 7a00 	vldr	s14, [r3]
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004190:	ee17 3a90 	vmov	r3, s15
 8004194:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	429a      	cmp	r2, r3
 800419e:	d006      	beq.n	80041ae <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*tim2_arr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	3308      	adds	r3, #8
 80041b4:	ed93 7a00 	vldr	s14, [r3]
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041cc:	ee17 3a90 	vmov	r3, s15
 80041d0:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d006      	beq.n	80041ea <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 80041dc:	4a16      	ldr	r2, [pc, #88]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*tim2_arr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	330c      	adds	r3, #12
 80041f0:	ed93 7a00 	vldr	s14, [r3]
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004208:	ee17 3a90 	vmov	r3, s15
 800420c:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	429a      	cmp	r2, r3
 8004216:	d006      	beq.n	8004226 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8004218:	4a07      	ldr	r2, [pc, #28]	; (8004238 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	24001a20 	.word	0x24001a20
 8004238:	24001a2c 	.word	0x24001a2c
 800423c:	240007fc 	.word	0x240007fc

08004240 <_Z19input_mode_callbackRKN8std_msgs4BoolE>:

void input_mode_callback(const std_msgs::Bool& msg){
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	791b      	ldrb	r3, [r3, #4]
 800424c:	461a      	mov	r2, r3
 800424e:	2120      	movs	r1, #32
 8004250:	4803      	ldr	r0, [pc, #12]	; (8004260 <_Z19input_mode_callbackRKN8std_msgs4BoolE+0x20>)
 8004252:	f007 fadb 	bl	800b80c <HAL_GPIO_WritePin>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	58020400 	.word	0x58020400

08004264 <_Z10uart_setupv>:

void adc_setup(){
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
}

void uart_setup(){
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004268:	2220      	movs	r2, #32
 800426a:	4939      	ldr	r1, [pc, #228]	; (8004350 <_Z10uart_setupv+0xec>)
 800426c:	4839      	ldr	r0, [pc, #228]	; (8004354 <_Z10uart_setupv+0xf0>)
 800426e:	f00e f85b 	bl	8012328 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8004272:	2244      	movs	r2, #68	; 0x44
 8004274:	4938      	ldr	r1, [pc, #224]	; (8004358 <_Z10uart_setupv+0xf4>)
 8004276:	4839      	ldr	r0, [pc, #228]	; (800435c <_Z10uart_setupv+0xf8>)
 8004278:	f00e f856 	bl	8012328 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 800427c:	2264      	movs	r2, #100	; 0x64
 800427e:	4938      	ldr	r1, [pc, #224]	; (8004360 <_Z10uart_setupv+0xfc>)
 8004280:	4838      	ldr	r0, [pc, #224]	; (8004364 <_Z10uart_setupv+0x100>)
 8004282:	f00f ff35 	bl	80140f0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <_Z10uart_setupv+0x104>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a38      	ldr	r2, [pc, #224]	; (800436c <_Z10uart_setupv+0x108>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <_Z10uart_setupv+0x104>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a36      	ldr	r2, [pc, #216]	; (8004370 <_Z10uart_setupv+0x10c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 800429a:	4b33      	ldr	r3, [pc, #204]	; (8004368 <_Z10uart_setupv+0x104>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a35      	ldr	r2, [pc, #212]	; (8004374 <_Z10uart_setupv+0x110>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042a4:	4b30      	ldr	r3, [pc, #192]	; (8004368 <_Z10uart_setupv+0x104>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a33      	ldr	r2, [pc, #204]	; (8004378 <_Z10uart_setupv+0x114>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <_Z10uart_setupv+0x104>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a32      	ldr	r2, [pc, #200]	; (800437c <_Z10uart_setupv+0x118>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <_Z10uart_setupv+0x104>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a30      	ldr	r2, [pc, #192]	; (8004380 <_Z10uart_setupv+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <_Z10uart_setupv+0x104>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <_Z10uart_setupv+0x120>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <_Z10uart_setupv+0x104>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <_Z10uart_setupv+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <_Z10uart_setupv+0x104>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2c      	ldr	r2, [pc, #176]	; (800438c <_Z10uart_setupv+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <_Z10uart_setupv+0x104>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <_Z10uart_setupv+0x12c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <_Z10uart_setupv+0x104>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a29      	ldr	r2, [pc, #164]	; (8004394 <_Z10uart_setupv+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <_Z10uart_setupv+0x104>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a27      	ldr	r2, [pc, #156]	; (8004398 <_Z10uart_setupv+0x134>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <_Z10uart_setupv+0x104>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a26      	ldr	r2, [pc, #152]	; (800439c <_Z10uart_setupv+0x138>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <_Z10uart_setupv+0x104>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a24      	ldr	r2, [pc, #144]	; (80043a0 <_Z10uart_setupv+0x13c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <_Z10uart_setupv+0x104>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <_Z10uart_setupv+0x140>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <_Z10uart_setupv+0xc2>
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <_Z10uart_setupv+0x104>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <_Z10uart_setupv+0x144>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <_Z10uart_setupv+0xd4>
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <_Z10uart_setupv+0x104>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <_Z10uart_setupv+0x104>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e008      	b.n	800434a <_Z10uart_setupv+0xe6>
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <_Z10uart_setupv+0x104>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <_Z10uart_setupv+0x104>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	240018f8 	.word	0x240018f8
 8004354:	240001ec 	.word	0x240001ec
 8004358:	24001918 	.word	0x24001918
 800435c:	24000314 	.word	0x24000314
 8004360:	240019b4 	.word	0x240019b4
 8004364:	240003a8 	.word	0x240003a8
 8004368:	240006b0 	.word	0x240006b0
 800436c:	40020010 	.word	0x40020010
 8004370:	40020028 	.word	0x40020028
 8004374:	40020040 	.word	0x40020040
 8004378:	40020058 	.word	0x40020058
 800437c:	40020070 	.word	0x40020070
 8004380:	40020088 	.word	0x40020088
 8004384:	400200a0 	.word	0x400200a0
 8004388:	400200b8 	.word	0x400200b8
 800438c:	40020410 	.word	0x40020410
 8004390:	40020428 	.word	0x40020428
 8004394:	40020440 	.word	0x40020440
 8004398:	40020458 	.word	0x40020458
 800439c:	40020470 	.word	0x40020470
 80043a0:	40020488 	.word	0x40020488
 80043a4:	400204a0 	.word	0x400204a0
 80043a8:	400204b8 	.word	0x400204b8

080043ac <_Z11timer_setupv>:

void timer_setup(){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
	//set tim6 ARR value based on topic publish frequency and start tim6
	__HAL_TIM_SET_AUTORELOAD(&htim16,uint32_t(10000/parameters.publish_frequency-1));
 80043b0:	4b51      	ldr	r3, [pc, #324]	; (80044f8 <_Z11timer_setupv+0x14c>)
 80043b2:	7d1b      	ldrb	r3, [r3, #20]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80043ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <_Z11timer_setupv+0x150>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <_Z11timer_setupv+0x14c>)
 80043c8:	7d1b      	ldrb	r3, [r3, #20]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80043d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043d4:	3b01      	subs	r3, #1
 80043d6:	461a      	mov	r2, r3
 80043d8:	4b48      	ldr	r3, [pc, #288]	; (80044fc <_Z11timer_setupv+0x150>)
 80043da:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim16);
 80043dc:	4847      	ldr	r0, [pc, #284]	; (80044fc <_Z11timer_setupv+0x150>)
 80043de:	f00b ffc1 	bl	8010364 <HAL_TIM_Base_Start_IT>

	//set tim7 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_AUTORELOAD(&htim7,uint32_t(10000/parameters.pid_frequency-1));
 80043e2:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <_Z11timer_setupv+0x14c>)
 80043e4:	7d5b      	ldrb	r3, [r3, #21]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80043ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f0:	1e5a      	subs	r2, r3, #1
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <_Z11timer_setupv+0x154>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <_Z11timer_setupv+0x14c>)
 80043fa:	7d5b      	ldrb	r3, [r3, #21]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8004402:	fb93 f3f2 	sdiv	r3, r3, r2
 8004406:	3b01      	subs	r3, #1
 8004408:	461a      	mov	r2, r3
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <_Z11timer_setupv+0x154>)
 800440c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim7);
 800440e:	483c      	ldr	r0, [pc, #240]	; (8004500 <_Z11timer_setupv+0x154>)
 8004410:	f00b ffa8 	bl	8010364 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	__HAL_TIM_SET_AUTORELOAD(&htim3,uint32_t(1000000/parameters.steering_esc_pwm_frequency-1));
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <_Z11timer_setupv+0x14c>)
 8004416:	ed93 7a06 	vldr	s14, [r3, #24]
 800441a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004504 <_Z11timer_setupv+0x158>
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800442a:	4b37      	ldr	r3, [pc, #220]	; (8004508 <_Z11timer_setupv+0x15c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	ee17 2a90 	vmov	r2, s15
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
 8004438:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <_Z11timer_setupv+0x14c>)
 800443a:	ed93 7a06 	vldr	s14, [r3, #24]
 800443e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004504 <_Z11timer_setupv+0x158>
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	ee17 2a90 	vmov	r2, s15
 8004456:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <_Z11timer_setupv+0x15c>)
 8004458:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <_Z11timer_setupv+0x14c>)
 800445c:	8b9a      	ldrh	r2, [r3, #28]
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <_Z11timer_setupv+0x15c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <_Z11timer_setupv+0x14c>)
 8004466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <_Z11timer_setupv+0x15c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800446e:	2100      	movs	r1, #0
 8004470:	4825      	ldr	r0, [pc, #148]	; (8004508 <_Z11timer_setupv+0x15c>)
 8004472:	f00c f847 	bl	8010504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004476:	2104      	movs	r1, #4
 8004478:	4823      	ldr	r0, [pc, #140]	; (8004508 <_Z11timer_setupv+0x15c>)
 800447a:	f00c f843 	bl	8010504 <HAL_TIM_PWM_Start>

	//set brake pwm
	tim2_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 800447e:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <_Z11timer_setupv+0x14c>)
 8004480:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004484:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004504 <_Z11timer_setupv+0x158>
 8004488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	ee17 2a90 	vmov	r2, s15
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <_Z11timer_setupv+0x160>)
 800449e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,tim2_arr);
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <_Z11timer_setupv+0x164>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <_Z11timer_setupv+0x160>)
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <_Z11timer_setupv+0x160>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <_Z11timer_setupv+0x164>)
 80044b0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <_Z11timer_setupv+0x164>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <_Z11timer_setupv+0x164>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <_Z11timer_setupv+0x164>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <_Z11timer_setupv+0x164>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80044d2:	2100      	movs	r1, #0
 80044d4:	480c      	ldr	r0, [pc, #48]	; (8004508 <_Z11timer_setupv+0x15c>)
 80044d6:	f00c f815 	bl	8010504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044da:	2104      	movs	r1, #4
 80044dc:	480a      	ldr	r0, [pc, #40]	; (8004508 <_Z11timer_setupv+0x15c>)
 80044de:	f00c f811 	bl	8010504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80044e2:	2108      	movs	r1, #8
 80044e4:	4808      	ldr	r0, [pc, #32]	; (8004508 <_Z11timer_setupv+0x15c>)
 80044e6:	f00c f80d 	bl	8010504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80044ea:	210c      	movs	r1, #12
 80044ec:	4806      	ldr	r0, [pc, #24]	; (8004508 <_Z11timer_setupv+0x15c>)
 80044ee:	f00c f809 	bl	8010504 <HAL_TIM_PWM_Start>

}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	24000004 	.word	0x24000004
 80044fc:	24000978 	.word	0x24000978
 8004500:	240008e0 	.word	0x240008e0
 8004504:	49742400 	.word	0x49742400
 8004508:	24000848 	.word	0x24000848
 800450c:	24001a20 	.word	0x24001a20
 8004510:	240007fc 	.word	0x240007fc

08004514 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );

void ros_setup(){
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
	forces.data = new std_msgs::Float32MultiArray::_data_type[8];
 8004518:	2020      	movs	r0, #32
 800451a:	f010 f995 	bl	8014848 <_Znaj>
 800451e:	4603      	mov	r3, r0
 8004520:	461a      	mov	r2, r3
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <_Z9ros_setupv+0x48>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
	forces.data_length = 8;
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <_Z9ros_setupv+0x48>)
 8004528:	2208      	movs	r2, #8
 800452a:	625a      	str	r2, [r3, #36]	; 0x24


	wheel_speed.data = new std_msgs::Float32MultiArray::_data_type[16];
 800452c:	2040      	movs	r0, #64	; 0x40
 800452e:	f010 f98b 	bl	8014848 <_Znaj>
 8004532:	4603      	mov	r3, r0
 8004534:	461a      	mov	r2, r3
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <_Z9ros_setupv+0x4c>)
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c
	wheel_speed.data_length = 16;
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <_Z9ros_setupv+0x4c>)
 800453c:	2210      	movs	r2, #16
 800453e:	625a      	str	r2, [r3, #36]	; 0x24



	nh.advertise(vesc_pub);
 8004540:	4908      	ldr	r1, [pc, #32]	; (8004564 <_Z9ros_setupv+0x50>)
 8004542:	4809      	ldr	r0, [pc, #36]	; (8004568 <_Z9ros_setupv+0x54>)
 8004544:	f000 fbe2 	bl	8004d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(force_pub);
 8004548:	4908      	ldr	r1, [pc, #32]	; (800456c <_Z9ros_setupv+0x58>)
 800454a:	4807      	ldr	r0, [pc, #28]	; (8004568 <_Z9ros_setupv+0x54>)
 800454c:	f000 fbde 	bl	8004d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(wheel_speed_pub);
 8004550:	4907      	ldr	r1, [pc, #28]	; (8004570 <_Z9ros_setupv+0x5c>)
 8004552:	4805      	ldr	r0, [pc, #20]	; (8004568 <_Z9ros_setupv+0x54>)
 8004554:	f000 fbda 	bl	8004d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2400185c 	.word	0x2400185c
 8004560:	240018a0 	.word	0x240018a0
 8004564:	24001848 	.word	0x24001848
 8004568:	24000ed4 	.word	0x24000ed4
 800456c:	2400188c 	.word	0x2400188c
 8004570:	240018d0 	.word	0x240018d0

08004574 <_Z15read_parametersv>:
	//blue and yellow led, default off
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

void read_parameters(){
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b09c      	sub	sp, #112	; 0x70
 8004578:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 800457a:	f002 f9ad 	bl	80068d8 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 800457e:	f002 f9b3 	bl	80068e8 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004582:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004586:	4618      	mov	r0, r3
 8004588:	f002 fbaa 	bl	8006ce0 <QSPI_W25Q64JV_DeviceID>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d000      	beq.n	800459e <_Z15read_parametersv+0x2a>
	    while (1);
 800459c:	e7fe      	b.n	800459c <_Z15read_parametersv+0x28>
	}
	char str[]="Connect to ROM, ROM ID: [0x00,0x00]\n";
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <_Z15read_parametersv+0x128>)
 80045a0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80045a4:	461d      	mov	r5, r3
 80045a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045b2:	6020      	str	r0, [r4, #0]
 80045b4:	3404      	adds	r4, #4
 80045b6:	7021      	strb	r1, [r4, #0]
	sprintf(str,"Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 80045b8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80045bc:	461a      	mov	r2, r3
 80045be:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80045c2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80045c6:	4936      	ldr	r1, [pc, #216]	; (80046a0 <_Z15read_parametersv+0x12c>)
 80045c8:	f010 fa4e 	bl	8014a68 <siprintf>
	HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 80045cc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80045d0:	230a      	movs	r3, #10
 80045d2:	2225      	movs	r2, #37	; 0x25
 80045d4:	4833      	ldr	r0, [pc, #204]	; (80046a4 <_Z15read_parametersv+0x130>)
 80045d6:	f00d fd99 	bl	801210c <HAL_UART_Transmit>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 80045da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045de:	2204      	movs	r2, #4
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f002 f9fe 	bl	80069e4 <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 80045e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80045ec:	2b61      	cmp	r3, #97	; 0x61
 80045ee:	d10b      	bne.n	8004608 <_Z15read_parametersv+0x94>
 80045f0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80045f4:	2b63      	cmp	r3, #99	; 0x63
 80045f6:	d107      	bne.n	8004608 <_Z15read_parametersv+0x94>
 80045f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80045fc:	2b73      	cmp	r3, #115	; 0x73
 80045fe:	d103      	bne.n	8004608 <_Z15read_parametersv+0x94>
 8004600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004604:	2b72      	cmp	r3, #114	; 0x72
 8004606:	d018      	beq.n	800463a <_Z15read_parametersv+0xc6>
		char str[]="Read Parameters Head Fails\n";
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <_Z15read_parametersv+0x134>)
 800460a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800460e:	461d      	mov	r5, r3
 8004610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart7, (uint8_t*)header, 4, 10);
 800461c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004620:	230a      	movs	r3, #10
 8004622:	2204      	movs	r2, #4
 8004624:	481f      	ldr	r0, [pc, #124]	; (80046a4 <_Z15read_parametersv+0x130>)
 8004626:	f00d fd71 	bl	801210c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 800462a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800462e:	230a      	movs	r3, #10
 8004630:	221c      	movs	r2, #28
 8004632:	481c      	ldr	r0, [pc, #112]	; (80046a4 <_Z15read_parametersv+0x130>)
 8004634:	f00d fd6a 	bl	801210c <HAL_UART_Transmit>
 8004638:	e02d      	b.n	8004696 <_Z15read_parametersv+0x122>
		return;
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 800463a:	223c      	movs	r2, #60	; 0x3c
 800463c:	2100      	movs	r1, #0
 800463e:	481b      	ldr	r0, [pc, #108]	; (80046ac <_Z15read_parametersv+0x138>)
 8004640:	f002 f9d0 	bl	80069e4 <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <_Z15read_parametersv+0x138>)
 8004646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800464a:	2b62      	cmp	r3, #98	; 0x62
 800464c:	d10e      	bne.n	800466c <_Z15read_parametersv+0xf8>
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <_Z15read_parametersv+0x138>)
 8004650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004654:	2b34      	cmp	r3, #52	; 0x34
 8004656:	d109      	bne.n	800466c <_Z15read_parametersv+0xf8>
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <_Z15read_parametersv+0x138>)
 800465a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	d104      	bne.n	800466c <_Z15read_parametersv+0xf8>
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <_Z15read_parametersv+0x138>)
 8004664:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004668:	2b31      	cmp	r3, #49	; 0x31
 800466a:	d014      	beq.n	8004696 <_Z15read_parametersv+0x122>
		char str[]="Read Parameters Tailor Fails\n";
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <_Z15read_parametersv+0x13c>)
 800466e:	1d3c      	adds	r4, r7, #4
 8004670:	461d      	mov	r5, r3
 8004672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004676:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800467a:	c407      	stmia	r4!, {r0, r1, r2}
 800467c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart7, (uint8_t*)parameters.tailer, 4, 10);
 800467e:	230a      	movs	r3, #10
 8004680:	2204      	movs	r2, #4
 8004682:	490c      	ldr	r1, [pc, #48]	; (80046b4 <_Z15read_parametersv+0x140>)
 8004684:	4807      	ldr	r0, [pc, #28]	; (80046a4 <_Z15read_parametersv+0x130>)
 8004686:	f00d fd41 	bl	801210c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 800468a:	1d39      	adds	r1, r7, #4
 800468c:	230a      	movs	r3, #10
 800468e:	221e      	movs	r2, #30
 8004690:	4804      	ldr	r0, [pc, #16]	; (80046a4 <_Z15read_parametersv+0x130>)
 8004692:	f00d fd3b 	bl	801210c <HAL_UART_Transmit>
	}

//	QSPI_W25Q64JV_Write((uint8_t*)(),0x0,2*Font_7x10.size);

}
 8004696:	3770      	adds	r7, #112	; 0x70
 8004698:	46bd      	mov	sp, r7
 800469a:	bdb0      	pop	{r4, r5, r7, pc}
 800469c:	08015538 	.word	0x08015538
 80046a0:	0801550c 	.word	0x0801550c
 80046a4:	240003a8 	.word	0x240003a8
 80046a8:	08015560 	.word	0x08015560
 80046ac:	24000004 	.word	0x24000004
 80046b0:	0801557c 	.word	0x0801557c
 80046b4:	2400003c 	.word	0x2400003c

080046b8 <setup>:


void setup(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0

	read_parameters();
 80046be:	f7ff ff59 	bl	8004574 <_Z15read_parametersv>
  nh.initNode();
 80046c2:	4819      	ldr	r0, [pc, #100]	; (8004728 <setup+0x70>)
 80046c4:	f000 fb52 	bl	8004d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  uart_setup();
 80046c8:	f7ff fdcc 	bl	8004264 <_Z10uart_setupv>
  timer_setup();
 80046cc:	f7ff fe6e 	bl	80043ac <_Z11timer_setupv>
  ros_setup();
 80046d0:	f7ff ff20 	bl	8004514 <_Z9ros_setupv>





  uint16_t inc = TIM4->ARR/38;
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <setup+0x74>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	4a15      	ldr	r2, [pc, #84]	; (8004730 <setup+0x78>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	80fb      	strh	r3, [r7, #6]
//  }
//  for(int i=16;i<32;++i){
//    triangle2[i] = (33-(i+1))*inc;
//  }

  pwm_generator_indicator = 0;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <setup+0x7c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
  is_frequency_set = 0;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <setup+0x80>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
  uint32_t clock = HAL_RCC_GetPCLK1Freq();
 80046f0:	f008 ff78 	bl	800d5e4 <HAL_RCC_GetPCLK1Freq>
 80046f4:	6038      	str	r0, [r7, #0]
//  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1 );
//  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2 );

//  HAL_TIM_PWM_

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80046f6:	2100      	movs	r1, #0
 80046f8:	4810      	ldr	r0, [pc, #64]	; (800473c <setup+0x84>)
 80046fa:	f00c f96d 	bl	80109d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80046fe:	2104      	movs	r1, #4
 8004700:	480e      	ldr	r0, [pc, #56]	; (800473c <setup+0x84>)
 8004702:	f00c f865 	bl	80107d0 <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004706:	2100      	movs	r1, #0
 8004708:	480d      	ldr	r0, [pc, #52]	; (8004740 <setup+0x88>)
 800470a:	f00c f965 	bl	80109d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800470e:	2104      	movs	r1, #4
 8004710:	480b      	ldr	r0, [pc, #44]	; (8004740 <setup+0x88>)
 8004712:	f00c f85d 	bl	80107d0 <HAL_TIM_IC_Start>



  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004716:	2201      	movs	r2, #1
 8004718:	2108      	movs	r1, #8
 800471a:	480a      	ldr	r0, [pc, #40]	; (8004744 <setup+0x8c>)
 800471c:	f007 f876 	bl	800b80c <HAL_GPIO_WritePin>



}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	24000ed4 	.word	0x24000ed4
 800472c:	40000800 	.word	0x40000800
 8004730:	6bca1af3 	.word	0x6bca1af3
 8004734:	2400199c 	.word	0x2400199c
 8004738:	2400199d 	.word	0x2400199d
 800473c:	24000894 	.word	0x24000894
 8004740:	2400092c 	.word	0x2400092c
 8004744:	58021000 	.word	0x58021000

08004748 <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	4816      	ldr	r0, [pc, #88]	; (80047ac <loop+0x64>)
 8004752:	f007 f843 	bl	800b7dc <HAL_GPIO_ReadPin>
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d103      	bne.n	8004768 <loop+0x20>
		pid_mode=PID_MODE_MANUAL;
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <loop+0x68>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e005      	b.n	8004774 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <loop+0x2c>
		pid_mode=PID_MODE_AUTOMATIC;
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <loop+0x68>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	461a      	mov	r2, r3
 8004778:	2108      	movs	r1, #8
 800477a:	480e      	ldr	r0, [pc, #56]	; (80047b4 <loop+0x6c>)
 800477c:	f007 f846 	bl	800b80c <HAL_GPIO_WritePin>

	loop_index++;
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <loop+0x70>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <loop+0x70>)
 800478a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 800478c:	2032      	movs	r0, #50	; 0x32
 800478e:	f002 fb9f 	bl	8006ed0 <HAL_Delay>
	if(loop_index==10){
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <loop+0x70>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b0a      	cmp	r3, #10
 8004798:	d103      	bne.n	80047a2 <loop+0x5a>
		HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 800479a:	2108      	movs	r1, #8
 800479c:	4807      	ldr	r0, [pc, #28]	; (80047bc <loop+0x74>)
 800479e:	f007 f84e 	bl	800b83e <HAL_GPIO_TogglePin>
//  freq1=0;
//  duty1=0;
//  freq2=1;
//  duty2=1;

}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	58020400 	.word	0x58020400
 80047b0:	24000000 	.word	0x24000000
 80047b4:	58020c00 	.word	0x58020c00
 80047b8:	24001af4 	.word	0x24001af4
 80047bc:	58021000 	.word	0x58021000

080047c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e00c      	b.n	80047ea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	fa22 f103 	lsr.w	r1, r2, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	b2ca      	uxtb	r2, r1
 80047e2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d9ef      	bls.n	80047d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e010      	b.n	8004836 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	4611      	mov	r1, r2
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	00d2      	lsls	r2, r2, #3
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d9eb      	bls.n	8004814 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
  }
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe f848 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004874:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004884:	4293      	cmp	r3, r2
 8004886:	d903      	bls.n	8004890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d903      	bls.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe f821 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80048ce:	429a      	cmp	r2, r3
 80048d0:	bf8c      	ite	hi
 80048d2:	2301      	movhi	r3, #1
 80048d4:	2300      	movls	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80048dc:	f06f 0301 	mvn.w	r3, #1
 80048e0:	e194      	b.n	8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd ff3c 	bl	8002764 <_ZN13STM32Hardware4readEv>
 80048ec:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f2c0 8174 	blt.w	8004bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800490c:	2b07      	cmp	r3, #7
 800490e:	d11e      	bne.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	b2d1      	uxtb	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	460a      	mov	r2, r1
 8004928:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1b4      	bne.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2208      	movs	r2, #8
 8004948:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800494c:	e7af      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004954:	2b00      	cmp	r3, #0
 8004956:	d128      	bne.n	80049aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2bff      	cmp	r3, #255	; 0xff
 800495c:	d10d      	bne.n	800497a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f103 0214 	add.w	r2, r3, #20
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004978:	e799      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd ffc0 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	bf8c      	ite	hi
 8004992:	2301      	movhi	r3, #1
 8004994:	2300      	movls	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d088      	beq.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80049a4:	f06f 0301 	mvn.w	r3, #1
 80049a8:	e130      	b.n	8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2bfe      	cmp	r3, #254	; 0xfe
 80049b8:	d107      	bne.n	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80049c8:	e771      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af68 	bne.w	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9e1 	bl	8004da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80049e4:	e763      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d113      	bne.n	8004a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004a16:	e74a      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d110      	bne.n	8004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a42:	e734      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d116      	bne.n	8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004a54:	425a      	negs	r2, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	bf58      	it	pl
 8004a5c:	4253      	negpl	r3, r2
 8004a5e:	2bff      	cmp	r3, #255	; 0xff
 8004a60:	d107      	bne.n	8004a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a70:	e71d      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a7a:	e718      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10f      	bne.n	8004aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004aa4:	e703      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d117      	bne.n	8004ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f aeec 	bne.w	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004ade:	e6e6      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	f47f aee1 	bne.w	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004afa:	425a      	negs	r2, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	bf58      	it	pl
 8004b02:	4253      	negpl	r3, r2
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	f47f aed2 	bne.w	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f946 	bl	8004da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f961 	bl	8004de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b34:	e06a      	b.n	8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b3c:	2b0a      	cmp	r3, #10
 8004b3e:	d107      	bne.n	8004b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa29 	bl	8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004b4e:	e6ae      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d10e      	bne.n	8004b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7fd fb3e 	bl	80021ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004b76:	e69a      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b7e:	2b0b      	cmp	r3, #11
 8004b80:	d104      	bne.n	8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004b8a:	e690      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b92:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f43f ae84 	beq.w	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004bac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004bc0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4798      	blx	r3
    while (true)
 8004bdc:	e667      	b.n	80048ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004bde:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00f      	beq.n	8004c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d906      	bls.n	8004c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8d2 	bl	8004da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8004c0a:	2300      	movs	r3, #0
  }
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	08015788 	.word	0x08015788

08004c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ffe5 	bl	8004c14 <_ZN3ros11Subscriber_C1Ev>
 8004c4a:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	330c      	adds	r3, #12
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe fa1f 	bl	8003098 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
  };
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	080156cc 	.word	0x080156cc

08004c7c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ffc1 	bl	8004c14 <_ZN3ros11Subscriber_C1Ev>
 8004c92:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe f8c1 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	609a      	str	r2, [r3, #8]
  };
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	080156b4 	.word	0x080156b4

08004cc4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ff9d 	bl	8004c14 <_ZN3ros11Subscriber_C1Ev>
 8004cda:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fa73 	bl	80031d0 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
  };
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	0801569c 	.word	0x0801569c

08004d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e01d      	b.n	8004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d111      	bne.n	8004d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
        return true;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e006      	b.n	8004d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	ddde      	ble.n	8004d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004d5e:	2300      	movs	r3, #0
  }
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd fcd7 	bl	800272c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fd76 	bl	80018a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f107 020c 	add.w	r2, r7, #12
 8004dc2:	210a      	movs	r1, #10
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
    rt_time = hardware_.time();
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fd99 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004de2:	b590      	push	{r4, r7, lr}
 8004de4:	b08b      	sub	sp, #44	; 0x2c
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fc fe48 	bl	8001a84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
 8004df8:	e062      	b.n	8004ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d056      	beq.n	8004eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4798      	blx	r3
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4608      	mov	r0, r1
 8004e88:	4798      	blx	r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e92:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681c      	ldr	r4, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fd fb56 	bl	800255a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004eae:	4601      	mov	r1, r0
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2b18      	cmp	r3, #24
 8004ec4:	dd99      	ble.n	8004dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	e05e      	b.n	8004f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d053      	beq.n	8004f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4798      	blx	r3
 8004f20:	4603      	mov	r3, r0
 8004f22:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4608      	mov	r0, r1
 8004f44:	4798      	blx	r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3304      	adds	r3, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4798      	blx	r3
 8004f78:	4601      	mov	r1, r0
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	3301      	adds	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	2b18      	cmp	r3, #24
 8004f8e:	dd9d      	ble.n	8004ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004f98:	bf00      	nop
 8004f9a:	372c      	adds	r7, #44	; 0x2c
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd90      	pop	{r4, r7, pc}

08004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc fc78 	bl	80018a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd fca3 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fc fcd7 	bl	8001984 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4915      	ldr	r1, [pc, #84]	; (8005030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004fdc:	fba1 1303 	umull	r1, r3, r1, r3
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004fe6:	6939      	ldr	r1, [r7, #16]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004fec:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	440b      	add	r3, r1
 8005004:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005006:	f107 0308 	add.w	r3, r7, #8
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8a6 	bl	8005160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd fc73 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 800501e:	4602      	mov	r2, r0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	10624dd3 	.word	0x10624dd3
 8005034:	000f4240 	.word	0x000f4240

08005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b63      	cmp	r3, #99	; 0x63
 8005048:	dd09      	ble.n	800505e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800505a:	2300      	movs	r3, #0
 800505c:	e079      	b.n	8005152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800506a:	3207      	adds	r2, #7
 800506c:	4611      	mov	r1, r2
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
 8005072:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	22fe      	movs	r2, #254	; 0xfe
 8005080:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	b29b      	uxth	r3, r3
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	b29b      	uxth	r3, r3
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80050aa:	4413      	add	r3, r2
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	b21b      	sxth	r3, r3
 80050c6:	121b      	asrs	r3, r3, #8
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80050d6:	2305      	movs	r3, #5
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e00c      	b.n	80050f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3306      	adds	r3, #6
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	dded      	ble.n	80050dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	3307      	adds	r3, #7
 8005104:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	425a      	negs	r2, r3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	bf58      	it	pl
 8005110:	4253      	negpl	r3, r2
 8005112:	b2da      	uxtb	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	6179      	str	r1, [r7, #20]
 800511a:	43d2      	mvns	r2, r2
 800511c:	b2d1      	uxtb	r1, r2
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	460a      	mov	r2, r1
 8005124:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512e:	dc0a      	bgt.n	8005146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1d18      	adds	r0, r3, #4
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4619      	mov	r1, r3
 800513e:	f7fd fb9b 	bl	8002878 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	e005      	b.n	8005152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005146:	4905      	ldr	r1, [pc, #20]	; (800515c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f849 	bl	80051e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800514e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0801559c 	.word	0x0801559c

08005160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd fbc8 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8005174:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4915      	ldr	r1, [pc, #84]	; (80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800517e:	fba1 1303 	umull	r1, r3, r1, r3
 8005182:	099b      	lsrs	r3, r3, #6
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8005196:	fba3 0302 	umull	r0, r3, r3, r2
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051a0:	fb00 f303 	mul.w	r3, r0, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	1aca      	subs	r2, r1, r3
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80051b0:	4413      	add	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f001 fadc 	bl	8006784 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	10624dd3 	.word	0x10624dd3
 80051d8:	000f4240 	.word	0x000f4240
 80051dc:	3b9aca00 	.word	0x3b9aca00

080051e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	2103      	movs	r1, #3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f804 	bl	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	460b      	mov	r3, r1
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4618      	mov	r0, r3
 8005210:	f7fc fdfc 	bl	8001e0c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005214:	7afb      	ldrb	r3, [r7, #11]
 8005216:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f107 0214 	add.w	r2, r7, #20
 8005226:	2107      	movs	r1, #7
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	4798      	blx	r3
  }
 800522c:	bf00      	nop
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_Z41__static_initialization_and_destruction_0ii>:
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d140      	bne.n	80052c6 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524a:	4293      	cmp	r3, r2
 800524c:	d13b      	bne.n	80052c6 <_Z41__static_initialization_and_destruction_0ii+0x92>
ros::NodeHandle nh;
 800524e:	4820      	ldr	r0, [pc, #128]	; (80052d0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005250:	f7fe fa50 	bl	80036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
vesc_msgs::VescState vesc_state;
 8005254:	481f      	ldr	r0, [pc, #124]	; (80052d4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005256:	f7fe f825 	bl	80032a4 <_ZN9vesc_msgs9VescStateC1Ev>
ros::Publisher vesc_pub("vesc_sensor", &vesc_state);
 800525a:	2300      	movs	r3, #0
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800525e:	491e      	ldr	r1, [pc, #120]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005260:	481e      	ldr	r0, [pc, #120]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8005262:	f7fd f94f 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float32MultiArray forces;
 8005266:	481e      	ldr	r0, [pc, #120]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005268:	f7fd fddc 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher force_pub("forces", &forces);
 800526c:	2300      	movs	r3, #0
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005270:	491c      	ldr	r1, [pc, #112]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005272:	481d      	ldr	r0, [pc, #116]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005274:	f7fd f946 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float32MultiArray wheel_speed;
 8005278:	481c      	ldr	r0, [pc, #112]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800527a:	f7fd fdd3 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher wheel_speed_pub("forces", &wheel_speed);
 800527e:	2300      	movs	r3, #0
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005282:	4918      	ldr	r1, [pc, #96]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005284:	481a      	ldr	r0, [pc, #104]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005286:	f7fd f93d 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 800528a:	2301      	movs	r3, #1
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800528e:	491a      	ldr	r1, [pc, #104]	; (80052f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005290:	481a      	ldr	r0, [pc, #104]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005292:	f7ff fccf 	bl	8004c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005296:	2301      	movs	r3, #1
 8005298:	4a19      	ldr	r2, [pc, #100]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800529a:	491a      	ldr	r1, [pc, #104]	; (8005304 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800529c:	481a      	ldr	r0, [pc, #104]	; (8005308 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800529e:	f7ff fcc9 	bl	8004c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 80052a2:	2301      	movs	r3, #1
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80052a6:	491a      	ldr	r1, [pc, #104]	; (8005310 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80052a8:	481a      	ldr	r0, [pc, #104]	; (8005314 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80052aa:	f7ff fcc3 	bl	8004c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 80052ae:	2301      	movs	r3, #1
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80052b2:	491a      	ldr	r1, [pc, #104]	; (800531c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80052b4:	481a      	ldr	r0, [pc, #104]	; (8005320 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80052b6:	f7ff fce1 	bl	8004c7c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
 80052ba:	2301      	movs	r3, #1
 80052bc:	4a19      	ldr	r2, [pc, #100]	; (8005324 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80052be:	491a      	ldr	r1, [pc, #104]	; (8005328 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80052c0:	481a      	ldr	r0, [pc, #104]	; (800532c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80052c2:	f7ff fcff 	bl	8004cc4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	24000ed4 	.word	0x24000ed4
 80052d4:	24001810 	.word	0x24001810
 80052d8:	080155d8 	.word	0x080155d8
 80052dc:	24001848 	.word	0x24001848
 80052e0:	2400185c 	.word	0x2400185c
 80052e4:	080155e4 	.word	0x080155e4
 80052e8:	2400188c 	.word	0x2400188c
 80052ec:	240018a0 	.word	0x240018a0
 80052f0:	240018d0 	.word	0x240018d0
 80052f4:	08004065 	.word	0x08004065
 80052f8:	080155ec 	.word	0x080155ec
 80052fc:	24001a40 	.word	0x24001a40
 8005300:	08004099 	.word	0x08004099
 8005304:	080155fc 	.word	0x080155fc
 8005308:	24001a5c 	.word	0x24001a5c
 800530c:	080040cd 	.word	0x080040cd
 8005310:	08015610 	.word	0x08015610
 8005314:	24001a78 	.word	0x24001a78
 8005318:	08004131 	.word	0x08004131
 800531c:	08015624 	.word	0x08015624
 8005320:	24001a94 	.word	0x24001a94
 8005324:	08004241 	.word	0x08004241
 8005328:	08015634 	.word	0x08015634
 800532c:	24001ad8 	.word	0x24001ad8

08005330 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	330c      	adds	r3, #12
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd ff74 	bl	800322e <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	320c      	adds	r2, #12
 800534e:	4610      	mov	r0, r2
 8005350:	4798      	blx	r3
  }
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
  }
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	330c      	adds	r3, #12
 800537e:	4618      	mov	r0, r3
 8005380:	f7fd ff74 	bl	800326c <_ZN8std_msgs4Bool7getTypeEv>
 8005384:	4603      	mov	r3, r0
  }
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	330c      	adds	r3, #12
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd ff74 	bl	8003288 <_ZN8std_msgs4Bool6getMD5Ev>
 80053a0:	4603      	mov	r3, r0
  }
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	330c      	adds	r3, #12
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fdc4 	bl	8002f48 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	320c      	adds	r2, #12
 80053c8:	4610      	mov	r0, r2
 80053ca:	4798      	blx	r3
  }
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	330c      	adds	r3, #12
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fd fe31 	bl	8003060 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 80053fe:	4603      	mov	r3, r0
  }
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	330c      	adds	r3, #12
 8005414:	4618      	mov	r0, r3
 8005416:	f7fd fe31 	bl	800307c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 800541a:	4603      	mov	r3, r0
  }
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	330c      	adds	r3, #12
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fd fe77 	bl	8003128 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	320c      	adds	r2, #12
 8005442:	4610      	mov	r0, r2
 8005444:	4798      	blx	r3
  }
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
  }
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	330c      	adds	r3, #12
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd fe90 	bl	8003198 <_ZN8std_msgs7Float327getTypeEv>
 8005478:	4603      	mov	r3, r0
  }
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	330c      	adds	r3, #12
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fe90 	bl	80031b4 <_ZN8std_msgs7Float326getMD5Ev>
 8005494:	4603      	mov	r3, r0
  }
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
    return configured_;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_GLOBAL__sub_I_nh>:
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7ff feb7 	bl	8005234 <_Z41__static_initialization_and_destruction_0ii>
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_MspInit+0x30>)
 80054d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <HAL_MspInit+0x30>)
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_MspInit+0x30>)
 80054e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	58024400 	.word	0x58024400

080054fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b0bc      	sub	sp, #240	; 0xf0
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005514:	f107 0318 	add.w	r3, r7, #24
 8005518:	22c0      	movs	r2, #192	; 0xc0
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f00f fac3 	bl	8014aa8 <memset>
  if(hadc->Instance==ADC1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <HAL_ADC_MspInit+0x1a4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	f040 80b5 	bne.w	8005698 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800552e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800553a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005542:	f107 0318 	add.w	r3, r7, #24
 8005546:	4618      	mov	r0, r3
 8005548:	f008 f878 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8005552:	f7fc f849 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005556:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 8005558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800555c:	4a51      	ldr	r2, [pc, #324]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 800555e:	f043 0320 	orr.w	r3, r3, #32
 8005562:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005566:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 8005568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005584:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 8005586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005592:	4b44      	ldr	r3, [pc, #272]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 8005594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005598:	4a42      	ldr	r2, [pc, #264]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055a2:	4b40      	ldr	r3, [pc, #256]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 80055a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b0:	4b3c      	ldr	r3, [pc, #240]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b6:	4a3b      	ldr	r2, [pc, #236]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055c0:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <HAL_ADC_MspInit+0x1a8>)
 80055c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 80055ce:	2333      	movs	r3, #51	; 0x33
 80055d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055d4:	2303      	movs	r3, #3
 80055d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80055e4:	4619      	mov	r1, r3
 80055e6:	4830      	ldr	r0, [pc, #192]	; (80056a8 <HAL_ADC_MspInit+0x1ac>)
 80055e8:	f005 ff48 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 80055ec:	2350      	movs	r3, #80	; 0x50
 80055ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055f2:	2303      	movs	r3, #3
 80055f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005602:	4619      	mov	r1, r3
 8005604:	4829      	ldr	r0, [pc, #164]	; (80056ac <HAL_ADC_MspInit+0x1b0>)
 8005606:	f005 ff39 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800560a:	2303      	movs	r3, #3
 800560c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005610:	2303      	movs	r3, #3
 8005612:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800561c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005620:	4619      	mov	r1, r3
 8005622:	4823      	ldr	r0, [pc, #140]	; (80056b0 <HAL_ADC_MspInit+0x1b4>)
 8005624:	f005 ff2a 	bl	800b47c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8005628:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 800562a:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <HAL_ADC_MspInit+0x1bc>)
 800562c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005630:	2209      	movs	r2, #9
 8005632:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005634:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 800563c:	2200      	movs	r2, #0
 800563e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005640:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005646:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 800564a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800564e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005656:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005658:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 800565a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005662:	2200      	movs	r2, #0
 8005664:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005668:	2200      	movs	r2, #0
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800566c:	4811      	ldr	r0, [pc, #68]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 800566e:	f003 f8c9 	bl	8008804 <HAL_DMA_Init>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 8005678:	f7fb ffb6 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005680:	64da      	str	r2, [r3, #76]	; 0x4c
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <HAL_ADC_MspInit+0x1b8>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005688:	2200      	movs	r2, #0
 800568a:	2100      	movs	r1, #0
 800568c:	2012      	movs	r0, #18
 800568e:	f003 f884 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005692:	2012      	movs	r0, #18
 8005694:	f003 f89b 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005698:	bf00      	nop
 800569a:	37f0      	adds	r7, #240	; 0xf0
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40022000 	.word	0x40022000
 80056a4:	58024400 	.word	0x58024400
 80056a8:	58020800 	.word	0x58020800
 80056ac:	58020000 	.word	0x58020000
 80056b0:	58020400 	.word	0x58020400
 80056b4:	24000120 	.word	0x24000120
 80056b8:	40020070 	.word	0x40020070

080056bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b0ba      	sub	sp, #232	; 0xe8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	22c0      	movs	r2, #192	; 0xc0
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f00f f9e3 	bl	8014aa8 <memset>
  if(hi2c->Instance==I2C1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a27      	ldr	r2, [pc, #156]	; (8005784 <HAL_I2C_MspInit+0xc8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d146      	bne.n	800577a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80056ec:	f04f 0208 	mov.w	r2, #8
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056fe:	f107 0310 	add.w	r3, r7, #16
 8005702:	4618      	mov	r0, r3
 8005704:	f007 ff9a 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800570e:	f7fb ff6b 	bl	80015e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 8005714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005722:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 8005724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005738:	2312      	movs	r3, #18
 800573a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800574a:	2304      	movs	r3, #4
 800574c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005750:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005754:	4619      	mov	r1, r3
 8005756:	480d      	ldr	r0, [pc, #52]	; (800578c <HAL_I2C_MspInit+0xd0>)
 8005758:	f005 fe90 	bl	800b47c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 800575e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005762:	4a09      	ldr	r2, [pc, #36]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 8005764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005768:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_I2C_MspInit+0xcc>)
 800576e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800577a:	bf00      	nop
 800577c:	37e8      	adds	r7, #232	; 0xe8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40005400 	.word	0x40005400
 8005788:	58024400 	.word	0x58024400
 800578c:	58020400 	.word	0x58020400

08005790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b0c4      	sub	sp, #272	; 0x110
 8005794:	af00      	add	r7, sp, #0
 8005796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800579a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800579e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057b4:	22c0      	movs	r2, #192	; 0xc0
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f00f f975 	bl	8014aa8 <memset>
  if(huart->Instance==LPUART1)
 80057be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4aa6      	ldr	r2, [pc, #664]	; (8005a64 <HAL_UART_MspInit+0x2d4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	f040 8084 	bne.w	80058da <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80057d2:	f04f 0204 	mov.w	r2, #4
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 ff27 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 80057f4:	f7fb fef8 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80057f8:	4b9b      	ldr	r3, [pc, #620]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 80057fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057fe:	4a9a      	ldr	r2, [pc, #616]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005800:	f043 0308 	orr.w	r3, r3, #8
 8005804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005808:	4b97      	ldr	r3, [pc, #604]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 800580a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005816:	4b94      	ldr	r3, [pc, #592]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800581c:	4a92      	ldr	r2, [pc, #584]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005826:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	633b      	str	r3, [r7, #48]	; 0x30
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005834:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583c:	2302      	movs	r3, #2
 800583e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800584e:	2303      	movs	r3, #3
 8005850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005854:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005858:	4619      	mov	r1, r3
 800585a:	4884      	ldr	r0, [pc, #528]	; (8005a6c <HAL_UART_MspInit+0x2dc>)
 800585c:	f005 fe0e 	bl	800b47c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8005860:	4b83      	ldr	r3, [pc, #524]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005862:	4a84      	ldr	r2, [pc, #528]	; (8005a74 <HAL_UART_MspInit+0x2e4>)
 8005864:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8005866:	4b82      	ldr	r3, [pc, #520]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005868:	2209      	movs	r2, #9
 800586a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800586c:	4b80      	ldr	r3, [pc, #512]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 800586e:	2200      	movs	r2, #0
 8005870:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005874:	2200      	movs	r2, #0
 8005876:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005878:	4b7d      	ldr	r3, [pc, #500]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 800587a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800587e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005880:	4b7b      	ldr	r3, [pc, #492]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005882:	2200      	movs	r2, #0
 8005884:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005886:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005888:	2200      	movs	r2, #0
 800588a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800588c:	4b78      	ldr	r3, [pc, #480]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 800588e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005892:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005894:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 8005896:	2200      	movs	r2, #0
 8005898:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800589a:	4875      	ldr	r0, [pc, #468]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 800589c:	f002 ffb2 	bl	8008804 <HAL_DMA_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 80058a6:	f7fb fe9f 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80058aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6e      	ldr	r2, [pc, #440]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 80058b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80058ba:	4a6d      	ldr	r2, [pc, #436]	; (8005a70 <HAL_UART_MspInit+0x2e0>)
 80058bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	208e      	movs	r0, #142	; 0x8e
 80058ce:	f002 ff64 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80058d2:	208e      	movs	r0, #142	; 0x8e
 80058d4:	f002 ff7b 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80058d8:	e294      	b.n	8005e04 <HAL_UART_MspInit+0x674>
  else if(huart->Instance==UART4)
 80058da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a64      	ldr	r2, [pc, #400]	; (8005a78 <HAL_UART_MspInit+0x2e8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	f040 80d1 	bne.w	8005a90 <HAL_UART_MspInit+0x300>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80058ee:	f04f 0202 	mov.w	r2, #2
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f007 fe99 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8005910:	f7fb fe6a 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005914:	4b54      	ldr	r3, [pc, #336]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800591a:	4a53      	ldr	r2, [pc, #332]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 800591c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005920:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800592a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005932:	4b4d      	ldr	r3, [pc, #308]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005938:	4a4b      	ldr	r2, [pc, #300]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 800593a:	f043 0308 	orr.w	r3, r3, #8
 800593e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005942:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <HAL_UART_MspInit+0x2d8>)
 8005944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005950:	2303      	movs	r3, #3
 8005952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005962:	2300      	movs	r3, #0
 8005964:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005968:	2308      	movs	r3, #8
 800596a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800596e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005972:	4619      	mov	r1, r3
 8005974:	4841      	ldr	r0, [pc, #260]	; (8005a7c <HAL_UART_MspInit+0x2ec>)
 8005976:	f005 fd81 	bl	800b47c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800597a:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 800597c:	4a41      	ldr	r2, [pc, #260]	; (8005a84 <HAL_UART_MspInit+0x2f4>)
 800597e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005980:	4b3f      	ldr	r3, [pc, #252]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 8005982:	223f      	movs	r2, #63	; 0x3f
 8005984:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005986:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800598c:	4b3c      	ldr	r3, [pc, #240]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 800598e:	2200      	movs	r2, #0
 8005990:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005992:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 8005994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005998:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059a0:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059b2:	4b33      	ldr	r3, [pc, #204]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80059b8:	4831      	ldr	r0, [pc, #196]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059ba:	f002 ff23 	bl	8008804 <HAL_DMA_Init>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80059c4:	f7fb fe10 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80059c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80059d8:	4a29      	ldr	r2, [pc, #164]	; (8005a80 <HAL_UART_MspInit+0x2f0>)
 80059da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 80059e6:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <HAL_UART_MspInit+0x2fc>)
 80059ea:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80059ec:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a04:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005a24:	4818      	ldr	r0, [pc, #96]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a26:	f002 feed 	bl	8008804 <HAL_DMA_Init>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8005a30:	f7fb fdda 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a40:	67da      	str	r2, [r3, #124]	; 0x7c
 8005a42:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <HAL_UART_MspInit+0x2f8>)
 8005a44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005a50:	2200      	movs	r2, #0
 8005a52:	2100      	movs	r1, #0
 8005a54:	2034      	movs	r0, #52	; 0x34
 8005a56:	f002 fea0 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a5a:	2034      	movs	r0, #52	; 0x34
 8005a5c:	f002 feb7 	bl	80087ce <HAL_NVIC_EnableIRQ>
}
 8005a60:	e1d0      	b.n	8005e04 <HAL_UART_MspInit+0x674>
 8005a62:	bf00      	nop
 8005a64:	58000c00 	.word	0x58000c00
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	58020000 	.word	0x58020000
 8005a70:	240004d0 	.word	0x240004d0
 8005a74:	58025408 	.word	0x58025408
 8005a78:	40004c00 	.word	0x40004c00
 8005a7c:	58020c00 	.word	0x58020c00
 8005a80:	24000548 	.word	0x24000548
 8005a84:	40020010 	.word	0x40020010
 8005a88:	240005c0 	.word	0x240005c0
 8005a8c:	40020028 	.word	0x40020028
  else if(huart->Instance==UART5)
 8005a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a9f      	ldr	r2, [pc, #636]	; (8005d1c <HAL_UART_MspInit+0x58c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f040 8087 	bne.w	8005bb2 <HAL_UART_MspInit+0x422>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005aa4:	f04f 0202 	mov.w	r2, #2
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005aba:	4618      	mov	r0, r3
 8005abc:	f007 fdbe 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8005ac6:	f7fb fd8f 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005aca:	4b95      	ldr	r3, [pc, #596]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ad0:	4a93      	ldr	r2, [pc, #588]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ada:	4b91      	ldr	r3, [pc, #580]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae8:	4b8d      	ldr	r3, [pc, #564]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aee:	4a8c      	ldr	r2, [pc, #560]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005af8:	4b89      	ldr	r3, [pc, #548]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005b06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8005b20:	230e      	movs	r3, #14
 8005b22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	487d      	ldr	r0, [pc, #500]	; (8005d24 <HAL_UART_MspInit+0x594>)
 8005b2e:	f005 fca5 	bl	800b47c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8005b32:	4b7d      	ldr	r3, [pc, #500]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b34:	4a7d      	ldr	r2, [pc, #500]	; (8005d2c <HAL_UART_MspInit+0x59c>)
 8005b36:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005b38:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b3a:	2241      	movs	r2, #65	; 0x41
 8005b3c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b44:	4b78      	ldr	r3, [pc, #480]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b4a:	4b77      	ldr	r3, [pc, #476]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b50:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b52:	4b75      	ldr	r3, [pc, #468]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b58:	4b73      	ldr	r3, [pc, #460]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005b5e:	4b72      	ldr	r3, [pc, #456]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b64:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b66:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b6c:	4b6e      	ldr	r3, [pc, #440]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005b72:	486d      	ldr	r0, [pc, #436]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b74:	f002 fe46 	bl	8008804 <HAL_DMA_Init>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8005b7e:	f7fb fd33 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a66      	ldr	r2, [pc, #408]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005b92:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_UART_MspInit+0x598>)
 8005b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	2035      	movs	r0, #53	; 0x35
 8005ba6:	f002 fdf8 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005baa:	2035      	movs	r0, #53	; 0x35
 8005bac:	f002 fe0f 	bl	80087ce <HAL_NVIC_EnableIRQ>
}
 8005bb0:	e128      	b.n	8005e04 <HAL_UART_MspInit+0x674>
  else if(huart->Instance==UART7)
 8005bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <HAL_UART_MspInit+0x5a0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	f040 80bf 	bne.w	8005d44 <HAL_UART_MspInit+0x5b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005bc6:	f04f 0202 	mov.w	r2, #2
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f007 fd2d 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_UART_MspInit+0x45c>
      Error_Handler();
 8005be8:	f7fb fcfe 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005bec:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bf2:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bfc:	4b48      	ldr	r3, [pc, #288]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c0a:	4b45      	ldr	r3, [pc, #276]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c10:	4a43      	ldr	r2, [pc, #268]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c12:	f043 0310 	orr.w	r3, r3, #16
 8005c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c28:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c2e:	4a3c      	ldr	r2, [pc, #240]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c38:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_UART_MspInit+0x590>)
 8005c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8005c60:	2307      	movs	r3, #7
 8005c62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c66:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4831      	ldr	r0, [pc, #196]	; (8005d34 <HAL_UART_MspInit+0x5a4>)
 8005c6e:	f005 fc05 	bl	800b47c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8005c8c:	230b      	movs	r3, #11
 8005c8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c92:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c96:	4619      	mov	r1, r3
 8005c98:	4827      	ldr	r0, [pc, #156]	; (8005d38 <HAL_UART_MspInit+0x5a8>)
 8005c9a:	f005 fbef 	bl	800b47c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8005c9e:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <HAL_UART_MspInit+0x5b0>)
 8005ca2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005ca6:	224f      	movs	r2, #79	; 0x4f
 8005ca8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005caa:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cb0:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb6:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cbc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8005cdc:	4817      	ldr	r0, [pc, #92]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cde:	f002 fd91 	bl	8008804 <HAL_DMA_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_UART_MspInit+0x55c>
      Error_Handler();
 8005ce8:	f7fb fc7e 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8005cec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005cfc:	4a0f      	ldr	r2, [pc, #60]	; (8005d3c <HAL_UART_MspInit+0x5ac>)
 8005cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2052      	movs	r0, #82	; 0x52
 8005d10:	f002 fd43 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005d14:	2052      	movs	r0, #82	; 0x52
 8005d16:	f002 fd5a 	bl	80087ce <HAL_NVIC_EnableIRQ>
}
 8005d1a:	e073      	b.n	8005e04 <HAL_UART_MspInit+0x674>
 8005d1c:	40005000 	.word	0x40005000
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58020400 	.word	0x58020400
 8005d28:	24000638 	.word	0x24000638
 8005d2c:	40020040 	.word	0x40020040
 8005d30:	40007800 	.word	0x40007800
 8005d34:	58021000 	.word	0x58021000
 8005d38:	58020000 	.word	0x58020000
 8005d3c:	240006b0 	.word	0x240006b0
 8005d40:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8005d44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <HAL_UART_MspInit+0x680>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d156      	bne.n	8005e04 <HAL_UART_MspInit+0x674>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005d56:	f04f 0202 	mov.w	r2, #2
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f007 fc65 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_UART_MspInit+0x5ec>
      Error_Handler();
 8005d78:	f7fb fc36 	bl	80015e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d92:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8005d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005da4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005da8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005daa:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db0:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_UART_MspInit+0x684>)
 8005dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc0:	f003 0202 	and.w	r2, r3, #2
 8005dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005dd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de0:	2302      	movs	r3, #2
 8005de2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005df2:	2307      	movs	r3, #7
 8005df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005df8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4806      	ldr	r0, [pc, #24]	; (8005e18 <HAL_UART_MspInit+0x688>)
 8005e00:	f005 fb3c 	bl	800b47c <HAL_GPIO_Init>
}
 8005e04:	bf00      	nop
 8005e06:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40004800 	.word	0x40004800
 8005e14:	58024400 	.word	0x58024400
 8005e18:	58020400 	.word	0x58020400

08005e1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b0bc      	sub	sp, #240	; 0xf0
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e34:	f107 0318 	add.w	r3, r7, #24
 8005e38:	22c0      	movs	r2, #192	; 0xc0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00e fe33 	bl	8014aa8 <memset>
  if(hqspi->Instance==QUADSPI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a55      	ldr	r2, [pc, #340]	; (8005f9c <HAL_QSPI_MspInit+0x180>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	f040 80a3 	bne.w	8005f94 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8005e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e5e:	f107 0318 	add.w	r3, r7, #24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f007 fbea 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8005e6e:	f7fb fbbb 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005e72:	4b4b      	ldr	r3, [pc, #300]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005e74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e78:	4a49      	ldr	r2, [pc, #292]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e7e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005e84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e90:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e96:	4a42      	ldr	r2, [pc, #264]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005e98:	f043 0310 	orr.w	r3, r3, #16
 8005e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eae:	4b3c      	ldr	r3, [pc, #240]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ebe:	4b38      	ldr	r3, [pc, #224]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ecc:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed2:	4a33      	ldr	r2, [pc, #204]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005ed4:	f043 0308 	orr.w	r3, r3, #8
 8005ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <HAL_QSPI_MspInit+0x184>)
 8005ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005eea:	2304      	movs	r3, #4
 8005eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005f02:	2309      	movs	r3, #9
 8005f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4825      	ldr	r0, [pc, #148]	; (8005fa4 <HAL_QSPI_MspInit+0x188>)
 8005f10:	f005 fab4 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f14:	2304      	movs	r3, #4
 8005f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005f2c:	2309      	movs	r3, #9
 8005f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f36:	4619      	mov	r1, r3
 8005f38:	481b      	ldr	r0, [pc, #108]	; (8005fa8 <HAL_QSPI_MspInit+0x18c>)
 8005f3a:	f005 fa9f 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005f3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f46:	2302      	movs	r3, #2
 8005f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f52:	2300      	movs	r3, #0
 8005f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005f58:	2309      	movs	r3, #9
 8005f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f62:	4619      	mov	r1, r3
 8005f64:	4811      	ldr	r0, [pc, #68]	; (8005fac <HAL_QSPI_MspInit+0x190>)
 8005f66:	f005 fa89 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f70:	2302      	movs	r3, #2
 8005f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005f82:	230a      	movs	r3, #10
 8005f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4806      	ldr	r0, [pc, #24]	; (8005fa8 <HAL_QSPI_MspInit+0x18c>)
 8005f90:	f005 fa74 	bl	800b47c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005f94:	bf00      	nop
 8005f96:	37f0      	adds	r7, #240	; 0xf0
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	52005000 	.word	0x52005000
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	58021000 	.word	0x58021000
 8005fa8:	58020400 	.word	0x58020400
 8005fac:	58020c00 	.word	0x58020c00

08005fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0bc      	sub	sp, #240	; 0xf0
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc8:	f107 0318 	add.w	r3, r7, #24
 8005fcc:	22c0      	movs	r2, #192	; 0xc0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00e fd69 	bl	8014aa8 <memset>
  if(hspi->Instance==SPI1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a38      	ldr	r2, [pc, #224]	; (80060bc <HAL_SPI_MspInit+0x10c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d168      	bne.n	80060b2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ff0:	f107 0318 	add.w	r3, r7, #24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f007 fb21 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8006000:	f7fb faf2 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006004:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800600a:	4a2d      	ldr	r2, [pc, #180]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 800600c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006010:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800601a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006028:	4a25      	ldr	r2, [pc, #148]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 800602a:	f043 0308 	orr.w	r3, r3, #8
 800602e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006040:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <HAL_SPI_MspInit+0x110>)
 8006052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006064:	2302      	movs	r3, #2
 8006066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006070:	2300      	movs	r3, #0
 8006072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006076:	2305      	movs	r3, #5
 8006078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800607c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006080:	4619      	mov	r1, r3
 8006082:	4810      	ldr	r0, [pc, #64]	; (80060c4 <HAL_SPI_MspInit+0x114>)
 8006084:	f005 f9fa 	bl	800b47c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8006088:	2318      	movs	r3, #24
 800608a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608e:	2302      	movs	r3, #2
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800609a:	2300      	movs	r3, #0
 800609c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060a0:	2305      	movs	r3, #5
 80060a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80060aa:	4619      	mov	r1, r3
 80060ac:	4806      	ldr	r0, [pc, #24]	; (80060c8 <HAL_SPI_MspInit+0x118>)
 80060ae:	f005 f9e5 	bl	800b47c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80060b2:	bf00      	nop
 80060b4:	37f0      	adds	r7, #240	; 0xf0
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40013000 	.word	0x40013000
 80060c0:	58024400 	.word	0x58024400
 80060c4:	58020c00 	.word	0x58020c00
 80060c8:	58020400 	.word	0x58020400

080060cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d10f      	bne.n	80060fe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 80060e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060ee:	4b11      	ldr	r3, [pc, #68]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 80060f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80060fc:	e013      	b.n	8006126 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a0d      	ldr	r2, [pc, #52]	; (8006138 <HAL_TIM_PWM_MspInit+0x6c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10e      	bne.n	8006126 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 800610a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_TIM_PWM_MspInit+0x68>)
 800611a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
 8006138:	40000400 	.word	0x40000400

0800613c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006144:	f107 031c 	add.w	r3, r7, #28
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	609a      	str	r2, [r3, #8]
 8006150:	60da      	str	r2, [r3, #12]
 8006152:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a34      	ldr	r2, [pc, #208]	; (800622c <HAL_TIM_IC_MspInit+0xf0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d12e      	bne.n	80061bc <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 8006160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006164:	4a32      	ldr	r2, [pc, #200]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 8006166:	f043 0308 	orr.w	r3, r3, #8
 800616a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800616e:	4b30      	ldr	r3, [pc, #192]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 8006170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 800617e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006182:	4a2b      	ldr	r2, [pc, #172]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 800618e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 800619a:	2301      	movs	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619e:	2302      	movs	r3, #2
 80061a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a6:	2300      	movs	r3, #0
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80061aa:	2302      	movs	r3, #2
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 80061ae:	f107 031c 	add.w	r3, r7, #28
 80061b2:	4619      	mov	r1, r3
 80061b4:	481f      	ldr	r0, [pc, #124]	; (8006234 <HAL_TIM_IC_MspInit+0xf8>)
 80061b6:	f005 f961 	bl	800b47c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80061ba:	e032      	b.n	8006222 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <HAL_TIM_IC_MspInit+0xfc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d12d      	bne.n	8006222 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061cc:	4a18      	ldr	r2, [pc, #96]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80061d6:	4b16      	ldr	r3, [pc, #88]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ea:	4a11      	ldr	r2, [pc, #68]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061ec:	f043 0310 	orr.w	r3, r3, #16
 80061f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <HAL_TIM_IC_MspInit+0xf4>)
 80061f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 8006202:	2320      	movs	r3, #32
 8006204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2302      	movs	r3, #2
 8006208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620a:	2300      	movs	r3, #0
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620e:	2300      	movs	r3, #0
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006212:	2304      	movs	r3, #4
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 8006216:	f107 031c 	add.w	r3, r7, #28
 800621a:	4619      	mov	r1, r3
 800621c:	4807      	ldr	r0, [pc, #28]	; (800623c <HAL_TIM_IC_MspInit+0x100>)
 800621e:	f005 f92d 	bl	800b47c <HAL_GPIO_Init>
}
 8006222:	bf00      	nop
 8006224:	3730      	adds	r7, #48	; 0x30
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40000c00 	.word	0x40000c00
 8006230:	58024400 	.word	0x58024400
 8006234:	58020000 	.word	0x58020000
 8006238:	40014000 	.word	0x40014000
 800623c:	58021000 	.word	0x58021000

08006240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <HAL_TIM_Base_MspInit+0x84>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d117      	bne.n	8006282 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006252:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 8006254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006258:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 800625a:	f043 0320 	orr.w	r3, r3, #32
 800625e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 8006264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	2037      	movs	r0, #55	; 0x37
 8006276:	f002 fa90 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800627a:	2037      	movs	r0, #55	; 0x37
 800627c:	f002 faa7 	bl	80087ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006280:	e01b      	b.n	80062ba <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM16)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <HAL_TIM_Base_MspInit+0x8c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d116      	bne.n	80062ba <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 800628e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 8006294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006298:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <HAL_TIM_Base_MspInit+0x88>)
 800629e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	60bb      	str	r3, [r7, #8]
 80062a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80062aa:	2200      	movs	r2, #0
 80062ac:	2100      	movs	r1, #0
 80062ae:	2075      	movs	r0, #117	; 0x75
 80062b0:	f002 fa73 	bl	800879a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80062b4:	2075      	movs	r0, #117	; 0x75
 80062b6:	f002 fa8a 	bl	80087ce <HAL_NVIC_EnableIRQ>
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40001400 	.word	0x40001400
 80062c8:	58024400 	.word	0x58024400
 80062cc:	40014400 	.word	0x40014400

080062d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d120      	bne.n	8006334 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f2:	4b24      	ldr	r3, [pc, #144]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 80062f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 8006304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 8006310:	f248 030e 	movw	r3, #32782	; 0x800e
 8006314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006316:	2302      	movs	r3, #2
 8006318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800631e:	2300      	movs	r3, #0
 8006320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006322:	2301      	movs	r3, #1
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006326:	f107 0314 	add.w	r3, r7, #20
 800632a:	4619      	mov	r1, r3
 800632c:	4816      	ldr	r0, [pc, #88]	; (8006388 <HAL_TIM_MspPostInit+0xb8>)
 800632e:	f005 f8a5 	bl	800b47c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006332:	e023      	b.n	800637c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <HAL_TIM_MspPostInit+0xbc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d11e      	bne.n	800637c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 8006340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006344:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 8006346:	f043 0304 	orr.w	r3, r3, #4
 800634a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <HAL_TIM_MspPostInit+0xb4>)
 8006350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 800635c:	23c0      	movs	r3, #192	; 0xc0
 800635e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006360:	2302      	movs	r3, #2
 8006362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006368:	2300      	movs	r3, #0
 800636a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800636c:	2302      	movs	r3, #2
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006370:	f107 0314 	add.w	r3, r7, #20
 8006374:	4619      	mov	r1, r3
 8006376:	4806      	ldr	r0, [pc, #24]	; (8006390 <HAL_TIM_MspPostInit+0xc0>)
 8006378:	f005 f880 	bl	800b47c <HAL_GPIO_Init>
}
 800637c:	bf00      	nop
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	58024400 	.word	0x58024400
 8006388:	58020000 	.word	0x58020000
 800638c:	40000400 	.word	0x40000400
 8006390:	58020800 	.word	0x58020800

08006394 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b0ba      	sub	sp, #232	; 0xe8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800639c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	22c0      	movs	r2, #192	; 0xc0
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f00e fb77 	bl	8014aa8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a28      	ldr	r2, [pc, #160]	; (8006460 <HAL_PCD_MspInit+0xcc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d149      	bne.n	8006458 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80063c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80063d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063d8:	f107 0310 	add.w	r3, r7, #16
 80063dc:	4618      	mov	r0, r3
 80063de:	f007 f92d 	bl	800d63c <HAL_RCCEx_PeriphCLKConfig>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80063e8:	f7fb f8fe 	bl	80015e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80063ec:	f005 fcec 	bl	800bdc8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f0:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 80063f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063f6:	4a1b      	ldr	r2, [pc, #108]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006400:	4b18      	ldr	r3, [pc, #96]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 8006402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800640e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006416:	2302      	movs	r3, #2
 8006418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006422:	2300      	movs	r3, #0
 8006424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006428:	230a      	movs	r3, #10
 800642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800642e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006432:	4619      	mov	r1, r3
 8006434:	480c      	ldr	r0, [pc, #48]	; (8006468 <HAL_PCD_MspInit+0xd4>)
 8006436:	f005 f821 	bl	800b47c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 800643c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 8006442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006446:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_PCD_MspInit+0xd0>)
 800644c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006458:	bf00      	nop
 800645a:	37e8      	adds	r7, #232	; 0xe8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40080000 	.word	0x40080000
 8006464:	58024400 	.word	0x58024400
 8006468:	58020000 	.word	0x58020000

0800646c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006470:	e7fe      	b.n	8006470 <NMI_Handler+0x4>

08006472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006476:	e7fe      	b.n	8006476 <HardFault_Handler+0x4>

08006478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800647c:	e7fe      	b.n	800647c <MemManage_Handler+0x4>

0800647e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800647e:	b480      	push	{r7}
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006482:	e7fe      	b.n	8006482 <BusFault_Handler+0x4>

08006484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006488:	e7fe      	b.n	8006488 <UsageFault_Handler+0x4>

0800648a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800648a:	b480      	push	{r7}
 800648c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064aa:	bf00      	nop
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064b8:	f000 fcea 	bl	8006e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}

080064c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80064c4:	4802      	ldr	r0, [pc, #8]	; (80064d0 <DMA1_Stream0_IRQHandler+0x10>)
 80064c6:	f003 fcc7 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80064ca:	bf00      	nop
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	24000548 	.word	0x24000548

080064d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80064d8:	4802      	ldr	r0, [pc, #8]	; (80064e4 <DMA1_Stream1_IRQHandler+0x10>)
 80064da:	f003 fcbd 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	240005c0 	.word	0x240005c0

080064e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80064ec:	4802      	ldr	r0, [pc, #8]	; (80064f8 <DMA1_Stream2_IRQHandler+0x10>)
 80064ee:	f003 fcb3 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	24000638 	.word	0x24000638

080064fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006500:	4802      	ldr	r0, [pc, #8]	; (800650c <DMA1_Stream3_IRQHandler+0x10>)
 8006502:	f003 fca9 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	240006b0 	.word	0x240006b0

08006510 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <DMA1_Stream4_IRQHandler+0x10>)
 8006516:	f003 fc9f 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	24000120 	.word	0x24000120

08006524 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006528:	4802      	ldr	r0, [pc, #8]	; (8006534 <ADC_IRQHandler+0x10>)
 800652a:	f001 f871 	bl	8007610 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	240000bc 	.word	0x240000bc

08006538 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800653c:	4802      	ldr	r0, [pc, #8]	; (8006548 <UART4_IRQHandler+0x10>)
 800653e:	f00b ff3f 	bl	80123c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	24000280 	.word	0x24000280

0800654c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <UART5_IRQHandler+0x10>)
 8006552:	f00b ff35 	bl	80123c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	24000314 	.word	0x24000314

08006560 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006564:	4802      	ldr	r0, [pc, #8]	; (8006570 <TIM7_IRQHandler+0x10>)
 8006566:	f00a fb87 	bl	8010c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	240008e0 	.word	0x240008e0

08006574 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006578:	4802      	ldr	r0, [pc, #8]	; (8006584 <UART7_IRQHandler+0x10>)
 800657a:	f00b ff21 	bl	80123c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800657e:	bf00      	nop
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	240003a8 	.word	0x240003a8

08006588 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800658c:	4802      	ldr	r0, [pc, #8]	; (8006598 <TIM16_IRQHandler+0x10>)
 800658e:	f00a fb73 	bl	8010c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	24000978 	.word	0x24000978

0800659c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80065a0:	4802      	ldr	r0, [pc, #8]	; (80065ac <BDMA_Channel0_IRQHandler+0x10>)
 80065a2:	f003 fc59 	bl	8009e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	240004d0 	.word	0x240004d0

080065b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80065b4:	4802      	ldr	r0, [pc, #8]	; (80065c0 <LPUART1_IRQHandler+0x10>)
 80065b6:	f00b ff03 	bl	80123c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	240001ec 	.word	0x240001ec

080065c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  return 1;
 80065c8:	2301      	movs	r3, #1
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <_kill>:

int _kill(int pid, int sig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80065de:	f00e fabf 	bl	8014b60 <__errno>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2216      	movs	r2, #22
 80065e6:	601a      	str	r2, [r3, #0]
  return -1;
 80065e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_exit>:

void _exit (int status)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80065fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ffe7 	bl	80065d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006606:	e7fe      	b.n	8006606 <_exit+0x12>

08006608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006610:	4a14      	ldr	r2, [pc, #80]	; (8006664 <_sbrk+0x5c>)
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <_sbrk+0x60>)
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <_sbrk+0x64>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006624:	4b11      	ldr	r3, [pc, #68]	; (800666c <_sbrk+0x64>)
 8006626:	4a12      	ldr	r2, [pc, #72]	; (8006670 <_sbrk+0x68>)
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <_sbrk+0x64>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	429a      	cmp	r2, r3
 8006636:	d207      	bcs.n	8006648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006638:	f00e fa92 	bl	8014b60 <__errno>
 800663c:	4603      	mov	r3, r0
 800663e:	220c      	movs	r2, #12
 8006640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006646:	e009      	b.n	800665c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <_sbrk+0x64>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <_sbrk+0x64>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	4a05      	ldr	r2, [pc, #20]	; (800666c <_sbrk+0x64>)
 8006658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	24080000 	.word	0x24080000
 8006668:	00000400 	.word	0x00000400
 800666c:	24001af8 	.word	0x24001af8
 8006670:	24002c50 	.word	0x24002c50

08006674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006678:	4b37      	ldr	r3, [pc, #220]	; (8006758 <SystemInit+0xe4>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	4a36      	ldr	r2, [pc, #216]	; (8006758 <SystemInit+0xe4>)
 8006680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006688:	4b34      	ldr	r3, [pc, #208]	; (800675c <SystemInit+0xe8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	2b06      	cmp	r3, #6
 8006692:	d807      	bhi.n	80066a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006694:	4b31      	ldr	r3, [pc, #196]	; (800675c <SystemInit+0xe8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 030f 	bic.w	r3, r3, #15
 800669c:	4a2f      	ldr	r2, [pc, #188]	; (800675c <SystemInit+0xe8>)
 800669e:	f043 0307 	orr.w	r3, r3, #7
 80066a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80066a4:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <SystemInit+0xec>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2d      	ldr	r2, [pc, #180]	; (8006760 <SystemInit+0xec>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80066b0:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <SystemInit+0xec>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80066b6:	4b2a      	ldr	r3, [pc, #168]	; (8006760 <SystemInit+0xec>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4929      	ldr	r1, [pc, #164]	; (8006760 <SystemInit+0xec>)
 80066bc:	4b29      	ldr	r3, [pc, #164]	; (8006764 <SystemInit+0xf0>)
 80066be:	4013      	ands	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80066c2:	4b26      	ldr	r3, [pc, #152]	; (800675c <SystemInit+0xe8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80066ce:	4b23      	ldr	r3, [pc, #140]	; (800675c <SystemInit+0xe8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 030f 	bic.w	r3, r3, #15
 80066d6:	4a21      	ldr	r2, [pc, #132]	; (800675c <SystemInit+0xe8>)
 80066d8:	f043 0307 	orr.w	r3, r3, #7
 80066dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80066de:	4b20      	ldr	r3, [pc, #128]	; (8006760 <SystemInit+0xec>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <SystemInit+0xec>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <SystemInit+0xec>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80066f0:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <SystemInit+0xec>)
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <SystemInit+0xf4>)
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80066f6:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <SystemInit+0xec>)
 80066f8:	4a1c      	ldr	r2, [pc, #112]	; (800676c <SystemInit+0xf8>)
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80066fc:	4b18      	ldr	r3, [pc, #96]	; (8006760 <SystemInit+0xec>)
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <SystemInit+0xfc>)
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <SystemInit+0xec>)
 8006704:	2200      	movs	r2, #0
 8006706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006708:	4b15      	ldr	r3, [pc, #84]	; (8006760 <SystemInit+0xec>)
 800670a:	4a19      	ldr	r2, [pc, #100]	; (8006770 <SystemInit+0xfc>)
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800670e:	4b14      	ldr	r3, [pc, #80]	; (8006760 <SystemInit+0xec>)
 8006710:	2200      	movs	r2, #0
 8006712:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <SystemInit+0xec>)
 8006716:	4a16      	ldr	r2, [pc, #88]	; (8006770 <SystemInit+0xfc>)
 8006718:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <SystemInit+0xec>)
 800671c:	2200      	movs	r2, #0
 800671e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <SystemInit+0xec>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0e      	ldr	r2, [pc, #56]	; (8006760 <SystemInit+0xec>)
 8006726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <SystemInit+0xec>)
 800672e:	2200      	movs	r2, #0
 8006730:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <SystemInit+0x100>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <SystemInit+0x104>)
 8006738:	4013      	ands	r3, r2
 800673a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673e:	d202      	bcs.n	8006746 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006740:	4b0e      	ldr	r3, [pc, #56]	; (800677c <SystemInit+0x108>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006746:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <SystemInit+0x10c>)
 8006748:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800674c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800674e:	bf00      	nop
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	e000ed00 	.word	0xe000ed00
 800675c:	52002000 	.word	0x52002000
 8006760:	58024400 	.word	0x58024400
 8006764:	eaf6ed7f 	.word	0xeaf6ed7f
 8006768:	02020200 	.word	0x02020200
 800676c:	01ff0000 	.word	0x01ff0000
 8006770:	01010280 	.word	0x01010280
 8006774:	5c001000 	.word	0x5c001000
 8006778:	ffff0000 	.word	0xffff0000
 800677c:	51008108 	.word	0x51008108
 8006780:	52004000 	.word	0x52004000

08006784 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	0a5a      	lsrs	r2, r3, #9
 8006794:	490f      	ldr	r1, [pc, #60]	; (80067d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006796:	fba1 1202 	umull	r1, r2, r1, r2
 800679a:	09d2      	lsrs	r2, r2, #7
 800679c:	490e      	ldr	r1, [pc, #56]	; (80067d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800679e:	fb01 f202 	mul.w	r2, r1, r2
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	0a5b      	lsrs	r3, r3, #9
 80067ac:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	09db      	lsrs	r3, r3, #7
 80067b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	00044b83 	.word	0x00044b83
 80067d8:	3b9aca00 	.word	0x3b9aca00

080067dc <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	b096      	sub	sp, #88	; 0x58
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 80067e4:	f107 0320 	add.w	r3, r7, #32
 80067e8:	2238      	movs	r2, #56	; 0x38
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f00e f95b 	bl	8014aa8 <memset>
 80067f2:	2305      	movs	r3, #5
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80067fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8006804:	f107 0408 	add.w	r4, r7, #8
 8006808:	461d      	mov	r5, r3
 800680a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800680c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800680e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006812:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	f107 0120 	add.w	r1, r7, #32
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4807      	ldr	r0, [pc, #28]	; (8006840 <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8006822:	f005 fce2 	bl	800c1ea <HAL_QSPI_AutoPolling>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006830:	e000      	b.n	8006834 <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3758      	adds	r7, #88	; 0x58
 8006838:	46bd      	mov	sp, r7
 800683a:	bdb0      	pop	{r4, r5, r7, pc}
 800683c:	08015648 	.word	0x08015648
 8006840:	24000728 	.word	0x24000728

08006844 <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8006844:	b5b0      	push	{r4, r5, r7, lr}
 8006846:	b094      	sub	sp, #80	; 0x50
 8006848:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 800684a:	f107 0318 	add.w	r3, r7, #24
 800684e:	2238      	movs	r2, #56	; 0x38
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f00e f928 	bl	8014aa8 <memset>
 8006858:	2306      	movs	r3, #6
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006862:	f107 0318 	add.w	r3, r7, #24
 8006866:	f241 3288 	movw	r2, #5000	; 0x1388
 800686a:	4619      	mov	r1, r3
 800686c:	4818      	ldr	r0, [pc, #96]	; (80068d0 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 800686e:	f005 fb2f 	bl	800bed0 <HAL_QSPI_Command>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8006878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800687c:	e023      	b.n	80068c6 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800687e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8006884:	2305      	movs	r3, #5
 8006886:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8006888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8006896:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <QSPI_W25Q64JV_WriteEnable+0x90>)
 8006898:	463c      	mov	r4, r7
 800689a:	461d      	mov	r5, r3
 800689c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80068a4:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80068a8:	463a      	mov	r2, r7
 80068aa:	f107 0118 	add.w	r1, r7, #24
 80068ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80068b2:	4807      	ldr	r0, [pc, #28]	; (80068d0 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 80068b4:	f005 fc99 	bl	800c1ea <HAL_QSPI_AutoPolling>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 80068be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c2:	e000      	b.n	80068c6 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3750      	adds	r7, #80	; 0x50
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bdb0      	pop	{r4, r5, r7, pc}
 80068ce:	bf00      	nop
 80068d0:	24000728 	.word	0x24000728
 80068d4:	08015660 	.word	0x08015660

080068d8 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 80068ee:	463b      	mov	r3, r7
 80068f0:	2238      	movs	r2, #56	; 0x38
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f00e f8d7 	bl	8014aa8 <memset>
 80068fa:	2366      	movs	r3, #102	; 0x66
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006902:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006904:	463b      	mov	r3, r7
 8006906:	f241 3288 	movw	r2, #5000	; 0x1388
 800690a:	4619      	mov	r1, r3
 800690c:	4814      	ldr	r0, [pc, #80]	; (8006960 <QSPI_W25Q64JV_Reset+0x78>)
 800690e:	f005 fadf 	bl	800bed0 <HAL_QSPI_Command>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8006918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691c:	e01c      	b.n	8006958 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800691e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006922:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8006924:	2399      	movs	r3, #153	; 0x99
 8006926:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006928:	463b      	mov	r3, r7
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4619      	mov	r1, r3
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <QSPI_W25Q64JV_Reset+0x78>)
 8006932:	f005 facd 	bl	800bed0 <HAL_QSPI_Command>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006940:	e00a      	b.n	8006958 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006942:	f241 3088 	movw	r0, #5000	; 0x1388
 8006946:	f7ff ff49 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8006950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006954:	e000      	b.n	8006958 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3738      	adds	r7, #56	; 0x38
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	24000728 	.word	0x24000728

08006964 <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b090      	sub	sp, #64	; 0x40
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 800696c:	f7ff ff6a 	bl	8006844 <QSPI_W25Q64JV_WriteEnable>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800697a:	e02c      	b.n	80069d6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 800697c:	f107 0308 	add.w	r3, r7, #8
 8006980:	2238      	movs	r2, #56	; 0x38
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f00e f88f 	bl	8014aa8 <memset>
 800698a:	2320      	movs	r3, #32
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ac:	4619      	mov	r1, r3
 80069ae:	480c      	ldr	r0, [pc, #48]	; (80069e0 <QSPI_W25Q64JV_EraseSector+0x7c>)
 80069b0:	f005 fa8e 	bl	800bed0 <HAL_QSPI_Command>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069be:	e00a      	b.n	80069d6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 80069c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80069c4:	f7ff ff0a 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d2:	e000      	b.n	80069d6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3740      	adds	r7, #64	; 0x40
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	24000728 	.word	0x24000728

080069e4 <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b092      	sub	sp, #72	; 0x48
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 80069f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80069f4:	f7ff fef2 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a02:	e044      	b.n	8006a8e <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	2238      	movs	r2, #56	; 0x38
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f00e f84b 	bl	8014aa8 <memset>
 8006a12:	23eb      	movs	r3, #235	; 0xeb
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	23f0      	movs	r3, #240	; 0xf0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	2304      	movs	r3, #4
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4812      	ldr	r0, [pc, #72]	; (8006a98 <QSPI_W25Q64JV_Read+0xb4>)
 8006a50:	f005 fa3e 	bl	800bed0 <HAL_QSPI_Command>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5e:	e016      	b.n	8006a8e <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	480c      	ldr	r0, [pc, #48]	; (8006a98 <QSPI_W25Q64JV_Read+0xb4>)
 8006a68:	f005 fb22 	bl	800c0b0 <HAL_QSPI_Receive>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a76:	e00a      	b.n	8006a8e <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006a78:	f241 3088 	movw	r0, #5000	; 0x1388
 8006a7c:	f7ff feae 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8a:	e000      	b.n	8006a8e <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3748      	adds	r7, #72	; 0x48
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	24000728 	.word	0x24000728

08006a9c <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b092      	sub	sp, #72	; 0x48
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006aa8:	f241 3088 	movw	r0, #5000	; 0x1388
 8006aac:	f7ff fe96 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aba:	e045      	b.n	8006b48 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8006abc:	f7ff fec2 	bl	8006844 <QSPI_W25Q64JV_WriteEnable>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aca:	e03d      	b.n	8006b48 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	2238      	movs	r2, #56	; 0x38
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f00d ffe7 	bl	8014aa8 <memset>
 8006ada:	2302      	movs	r3, #2
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006afe:	f107 0310 	add.w	r3, r7, #16
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	4619      	mov	r1, r3
 8006b08:	4811      	ldr	r0, [pc, #68]	; (8006b50 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8006b0a:	f005 f9e1 	bl	800bed0 <HAL_QSPI_Command>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b18:	e016      	b.n	8006b48 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	480b      	ldr	r0, [pc, #44]	; (8006b50 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8006b22:	f005 fa33 	bl	800bf8c <HAL_QSPI_Transmit>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b30:	e00a      	b.n	8006b48 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006b32:	f241 3088 	movw	r0, #5000	; 0x1388
 8006b36:	f7ff fe51 	bl	80067dc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b44:	e000      	b.n	8006b48 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3748      	adds	r7, #72	; 0x48
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	24000728 	.word	0x24000728

08006b54 <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006b6c:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d801      	bhi.n	8006b7a <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff ff8c 	bl	8006a9c <QSPI_W25Q64JV_PageProgram>
 8006b84:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d117      	bne.n	8006bbc <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d013      	beq.n	8006bbc <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb2:	bf28      	it	cs
 8006bb4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006bb8:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8006bba:	e7de      	b.n	8006b7a <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8006bbc:	693b      	ldr	r3, [r7, #16]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	0b1b      	lsrs	r3, r3, #12
 8006bdc:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be6:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8006be8:	8afb      	ldrh	r3, [r7, #22]
 8006bea:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8006bee:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8006bf0:	8abb      	ldrh	r3, [r7, #20]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d801      	bhi.n	8006bfc <QSPI_W25Q64JV_Write+0x34>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	031b      	lsls	r3, r3, #12
 8006c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c04:	4619      	mov	r1, r3
 8006c06:	4835      	ldr	r0, [pc, #212]	; (8006cdc <QSPI_W25Q64JV_Write+0x114>)
 8006c08:	f7ff feec 	bl	80069e4 <QSPI_W25Q64JV_Read>
 8006c0c:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d157      	bne.n	8006cc4 <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	e009      	b.n	8006c2e <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8006c1a:	8afa      	ldrh	r2, [r7, #22]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a2e      	ldr	r2, [pc, #184]	; (8006cdc <QSPI_W25Q64JV_Write+0x114>)
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	2bff      	cmp	r3, #255	; 0xff
 8006c26:	d107      	bne.n	8006c38 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	8abb      	ldrh	r3, [r7, #20]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3f1      	bcc.n	8006c1a <QSPI_W25Q64JV_Write+0x52>
 8006c36:	e000      	b.n	8006c3a <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8006c38:	bf00      	nop
        }
        if (i < secremain) {
 8006c3a:	8abb      	ldrh	r3, [r7, #20]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d21d      	bcs.n	8006c7e <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fe8c 	bl	8006964 <QSPI_W25Q64JV_EraseSector>
 8006c4c:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d139      	bne.n	8006cc8 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8006c54:	8afb      	ldrh	r3, [r7, #22]
 8006c56:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <QSPI_W25Q64JV_Write+0x114>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	8aba      	ldrh	r2, [r7, #20]
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f00d ffaa 	bl	8014bb8 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	031b      	lsls	r3, r3, #12
 8006c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	481b      	ldr	r0, [pc, #108]	; (8006cdc <QSPI_W25Q64JV_Write+0x114>)
 8006c70:	f7ff ff70 	bl	8006b54 <QSPI_W25Q64JV_Write_NoCheck>
 8006c74:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <QSPI_W25Q64JV_Write+0xca>
 8006c7c:	e029      	b.n	8006cd2 <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 8006c7e:	8abb      	ldrh	r3, [r7, #20]
 8006c80:	461a      	mov	r2, r3
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff ff65 	bl	8006b54 <QSPI_W25Q64JV_Write_NoCheck>
 8006c8a:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11c      	bne.n	8006ccc <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 8006c92:	8abb      	ldrh	r3, [r7, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d01a      	beq.n	8006cd0 <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 8006ca4:	8abb      	ldrh	r3, [r7, #20]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8006cac:	8abb      	ldrh	r3, [r7, #20]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 8006cb4:	8abb      	ldrh	r3, [r7, #20]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8006cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cc0:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 8006cc2:	e795      	b.n	8006bf0 <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 8006cc4:	bf00      	nop
 8006cc6:	e004      	b.n	8006cd2 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8006cc8:	bf00      	nop
 8006cca:	e002      	b.n	8006cd2 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 8006cd0:	bf00      	nop
    }
    return ret;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	24001afc 	.word	0x24001afc

08006ce0 <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b090      	sub	sp, #64	; 0x40
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	2238      	movs	r2, #56	; 0x38
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f00d fed9 	bl	8014aa8 <memset>
 8006cf6:	2390      	movs	r3, #144	; 0x90
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d12:	2302      	movs	r3, #2
 8006d14:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1e:	4619      	mov	r1, r3
 8006d20:	480c      	ldr	r0, [pc, #48]	; (8006d54 <QSPI_W25Q64JV_DeviceID+0x74>)
 8006d22:	f005 f8d5 	bl	800bed0 <HAL_QSPI_Command>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d30:	e00c      	b.n	8006d4c <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4806      	ldr	r0, [pc, #24]	; (8006d54 <QSPI_W25Q64JV_DeviceID+0x74>)
 8006d3a:	f005 f9b9 	bl	800c0b0 <HAL_QSPI_Receive>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d48:	e000      	b.n	8006d4c <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3740      	adds	r7, #64	; 0x40
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	24000728 	.word	0x24000728

08006d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006d5c:	f7ff fc8a 	bl	8006674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d64:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d68:	e002      	b.n	8006d70 <LoopCopyDataInit>

08006d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d6e:	3304      	adds	r3, #4

08006d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d74:	d3f9      	bcc.n	8006d6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d78:	4c0a      	ldr	r4, [pc, #40]	; (8006da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d7c:	e001      	b.n	8006d82 <LoopFillZerobss>

08006d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d80:	3204      	adds	r2, #4

08006d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d84:	d3fb      	bcc.n	8006d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d86:	f00d fef1 	bl	8014b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d8a:	f7f9 fc7f 	bl	800068c <main>
  bx  lr
 8006d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006d90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006d94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006d98:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8006d9c:	080158ac 	.word	0x080158ac
  ldr r2, =_sbss
 8006da0:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8006da4:	24002c4c 	.word	0x24002c4c

08006da8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006da8:	e7fe      	b.n	8006da8 <ADC3_IRQHandler>
	...

08006dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006db2:	2003      	movs	r0, #3
 8006db4:	f001 fce6 	bl	8008784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006db8:	f006 fa6a 	bl	800d290 <HAL_RCC_GetSysClockFreq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <HAL_Init+0x68>)
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	4913      	ldr	r1, [pc, #76]	; (8006e18 <HAL_Init+0x6c>)
 8006dca:	5ccb      	ldrb	r3, [r1, r3]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <HAL_Init+0x68>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	4a0e      	ldr	r2, [pc, #56]	; (8006e18 <HAL_Init+0x6c>)
 8006de0:	5cd3      	ldrb	r3, [r2, r3]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	4a0b      	ldr	r2, [pc, #44]	; (8006e1c <HAL_Init+0x70>)
 8006dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006df0:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <HAL_Init+0x74>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006df6:	200f      	movs	r0, #15
 8006df8:	f000 f814 	bl	8006e24 <HAL_InitTick>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e002      	b.n	8006e0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006e06:	f7fe fb5f 	bl	80054c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	58024400 	.word	0x58024400
 8006e18:	08015824 	.word	0x08015824
 8006e1c:	24000044 	.word	0x24000044
 8006e20:	24000040 	.word	0x24000040

08006e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006e2c:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <HAL_InitTick+0x60>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e021      	b.n	8006e7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006e38:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <HAL_InitTick+0x64>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <HAL_InitTick+0x60>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	4619      	mov	r1, r3
 8006e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f001 fccb 	bl	80087ea <HAL_SYSTICK_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e00e      	b.n	8006e7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d80a      	bhi.n	8006e7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e64:	2200      	movs	r2, #0
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e6c:	f001 fc95 	bl	800879a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e70:	4a06      	ldr	r2, [pc, #24]	; (8006e8c <HAL_InitTick+0x68>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	2400004c 	.word	0x2400004c
 8006e88:	24000040 	.word	0x24000040
 8006e8c:	24000048 	.word	0x24000048

08006e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <HAL_IncTick+0x20>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <HAL_IncTick+0x24>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <HAL_IncTick+0x24>)
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	2400004c 	.word	0x2400004c
 8006eb4:	24002afc 	.word	0x24002afc

08006eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return uwTick;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <HAL_GetTick+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	24002afc 	.word	0x24002afc

08006ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ed8:	f7ff ffee 	bl	8006eb8 <HAL_GetTick>
 8006edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee8:	d005      	beq.n	8006ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <HAL_Delay+0x44>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ef6:	bf00      	nop
 8006ef8:	f7ff ffde 	bl	8006eb8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d8f7      	bhi.n	8006ef8 <HAL_Delay+0x28>
  {
  }
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2400004c 	.word	0x2400004c

08006f18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006f1c:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <HAL_GetREVID+0x14>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	0c1b      	lsrs	r3, r3, #16
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	5c001000 	.word	0x5c001000

08006f30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	609a      	str	r2, [r3, #8]
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3360      	adds	r3, #96	; 0x60
 8006faa:	461a      	mov	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	611a      	str	r2, [r3, #16]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800700a:	b480      	push	{r7}
 800700c:	b087      	sub	sp, #28
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3360      	adds	r3, #96	; 0x60
 800701a:	461a      	mov	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	431a      	orrs	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	601a      	str	r2, [r3, #0]
  }
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007066:	b480      	push	{r7}
 8007068:	b087      	sub	sp, #28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3330      	adds	r3, #48	; 0x30
 8007076:	461a      	mov	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	4413      	add	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	211f      	movs	r1, #31
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	401a      	ands	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	0e9b      	lsrs	r3, r3, #26
 800709e:	f003 011f 	and.w	r1, r3, #31
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ac:	431a      	orrs	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3314      	adds	r3, #20
 80070f4:	461a      	mov	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	0e5b      	lsrs	r3, r3, #25
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	4413      	add	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	0d1b      	lsrs	r3, r3, #20
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2107      	movs	r1, #7
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	43db      	mvns	r3, r3
 8007118:	401a      	ands	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	0d1b      	lsrs	r3, r3, #20
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	fa01 f303 	lsl.w	r3, r1, r3
 8007128:	431a      	orrs	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007154:	43db      	mvns	r3, r3
 8007156:	401a      	ands	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f003 0318 	and.w	r3, r3, #24
 800715e:	4908      	ldr	r1, [pc, #32]	; (8007180 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007160:	40d9      	lsrs	r1, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	400b      	ands	r3, r1
 8007166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800716a:	431a      	orrs	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	000fffff 	.word	0x000fffff

08007184 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 031f 	and.w	r3, r3, #31
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6093      	str	r3, [r2, #8]
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	5fffffc0 	.word	0x5fffffc0

080071e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f4:	d101      	bne.n	80071fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <LL_ADC_EnableInternalRegulator+0x24>)
 8007216:	4013      	ands	r3, r2
 8007218:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	6fffffc0 	.word	0x6fffffc0

08007230 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007244:	d101      	bne.n	800724a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <LL_ADC_IsEnabled+0x18>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <LL_ADC_IsEnabled+0x1a>
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b04      	cmp	r3, #4
 8007290:	d101      	bne.n	8007296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d101      	bne.n	80072bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e000      	b.n	80072be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b089      	sub	sp, #36	; 0x24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80072d8:	2300      	movs	r3, #0
 80072da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e18f      	b.n	8007606 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fe f901 	bl	80054fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ff67 	bl	80071e0 <LL_ADC_IsDeepPowerDownEnabled>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ff4d 	bl	80071bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ff82 	bl	8007230 <LL_ADC_IsInternalRegulatorEnabled>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d114      	bne.n	800735c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ff66 	bl	8007208 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800733c:	4b87      	ldr	r3, [pc, #540]	; (800755c <HAL_ADC_Init+0x290>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	099b      	lsrs	r3, r3, #6
 8007342:	4a87      	ldr	r2, [pc, #540]	; (8007560 <HAL_ADC_Init+0x294>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	3301      	adds	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800734e:	e002      	b.n	8007356 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3b01      	subs	r3, #1
 8007354:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f9      	bne.n	8007350 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ff65 	bl	8007230 <LL_ADC_IsInternalRegulatorEnabled>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007370:	f043 0210 	orr.w	r2, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	f043 0201 	orr.w	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ff76 	bl	800727e <LL_ADC_REG_IsConversionOngoing>
 8007392:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8129 	bne.w	80075f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8125 	bne.w	80075f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80073b2:	f043 0202 	orr.w	r2, r3, #2
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff ff4a 	bl	8007258 <LL_ADC_IsEnabled>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d136      	bne.n	8007438 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a65      	ldr	r2, [pc, #404]	; (8007564 <HAL_ADC_Init+0x298>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_ADC_Init+0x112>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a63      	ldr	r2, [pc, #396]	; (8007568 <HAL_ADC_Init+0x29c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10e      	bne.n	80073fc <HAL_ADC_Init+0x130>
 80073de:	4861      	ldr	r0, [pc, #388]	; (8007564 <HAL_ADC_Init+0x298>)
 80073e0:	f7ff ff3a 	bl	8007258 <LL_ADC_IsEnabled>
 80073e4:	4604      	mov	r4, r0
 80073e6:	4860      	ldr	r0, [pc, #384]	; (8007568 <HAL_ADC_Init+0x29c>)
 80073e8:	f7ff ff36 	bl	8007258 <LL_ADC_IsEnabled>
 80073ec:	4603      	mov	r3, r0
 80073ee:	4323      	orrs	r3, r4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e008      	b.n	800740e <HAL_ADC_Init+0x142>
 80073fc:	485b      	ldr	r0, [pc, #364]	; (800756c <HAL_ADC_Init+0x2a0>)
 80073fe:	f7ff ff2b 	bl	8007258 <LL_ADC_IsEnabled>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d012      	beq.n	8007438 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a53      	ldr	r2, [pc, #332]	; (8007564 <HAL_ADC_Init+0x298>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_ADC_Init+0x15a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a51      	ldr	r2, [pc, #324]	; (8007568 <HAL_ADC_Init+0x29c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <HAL_ADC_Init+0x15e>
 8007426:	4a52      	ldr	r2, [pc, #328]	; (8007570 <HAL_ADC_Init+0x2a4>)
 8007428:	e000      	b.n	800742c <HAL_ADC_Init+0x160>
 800742a:	4a52      	ldr	r2, [pc, #328]	; (8007574 <HAL_ADC_Init+0x2a8>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f7ff fd7c 	bl	8006f30 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007438:	f7ff fd6e 	bl	8006f18 <HAL_GetREVID>
 800743c:	4603      	mov	r3, r0
 800743e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007442:	4293      	cmp	r3, r2
 8007444:	d914      	bls.n	8007470 <HAL_ADC_Init+0x1a4>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	2b10      	cmp	r3, #16
 800744c:	d110      	bne.n	8007470 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7d5b      	ldrb	r3, [r3, #21]
 8007452:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007458:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800745e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7f1b      	ldrb	r3, [r3, #28]
 8007464:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007466:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007468:	f043 030c 	orr.w	r3, r3, #12
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	e00d      	b.n	800748c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7d5b      	ldrb	r3, [r3, #21]
 8007474:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800747a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007480:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7f1b      	ldrb	r3, [r3, #28]
 8007486:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007488:	4313      	orrs	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7f1b      	ldrb	r3, [r3, #28]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	3b01      	subs	r3, #1
 800749a:	045b      	lsls	r3, r3, #17
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	4313      	orrs	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	4b2c      	ldr	r3, [pc, #176]	; (8007578 <HAL_ADC_Init+0x2ac>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	430b      	orrs	r3, r1
 80074d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff fed1 	bl	800727e <LL_ADC_REG_IsConversionOngoing>
 80074dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fede 	bl	80072a4 <LL_ADC_INJ_IsConversionOngoing>
 80074e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d15f      	bne.n	80075b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d15c      	bne.n	80075b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7d1b      	ldrb	r3, [r3, #20]
 80074fa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8007500:	4313      	orrs	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	4b1c      	ldr	r3, [pc, #112]	; (800757c <HAL_ADC_Init+0x2b0>)
 800750c:	4013      	ands	r3, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	430b      	orrs	r3, r1
 8007516:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800751e:	2b01      	cmp	r3, #1
 8007520:	d130      	bne.n	8007584 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <HAL_ADC_Init+0x2b4>)
 8007530:	4013      	ands	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007536:	3a01      	subs	r2, #1
 8007538:	0411      	lsls	r1, r2, #16
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800753e:	4311      	orrs	r1, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007544:	4311      	orrs	r1, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800754a:	430a      	orrs	r2, r1
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	611a      	str	r2, [r3, #16]
 8007558:	e01c      	b.n	8007594 <HAL_ADC_Init+0x2c8>
 800755a:	bf00      	nop
 800755c:	24000040 	.word	0x24000040
 8007560:	053e2d63 	.word	0x053e2d63
 8007564:	40022000 	.word	0x40022000
 8007568:	40022100 	.word	0x40022100
 800756c:	58026000 	.word	0x58026000
 8007570:	40022300 	.word	0x40022300
 8007574:	58026300 	.word	0x58026300
 8007578:	fff0c003 	.word	0xfff0c003
 800757c:	ffffbffc 	.word	0xffffbffc
 8007580:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0201 	bic.w	r2, r2, #1
 8007592:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fdd8 	bl	8008160 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10c      	bne.n	80075d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f023 010f 	bic.w	r1, r3, #15
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	1e5a      	subs	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
 80075d0:	e007      	b.n	80075e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 020f 	bic.w	r2, r2, #15
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
 80075f2:	e007      	b.n	8007604 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007604:	7ffb      	ldrb	r3, [r7, #31]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3724      	adds	r7, #36	; 0x24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}
 800760e:	bf00      	nop

08007610 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08a      	sub	sp, #40	; 0x28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007618:	2300      	movs	r3, #0
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a87      	ldr	r2, [pc, #540]	; (8007850 <HAL_ADC_IRQHandler+0x240>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_ADC_IRQHandler+0x30>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a86      	ldr	r2, [pc, #536]	; (8007854 <HAL_ADC_IRQHandler+0x244>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d101      	bne.n	8007644 <HAL_ADC_IRQHandler+0x34>
 8007640:	4b85      	ldr	r3, [pc, #532]	; (8007858 <HAL_ADC_IRQHandler+0x248>)
 8007642:	e000      	b.n	8007646 <HAL_ADC_IRQHandler+0x36>
 8007644:	4b85      	ldr	r3, [pc, #532]	; (800785c <HAL_ADC_IRQHandler+0x24c>)
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fd9c 	bl	8007184 <LL_ADC_GetMultimode>
 800764c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d017      	beq.n	8007688 <HAL_ADC_IRQHandler+0x78>
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d012      	beq.n	8007688 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 feca 	bl	8008414 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2202      	movs	r2, #2
 8007686:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <HAL_ADC_IRQHandler+0x8c>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 8083 	beq.w	80077ae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d07d      	beq.n	80077ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d105      	bne.n	80076ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fcb6 	bl	8007040 <LL_ADC_REG_IsTriggerSourceSWStart>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d062      	beq.n	80077a0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a5d      	ldr	r2, [pc, #372]	; (8007854 <HAL_ADC_IRQHandler+0x244>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d002      	beq.n	80076ea <HAL_ADC_IRQHandler+0xda>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	e000      	b.n	80076ec <HAL_ADC_IRQHandler+0xdc>
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <HAL_ADC_IRQHandler+0x240>)
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d008      	beq.n	8007706 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	d002      	beq.n	8007706 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b09      	cmp	r3, #9
 8007704:	d104      	bne.n	8007710 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	e00c      	b.n	800772a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a4f      	ldr	r2, [pc, #316]	; (8007854 <HAL_ADC_IRQHandler+0x244>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d002      	beq.n	8007720 <HAL_ADC_IRQHandler+0x110>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	e000      	b.n	8007722 <HAL_ADC_IRQHandler+0x112>
 8007720:	4b4b      	ldr	r3, [pc, #300]	; (8007850 <HAL_ADC_IRQHandler+0x240>)
 8007722:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d135      	bne.n	80077a0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b08      	cmp	r3, #8
 8007740:	d12e      	bne.n	80077a0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fd99 	bl	800727e <LL_ADC_REG_IsConversionOngoing>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11a      	bne.n	8007788 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 020c 	bic.w	r2, r2, #12
 8007760:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d112      	bne.n	80077a0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f043 0201 	orr.w	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
 8007786:	e00b      	b.n	80077a0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	f043 0210 	orr.w	r2, r3, #16
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007798:	f043 0201 	orr.w	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f96f 	bl	8007a84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	220c      	movs	r2, #12
 80077ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <HAL_ADC_IRQHandler+0x1b2>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a0 	beq.w	800790e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 809a 	beq.w	800790e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fc61 	bl	80070be <LL_ADC_INJ_IsTriggerSourceSWStart>
 80077fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fc1c 	bl	8007040 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007808:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a11      	ldr	r2, [pc, #68]	; (8007854 <HAL_ADC_IRQHandler+0x244>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d002      	beq.n	800781a <HAL_ADC_IRQHandler+0x20a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	e000      	b.n	800781c <HAL_ADC_IRQHandler+0x20c>
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <HAL_ADC_IRQHandler+0x240>)
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	4293      	cmp	r3, r2
 8007822:	d008      	beq.n	8007836 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b06      	cmp	r3, #6
 800782e:	d002      	beq.n	8007836 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b07      	cmp	r3, #7
 8007834:	d104      	bne.n	8007840 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	623b      	str	r3, [r7, #32]
 800783e:	e014      	b.n	800786a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a03      	ldr	r2, [pc, #12]	; (8007854 <HAL_ADC_IRQHandler+0x244>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00a      	beq.n	8007860 <HAL_ADC_IRQHandler+0x250>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	e008      	b.n	8007862 <HAL_ADC_IRQHandler+0x252>
 8007850:	40022000 	.word	0x40022000
 8007854:	40022100 	.word	0x40022100
 8007858:	40022300 	.word	0x40022300
 800785c:	58026300 	.word	0x58026300
 8007860:	4b84      	ldr	r3, [pc, #528]	; (8007a74 <HAL_ADC_IRQHandler+0x464>)
 8007862:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d047      	beq.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_ADC_IRQHandler+0x27a>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d03f      	beq.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007886:	2b00      	cmp	r3, #0
 8007888:	d13a      	bne.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	d133      	bne.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d12e      	bne.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fcfc 	bl	80072a4 <LL_ADC_INJ_IsConversionOngoing>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11a      	bne.n	80078e8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d112      	bne.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54
 80078e6:	e00b      	b.n	8007900 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f043 0210 	orr.w	r2, r3, #16
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f043 0201 	orr.w	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fd5f 	bl	80083c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2260      	movs	r2, #96	; 0x60
 800790c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d011      	beq.n	800793c <HAL_ADC_IRQHandler+0x32c>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f8b2 	bl	8007a98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2280      	movs	r2, #128	; 0x80
 800793a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d012      	beq.n	800796c <HAL_ADC_IRQHandler+0x35c>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fd45 	bl	80083ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <HAL_ADC_IRQHandler+0x38c>
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fd37 	bl	8008400 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800799a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d043      	beq.n	8007a2e <HAL_ADC_IRQHandler+0x41e>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d03e      	beq.n	8007a2e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80079b8:	2301      	movs	r3, #1
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
 80079bc:	e021      	b.n	8007a02 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2a      	ldr	r2, [pc, #168]	; (8007a74 <HAL_ADC_IRQHandler+0x464>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_ADC_IRQHandler+0x3c8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a29      	ldr	r2, [pc, #164]	; (8007a78 <HAL_ADC_IRQHandler+0x468>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d101      	bne.n	80079dc <HAL_ADC_IRQHandler+0x3cc>
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <HAL_ADC_IRQHandler+0x46c>)
 80079da:	e000      	b.n	80079de <HAL_ADC_IRQHandler+0x3ce>
 80079dc:	4b28      	ldr	r3, [pc, #160]	; (8007a80 <HAL_ADC_IRQHandler+0x470>)
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff fbde 	bl	80071a0 <LL_ADC_GetMultiDMATransfer>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80079ea:	2301      	movs	r3, #1
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
 80079ee:	e008      	b.n	8007a02 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80079fe:	2301      	movs	r3, #1
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10e      	bne.n	8007a26 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	f043 0202 	orr.w	r2, r3, #2
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f843 	bl	8007aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d018      	beq.n	8007a6a <HAL_ADC_IRQHandler+0x45a>
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d013      	beq.n	8007a6a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	f043 0208 	orr.w	r2, r3, #8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fcb7 	bl	80083d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007a6a:	bf00      	nop
 8007a6c:	3728      	adds	r7, #40	; 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40022000 	.word	0x40022000
 8007a78:	40022100 	.word	0x40022100
 8007a7c:	40022300 	.word	0x40022300
 8007a80:	58026300 	.word	0x58026300

08007a84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b0a1      	sub	sp, #132	; 0x84
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a9d      	ldr	r2, [pc, #628]	; (8007d50 <HAL_ADC_ConfigChannel+0x290>)
 8007ada:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_ADC_ConfigChannel+0x2a>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e321      	b.n	800812e <HAL_ADC_ConfigChannel+0x66e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fbc1 	bl	800727e <LL_ADC_REG_IsConversionOngoing>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 8306 	bne.w	8008110 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d108      	bne.n	8007b22 <HAL_ADC_ConfigChannel+0x62>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	0e9b      	lsrs	r3, r3, #26
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	e016      	b.n	8007b50 <HAL_ADC_ConfigChannel+0x90>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b2a:	fa93 f3a3 	rbit	r3, r3
 8007b2e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b32:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8007b3a:	2320      	movs	r3, #32
 8007b3c:	e003      	b.n	8007b46 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8007b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b40:	fab3 f383 	clz	r3, r3
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	69d1      	ldr	r1, [r2, #28]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6859      	ldr	r1, [r3, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f7ff fa7b 	bl	8007066 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fb82 	bl	800727e <LL_ADC_REG_IsConversionOngoing>
 8007b7a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fb8f 	bl	80072a4 <LL_ADC_INJ_IsConversionOngoing>
 8007b86:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80b3 	bne.w	8007cf6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 80af 	bne.w	8007cf6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f7ff fa9d 	bl	80070e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007baa:	4b6a      	ldr	r3, [pc, #424]	; (8007d54 <HAL_ADC_ConfigChannel+0x294>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb6:	d10b      	bne.n	8007bd0 <HAL_ADC_ConfigChannel+0x110>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	e01d      	b.n	8007c0c <HAL_ADC_ConfigChannel+0x14c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10b      	bne.n	8007bf6 <HAL_ADC_ConfigChannel+0x136>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	e00a      	b.n	8007c0c <HAL_ADC_ConfigChannel+0x14c>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	089b      	lsrs	r3, r3, #2
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d027      	beq.n	8007c66 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6919      	ldr	r1, [r3, #16]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c24:	f7ff f9b8 	bl	8006f98 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6919      	ldr	r1, [r3, #16]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	7e5b      	ldrb	r3, [r3, #25]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <HAL_ADC_ConfigChannel+0x17e>
 8007c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c3c:	e000      	b.n	8007c40 <HAL_ADC_ConfigChannel+0x180>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	461a      	mov	r2, r3
 8007c42:	f7ff f9e2 	bl	800700a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	7e1b      	ldrb	r3, [r3, #24]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d102      	bne.n	8007c5c <HAL_ADC_ConfigChannel+0x19c>
 8007c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c5a:	e000      	b.n	8007c5e <HAL_ADC_ConfigChannel+0x19e>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7ff f9ba 	bl	8006fd8 <LL_ADC_SetDataRightShift>
 8007c64:	e047      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	069b      	lsls	r3, r3, #26
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d107      	bne.n	8007c8a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007c88:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	069b      	lsls	r3, r3, #26
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d107      	bne.n	8007cae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007cac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	069b      	lsls	r3, r3, #26
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d107      	bne.n	8007cd2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007cd0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	069b      	lsls	r3, r3, #26
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d107      	bne.n	8007cf6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007cf4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff faac 	bl	8007258 <LL_ADC_IsEnabled>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f040 820d 	bne.w	8008122 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	461a      	mov	r2, r3
 8007d16:	f7ff fa11 	bl	800713c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	4a0c      	ldr	r2, [pc, #48]	; (8007d50 <HAL_ADC_ConfigChannel+0x290>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	f040 8133 	bne.w	8007f8c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d110      	bne.n	8007d58 <HAL_ADC_ConfigChannel+0x298>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	0e9b      	lsrs	r3, r3, #26
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b09      	cmp	r3, #9
 8007d44:	bf94      	ite	ls
 8007d46:	2301      	movls	r3, #1
 8007d48:	2300      	movhi	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	e01e      	b.n	8007d8c <HAL_ADC_ConfigChannel+0x2cc>
 8007d4e:	bf00      	nop
 8007d50:	47ff0000 	.word	0x47ff0000
 8007d54:	5c001000 	.word	0x5c001000
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d60:	fa93 f3a3 	rbit	r3, r3
 8007d64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8007d70:	2320      	movs	r3, #32
 8007d72:	e003      	b.n	8007d7c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d76:	fab3 f383 	clz	r3, r3
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	f003 031f 	and.w	r3, r3, #31
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	bf94      	ite	ls
 8007d86:	2301      	movls	r3, #1
 8007d88:	2300      	movhi	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d079      	beq.n	8007e84 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d107      	bne.n	8007dac <HAL_ADC_ConfigChannel+0x2ec>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	0e9b      	lsrs	r3, r3, #26
 8007da2:	3301      	adds	r3, #1
 8007da4:	069b      	lsls	r3, r3, #26
 8007da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007daa:	e015      	b.n	8007dd8 <HAL_ADC_ConfigChannel+0x318>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db4:	fa93 f3a3 	rbit	r3, r3
 8007db8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	e003      	b.n	8007dd0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dca:	fab3 f383 	clz	r3, r3
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	069b      	lsls	r3, r3, #26
 8007dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_ADC_ConfigChannel+0x338>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	0e9b      	lsrs	r3, r3, #26
 8007dea:	3301      	adds	r3, #1
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2101      	movs	r1, #1
 8007df2:	fa01 f303 	lsl.w	r3, r1, r3
 8007df6:	e017      	b.n	8007e28 <HAL_ADC_ConfigChannel+0x368>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e00:	fa93 f3a3 	rbit	r3, r3
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8007e10:	2320      	movs	r3, #32
 8007e12:	e003      	b.n	8007e1c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8007e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e16:	fab3 f383 	clz	r3, r3
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2101      	movs	r1, #1
 8007e24:	fa01 f303 	lsl.w	r3, r1, r3
 8007e28:	ea42 0103 	orr.w	r1, r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x38e>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	0e9b      	lsrs	r3, r3, #26
 8007e3e:	3301      	adds	r3, #1
 8007e40:	f003 021f 	and.w	r2, r3, #31
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	051b      	lsls	r3, r3, #20
 8007e4c:	e018      	b.n	8007e80 <HAL_ADC_ConfigChannel+0x3c0>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	fa93 f3a3 	rbit	r3, r3
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8007e66:	2320      	movs	r3, #32
 8007e68:	e003      	b.n	8007e72 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	fab3 f383 	clz	r3, r3
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	3301      	adds	r3, #1
 8007e74:	f003 021f 	and.w	r2, r3, #31
 8007e78:	4613      	mov	r3, r2
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	4413      	add	r3, r2
 8007e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e80:	430b      	orrs	r3, r1
 8007e82:	e07e      	b.n	8007f82 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d107      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x3e0>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	0e9b      	lsrs	r3, r3, #26
 8007e96:	3301      	adds	r3, #1
 8007e98:	069b      	lsls	r3, r3, #26
 8007e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e9e:	e015      	b.n	8007ecc <HAL_ADC_ConfigChannel+0x40c>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	fa93 f3a3 	rbit	r3, r3
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007eb8:	2320      	movs	r3, #32
 8007eba:	e003      	b.n	8007ec4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	fab3 f383 	clz	r3, r3
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	069b      	lsls	r3, r3, #26
 8007ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_ADC_ConfigChannel+0x42c>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	0e9b      	lsrs	r3, r3, #26
 8007ede:	3301      	adds	r3, #1
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eea:	e017      	b.n	8007f1c <HAL_ADC_ConfigChannel+0x45c>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	fa93 f3a3 	rbit	r3, r3
 8007ef8:	61bb      	str	r3, [r7, #24]
  return result;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8007f04:	2320      	movs	r3, #32
 8007f06:	e003      	b.n	8007f10 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	fab3 f383 	clz	r3, r3
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	3301      	adds	r3, #1
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2101      	movs	r1, #1
 8007f18:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1c:	ea42 0103 	orr.w	r1, r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10d      	bne.n	8007f48 <HAL_ADC_ConfigChannel+0x488>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	0e9b      	lsrs	r3, r3, #26
 8007f32:	3301      	adds	r3, #1
 8007f34:	f003 021f 	and.w	r2, r3, #31
 8007f38:	4613      	mov	r3, r2
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3b1e      	subs	r3, #30
 8007f40:	051b      	lsls	r3, r3, #20
 8007f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f46:	e01b      	b.n	8007f80 <HAL_ADC_ConfigChannel+0x4c0>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	fa93 f3a3 	rbit	r3, r3
 8007f54:	60fb      	str	r3, [r7, #12]
  return result;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8007f60:	2320      	movs	r3, #32
 8007f62:	e003      	b.n	8007f6c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	fab3 f383 	clz	r3, r3
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f003 021f 	and.w	r2, r3, #31
 8007f72:	4613      	mov	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	3b1e      	subs	r3, #30
 8007f7a:	051b      	lsls	r3, r3, #20
 8007f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f80:	430b      	orrs	r3, r1
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	6892      	ldr	r2, [r2, #8]
 8007f86:	4619      	mov	r1, r3
 8007f88:	f7ff f8ac 	bl	80070e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f280 80c6 	bge.w	8008122 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a67      	ldr	r2, [pc, #412]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <HAL_ADC_ConfigChannel+0x4ea>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a65      	ldr	r2, [pc, #404]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d101      	bne.n	8007fae <HAL_ADC_ConfigChannel+0x4ee>
 8007faa:	4b65      	ldr	r3, [pc, #404]	; (8008140 <HAL_ADC_ConfigChannel+0x680>)
 8007fac:	e000      	b.n	8007fb0 <HAL_ADC_ConfigChannel+0x4f0>
 8007fae:	4b65      	ldr	r3, [pc, #404]	; (8008144 <HAL_ADC_ConfigChannel+0x684>)
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe ffe3 	bl	8006f7c <LL_ADC_GetCommonPathInternalCh>
 8007fb6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a5e      	ldr	r2, [pc, #376]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <HAL_ADC_ConfigChannel+0x50c>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a5d      	ldr	r2, [pc, #372]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10e      	bne.n	8007fea <HAL_ADC_ConfigChannel+0x52a>
 8007fcc:	485a      	ldr	r0, [pc, #360]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 8007fce:	f7ff f943 	bl	8007258 <LL_ADC_IsEnabled>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4859      	ldr	r0, [pc, #356]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 8007fd6:	f7ff f93f 	bl	8007258 <LL_ADC_IsEnabled>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4323      	orrs	r3, r4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf0c      	ite	eq
 8007fe2:	2301      	moveq	r3, #1
 8007fe4:	2300      	movne	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e008      	b.n	8007ffc <HAL_ADC_ConfigChannel+0x53c>
 8007fea:	4857      	ldr	r0, [pc, #348]	; (8008148 <HAL_ADC_ConfigChannel+0x688>)
 8007fec:	f7ff f934 	bl	8007258 <LL_ADC_IsEnabled>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d07d      	beq.n	80080fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a51      	ldr	r2, [pc, #324]	; (800814c <HAL_ADC_ConfigChannel+0x68c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d130      	bne.n	800806c <HAL_ADC_ConfigChannel+0x5ac>
 800800a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d12b      	bne.n	800806c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a4b      	ldr	r2, [pc, #300]	; (8008148 <HAL_ADC_ConfigChannel+0x688>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f040 8081 	bne.w	8008122 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a44      	ldr	r2, [pc, #272]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_ADC_ConfigChannel+0x574>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a43      	ldr	r2, [pc, #268]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d101      	bne.n	8008038 <HAL_ADC_ConfigChannel+0x578>
 8008034:	4a42      	ldr	r2, [pc, #264]	; (8008140 <HAL_ADC_ConfigChannel+0x680>)
 8008036:	e000      	b.n	800803a <HAL_ADC_ConfigChannel+0x57a>
 8008038:	4a42      	ldr	r2, [pc, #264]	; (8008144 <HAL_ADC_ConfigChannel+0x684>)
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fe ff87 	bl	8006f56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008048:	4b41      	ldr	r3, [pc, #260]	; (8008150 <HAL_ADC_ConfigChannel+0x690>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	099b      	lsrs	r3, r3, #6
 800804e:	4a41      	ldr	r2, [pc, #260]	; (8008154 <HAL_ADC_ConfigChannel+0x694>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	099b      	lsrs	r3, r3, #6
 8008056:	3301      	adds	r3, #1
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800805c:	e002      	b.n	8008064 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3b01      	subs	r3, #1
 8008062:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f9      	bne.n	800805e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800806a:	e05a      	b.n	8008122 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a39      	ldr	r2, [pc, #228]	; (8008158 <HAL_ADC_ConfigChannel+0x698>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d11e      	bne.n	80080b4 <HAL_ADC_ConfigChannel+0x5f4>
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d119      	bne.n	80080b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a30      	ldr	r2, [pc, #192]	; (8008148 <HAL_ADC_ConfigChannel+0x688>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d14b      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a2a      	ldr	r2, [pc, #168]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_ADC_ConfigChannel+0x5de>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a28      	ldr	r2, [pc, #160]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d101      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x5e2>
 800809e:	4a28      	ldr	r2, [pc, #160]	; (8008140 <HAL_ADC_ConfigChannel+0x680>)
 80080a0:	e000      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x5e4>
 80080a2:	4a28      	ldr	r2, [pc, #160]	; (8008144 <HAL_ADC_ConfigChannel+0x684>)
 80080a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7fe ff52 	bl	8006f56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80080b2:	e036      	b.n	8008122 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a28      	ldr	r2, [pc, #160]	; (800815c <HAL_ADC_ConfigChannel+0x69c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d131      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x662>
 80080be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d12c      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <HAL_ADC_ConfigChannel+0x688>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d127      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <HAL_ADC_ConfigChannel+0x678>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_ADC_ConfigChannel+0x626>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a16      	ldr	r2, [pc, #88]	; (800813c <HAL_ADC_ConfigChannel+0x67c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d101      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x62a>
 80080e6:	4a16      	ldr	r2, [pc, #88]	; (8008140 <HAL_ADC_ConfigChannel+0x680>)
 80080e8:	e000      	b.n	80080ec <HAL_ADC_ConfigChannel+0x62c>
 80080ea:	4a16      	ldr	r2, [pc, #88]	; (8008144 <HAL_ADC_ConfigChannel+0x684>)
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe ff2e 	bl	8006f56 <LL_ADC_SetCommonPathInternalCh>
 80080fa:	e012      	b.n	8008122 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	f043 0220 	orr.w	r2, r3, #32
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800810e:	e008      	b.n	8008122 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008114:	f043 0220 	orr.w	r2, r3, #32
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800812a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800812e:	4618      	mov	r0, r3
 8008130:	3784      	adds	r7, #132	; 0x84
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	40022000 	.word	0x40022000
 800813c:	40022100 	.word	0x40022100
 8008140:	40022300 	.word	0x40022300
 8008144:	58026300 	.word	0x58026300
 8008148:	58026000 	.word	0x58026000
 800814c:	cb840000 	.word	0xcb840000
 8008150:	24000040 	.word	0x24000040
 8008154:	053e2d63 	.word	0x053e2d63
 8008158:	c7520000 	.word	0xc7520000
 800815c:	cfb80000 	.word	0xcfb80000

08008160 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a7a      	ldr	r2, [pc, #488]	; (8008358 <ADC_ConfigureBoostMode+0x1f8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <ADC_ConfigureBoostMode+0x1c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a79      	ldr	r2, [pc, #484]	; (800835c <ADC_ConfigureBoostMode+0x1fc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d109      	bne.n	8008190 <ADC_ConfigureBoostMode+0x30>
 800817c:	4b78      	ldr	r3, [pc, #480]	; (8008360 <ADC_ConfigureBoostMode+0x200>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008184:	2b00      	cmp	r3, #0
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e008      	b.n	80081a2 <ADC_ConfigureBoostMode+0x42>
 8008190:	4b74      	ldr	r3, [pc, #464]	; (8008364 <ADC_ConfigureBoostMode+0x204>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008198:	2b00      	cmp	r3, #0
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01c      	beq.n	80081e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80081a6:	f005 f9ed 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 80081aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081b4:	d010      	beq.n	80081d8 <ADC_ConfigureBoostMode+0x78>
 80081b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081ba:	d873      	bhi.n	80082a4 <ADC_ConfigureBoostMode+0x144>
 80081bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c0:	d002      	beq.n	80081c8 <ADC_ConfigureBoostMode+0x68>
 80081c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c6:	d16d      	bne.n	80082a4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	60fb      	str	r3, [r7, #12]
        break;
 80081d6:	e068      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	089b      	lsrs	r3, r3, #2
 80081dc:	60fb      	str	r3, [r7, #12]
        break;
 80081de:	e064      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80081e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80081e4:	f04f 0100 	mov.w	r1, #0
 80081e8:	f006 fc32 	bl	800ea50 <HAL_RCCEx_GetPeriphCLKFreq>
 80081ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80081f6:	d051      	beq.n	800829c <ADC_ConfigureBoostMode+0x13c>
 80081f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80081fc:	d854      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 80081fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008202:	d047      	beq.n	8008294 <ADC_ConfigureBoostMode+0x134>
 8008204:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008208:	d84e      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 800820a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800820e:	d03d      	beq.n	800828c <ADC_ConfigureBoostMode+0x12c>
 8008210:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008214:	d848      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 8008216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800821a:	d033      	beq.n	8008284 <ADC_ConfigureBoostMode+0x124>
 800821c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008220:	d842      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 8008222:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008226:	d029      	beq.n	800827c <ADC_ConfigureBoostMode+0x11c>
 8008228:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800822c:	d83c      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 800822e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008232:	d01a      	beq.n	800826a <ADC_ConfigureBoostMode+0x10a>
 8008234:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008238:	d836      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 800823a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800823e:	d014      	beq.n	800826a <ADC_ConfigureBoostMode+0x10a>
 8008240:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008244:	d830      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 8008246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824a:	d00e      	beq.n	800826a <ADC_ConfigureBoostMode+0x10a>
 800824c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008250:	d82a      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 8008252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008256:	d008      	beq.n	800826a <ADC_ConfigureBoostMode+0x10a>
 8008258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800825c:	d824      	bhi.n	80082a8 <ADC_ConfigureBoostMode+0x148>
 800825e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008262:	d002      	beq.n	800826a <ADC_ConfigureBoostMode+0x10a>
 8008264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008268:	d11e      	bne.n	80082a8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	0c9b      	lsrs	r3, r3, #18
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	fbb2 f3f3 	udiv	r3, r2, r3
 8008278:	60fb      	str	r3, [r7, #12]
        break;
 800827a:	e016      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	60fb      	str	r3, [r7, #12]
        break;
 8008282:	e012      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	60fb      	str	r3, [r7, #12]
        break;
 800828a:	e00e      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	099b      	lsrs	r3, r3, #6
 8008290:	60fb      	str	r3, [r7, #12]
        break;
 8008292:	e00a      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	09db      	lsrs	r3, r3, #7
 8008298:	60fb      	str	r3, [r7, #12]
        break;
 800829a:	e006      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	60fb      	str	r3, [r7, #12]
        break;
 80082a2:	e002      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
        break;
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80082a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80082aa:	f7fe fe35 	bl	8006f18 <HAL_GetREVID>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d815      	bhi.n	80082e4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <ADC_ConfigureBoostMode+0x208>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d908      	bls.n	80082d2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80082d0:	e03e      	b.n	8008350 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e0:	609a      	str	r2, [r3, #8]
}
 80082e2:	e035      	b.n	8008350 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a1f      	ldr	r2, [pc, #124]	; (800836c <ADC_ConfigureBoostMode+0x20c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d808      	bhi.n	8008304 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008300:	609a      	str	r2, [r3, #8]
}
 8008302:	e025      	b.n	8008350 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <ADC_ConfigureBoostMode+0x210>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d80a      	bhi.n	8008322 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800831e:	609a      	str	r2, [r3, #8]
}
 8008320:	e016      	b.n	8008350 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <ADC_ConfigureBoostMode+0x214>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d80a      	bhi.n	8008340 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800833c:	609a      	str	r2, [r3, #8]
}
 800833e:	e007      	b.n	8008350 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800834e:	609a      	str	r2, [r3, #8]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40022000 	.word	0x40022000
 800835c:	40022100 	.word	0x40022100
 8008360:	40022300 	.word	0x40022300
 8008364:	58026300 	.word	0x58026300
 8008368:	01312d00 	.word	0x01312d00
 800836c:	005f5e10 	.word	0x005f5e10
 8008370:	00bebc20 	.word	0x00bebc20
 8008374:	017d7840 	.word	0x017d7840

08008378 <LL_ADC_IsEnabled>:
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <LL_ADC_IsEnabled+0x18>
 800838c:	2301      	movs	r3, #1
 800838e:	e000      	b.n	8008392 <LL_ADC_IsEnabled+0x1a>
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <LL_ADC_REG_IsConversionOngoing>:
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d101      	bne.n	80083b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b09f      	sub	sp, #124	; 0x7c
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008442:	2302      	movs	r3, #2
 8008444:	e0be      	b.n	80085c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800844e:	2300      	movs	r3, #0
 8008450:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
 8008454:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a5c      	ldr	r2, [pc, #368]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d102      	bne.n	8008466 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008460:	4b5b      	ldr	r3, [pc, #364]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	e001      	b.n	800846a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008474:	f043 0220 	orr.w	r2, r3, #32
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e09d      	b.n	80085c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff ff87 	bl	800839e <LL_ADC_REG_IsConversionOngoing>
 8008490:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff ff81 	bl	800839e <LL_ADC_REG_IsConversionOngoing>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d17f      	bne.n	80085a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80084a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d17c      	bne.n	80085a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a47      	ldr	r2, [pc, #284]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d004      	beq.n	80084bc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a46      	ldr	r2, [pc, #280]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d101      	bne.n	80084c0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80084be:	e000      	b.n	80084c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80084c0:	4b45      	ldr	r3, [pc, #276]	; (80085d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80084c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d039      	beq.n	8008540 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	431a      	orrs	r2, r3
 80084da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a3a      	ldr	r2, [pc, #232]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a38      	ldr	r2, [pc, #224]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10e      	bne.n	8008510 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80084f2:	4836      	ldr	r0, [pc, #216]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80084f4:	f7ff ff40 	bl	8008378 <LL_ADC_IsEnabled>
 80084f8:	4604      	mov	r4, r0
 80084fa:	4835      	ldr	r0, [pc, #212]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80084fc:	f7ff ff3c 	bl	8008378 <LL_ADC_IsEnabled>
 8008500:	4603      	mov	r3, r0
 8008502:	4323      	orrs	r3, r4
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e008      	b.n	8008522 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008510:	4832      	ldr	r0, [pc, #200]	; (80085dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008512:	f7ff ff31 	bl	8008378 <LL_ADC_IsEnabled>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf0c      	ite	eq
 800851c:	2301      	moveq	r3, #1
 800851e:	2300      	movne	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d047      	beq.n	80085b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800852c:	4013      	ands	r3, r2
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	6892      	ldr	r2, [r2, #8]
 8008536:	430a      	orrs	r2, r1
 8008538:	431a      	orrs	r2, r3
 800853a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800853e:	e03a      	b.n	80085b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1e      	ldr	r2, [pc, #120]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10e      	bne.n	800857e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008560:	481a      	ldr	r0, [pc, #104]	; (80085cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008562:	f7ff ff09 	bl	8008378 <LL_ADC_IsEnabled>
 8008566:	4604      	mov	r4, r0
 8008568:	4819      	ldr	r0, [pc, #100]	; (80085d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800856a:	f7ff ff05 	bl	8008378 <LL_ADC_IsEnabled>
 800856e:	4603      	mov	r3, r0
 8008570:	4323      	orrs	r3, r4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf0c      	ite	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	2300      	movne	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	e008      	b.n	8008590 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800857e:	4817      	ldr	r0, [pc, #92]	; (80085dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008580:	f7ff fefa 	bl	8008378 <LL_ADC_IsEnabled>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	bf0c      	ite	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	2300      	movne	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d010      	beq.n	80085b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800859a:	4013      	ands	r3, r2
 800859c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800859e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80085a0:	e009      	b.n	80085b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	f043 0220 	orr.w	r2, r3, #32
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80085b4:	e000      	b.n	80085b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80085b6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80085c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	377c      	adds	r7, #124	; 0x7c
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd90      	pop	{r4, r7, pc}
 80085cc:	40022000 	.word	0x40022000
 80085d0:	40022100 	.word	0x40022100
 80085d4:	40022300 	.word	0x40022300
 80085d8:	58026300 	.word	0x58026300
 80085dc:	58026000 	.word	0x58026000
 80085e0:	fffff0e0 	.word	0xfffff0e0

080085e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <__NVIC_SetPriorityGrouping+0x40>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008600:	4013      	ands	r3, r2
 8008602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <__NVIC_SetPriorityGrouping+0x44>)
 800860e:	4313      	orrs	r3, r2
 8008610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008612:	4a04      	ldr	r2, [pc, #16]	; (8008624 <__NVIC_SetPriorityGrouping+0x40>)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	60d3      	str	r3, [r2, #12]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	e000ed00 	.word	0xe000ed00
 8008628:	05fa0000 	.word	0x05fa0000

0800862c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <__NVIC_GetPriorityGrouping+0x18>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	f003 0307 	and.w	r3, r3, #7
}
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	e000ed00 	.word	0xe000ed00

08008648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008656:	2b00      	cmp	r3, #0
 8008658:	db0b      	blt.n	8008672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	f003 021f 	and.w	r2, r3, #31
 8008660:	4907      	ldr	r1, [pc, #28]	; (8008680 <__NVIC_EnableIRQ+0x38>)
 8008662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	2001      	movs	r0, #1
 800866a:	fa00 f202 	lsl.w	r2, r0, r2
 800866e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	e000e100 	.word	0xe000e100

08008684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008694:	2b00      	cmp	r3, #0
 8008696:	db0a      	blt.n	80086ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	490c      	ldr	r1, [pc, #48]	; (80086d0 <__NVIC_SetPriority+0x4c>)
 800869e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086a2:	0112      	lsls	r2, r2, #4
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	440b      	add	r3, r1
 80086a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086ac:	e00a      	b.n	80086c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	4908      	ldr	r1, [pc, #32]	; (80086d4 <__NVIC_SetPriority+0x50>)
 80086b4:	88fb      	ldrh	r3, [r7, #6]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	3b04      	subs	r3, #4
 80086bc:	0112      	lsls	r2, r2, #4
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	440b      	add	r3, r1
 80086c2:	761a      	strb	r2, [r3, #24]
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	e000e100 	.word	0xe000e100
 80086d4:	e000ed00 	.word	0xe000ed00

080086d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086d8:	b480      	push	{r7}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f1c3 0307 	rsb	r3, r3, #7
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	bf28      	it	cs
 80086f6:	2304      	movcs	r3, #4
 80086f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	3304      	adds	r3, #4
 80086fe:	2b06      	cmp	r3, #6
 8008700:	d902      	bls.n	8008708 <NVIC_EncodePriority+0x30>
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	3b03      	subs	r3, #3
 8008706:	e000      	b.n	800870a <NVIC_EncodePriority+0x32>
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800870c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	43da      	mvns	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	401a      	ands	r2, r3
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	fa01 f303 	lsl.w	r3, r1, r3
 800872a:	43d9      	mvns	r1, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008730:	4313      	orrs	r3, r2
         );
}
 8008732:	4618      	mov	r0, r3
 8008734:	3724      	adds	r7, #36	; 0x24
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3b01      	subs	r3, #1
 800874c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008750:	d301      	bcc.n	8008756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008752:	2301      	movs	r3, #1
 8008754:	e00f      	b.n	8008776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008756:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <SysTick_Config+0x40>)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3b01      	subs	r3, #1
 800875c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800875e:	210f      	movs	r1, #15
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	f7ff ff8e 	bl	8008684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <SysTick_Config+0x40>)
 800876a:	2200      	movs	r2, #0
 800876c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800876e:	4b04      	ldr	r3, [pc, #16]	; (8008780 <SysTick_Config+0x40>)
 8008770:	2207      	movs	r2, #7
 8008772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000e010 	.word	0xe000e010

08008784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff29 	bl	80085e4 <__NVIC_SetPriorityGrouping>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b086      	sub	sp, #24
 800879e:	af00      	add	r7, sp, #0
 80087a0:	4603      	mov	r3, r0
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80087a8:	f7ff ff40 	bl	800862c <__NVIC_GetPriorityGrouping>
 80087ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	6978      	ldr	r0, [r7, #20]
 80087b4:	f7ff ff90 	bl	80086d8 <NVIC_EncodePriority>
 80087b8:	4602      	mov	r2, r0
 80087ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff ff5f 	bl	8008684 <__NVIC_SetPriority>
}
 80087c6:	bf00      	nop
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	4603      	mov	r3, r0
 80087d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80087d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff ff33 	bl	8008648 <__NVIC_EnableIRQ>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff ffa4 	bl	8008740 <SysTick_Config>
 80087f8:	4603      	mov	r3, r0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800880c:	f7fe fb54 	bl	8006eb8 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e316      	b.n	8008e4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a66      	ldr	r2, [pc, #408]	; (80089bc <HAL_DMA_Init+0x1b8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d04a      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a65      	ldr	r2, [pc, #404]	; (80089c0 <HAL_DMA_Init+0x1bc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d045      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a63      	ldr	r2, [pc, #396]	; (80089c4 <HAL_DMA_Init+0x1c0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d040      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a62      	ldr	r2, [pc, #392]	; (80089c8 <HAL_DMA_Init+0x1c4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d03b      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a60      	ldr	r2, [pc, #384]	; (80089cc <HAL_DMA_Init+0x1c8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d036      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a5f      	ldr	r2, [pc, #380]	; (80089d0 <HAL_DMA_Init+0x1cc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d031      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a5d      	ldr	r2, [pc, #372]	; (80089d4 <HAL_DMA_Init+0x1d0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d02c      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a5c      	ldr	r2, [pc, #368]	; (80089d8 <HAL_DMA_Init+0x1d4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d027      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a5a      	ldr	r2, [pc, #360]	; (80089dc <HAL_DMA_Init+0x1d8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a59      	ldr	r2, [pc, #356]	; (80089e0 <HAL_DMA_Init+0x1dc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d01d      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a57      	ldr	r2, [pc, #348]	; (80089e4 <HAL_DMA_Init+0x1e0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a56      	ldr	r2, [pc, #344]	; (80089e8 <HAL_DMA_Init+0x1e4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a54      	ldr	r2, [pc, #336]	; (80089ec <HAL_DMA_Init+0x1e8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a53      	ldr	r2, [pc, #332]	; (80089f0 <HAL_DMA_Init+0x1ec>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a51      	ldr	r2, [pc, #324]	; (80089f4 <HAL_DMA_Init+0x1f0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_DMA_Init+0xb8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a50      	ldr	r2, [pc, #320]	; (80089f8 <HAL_DMA_Init+0x1f4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d101      	bne.n	80088c0 <HAL_DMA_Init+0xbc>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_DMA_Init+0xbe>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 813b 	beq.w	8008b3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a37      	ldr	r2, [pc, #220]	; (80089bc <HAL_DMA_Init+0x1b8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d04a      	beq.n	8008978 <HAL_DMA_Init+0x174>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a36      	ldr	r2, [pc, #216]	; (80089c0 <HAL_DMA_Init+0x1bc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d045      	beq.n	8008978 <HAL_DMA_Init+0x174>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a34      	ldr	r2, [pc, #208]	; (80089c4 <HAL_DMA_Init+0x1c0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d040      	beq.n	8008978 <HAL_DMA_Init+0x174>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a33      	ldr	r2, [pc, #204]	; (80089c8 <HAL_DMA_Init+0x1c4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d03b      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a31      	ldr	r2, [pc, #196]	; (80089cc <HAL_DMA_Init+0x1c8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d036      	beq.n	8008978 <HAL_DMA_Init+0x174>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a30      	ldr	r2, [pc, #192]	; (80089d0 <HAL_DMA_Init+0x1cc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d031      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a2e      	ldr	r2, [pc, #184]	; (80089d4 <HAL_DMA_Init+0x1d0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d02c      	beq.n	8008978 <HAL_DMA_Init+0x174>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a2d      	ldr	r2, [pc, #180]	; (80089d8 <HAL_DMA_Init+0x1d4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d027      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2b      	ldr	r2, [pc, #172]	; (80089dc <HAL_DMA_Init+0x1d8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d022      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2a      	ldr	r2, [pc, #168]	; (80089e0 <HAL_DMA_Init+0x1dc>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01d      	beq.n	8008978 <HAL_DMA_Init+0x174>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a28      	ldr	r2, [pc, #160]	; (80089e4 <HAL_DMA_Init+0x1e0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d018      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <HAL_DMA_Init+0x1e4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d013      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a25      	ldr	r2, [pc, #148]	; (80089ec <HAL_DMA_Init+0x1e8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00e      	beq.n	8008978 <HAL_DMA_Init+0x174>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a24      	ldr	r2, [pc, #144]	; (80089f0 <HAL_DMA_Init+0x1ec>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d009      	beq.n	8008978 <HAL_DMA_Init+0x174>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a22      	ldr	r2, [pc, #136]	; (80089f4 <HAL_DMA_Init+0x1f0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d004      	beq.n	8008978 <HAL_DMA_Init+0x174>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a21      	ldr	r2, [pc, #132]	; (80089f8 <HAL_DMA_Init+0x1f4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d108      	bne.n	800898a <HAL_DMA_Init+0x186>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0201 	bic.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e007      	b.n	800899a <HAL_DMA_Init+0x196>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0201 	bic.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800899a:	e02f      	b.n	80089fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800899c:	f7fe fa8c 	bl	8006eb8 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	d928      	bls.n	80089fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2203      	movs	r2, #3
 80089b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e246      	b.n	8008e4a <HAL_DMA_Init+0x646>
 80089bc:	40020010 	.word	0x40020010
 80089c0:	40020028 	.word	0x40020028
 80089c4:	40020040 	.word	0x40020040
 80089c8:	40020058 	.word	0x40020058
 80089cc:	40020070 	.word	0x40020070
 80089d0:	40020088 	.word	0x40020088
 80089d4:	400200a0 	.word	0x400200a0
 80089d8:	400200b8 	.word	0x400200b8
 80089dc:	40020410 	.word	0x40020410
 80089e0:	40020428 	.word	0x40020428
 80089e4:	40020440 	.word	0x40020440
 80089e8:	40020458 	.word	0x40020458
 80089ec:	40020470 	.word	0x40020470
 80089f0:	40020488 	.word	0x40020488
 80089f4:	400204a0 	.word	0x400204a0
 80089f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1c8      	bne.n	800899c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4b83      	ldr	r3, [pc, #524]	; (8008c24 <HAL_DMA_Init+0x420>)
 8008a16:	4013      	ands	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d107      	bne.n	8008a60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008a60:	4b71      	ldr	r3, [pc, #452]	; (8008c28 <HAL_DMA_Init+0x424>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	4b71      	ldr	r3, [pc, #452]	; (8008c2c <HAL_DMA_Init+0x428>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a6c:	d328      	bcc.n	8008ac0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b28      	cmp	r3, #40	; 0x28
 8008a74:	d903      	bls.n	8008a7e <HAL_DMA_Init+0x27a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a7c:	d917      	bls.n	8008aae <HAL_DMA_Init+0x2aa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b3e      	cmp	r3, #62	; 0x3e
 8008a84:	d903      	bls.n	8008a8e <HAL_DMA_Init+0x28a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b42      	cmp	r3, #66	; 0x42
 8008a8c:	d90f      	bls.n	8008aae <HAL_DMA_Init+0x2aa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	2b46      	cmp	r3, #70	; 0x46
 8008a94:	d903      	bls.n	8008a9e <HAL_DMA_Init+0x29a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b48      	cmp	r3, #72	; 0x48
 8008a9c:	d907      	bls.n	8008aae <HAL_DMA_Init+0x2aa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2b4e      	cmp	r3, #78	; 0x4e
 8008aa4:	d905      	bls.n	8008ab2 <HAL_DMA_Init+0x2ae>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b52      	cmp	r3, #82	; 0x52
 8008aac:	d801      	bhi.n	8008ab2 <HAL_DMA_Init+0x2ae>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <HAL_DMA_Init+0x2b0>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008abe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d117      	bne.n	8008b1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f002 fb33 	bl	800b168 <DMA_CheckFifoParam>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2240      	movs	r2, #64	; 0x40
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e197      	b.n	8008e4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f002 fa6e 	bl	800b004 <DMA_CalcBaseAndBitshift>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b30:	f003 031f 	and.w	r3, r3, #31
 8008b34:	223f      	movs	r2, #63	; 0x3f
 8008b36:	409a      	lsls	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	e0cd      	b.n	8008cda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <HAL_DMA_Init+0x42c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d022      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <HAL_DMA_Init+0x430>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d01d      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a38      	ldr	r2, [pc, #224]	; (8008c38 <HAL_DMA_Init+0x434>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d018      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a36      	ldr	r2, [pc, #216]	; (8008c3c <HAL_DMA_Init+0x438>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d013      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a35      	ldr	r2, [pc, #212]	; (8008c40 <HAL_DMA_Init+0x43c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00e      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a33      	ldr	r2, [pc, #204]	; (8008c44 <HAL_DMA_Init+0x440>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d009      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a32      	ldr	r2, [pc, #200]	; (8008c48 <HAL_DMA_Init+0x444>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d004      	beq.n	8008b8e <HAL_DMA_Init+0x38a>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a30      	ldr	r2, [pc, #192]	; (8008c4c <HAL_DMA_Init+0x448>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <HAL_DMA_Init+0x38e>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <HAL_DMA_Init+0x390>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8097 	beq.w	8008cc8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <HAL_DMA_Init+0x42c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d021      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a22      	ldr	r2, [pc, #136]	; (8008c34 <HAL_DMA_Init+0x430>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01c      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a21      	ldr	r2, [pc, #132]	; (8008c38 <HAL_DMA_Init+0x434>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d017      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	; (8008c3c <HAL_DMA_Init+0x438>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d012      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <HAL_DMA_Init+0x43c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00d      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <HAL_DMA_Init+0x440>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d008      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a1b      	ldr	r2, [pc, #108]	; (8008c48 <HAL_DMA_Init+0x444>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <HAL_DMA_Init+0x3e4>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <HAL_DMA_Init+0x448>)
 8008be6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <HAL_DMA_Init+0x44c>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	d021      	beq.n	8008c54 <HAL_DMA_Init+0x450>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	2b80      	cmp	r3, #128	; 0x80
 8008c16:	d102      	bne.n	8008c1e <HAL_DMA_Init+0x41a>
 8008c18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c1c:	e01b      	b.n	8008c56 <HAL_DMA_Init+0x452>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e019      	b.n	8008c56 <HAL_DMA_Init+0x452>
 8008c22:	bf00      	nop
 8008c24:	fe10803f 	.word	0xfe10803f
 8008c28:	5c001000 	.word	0x5c001000
 8008c2c:	ffff0000 	.word	0xffff0000
 8008c30:	58025408 	.word	0x58025408
 8008c34:	5802541c 	.word	0x5802541c
 8008c38:	58025430 	.word	0x58025430
 8008c3c:	58025444 	.word	0x58025444
 8008c40:	58025458 	.word	0x58025458
 8008c44:	5802546c 	.word	0x5802546c
 8008c48:	58025480 	.word	0x58025480
 8008c4c:	58025494 	.word	0x58025494
 8008c50:	fffe000f 	.word	0xfffe000f
 8008c54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	68d2      	ldr	r2, [r2, #12]
 8008c5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008c64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008c84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4b6e      	ldr	r3, [pc, #440]	; (8008e54 <HAL_DMA_Init+0x650>)
 8008c9c:	4413      	add	r3, r2
 8008c9e:	4a6e      	ldr	r2, [pc, #440]	; (8008e58 <HAL_DMA_Init+0x654>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	009a      	lsls	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f002 f9a9 	bl	800b004 <DMA_CalcBaseAndBitshift>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cba:	f003 031f 	and.w	r3, r3, #31
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	409a      	lsls	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	e008      	b.n	8008cda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e0b7      	b.n	8008e4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a5f      	ldr	r2, [pc, #380]	; (8008e5c <HAL_DMA_Init+0x658>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d072      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a5d      	ldr	r2, [pc, #372]	; (8008e60 <HAL_DMA_Init+0x65c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d06d      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a5c      	ldr	r2, [pc, #368]	; (8008e64 <HAL_DMA_Init+0x660>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d068      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a5a      	ldr	r2, [pc, #360]	; (8008e68 <HAL_DMA_Init+0x664>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d063      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a59      	ldr	r2, [pc, #356]	; (8008e6c <HAL_DMA_Init+0x668>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d05e      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a57      	ldr	r2, [pc, #348]	; (8008e70 <HAL_DMA_Init+0x66c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d059      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a56      	ldr	r2, [pc, #344]	; (8008e74 <HAL_DMA_Init+0x670>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d054      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a54      	ldr	r2, [pc, #336]	; (8008e78 <HAL_DMA_Init+0x674>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d04f      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a53      	ldr	r2, [pc, #332]	; (8008e7c <HAL_DMA_Init+0x678>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d04a      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a51      	ldr	r2, [pc, #324]	; (8008e80 <HAL_DMA_Init+0x67c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d045      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a50      	ldr	r2, [pc, #320]	; (8008e84 <HAL_DMA_Init+0x680>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d040      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a4e      	ldr	r2, [pc, #312]	; (8008e88 <HAL_DMA_Init+0x684>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d03b      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a4d      	ldr	r2, [pc, #308]	; (8008e8c <HAL_DMA_Init+0x688>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d036      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a4b      	ldr	r2, [pc, #300]	; (8008e90 <HAL_DMA_Init+0x68c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d031      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a4a      	ldr	r2, [pc, #296]	; (8008e94 <HAL_DMA_Init+0x690>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d02c      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a48      	ldr	r2, [pc, #288]	; (8008e98 <HAL_DMA_Init+0x694>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d027      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a47      	ldr	r2, [pc, #284]	; (8008e9c <HAL_DMA_Init+0x698>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d022      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a45      	ldr	r2, [pc, #276]	; (8008ea0 <HAL_DMA_Init+0x69c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01d      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a44      	ldr	r2, [pc, #272]	; (8008ea4 <HAL_DMA_Init+0x6a0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d018      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a42      	ldr	r2, [pc, #264]	; (8008ea8 <HAL_DMA_Init+0x6a4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a41      	ldr	r2, [pc, #260]	; (8008eac <HAL_DMA_Init+0x6a8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00e      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a3f      	ldr	r2, [pc, #252]	; (8008eb0 <HAL_DMA_Init+0x6ac>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d009      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a3e      	ldr	r2, [pc, #248]	; (8008eb4 <HAL_DMA_Init+0x6b0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <HAL_DMA_Init+0x5c6>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a3c      	ldr	r2, [pc, #240]	; (8008eb8 <HAL_DMA_Init+0x6b4>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d101      	bne.n	8008dce <HAL_DMA_Init+0x5ca>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <HAL_DMA_Init+0x5cc>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d032      	beq.n	8008e3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 fa43 	bl	800b260 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b80      	cmp	r3, #128	; 0x80
 8008de0:	d102      	bne.n	8008de8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008dfc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d010      	beq.n	8008e28 <HAL_DMA_Init+0x624>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d80c      	bhi.n	8008e28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f002 fac0 	bl	800b394 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	e008      	b.n	8008e3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	a7fdabf8 	.word	0xa7fdabf8
 8008e58:	cccccccd 	.word	0xcccccccd
 8008e5c:	40020010 	.word	0x40020010
 8008e60:	40020028 	.word	0x40020028
 8008e64:	40020040 	.word	0x40020040
 8008e68:	40020058 	.word	0x40020058
 8008e6c:	40020070 	.word	0x40020070
 8008e70:	40020088 	.word	0x40020088
 8008e74:	400200a0 	.word	0x400200a0
 8008e78:	400200b8 	.word	0x400200b8
 8008e7c:	40020410 	.word	0x40020410
 8008e80:	40020428 	.word	0x40020428
 8008e84:	40020440 	.word	0x40020440
 8008e88:	40020458 	.word	0x40020458
 8008e8c:	40020470 	.word	0x40020470
 8008e90:	40020488 	.word	0x40020488
 8008e94:	400204a0 	.word	0x400204a0
 8008e98:	400204b8 	.word	0x400204b8
 8008e9c:	58025408 	.word	0x58025408
 8008ea0:	5802541c 	.word	0x5802541c
 8008ea4:	58025430 	.word	0x58025430
 8008ea8:	58025444 	.word	0x58025444
 8008eac:	58025458 	.word	0x58025458
 8008eb0:	5802546c 	.word	0x5802546c
 8008eb4:	58025480 	.word	0x58025480
 8008eb8:	58025494 	.word	0x58025494

08008ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e226      	b.n	8009326 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_DMA_Start_IT+0x2a>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e21f      	b.n	8009326 <HAL_DMA_Start_IT+0x46a>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	f040 820a 	bne.w	8009310 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a68      	ldr	r2, [pc, #416]	; (80090b0 <HAL_DMA_Start_IT+0x1f4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d04a      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a66      	ldr	r2, [pc, #408]	; (80090b4 <HAL_DMA_Start_IT+0x1f8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d045      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a65      	ldr	r2, [pc, #404]	; (80090b8 <HAL_DMA_Start_IT+0x1fc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d040      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a63      	ldr	r2, [pc, #396]	; (80090bc <HAL_DMA_Start_IT+0x200>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d03b      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a62      	ldr	r2, [pc, #392]	; (80090c0 <HAL_DMA_Start_IT+0x204>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d036      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a60      	ldr	r2, [pc, #384]	; (80090c4 <HAL_DMA_Start_IT+0x208>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d031      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a5f      	ldr	r2, [pc, #380]	; (80090c8 <HAL_DMA_Start_IT+0x20c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d02c      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a5d      	ldr	r2, [pc, #372]	; (80090cc <HAL_DMA_Start_IT+0x210>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d027      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a5c      	ldr	r2, [pc, #368]	; (80090d0 <HAL_DMA_Start_IT+0x214>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d022      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a5a      	ldr	r2, [pc, #360]	; (80090d4 <HAL_DMA_Start_IT+0x218>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01d      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a59      	ldr	r2, [pc, #356]	; (80090d8 <HAL_DMA_Start_IT+0x21c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d018      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a57      	ldr	r2, [pc, #348]	; (80090dc <HAL_DMA_Start_IT+0x220>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d013      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a56      	ldr	r2, [pc, #344]	; (80090e0 <HAL_DMA_Start_IT+0x224>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00e      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a54      	ldr	r2, [pc, #336]	; (80090e4 <HAL_DMA_Start_IT+0x228>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d009      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a53      	ldr	r2, [pc, #332]	; (80090e8 <HAL_DMA_Start_IT+0x22c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d004      	beq.n	8008faa <HAL_DMA_Start_IT+0xee>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a51      	ldr	r2, [pc, #324]	; (80090ec <HAL_DMA_Start_IT+0x230>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d108      	bne.n	8008fbc <HAL_DMA_Start_IT+0x100>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e007      	b.n	8008fcc <HAL_DMA_Start_IT+0x110>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f001 fe6a 	bl	800acac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a34      	ldr	r2, [pc, #208]	; (80090b0 <HAL_DMA_Start_IT+0x1f4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d04a      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a33      	ldr	r2, [pc, #204]	; (80090b4 <HAL_DMA_Start_IT+0x1f8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d045      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a31      	ldr	r2, [pc, #196]	; (80090b8 <HAL_DMA_Start_IT+0x1fc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d040      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a30      	ldr	r2, [pc, #192]	; (80090bc <HAL_DMA_Start_IT+0x200>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d03b      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a2e      	ldr	r2, [pc, #184]	; (80090c0 <HAL_DMA_Start_IT+0x204>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d036      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <HAL_DMA_Start_IT+0x208>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d031      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a2b      	ldr	r2, [pc, #172]	; (80090c8 <HAL_DMA_Start_IT+0x20c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d02c      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a2a      	ldr	r2, [pc, #168]	; (80090cc <HAL_DMA_Start_IT+0x210>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d027      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a28      	ldr	r2, [pc, #160]	; (80090d0 <HAL_DMA_Start_IT+0x214>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d022      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a27      	ldr	r2, [pc, #156]	; (80090d4 <HAL_DMA_Start_IT+0x218>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d01d      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a25      	ldr	r2, [pc, #148]	; (80090d8 <HAL_DMA_Start_IT+0x21c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d018      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a24      	ldr	r2, [pc, #144]	; (80090dc <HAL_DMA_Start_IT+0x220>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d013      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a22      	ldr	r2, [pc, #136]	; (80090e0 <HAL_DMA_Start_IT+0x224>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00e      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a21      	ldr	r2, [pc, #132]	; (80090e4 <HAL_DMA_Start_IT+0x228>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d009      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a1f      	ldr	r2, [pc, #124]	; (80090e8 <HAL_DMA_Start_IT+0x22c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d004      	beq.n	8009078 <HAL_DMA_Start_IT+0x1bc>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <HAL_DMA_Start_IT+0x230>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d101      	bne.n	800907c <HAL_DMA_Start_IT+0x1c0>
 8009078:	2301      	movs	r3, #1
 800907a:	e000      	b.n	800907e <HAL_DMA_Start_IT+0x1c2>
 800907c:	2300      	movs	r3, #0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d036      	beq.n	80090f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f023 021e 	bic.w	r2, r3, #30
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0216 	orr.w	r2, r2, #22
 8009094:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d03e      	beq.n	800911c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0208 	orr.w	r2, r2, #8
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e035      	b.n	800911c <HAL_DMA_Start_IT+0x260>
 80090b0:	40020010 	.word	0x40020010
 80090b4:	40020028 	.word	0x40020028
 80090b8:	40020040 	.word	0x40020040
 80090bc:	40020058 	.word	0x40020058
 80090c0:	40020070 	.word	0x40020070
 80090c4:	40020088 	.word	0x40020088
 80090c8:	400200a0 	.word	0x400200a0
 80090cc:	400200b8 	.word	0x400200b8
 80090d0:	40020410 	.word	0x40020410
 80090d4:	40020428 	.word	0x40020428
 80090d8:	40020440 	.word	0x40020440
 80090dc:	40020458 	.word	0x40020458
 80090e0:	40020470 	.word	0x40020470
 80090e4:	40020488 	.word	0x40020488
 80090e8:	400204a0 	.word	0x400204a0
 80090ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f023 020e 	bic.w	r2, r3, #14
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 020a 	orr.w	r2, r2, #10
 8009102:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0204 	orr.w	r2, r2, #4
 800911a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a83      	ldr	r2, [pc, #524]	; (8009330 <HAL_DMA_Start_IT+0x474>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d072      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a82      	ldr	r2, [pc, #520]	; (8009334 <HAL_DMA_Start_IT+0x478>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d06d      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a80      	ldr	r2, [pc, #512]	; (8009338 <HAL_DMA_Start_IT+0x47c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d068      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a7f      	ldr	r2, [pc, #508]	; (800933c <HAL_DMA_Start_IT+0x480>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d063      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a7d      	ldr	r2, [pc, #500]	; (8009340 <HAL_DMA_Start_IT+0x484>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d05e      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a7c      	ldr	r2, [pc, #496]	; (8009344 <HAL_DMA_Start_IT+0x488>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d059      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a7a      	ldr	r2, [pc, #488]	; (8009348 <HAL_DMA_Start_IT+0x48c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d054      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a79      	ldr	r2, [pc, #484]	; (800934c <HAL_DMA_Start_IT+0x490>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d04f      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a77      	ldr	r2, [pc, #476]	; (8009350 <HAL_DMA_Start_IT+0x494>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d04a      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a76      	ldr	r2, [pc, #472]	; (8009354 <HAL_DMA_Start_IT+0x498>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d045      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a74      	ldr	r2, [pc, #464]	; (8009358 <HAL_DMA_Start_IT+0x49c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d040      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a73      	ldr	r2, [pc, #460]	; (800935c <HAL_DMA_Start_IT+0x4a0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d03b      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a71      	ldr	r2, [pc, #452]	; (8009360 <HAL_DMA_Start_IT+0x4a4>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d036      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a70      	ldr	r2, [pc, #448]	; (8009364 <HAL_DMA_Start_IT+0x4a8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d031      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a6e      	ldr	r2, [pc, #440]	; (8009368 <HAL_DMA_Start_IT+0x4ac>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d02c      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a6d      	ldr	r2, [pc, #436]	; (800936c <HAL_DMA_Start_IT+0x4b0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d027      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a6b      	ldr	r2, [pc, #428]	; (8009370 <HAL_DMA_Start_IT+0x4b4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d022      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a6a      	ldr	r2, [pc, #424]	; (8009374 <HAL_DMA_Start_IT+0x4b8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d01d      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a68      	ldr	r2, [pc, #416]	; (8009378 <HAL_DMA_Start_IT+0x4bc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d018      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a67      	ldr	r2, [pc, #412]	; (800937c <HAL_DMA_Start_IT+0x4c0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d013      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a65      	ldr	r2, [pc, #404]	; (8009380 <HAL_DMA_Start_IT+0x4c4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00e      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a64      	ldr	r2, [pc, #400]	; (8009384 <HAL_DMA_Start_IT+0x4c8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d009      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a62      	ldr	r2, [pc, #392]	; (8009388 <HAL_DMA_Start_IT+0x4cc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d004      	beq.n	800920c <HAL_DMA_Start_IT+0x350>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a61      	ldr	r2, [pc, #388]	; (800938c <HAL_DMA_Start_IT+0x4d0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d101      	bne.n	8009210 <HAL_DMA_Start_IT+0x354>
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <HAL_DMA_Start_IT+0x356>
 8009210:	2300      	movs	r3, #0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01a      	beq.n	800924c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d007      	beq.n	8009234 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009232:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800924a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a37      	ldr	r2, [pc, #220]	; (8009330 <HAL_DMA_Start_IT+0x474>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d04a      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a36      	ldr	r2, [pc, #216]	; (8009334 <HAL_DMA_Start_IT+0x478>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d045      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a34      	ldr	r2, [pc, #208]	; (8009338 <HAL_DMA_Start_IT+0x47c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d040      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a33      	ldr	r2, [pc, #204]	; (800933c <HAL_DMA_Start_IT+0x480>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d03b      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a31      	ldr	r2, [pc, #196]	; (8009340 <HAL_DMA_Start_IT+0x484>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d036      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a30      	ldr	r2, [pc, #192]	; (8009344 <HAL_DMA_Start_IT+0x488>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d031      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <HAL_DMA_Start_IT+0x48c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d02c      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a2d      	ldr	r2, [pc, #180]	; (800934c <HAL_DMA_Start_IT+0x490>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d027      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a2b      	ldr	r2, [pc, #172]	; (8009350 <HAL_DMA_Start_IT+0x494>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d022      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a2a      	ldr	r2, [pc, #168]	; (8009354 <HAL_DMA_Start_IT+0x498>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d01d      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a28      	ldr	r2, [pc, #160]	; (8009358 <HAL_DMA_Start_IT+0x49c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d018      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a27      	ldr	r2, [pc, #156]	; (800935c <HAL_DMA_Start_IT+0x4a0>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d013      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a25      	ldr	r2, [pc, #148]	; (8009360 <HAL_DMA_Start_IT+0x4a4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00e      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a24      	ldr	r2, [pc, #144]	; (8009364 <HAL_DMA_Start_IT+0x4a8>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d009      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a22      	ldr	r2, [pc, #136]	; (8009368 <HAL_DMA_Start_IT+0x4ac>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_DMA_Start_IT+0x430>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a21      	ldr	r2, [pc, #132]	; (800936c <HAL_DMA_Start_IT+0x4b0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d108      	bne.n	80092fe <HAL_DMA_Start_IT+0x442>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	e012      	b.n	8009324 <HAL_DMA_Start_IT+0x468>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	e009      	b.n	8009324 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009316:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40020010 	.word	0x40020010
 8009334:	40020028 	.word	0x40020028
 8009338:	40020040 	.word	0x40020040
 800933c:	40020058 	.word	0x40020058
 8009340:	40020070 	.word	0x40020070
 8009344:	40020088 	.word	0x40020088
 8009348:	400200a0 	.word	0x400200a0
 800934c:	400200b8 	.word	0x400200b8
 8009350:	40020410 	.word	0x40020410
 8009354:	40020428 	.word	0x40020428
 8009358:	40020440 	.word	0x40020440
 800935c:	40020458 	.word	0x40020458
 8009360:	40020470 	.word	0x40020470
 8009364:	40020488 	.word	0x40020488
 8009368:	400204a0 	.word	0x400204a0
 800936c:	400204b8 	.word	0x400204b8
 8009370:	58025408 	.word	0x58025408
 8009374:	5802541c 	.word	0x5802541c
 8009378:	58025430 	.word	0x58025430
 800937c:	58025444 	.word	0x58025444
 8009380:	58025458 	.word	0x58025458
 8009384:	5802546c 	.word	0x5802546c
 8009388:	58025480 	.word	0x58025480
 800938c:	58025494 	.word	0x58025494

08009390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009398:	f7fd fd8e 	bl	8006eb8 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e2dc      	b.n	8009962 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d008      	beq.n	80093c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2280      	movs	r2, #128	; 0x80
 80093b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e2cd      	b.n	8009962 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a76      	ldr	r2, [pc, #472]	; (80095a4 <HAL_DMA_Abort+0x214>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d04a      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a74      	ldr	r2, [pc, #464]	; (80095a8 <HAL_DMA_Abort+0x218>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d045      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a73      	ldr	r2, [pc, #460]	; (80095ac <HAL_DMA_Abort+0x21c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d040      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a71      	ldr	r2, [pc, #452]	; (80095b0 <HAL_DMA_Abort+0x220>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d03b      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a70      	ldr	r2, [pc, #448]	; (80095b4 <HAL_DMA_Abort+0x224>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d036      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a6e      	ldr	r2, [pc, #440]	; (80095b8 <HAL_DMA_Abort+0x228>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d031      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a6d      	ldr	r2, [pc, #436]	; (80095bc <HAL_DMA_Abort+0x22c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d02c      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a6b      	ldr	r2, [pc, #428]	; (80095c0 <HAL_DMA_Abort+0x230>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d027      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a6a      	ldr	r2, [pc, #424]	; (80095c4 <HAL_DMA_Abort+0x234>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d022      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a68      	ldr	r2, [pc, #416]	; (80095c8 <HAL_DMA_Abort+0x238>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d01d      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a67      	ldr	r2, [pc, #412]	; (80095cc <HAL_DMA_Abort+0x23c>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d018      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a65      	ldr	r2, [pc, #404]	; (80095d0 <HAL_DMA_Abort+0x240>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a64      	ldr	r2, [pc, #400]	; (80095d4 <HAL_DMA_Abort+0x244>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00e      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a62      	ldr	r2, [pc, #392]	; (80095d8 <HAL_DMA_Abort+0x248>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d009      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a61      	ldr	r2, [pc, #388]	; (80095dc <HAL_DMA_Abort+0x24c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d004      	beq.n	8009466 <HAL_DMA_Abort+0xd6>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a5f      	ldr	r2, [pc, #380]	; (80095e0 <HAL_DMA_Abort+0x250>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d101      	bne.n	800946a <HAL_DMA_Abort+0xda>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <HAL_DMA_Abort+0xdc>
 800946a:	2300      	movs	r3, #0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d013      	beq.n	8009498 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 021e 	bic.w	r2, r2, #30
 800947e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	695a      	ldr	r2, [r3, #20]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800948e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e00a      	b.n	80094ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 020e 	bic.w	r2, r2, #14
 80094a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a3c      	ldr	r2, [pc, #240]	; (80095a4 <HAL_DMA_Abort+0x214>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d072      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a3a      	ldr	r2, [pc, #232]	; (80095a8 <HAL_DMA_Abort+0x218>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d06d      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a39      	ldr	r2, [pc, #228]	; (80095ac <HAL_DMA_Abort+0x21c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d068      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <HAL_DMA_Abort+0x220>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d063      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a36      	ldr	r2, [pc, #216]	; (80095b4 <HAL_DMA_Abort+0x224>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d05e      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a34      	ldr	r2, [pc, #208]	; (80095b8 <HAL_DMA_Abort+0x228>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d059      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a33      	ldr	r2, [pc, #204]	; (80095bc <HAL_DMA_Abort+0x22c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d054      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a31      	ldr	r2, [pc, #196]	; (80095c0 <HAL_DMA_Abort+0x230>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d04f      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a30      	ldr	r2, [pc, #192]	; (80095c4 <HAL_DMA_Abort+0x234>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d04a      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a2e      	ldr	r2, [pc, #184]	; (80095c8 <HAL_DMA_Abort+0x238>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d045      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a2d      	ldr	r2, [pc, #180]	; (80095cc <HAL_DMA_Abort+0x23c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d040      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a2b      	ldr	r2, [pc, #172]	; (80095d0 <HAL_DMA_Abort+0x240>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d03b      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a2a      	ldr	r2, [pc, #168]	; (80095d4 <HAL_DMA_Abort+0x244>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d036      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <HAL_DMA_Abort+0x248>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d031      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a27      	ldr	r2, [pc, #156]	; (80095dc <HAL_DMA_Abort+0x24c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d02c      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a25      	ldr	r2, [pc, #148]	; (80095e0 <HAL_DMA_Abort+0x250>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d027      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a24      	ldr	r2, [pc, #144]	; (80095e4 <HAL_DMA_Abort+0x254>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d022      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a22      	ldr	r2, [pc, #136]	; (80095e8 <HAL_DMA_Abort+0x258>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d01d      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a21      	ldr	r2, [pc, #132]	; (80095ec <HAL_DMA_Abort+0x25c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d018      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a1f      	ldr	r2, [pc, #124]	; (80095f0 <HAL_DMA_Abort+0x260>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d013      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a1e      	ldr	r2, [pc, #120]	; (80095f4 <HAL_DMA_Abort+0x264>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00e      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a1c      	ldr	r2, [pc, #112]	; (80095f8 <HAL_DMA_Abort+0x268>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d009      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a1b      	ldr	r2, [pc, #108]	; (80095fc <HAL_DMA_Abort+0x26c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d004      	beq.n	800959e <HAL_DMA_Abort+0x20e>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a19      	ldr	r2, [pc, #100]	; (8009600 <HAL_DMA_Abort+0x270>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d132      	bne.n	8009604 <HAL_DMA_Abort+0x274>
 800959e:	2301      	movs	r3, #1
 80095a0:	e031      	b.n	8009606 <HAL_DMA_Abort+0x276>
 80095a2:	bf00      	nop
 80095a4:	40020010 	.word	0x40020010
 80095a8:	40020028 	.word	0x40020028
 80095ac:	40020040 	.word	0x40020040
 80095b0:	40020058 	.word	0x40020058
 80095b4:	40020070 	.word	0x40020070
 80095b8:	40020088 	.word	0x40020088
 80095bc:	400200a0 	.word	0x400200a0
 80095c0:	400200b8 	.word	0x400200b8
 80095c4:	40020410 	.word	0x40020410
 80095c8:	40020428 	.word	0x40020428
 80095cc:	40020440 	.word	0x40020440
 80095d0:	40020458 	.word	0x40020458
 80095d4:	40020470 	.word	0x40020470
 80095d8:	40020488 	.word	0x40020488
 80095dc:	400204a0 	.word	0x400204a0
 80095e0:	400204b8 	.word	0x400204b8
 80095e4:	58025408 	.word	0x58025408
 80095e8:	5802541c 	.word	0x5802541c
 80095ec:	58025430 	.word	0x58025430
 80095f0:	58025444 	.word	0x58025444
 80095f4:	58025458 	.word	0x58025458
 80095f8:	5802546c 	.word	0x5802546c
 80095fc:	58025480 	.word	0x58025480
 8009600:	58025494 	.word	0x58025494
 8009604:	2300      	movs	r3, #0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009618:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a6d      	ldr	r2, [pc, #436]	; (80097d4 <HAL_DMA_Abort+0x444>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d04a      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a6b      	ldr	r2, [pc, #428]	; (80097d8 <HAL_DMA_Abort+0x448>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d045      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a6a      	ldr	r2, [pc, #424]	; (80097dc <HAL_DMA_Abort+0x44c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d040      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a68      	ldr	r2, [pc, #416]	; (80097e0 <HAL_DMA_Abort+0x450>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d03b      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a67      	ldr	r2, [pc, #412]	; (80097e4 <HAL_DMA_Abort+0x454>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d036      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a65      	ldr	r2, [pc, #404]	; (80097e8 <HAL_DMA_Abort+0x458>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d031      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a64      	ldr	r2, [pc, #400]	; (80097ec <HAL_DMA_Abort+0x45c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d02c      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a62      	ldr	r2, [pc, #392]	; (80097f0 <HAL_DMA_Abort+0x460>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d027      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a61      	ldr	r2, [pc, #388]	; (80097f4 <HAL_DMA_Abort+0x464>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d022      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a5f      	ldr	r2, [pc, #380]	; (80097f8 <HAL_DMA_Abort+0x468>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01d      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a5e      	ldr	r2, [pc, #376]	; (80097fc <HAL_DMA_Abort+0x46c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d018      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a5c      	ldr	r2, [pc, #368]	; (8009800 <HAL_DMA_Abort+0x470>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a5b      	ldr	r2, [pc, #364]	; (8009804 <HAL_DMA_Abort+0x474>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a59      	ldr	r2, [pc, #356]	; (8009808 <HAL_DMA_Abort+0x478>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a58      	ldr	r2, [pc, #352]	; (800980c <HAL_DMA_Abort+0x47c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <HAL_DMA_Abort+0x32a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a56      	ldr	r2, [pc, #344]	; (8009810 <HAL_DMA_Abort+0x480>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d108      	bne.n	80096cc <HAL_DMA_Abort+0x33c>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e007      	b.n	80096dc <HAL_DMA_Abort+0x34c>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0201 	bic.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80096dc:	e013      	b.n	8009706 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80096de:	f7fd fbeb 	bl	8006eb8 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	d90c      	bls.n	8009706 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2203      	movs	r2, #3
 80096f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e12d      	b.n	8009962 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e5      	bne.n	80096de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a2f      	ldr	r2, [pc, #188]	; (80097d4 <HAL_DMA_Abort+0x444>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d04a      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a2d      	ldr	r2, [pc, #180]	; (80097d8 <HAL_DMA_Abort+0x448>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d045      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a2c      	ldr	r2, [pc, #176]	; (80097dc <HAL_DMA_Abort+0x44c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d040      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a2a      	ldr	r2, [pc, #168]	; (80097e0 <HAL_DMA_Abort+0x450>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d03b      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a29      	ldr	r2, [pc, #164]	; (80097e4 <HAL_DMA_Abort+0x454>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d036      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <HAL_DMA_Abort+0x458>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d031      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a26      	ldr	r2, [pc, #152]	; (80097ec <HAL_DMA_Abort+0x45c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d02c      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a24      	ldr	r2, [pc, #144]	; (80097f0 <HAL_DMA_Abort+0x460>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d027      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a23      	ldr	r2, [pc, #140]	; (80097f4 <HAL_DMA_Abort+0x464>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d022      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a21      	ldr	r2, [pc, #132]	; (80097f8 <HAL_DMA_Abort+0x468>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01d      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a20      	ldr	r2, [pc, #128]	; (80097fc <HAL_DMA_Abort+0x46c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d018      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <HAL_DMA_Abort+0x470>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d013      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1d      	ldr	r2, [pc, #116]	; (8009804 <HAL_DMA_Abort+0x474>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00e      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1b      	ldr	r2, [pc, #108]	; (8009808 <HAL_DMA_Abort+0x478>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d009      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a1a      	ldr	r2, [pc, #104]	; (800980c <HAL_DMA_Abort+0x47c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d004      	beq.n	80097b2 <HAL_DMA_Abort+0x422>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a18      	ldr	r2, [pc, #96]	; (8009810 <HAL_DMA_Abort+0x480>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d101      	bne.n	80097b6 <HAL_DMA_Abort+0x426>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <HAL_DMA_Abort+0x428>
 80097b6:	2300      	movs	r3, #0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d02b      	beq.n	8009814 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c6:	f003 031f 	and.w	r3, r3, #31
 80097ca:	223f      	movs	r2, #63	; 0x3f
 80097cc:	409a      	lsls	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	609a      	str	r2, [r3, #8]
 80097d2:	e02a      	b.n	800982a <HAL_DMA_Abort+0x49a>
 80097d4:	40020010 	.word	0x40020010
 80097d8:	40020028 	.word	0x40020028
 80097dc:	40020040 	.word	0x40020040
 80097e0:	40020058 	.word	0x40020058
 80097e4:	40020070 	.word	0x40020070
 80097e8:	40020088 	.word	0x40020088
 80097ec:	400200a0 	.word	0x400200a0
 80097f0:	400200b8 	.word	0x400200b8
 80097f4:	40020410 	.word	0x40020410
 80097f8:	40020428 	.word	0x40020428
 80097fc:	40020440 	.word	0x40020440
 8009800:	40020458 	.word	0x40020458
 8009804:	40020470 	.word	0x40020470
 8009808:	40020488 	.word	0x40020488
 800980c:	400204a0 	.word	0x400204a0
 8009810:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009818:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800981e:	f003 031f 	and.w	r3, r3, #31
 8009822:	2201      	movs	r2, #1
 8009824:	409a      	lsls	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a4f      	ldr	r2, [pc, #316]	; (800996c <HAL_DMA_Abort+0x5dc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d072      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a4d      	ldr	r2, [pc, #308]	; (8009970 <HAL_DMA_Abort+0x5e0>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d06d      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a4c      	ldr	r2, [pc, #304]	; (8009974 <HAL_DMA_Abort+0x5e4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d068      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a4a      	ldr	r2, [pc, #296]	; (8009978 <HAL_DMA_Abort+0x5e8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d063      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a49      	ldr	r2, [pc, #292]	; (800997c <HAL_DMA_Abort+0x5ec>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d05e      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a47      	ldr	r2, [pc, #284]	; (8009980 <HAL_DMA_Abort+0x5f0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d059      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a46      	ldr	r2, [pc, #280]	; (8009984 <HAL_DMA_Abort+0x5f4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d054      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a44      	ldr	r2, [pc, #272]	; (8009988 <HAL_DMA_Abort+0x5f8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d04f      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a43      	ldr	r2, [pc, #268]	; (800998c <HAL_DMA_Abort+0x5fc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d04a      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a41      	ldr	r2, [pc, #260]	; (8009990 <HAL_DMA_Abort+0x600>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d045      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a40      	ldr	r2, [pc, #256]	; (8009994 <HAL_DMA_Abort+0x604>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d040      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a3e      	ldr	r2, [pc, #248]	; (8009998 <HAL_DMA_Abort+0x608>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d03b      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a3d      	ldr	r2, [pc, #244]	; (800999c <HAL_DMA_Abort+0x60c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d036      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a3b      	ldr	r2, [pc, #236]	; (80099a0 <HAL_DMA_Abort+0x610>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d031      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a3a      	ldr	r2, [pc, #232]	; (80099a4 <HAL_DMA_Abort+0x614>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d02c      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a38      	ldr	r2, [pc, #224]	; (80099a8 <HAL_DMA_Abort+0x618>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d027      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a37      	ldr	r2, [pc, #220]	; (80099ac <HAL_DMA_Abort+0x61c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d022      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a35      	ldr	r2, [pc, #212]	; (80099b0 <HAL_DMA_Abort+0x620>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d01d      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a34      	ldr	r2, [pc, #208]	; (80099b4 <HAL_DMA_Abort+0x624>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d018      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a32      	ldr	r2, [pc, #200]	; (80099b8 <HAL_DMA_Abort+0x628>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d013      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a31      	ldr	r2, [pc, #196]	; (80099bc <HAL_DMA_Abort+0x62c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00e      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a2f      	ldr	r2, [pc, #188]	; (80099c0 <HAL_DMA_Abort+0x630>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d009      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a2e      	ldr	r2, [pc, #184]	; (80099c4 <HAL_DMA_Abort+0x634>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d004      	beq.n	800991a <HAL_DMA_Abort+0x58a>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a2c      	ldr	r2, [pc, #176]	; (80099c8 <HAL_DMA_Abort+0x638>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d101      	bne.n	800991e <HAL_DMA_Abort+0x58e>
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <HAL_DMA_Abort+0x590>
 800991e:	2300      	movs	r3, #0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d015      	beq.n	8009950 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800992c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00c      	beq.n	8009950 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009944:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800994e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40020010 	.word	0x40020010
 8009970:	40020028 	.word	0x40020028
 8009974:	40020040 	.word	0x40020040
 8009978:	40020058 	.word	0x40020058
 800997c:	40020070 	.word	0x40020070
 8009980:	40020088 	.word	0x40020088
 8009984:	400200a0 	.word	0x400200a0
 8009988:	400200b8 	.word	0x400200b8
 800998c:	40020410 	.word	0x40020410
 8009990:	40020428 	.word	0x40020428
 8009994:	40020440 	.word	0x40020440
 8009998:	40020458 	.word	0x40020458
 800999c:	40020470 	.word	0x40020470
 80099a0:	40020488 	.word	0x40020488
 80099a4:	400204a0 	.word	0x400204a0
 80099a8:	400204b8 	.word	0x400204b8
 80099ac:	58025408 	.word	0x58025408
 80099b0:	5802541c 	.word	0x5802541c
 80099b4:	58025430 	.word	0x58025430
 80099b8:	58025444 	.word	0x58025444
 80099bc:	58025458 	.word	0x58025458
 80099c0:	5802546c 	.word	0x5802546c
 80099c4:	58025480 	.word	0x58025480
 80099c8:	58025494 	.word	0x58025494

080099cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e237      	b.n	8009e4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d004      	beq.n	80099f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2280      	movs	r2, #128	; 0x80
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e22c      	b.n	8009e4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a5c      	ldr	r2, [pc, #368]	; (8009b6c <HAL_DMA_Abort_IT+0x1a0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d04a      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a5b      	ldr	r2, [pc, #364]	; (8009b70 <HAL_DMA_Abort_IT+0x1a4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d045      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a59      	ldr	r2, [pc, #356]	; (8009b74 <HAL_DMA_Abort_IT+0x1a8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d040      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a58      	ldr	r2, [pc, #352]	; (8009b78 <HAL_DMA_Abort_IT+0x1ac>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d03b      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a56      	ldr	r2, [pc, #344]	; (8009b7c <HAL_DMA_Abort_IT+0x1b0>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d036      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a55      	ldr	r2, [pc, #340]	; (8009b80 <HAL_DMA_Abort_IT+0x1b4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d031      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a53      	ldr	r2, [pc, #332]	; (8009b84 <HAL_DMA_Abort_IT+0x1b8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d02c      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a52      	ldr	r2, [pc, #328]	; (8009b88 <HAL_DMA_Abort_IT+0x1bc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d027      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a50      	ldr	r2, [pc, #320]	; (8009b8c <HAL_DMA_Abort_IT+0x1c0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d022      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a4f      	ldr	r2, [pc, #316]	; (8009b90 <HAL_DMA_Abort_IT+0x1c4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d01d      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a4d      	ldr	r2, [pc, #308]	; (8009b94 <HAL_DMA_Abort_IT+0x1c8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a4c      	ldr	r2, [pc, #304]	; (8009b98 <HAL_DMA_Abort_IT+0x1cc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a4a      	ldr	r2, [pc, #296]	; (8009b9c <HAL_DMA_Abort_IT+0x1d0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a49      	ldr	r2, [pc, #292]	; (8009ba0 <HAL_DMA_Abort_IT+0x1d4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a47      	ldr	r2, [pc, #284]	; (8009ba4 <HAL_DMA_Abort_IT+0x1d8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_DMA_Abort_IT+0xc8>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a46      	ldr	r2, [pc, #280]	; (8009ba8 <HAL_DMA_Abort_IT+0x1dc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d101      	bne.n	8009a98 <HAL_DMA_Abort_IT+0xcc>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <HAL_DMA_Abort_IT+0xce>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8086 	beq.w	8009bac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a2f      	ldr	r2, [pc, #188]	; (8009b6c <HAL_DMA_Abort_IT+0x1a0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d04a      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a2e      	ldr	r2, [pc, #184]	; (8009b70 <HAL_DMA_Abort_IT+0x1a4>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d045      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a2c      	ldr	r2, [pc, #176]	; (8009b74 <HAL_DMA_Abort_IT+0x1a8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d040      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a2b      	ldr	r2, [pc, #172]	; (8009b78 <HAL_DMA_Abort_IT+0x1ac>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d03b      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <HAL_DMA_Abort_IT+0x1b0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d036      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a28      	ldr	r2, [pc, #160]	; (8009b80 <HAL_DMA_Abort_IT+0x1b4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d031      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a26      	ldr	r2, [pc, #152]	; (8009b84 <HAL_DMA_Abort_IT+0x1b8>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d02c      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a25      	ldr	r2, [pc, #148]	; (8009b88 <HAL_DMA_Abort_IT+0x1bc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d027      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a23      	ldr	r2, [pc, #140]	; (8009b8c <HAL_DMA_Abort_IT+0x1c0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d022      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a22      	ldr	r2, [pc, #136]	; (8009b90 <HAL_DMA_Abort_IT+0x1c4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d01d      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a20      	ldr	r2, [pc, #128]	; (8009b94 <HAL_DMA_Abort_IT+0x1c8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d018      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	; (8009b98 <HAL_DMA_Abort_IT+0x1cc>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d013      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a1d      	ldr	r2, [pc, #116]	; (8009b9c <HAL_DMA_Abort_IT+0x1d0>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00e      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a1c      	ldr	r2, [pc, #112]	; (8009ba0 <HAL_DMA_Abort_IT+0x1d4>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d009      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <HAL_DMA_Abort_IT+0x1d8>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d004      	beq.n	8009b48 <HAL_DMA_Abort_IT+0x17c>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a19      	ldr	r2, [pc, #100]	; (8009ba8 <HAL_DMA_Abort_IT+0x1dc>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d108      	bne.n	8009b5a <HAL_DMA_Abort_IT+0x18e>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0201 	bic.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e178      	b.n	8009e4c <HAL_DMA_Abort_IT+0x480>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e16f      	b.n	8009e4c <HAL_DMA_Abort_IT+0x480>
 8009b6c:	40020010 	.word	0x40020010
 8009b70:	40020028 	.word	0x40020028
 8009b74:	40020040 	.word	0x40020040
 8009b78:	40020058 	.word	0x40020058
 8009b7c:	40020070 	.word	0x40020070
 8009b80:	40020088 	.word	0x40020088
 8009b84:	400200a0 	.word	0x400200a0
 8009b88:	400200b8 	.word	0x400200b8
 8009b8c:	40020410 	.word	0x40020410
 8009b90:	40020428 	.word	0x40020428
 8009b94:	40020440 	.word	0x40020440
 8009b98:	40020458 	.word	0x40020458
 8009b9c:	40020470 	.word	0x40020470
 8009ba0:	40020488 	.word	0x40020488
 8009ba4:	400204a0 	.word	0x400204a0
 8009ba8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 020e 	bic.w	r2, r2, #14
 8009bba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a6c      	ldr	r2, [pc, #432]	; (8009d74 <HAL_DMA_Abort_IT+0x3a8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d04a      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a6b      	ldr	r2, [pc, #428]	; (8009d78 <HAL_DMA_Abort_IT+0x3ac>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d045      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a69      	ldr	r2, [pc, #420]	; (8009d7c <HAL_DMA_Abort_IT+0x3b0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d040      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a68      	ldr	r2, [pc, #416]	; (8009d80 <HAL_DMA_Abort_IT+0x3b4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d03b      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a66      	ldr	r2, [pc, #408]	; (8009d84 <HAL_DMA_Abort_IT+0x3b8>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d036      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a65      	ldr	r2, [pc, #404]	; (8009d88 <HAL_DMA_Abort_IT+0x3bc>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d031      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a63      	ldr	r2, [pc, #396]	; (8009d8c <HAL_DMA_Abort_IT+0x3c0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d02c      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a62      	ldr	r2, [pc, #392]	; (8009d90 <HAL_DMA_Abort_IT+0x3c4>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d027      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a60      	ldr	r2, [pc, #384]	; (8009d94 <HAL_DMA_Abort_IT+0x3c8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d022      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a5f      	ldr	r2, [pc, #380]	; (8009d98 <HAL_DMA_Abort_IT+0x3cc>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d01d      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a5d      	ldr	r2, [pc, #372]	; (8009d9c <HAL_DMA_Abort_IT+0x3d0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d018      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a5c      	ldr	r2, [pc, #368]	; (8009da0 <HAL_DMA_Abort_IT+0x3d4>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d013      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a5a      	ldr	r2, [pc, #360]	; (8009da4 <HAL_DMA_Abort_IT+0x3d8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d00e      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a59      	ldr	r2, [pc, #356]	; (8009da8 <HAL_DMA_Abort_IT+0x3dc>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d009      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a57      	ldr	r2, [pc, #348]	; (8009dac <HAL_DMA_Abort_IT+0x3e0>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d004      	beq.n	8009c5c <HAL_DMA_Abort_IT+0x290>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a56      	ldr	r2, [pc, #344]	; (8009db0 <HAL_DMA_Abort_IT+0x3e4>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d108      	bne.n	8009c6e <HAL_DMA_Abort_IT+0x2a2>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e007      	b.n	8009c7e <HAL_DMA_Abort_IT+0x2b2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a3c      	ldr	r2, [pc, #240]	; (8009d74 <HAL_DMA_Abort_IT+0x3a8>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d072      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a3a      	ldr	r2, [pc, #232]	; (8009d78 <HAL_DMA_Abort_IT+0x3ac>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d06d      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a39      	ldr	r2, [pc, #228]	; (8009d7c <HAL_DMA_Abort_IT+0x3b0>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d068      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a37      	ldr	r2, [pc, #220]	; (8009d80 <HAL_DMA_Abort_IT+0x3b4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d063      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a36      	ldr	r2, [pc, #216]	; (8009d84 <HAL_DMA_Abort_IT+0x3b8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d05e      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a34      	ldr	r2, [pc, #208]	; (8009d88 <HAL_DMA_Abort_IT+0x3bc>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d059      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a33      	ldr	r2, [pc, #204]	; (8009d8c <HAL_DMA_Abort_IT+0x3c0>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d054      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a31      	ldr	r2, [pc, #196]	; (8009d90 <HAL_DMA_Abort_IT+0x3c4>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d04f      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a30      	ldr	r2, [pc, #192]	; (8009d94 <HAL_DMA_Abort_IT+0x3c8>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d04a      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a2e      	ldr	r2, [pc, #184]	; (8009d98 <HAL_DMA_Abort_IT+0x3cc>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d045      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a2d      	ldr	r2, [pc, #180]	; (8009d9c <HAL_DMA_Abort_IT+0x3d0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d040      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a2b      	ldr	r2, [pc, #172]	; (8009da0 <HAL_DMA_Abort_IT+0x3d4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d03b      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a2a      	ldr	r2, [pc, #168]	; (8009da4 <HAL_DMA_Abort_IT+0x3d8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d036      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a28      	ldr	r2, [pc, #160]	; (8009da8 <HAL_DMA_Abort_IT+0x3dc>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d031      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a27      	ldr	r2, [pc, #156]	; (8009dac <HAL_DMA_Abort_IT+0x3e0>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d02c      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a25      	ldr	r2, [pc, #148]	; (8009db0 <HAL_DMA_Abort_IT+0x3e4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d027      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a24      	ldr	r2, [pc, #144]	; (8009db4 <HAL_DMA_Abort_IT+0x3e8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d022      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a22      	ldr	r2, [pc, #136]	; (8009db8 <HAL_DMA_Abort_IT+0x3ec>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d01d      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a21      	ldr	r2, [pc, #132]	; (8009dbc <HAL_DMA_Abort_IT+0x3f0>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d018      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <HAL_DMA_Abort_IT+0x3f4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a1e      	ldr	r2, [pc, #120]	; (8009dc4 <HAL_DMA_Abort_IT+0x3f8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1c      	ldr	r2, [pc, #112]	; (8009dc8 <HAL_DMA_Abort_IT+0x3fc>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d009      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1b      	ldr	r2, [pc, #108]	; (8009dcc <HAL_DMA_Abort_IT+0x400>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x3a2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <HAL_DMA_Abort_IT+0x404>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d132      	bne.n	8009dd4 <HAL_DMA_Abort_IT+0x408>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e031      	b.n	8009dd6 <HAL_DMA_Abort_IT+0x40a>
 8009d72:	bf00      	nop
 8009d74:	40020010 	.word	0x40020010
 8009d78:	40020028 	.word	0x40020028
 8009d7c:	40020040 	.word	0x40020040
 8009d80:	40020058 	.word	0x40020058
 8009d84:	40020070 	.word	0x40020070
 8009d88:	40020088 	.word	0x40020088
 8009d8c:	400200a0 	.word	0x400200a0
 8009d90:	400200b8 	.word	0x400200b8
 8009d94:	40020410 	.word	0x40020410
 8009d98:	40020428 	.word	0x40020428
 8009d9c:	40020440 	.word	0x40020440
 8009da0:	40020458 	.word	0x40020458
 8009da4:	40020470 	.word	0x40020470
 8009da8:	40020488 	.word	0x40020488
 8009dac:	400204a0 	.word	0x400204a0
 8009db0:	400204b8 	.word	0x400204b8
 8009db4:	58025408 	.word	0x58025408
 8009db8:	5802541c 	.word	0x5802541c
 8009dbc:	58025430 	.word	0x58025430
 8009dc0:	58025444 	.word	0x58025444
 8009dc4:	58025458 	.word	0x58025458
 8009dc8:	5802546c 	.word	0x5802546c
 8009dcc:	58025480 	.word	0x58025480
 8009dd0:	58025494 	.word	0x58025494
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d028      	beq.n	8009e2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009de8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df4:	f003 031f 	and.w	r3, r3, #31
 8009df8:	2201      	movs	r2, #1
 8009dfa:	409a      	lsls	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009e08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00c      	beq.n	8009e2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009e2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop

08009e58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009e64:	4b67      	ldr	r3, [pc, #412]	; (800a004 <HAL_DMA_IRQHandler+0x1ac>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a67      	ldr	r2, [pc, #412]	; (800a008 <HAL_DMA_IRQHandler+0x1b0>)
 8009e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6e:	0a9b      	lsrs	r3, r3, #10
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a5f      	ldr	r2, [pc, #380]	; (800a00c <HAL_DMA_IRQHandler+0x1b4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d04a      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a5d      	ldr	r2, [pc, #372]	; (800a010 <HAL_DMA_IRQHandler+0x1b8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d045      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a5c      	ldr	r2, [pc, #368]	; (800a014 <HAL_DMA_IRQHandler+0x1bc>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d040      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a5a      	ldr	r2, [pc, #360]	; (800a018 <HAL_DMA_IRQHandler+0x1c0>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d03b      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a59      	ldr	r2, [pc, #356]	; (800a01c <HAL_DMA_IRQHandler+0x1c4>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d036      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a57      	ldr	r2, [pc, #348]	; (800a020 <HAL_DMA_IRQHandler+0x1c8>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d031      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a56      	ldr	r2, [pc, #344]	; (800a024 <HAL_DMA_IRQHandler+0x1cc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d02c      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a54      	ldr	r2, [pc, #336]	; (800a028 <HAL_DMA_IRQHandler+0x1d0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d027      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a53      	ldr	r2, [pc, #332]	; (800a02c <HAL_DMA_IRQHandler+0x1d4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d022      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a51      	ldr	r2, [pc, #324]	; (800a030 <HAL_DMA_IRQHandler+0x1d8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01d      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a50      	ldr	r2, [pc, #320]	; (800a034 <HAL_DMA_IRQHandler+0x1dc>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d018      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a4e      	ldr	r2, [pc, #312]	; (800a038 <HAL_DMA_IRQHandler+0x1e0>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a4d      	ldr	r2, [pc, #308]	; (800a03c <HAL_DMA_IRQHandler+0x1e4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00e      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a4b      	ldr	r2, [pc, #300]	; (800a040 <HAL_DMA_IRQHandler+0x1e8>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a4a      	ldr	r2, [pc, #296]	; (800a044 <HAL_DMA_IRQHandler+0x1ec>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d004      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xd2>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a48      	ldr	r2, [pc, #288]	; (800a048 <HAL_DMA_IRQHandler+0x1f0>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d101      	bne.n	8009f2e <HAL_DMA_IRQHandler+0xd6>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <HAL_DMA_IRQHandler+0xd8>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 842b 	beq.w	800a78c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	2208      	movs	r2, #8
 8009f40:	409a      	lsls	r2, r3
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 80a2 	beq.w	800a090 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a2e      	ldr	r2, [pc, #184]	; (800a00c <HAL_DMA_IRQHandler+0x1b4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d04a      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2d      	ldr	r2, [pc, #180]	; (800a010 <HAL_DMA_IRQHandler+0x1b8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d045      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a2b      	ldr	r2, [pc, #172]	; (800a014 <HAL_DMA_IRQHandler+0x1bc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d040      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a2a      	ldr	r2, [pc, #168]	; (800a018 <HAL_DMA_IRQHandler+0x1c0>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d03b      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a28      	ldr	r2, [pc, #160]	; (800a01c <HAL_DMA_IRQHandler+0x1c4>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d036      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a27      	ldr	r2, [pc, #156]	; (800a020 <HAL_DMA_IRQHandler+0x1c8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d031      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a25      	ldr	r2, [pc, #148]	; (800a024 <HAL_DMA_IRQHandler+0x1cc>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d02c      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a24      	ldr	r2, [pc, #144]	; (800a028 <HAL_DMA_IRQHandler+0x1d0>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d027      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a22      	ldr	r2, [pc, #136]	; (800a02c <HAL_DMA_IRQHandler+0x1d4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d022      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a21      	ldr	r2, [pc, #132]	; (800a030 <HAL_DMA_IRQHandler+0x1d8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d01d      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1f      	ldr	r2, [pc, #124]	; (800a034 <HAL_DMA_IRQHandler+0x1dc>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d018      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <HAL_DMA_IRQHandler+0x1e0>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d013      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <HAL_DMA_IRQHandler+0x1e4>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00e      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <HAL_DMA_IRQHandler+0x1e8>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d009      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a19      	ldr	r2, [pc, #100]	; (800a044 <HAL_DMA_IRQHandler+0x1ec>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d004      	beq.n	8009fec <HAL_DMA_IRQHandler+0x194>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a18      	ldr	r2, [pc, #96]	; (800a048 <HAL_DMA_IRQHandler+0x1f0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d12f      	bne.n	800a04c <HAL_DMA_IRQHandler+0x1f4>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bf14      	ite	ne
 8009ffa:	2301      	movne	r3, #1
 8009ffc:	2300      	moveq	r3, #0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	e02e      	b.n	800a060 <HAL_DMA_IRQHandler+0x208>
 800a002:	bf00      	nop
 800a004:	24000040 	.word	0x24000040
 800a008:	1b4e81b5 	.word	0x1b4e81b5
 800a00c:	40020010 	.word	0x40020010
 800a010:	40020028 	.word	0x40020028
 800a014:	40020040 	.word	0x40020040
 800a018:	40020058 	.word	0x40020058
 800a01c:	40020070 	.word	0x40020070
 800a020:	40020088 	.word	0x40020088
 800a024:	400200a0 	.word	0x400200a0
 800a028:	400200b8 	.word	0x400200b8
 800a02c:	40020410 	.word	0x40020410
 800a030:	40020428 	.word	0x40020428
 800a034:	40020440 	.word	0x40020440
 800a038:	40020458 	.word	0x40020458
 800a03c:	40020470 	.word	0x40020470
 800a040:	40020488 	.word	0x40020488
 800a044:	400204a0 	.word	0x400204a0
 800a048:	400204b8 	.word	0x400204b8
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	bf14      	ite	ne
 800a05a:	2301      	movne	r3, #1
 800a05c:	2300      	moveq	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d015      	beq.n	800a090 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a078:	f003 031f 	and.w	r3, r3, #31
 800a07c:	2208      	movs	r2, #8
 800a07e:	409a      	lsls	r2, r3
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a088:	f043 0201 	orr.w	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a094:	f003 031f 	and.w	r3, r3, #31
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	fa22 f303 	lsr.w	r3, r2, r3
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d06e      	beq.n	800a184 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a69      	ldr	r2, [pc, #420]	; (800a250 <HAL_DMA_IRQHandler+0x3f8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d04a      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a67      	ldr	r2, [pc, #412]	; (800a254 <HAL_DMA_IRQHandler+0x3fc>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d045      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a66      	ldr	r2, [pc, #408]	; (800a258 <HAL_DMA_IRQHandler+0x400>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d040      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a64      	ldr	r2, [pc, #400]	; (800a25c <HAL_DMA_IRQHandler+0x404>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d03b      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a63      	ldr	r2, [pc, #396]	; (800a260 <HAL_DMA_IRQHandler+0x408>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d036      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a61      	ldr	r2, [pc, #388]	; (800a264 <HAL_DMA_IRQHandler+0x40c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d031      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a60      	ldr	r2, [pc, #384]	; (800a268 <HAL_DMA_IRQHandler+0x410>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d02c      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a5e      	ldr	r2, [pc, #376]	; (800a26c <HAL_DMA_IRQHandler+0x414>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d027      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a5d      	ldr	r2, [pc, #372]	; (800a270 <HAL_DMA_IRQHandler+0x418>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d022      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a5b      	ldr	r2, [pc, #364]	; (800a274 <HAL_DMA_IRQHandler+0x41c>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d01d      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a5a      	ldr	r2, [pc, #360]	; (800a278 <HAL_DMA_IRQHandler+0x420>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d018      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a58      	ldr	r2, [pc, #352]	; (800a27c <HAL_DMA_IRQHandler+0x424>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d013      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a57      	ldr	r2, [pc, #348]	; (800a280 <HAL_DMA_IRQHandler+0x428>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00e      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a55      	ldr	r2, [pc, #340]	; (800a284 <HAL_DMA_IRQHandler+0x42c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d009      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a54      	ldr	r2, [pc, #336]	; (800a288 <HAL_DMA_IRQHandler+0x430>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d004      	beq.n	800a146 <HAL_DMA_IRQHandler+0x2ee>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a52      	ldr	r2, [pc, #328]	; (800a28c <HAL_DMA_IRQHandler+0x434>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d10a      	bne.n	800a15c <HAL_DMA_IRQHandler+0x304>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e003      	b.n	800a164 <HAL_DMA_IRQHandler+0x30c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2300      	movs	r3, #0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00d      	beq.n	800a184 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16c:	f003 031f 	and.w	r3, r3, #31
 800a170:	2201      	movs	r2, #1
 800a172:	409a      	lsls	r2, r3
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17c:	f043 0202 	orr.w	r2, r3, #2
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a188:	f003 031f 	and.w	r3, r3, #31
 800a18c:	2204      	movs	r2, #4
 800a18e:	409a      	lsls	r2, r3
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	4013      	ands	r3, r2
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 808f 	beq.w	800a2b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a2c      	ldr	r2, [pc, #176]	; (800a250 <HAL_DMA_IRQHandler+0x3f8>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d04a      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a2a      	ldr	r2, [pc, #168]	; (800a254 <HAL_DMA_IRQHandler+0x3fc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d045      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a29      	ldr	r2, [pc, #164]	; (800a258 <HAL_DMA_IRQHandler+0x400>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d040      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a27      	ldr	r2, [pc, #156]	; (800a25c <HAL_DMA_IRQHandler+0x404>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d03b      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a26      	ldr	r2, [pc, #152]	; (800a260 <HAL_DMA_IRQHandler+0x408>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d036      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a24      	ldr	r2, [pc, #144]	; (800a264 <HAL_DMA_IRQHandler+0x40c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d031      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a23      	ldr	r2, [pc, #140]	; (800a268 <HAL_DMA_IRQHandler+0x410>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d02c      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a21      	ldr	r2, [pc, #132]	; (800a26c <HAL_DMA_IRQHandler+0x414>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d027      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a20      	ldr	r2, [pc, #128]	; (800a270 <HAL_DMA_IRQHandler+0x418>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d022      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <HAL_DMA_IRQHandler+0x41c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01d      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <HAL_DMA_IRQHandler+0x420>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d018      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1b      	ldr	r2, [pc, #108]	; (800a27c <HAL_DMA_IRQHandler+0x424>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1a      	ldr	r2, [pc, #104]	; (800a280 <HAL_DMA_IRQHandler+0x428>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a18      	ldr	r2, [pc, #96]	; (800a284 <HAL_DMA_IRQHandler+0x42c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a17      	ldr	r2, [pc, #92]	; (800a288 <HAL_DMA_IRQHandler+0x430>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_DMA_IRQHandler+0x3e2>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a15      	ldr	r2, [pc, #84]	; (800a28c <HAL_DMA_IRQHandler+0x434>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d12a      	bne.n	800a290 <HAL_DMA_IRQHandler+0x438>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	bf14      	ite	ne
 800a248:	2301      	movne	r3, #1
 800a24a:	2300      	moveq	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	e023      	b.n	800a298 <HAL_DMA_IRQHandler+0x440>
 800a250:	40020010 	.word	0x40020010
 800a254:	40020028 	.word	0x40020028
 800a258:	40020040 	.word	0x40020040
 800a25c:	40020058 	.word	0x40020058
 800a260:	40020070 	.word	0x40020070
 800a264:	40020088 	.word	0x40020088
 800a268:	400200a0 	.word	0x400200a0
 800a26c:	400200b8 	.word	0x400200b8
 800a270:	40020410 	.word	0x40020410
 800a274:	40020428 	.word	0x40020428
 800a278:	40020440 	.word	0x40020440
 800a27c:	40020458 	.word	0x40020458
 800a280:	40020470 	.word	0x40020470
 800a284:	40020488 	.word	0x40020488
 800a288:	400204a0 	.word	0x400204a0
 800a28c:	400204b8 	.word	0x400204b8
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2300      	movs	r3, #0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00d      	beq.n	800a2b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a0:	f003 031f 	and.w	r3, r3, #31
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	409a      	lsls	r2, r3
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b0:	f043 0204 	orr.w	r2, r3, #4
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2bc:	f003 031f 	and.w	r3, r3, #31
 800a2c0:	2210      	movs	r2, #16
 800a2c2:	409a      	lsls	r2, r3
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 80a6 	beq.w	800a41a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a85      	ldr	r2, [pc, #532]	; (800a4e8 <HAL_DMA_IRQHandler+0x690>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d04a      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a83      	ldr	r2, [pc, #524]	; (800a4ec <HAL_DMA_IRQHandler+0x694>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d045      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a82      	ldr	r2, [pc, #520]	; (800a4f0 <HAL_DMA_IRQHandler+0x698>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d040      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a80      	ldr	r2, [pc, #512]	; (800a4f4 <HAL_DMA_IRQHandler+0x69c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d03b      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a7f      	ldr	r2, [pc, #508]	; (800a4f8 <HAL_DMA_IRQHandler+0x6a0>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d036      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a7d      	ldr	r2, [pc, #500]	; (800a4fc <HAL_DMA_IRQHandler+0x6a4>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d031      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a7c      	ldr	r2, [pc, #496]	; (800a500 <HAL_DMA_IRQHandler+0x6a8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d02c      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a7a      	ldr	r2, [pc, #488]	; (800a504 <HAL_DMA_IRQHandler+0x6ac>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d027      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a79      	ldr	r2, [pc, #484]	; (800a508 <HAL_DMA_IRQHandler+0x6b0>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d022      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a77      	ldr	r2, [pc, #476]	; (800a50c <HAL_DMA_IRQHandler+0x6b4>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d01d      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a76      	ldr	r2, [pc, #472]	; (800a510 <HAL_DMA_IRQHandler+0x6b8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d018      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a74      	ldr	r2, [pc, #464]	; (800a514 <HAL_DMA_IRQHandler+0x6bc>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d013      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a73      	ldr	r2, [pc, #460]	; (800a518 <HAL_DMA_IRQHandler+0x6c0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00e      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a71      	ldr	r2, [pc, #452]	; (800a51c <HAL_DMA_IRQHandler+0x6c4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d009      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a70      	ldr	r2, [pc, #448]	; (800a520 <HAL_DMA_IRQHandler+0x6c8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d004      	beq.n	800a36e <HAL_DMA_IRQHandler+0x516>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a6e      	ldr	r2, [pc, #440]	; (800a524 <HAL_DMA_IRQHandler+0x6cc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10a      	bne.n	800a384 <HAL_DMA_IRQHandler+0x52c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0308 	and.w	r3, r3, #8
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	e009      	b.n	800a398 <HAL_DMA_IRQHandler+0x540>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bf14      	ite	ne
 800a392:	2301      	movne	r3, #1
 800a394:	2300      	moveq	r3, #0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d03e      	beq.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a0:	f003 031f 	and.w	r3, r3, #31
 800a3a4:	2210      	movs	r2, #16
 800a3a6:	409a      	lsls	r2, r3
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d018      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d108      	bne.n	800a3da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d024      	beq.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
 800a3d8:	e01f      	b.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d01b      	beq.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
 800a3ea:	e016      	b.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0208 	bic.w	r2, r2, #8
 800a408:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	2220      	movs	r2, #32
 800a424:	409a      	lsls	r2, r3
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	4013      	ands	r3, r2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8110 	beq.w	800a650 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a2c      	ldr	r2, [pc, #176]	; (800a4e8 <HAL_DMA_IRQHandler+0x690>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d04a      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a2b      	ldr	r2, [pc, #172]	; (800a4ec <HAL_DMA_IRQHandler+0x694>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d045      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a29      	ldr	r2, [pc, #164]	; (800a4f0 <HAL_DMA_IRQHandler+0x698>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d040      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a28      	ldr	r2, [pc, #160]	; (800a4f4 <HAL_DMA_IRQHandler+0x69c>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d03b      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <HAL_DMA_IRQHandler+0x6a0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d036      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a25      	ldr	r2, [pc, #148]	; (800a4fc <HAL_DMA_IRQHandler+0x6a4>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d031      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a23      	ldr	r2, [pc, #140]	; (800a500 <HAL_DMA_IRQHandler+0x6a8>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d02c      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a22      	ldr	r2, [pc, #136]	; (800a504 <HAL_DMA_IRQHandler+0x6ac>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d027      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a20      	ldr	r2, [pc, #128]	; (800a508 <HAL_DMA_IRQHandler+0x6b0>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d022      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a1f      	ldr	r2, [pc, #124]	; (800a50c <HAL_DMA_IRQHandler+0x6b4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d01d      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a1d      	ldr	r2, [pc, #116]	; (800a510 <HAL_DMA_IRQHandler+0x6b8>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d018      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <HAL_DMA_IRQHandler+0x6bc>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d013      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1a      	ldr	r2, [pc, #104]	; (800a518 <HAL_DMA_IRQHandler+0x6c0>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00e      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a19      	ldr	r2, [pc, #100]	; (800a51c <HAL_DMA_IRQHandler+0x6c4>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d009      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a17      	ldr	r2, [pc, #92]	; (800a520 <HAL_DMA_IRQHandler+0x6c8>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d004      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x678>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a16      	ldr	r2, [pc, #88]	; (800a524 <HAL_DMA_IRQHandler+0x6cc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d12b      	bne.n	800a528 <HAL_DMA_IRQHandler+0x6d0>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	e02a      	b.n	800a53c <HAL_DMA_IRQHandler+0x6e4>
 800a4e6:	bf00      	nop
 800a4e8:	40020010 	.word	0x40020010
 800a4ec:	40020028 	.word	0x40020028
 800a4f0:	40020040 	.word	0x40020040
 800a4f4:	40020058 	.word	0x40020058
 800a4f8:	40020070 	.word	0x40020070
 800a4fc:	40020088 	.word	0x40020088
 800a500:	400200a0 	.word	0x400200a0
 800a504:	400200b8 	.word	0x400200b8
 800a508:	40020410 	.word	0x40020410
 800a50c:	40020428 	.word	0x40020428
 800a510:	40020440 	.word	0x40020440
 800a514:	40020458 	.word	0x40020458
 800a518:	40020470 	.word	0x40020470
 800a51c:	40020488 	.word	0x40020488
 800a520:	400204a0 	.word	0x400204a0
 800a524:	400204b8 	.word	0x400204b8
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b00      	cmp	r3, #0
 800a534:	bf14      	ite	ne
 800a536:	2301      	movne	r3, #1
 800a538:	2300      	moveq	r3, #0
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8087 	beq.w	800a650 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	2220      	movs	r2, #32
 800a54c:	409a      	lsls	r2, r3
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d139      	bne.n	800a5d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0216 	bic.w	r2, r2, #22
 800a56c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695a      	ldr	r2, [r3, #20]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a57c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <HAL_DMA_IRQHandler+0x736>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0208 	bic.w	r2, r2, #8
 800a59c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	223f      	movs	r2, #63	; 0x3f
 800a5a8:	409a      	lsls	r2, r3
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 834a 	beq.w	800ac5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
          }
          return;
 800a5d0:	e344      	b.n	800ac5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d018      	beq.n	800a612 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d108      	bne.n	800a600 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d02c      	beq.n	800a650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	4798      	blx	r3
 800a5fe:	e027      	b.n	800a650 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d023      	beq.n	800a650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	4798      	blx	r3
 800a610:	e01e      	b.n	800a650 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10f      	bne.n	800a640 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0210 	bic.w	r2, r2, #16
 800a62e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8306 	beq.w	800ac66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8088 	beq.w	800a778 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2204      	movs	r2, #4
 800a66c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a7a      	ldr	r2, [pc, #488]	; (800a860 <HAL_DMA_IRQHandler+0xa08>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d04a      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a79      	ldr	r2, [pc, #484]	; (800a864 <HAL_DMA_IRQHandler+0xa0c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d045      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a77      	ldr	r2, [pc, #476]	; (800a868 <HAL_DMA_IRQHandler+0xa10>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d040      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a76      	ldr	r2, [pc, #472]	; (800a86c <HAL_DMA_IRQHandler+0xa14>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d03b      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a74      	ldr	r2, [pc, #464]	; (800a870 <HAL_DMA_IRQHandler+0xa18>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d036      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a73      	ldr	r2, [pc, #460]	; (800a874 <HAL_DMA_IRQHandler+0xa1c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d031      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a71      	ldr	r2, [pc, #452]	; (800a878 <HAL_DMA_IRQHandler+0xa20>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d02c      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a70      	ldr	r2, [pc, #448]	; (800a87c <HAL_DMA_IRQHandler+0xa24>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d027      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a6e      	ldr	r2, [pc, #440]	; (800a880 <HAL_DMA_IRQHandler+0xa28>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d022      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a6d      	ldr	r2, [pc, #436]	; (800a884 <HAL_DMA_IRQHandler+0xa2c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d01d      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a6b      	ldr	r2, [pc, #428]	; (800a888 <HAL_DMA_IRQHandler+0xa30>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d018      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a6a      	ldr	r2, [pc, #424]	; (800a88c <HAL_DMA_IRQHandler+0xa34>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d013      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a68      	ldr	r2, [pc, #416]	; (800a890 <HAL_DMA_IRQHandler+0xa38>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d00e      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a67      	ldr	r2, [pc, #412]	; (800a894 <HAL_DMA_IRQHandler+0xa3c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d009      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a65      	ldr	r2, [pc, #404]	; (800a898 <HAL_DMA_IRQHandler+0xa40>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d004      	beq.n	800a710 <HAL_DMA_IRQHandler+0x8b8>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a64      	ldr	r2, [pc, #400]	; (800a89c <HAL_DMA_IRQHandler+0xa44>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d108      	bne.n	800a722 <HAL_DMA_IRQHandler+0x8ca>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0201 	bic.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	e007      	b.n	800a732 <HAL_DMA_IRQHandler+0x8da>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0201 	bic.w	r2, r2, #1
 800a730:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3301      	adds	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d307      	bcc.n	800a74e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1f2      	bne.n	800a732 <HAL_DMA_IRQHandler+0x8da>
 800a74c:	e000      	b.n	800a750 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a74e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2203      	movs	r2, #3
 800a762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a766:	e003      	b.n	800a770 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8272 	beq.w	800ac66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	e26c      	b.n	800ac66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a43      	ldr	r2, [pc, #268]	; (800a8a0 <HAL_DMA_IRQHandler+0xa48>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d022      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a42      	ldr	r2, [pc, #264]	; (800a8a4 <HAL_DMA_IRQHandler+0xa4c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d01d      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a40      	ldr	r2, [pc, #256]	; (800a8a8 <HAL_DMA_IRQHandler+0xa50>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d018      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a3f      	ldr	r2, [pc, #252]	; (800a8ac <HAL_DMA_IRQHandler+0xa54>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a3d      	ldr	r2, [pc, #244]	; (800a8b0 <HAL_DMA_IRQHandler+0xa58>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00e      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a3c      	ldr	r2, [pc, #240]	; (800a8b4 <HAL_DMA_IRQHandler+0xa5c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d009      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a3a      	ldr	r2, [pc, #232]	; (800a8b8 <HAL_DMA_IRQHandler+0xa60>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <HAL_DMA_IRQHandler+0x984>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a39      	ldr	r2, [pc, #228]	; (800a8bc <HAL_DMA_IRQHandler+0xa64>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d101      	bne.n	800a7e0 <HAL_DMA_IRQHandler+0x988>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <HAL_DMA_IRQHandler+0x98a>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 823f 	beq.w	800ac66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	f003 031f 	and.w	r3, r3, #31
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	409a      	lsls	r2, r3
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	4013      	ands	r3, r2
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 80cd 	beq.w	800a9a0 <HAL_DMA_IRQHandler+0xb48>
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 80c7 	beq.w	800a9a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a816:	f003 031f 	and.w	r3, r3, #31
 800a81a:	2204      	movs	r2, #4
 800a81c:	409a      	lsls	r2, r3
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d049      	beq.n	800a8c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 8210 	beq.w	800ac60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a848:	e20a      	b.n	800ac60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8206 	beq.w	800ac60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a85c:	e200      	b.n	800ac60 <HAL_DMA_IRQHandler+0xe08>
 800a85e:	bf00      	nop
 800a860:	40020010 	.word	0x40020010
 800a864:	40020028 	.word	0x40020028
 800a868:	40020040 	.word	0x40020040
 800a86c:	40020058 	.word	0x40020058
 800a870:	40020070 	.word	0x40020070
 800a874:	40020088 	.word	0x40020088
 800a878:	400200a0 	.word	0x400200a0
 800a87c:	400200b8 	.word	0x400200b8
 800a880:	40020410 	.word	0x40020410
 800a884:	40020428 	.word	0x40020428
 800a888:	40020440 	.word	0x40020440
 800a88c:	40020458 	.word	0x40020458
 800a890:	40020470 	.word	0x40020470
 800a894:	40020488 	.word	0x40020488
 800a898:	400204a0 	.word	0x400204a0
 800a89c:	400204b8 	.word	0x400204b8
 800a8a0:	58025408 	.word	0x58025408
 800a8a4:	5802541c 	.word	0x5802541c
 800a8a8:	58025430 	.word	0x58025430
 800a8ac:	58025444 	.word	0x58025444
 800a8b0:	58025458 	.word	0x58025458
 800a8b4:	5802546c 	.word	0x5802546c
 800a8b8:	58025480 	.word	0x58025480
 800a8bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d160      	bne.n	800a98c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a7f      	ldr	r2, [pc, #508]	; (800aacc <HAL_DMA_IRQHandler+0xc74>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d04a      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a7d      	ldr	r2, [pc, #500]	; (800aad0 <HAL_DMA_IRQHandler+0xc78>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d045      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a7c      	ldr	r2, [pc, #496]	; (800aad4 <HAL_DMA_IRQHandler+0xc7c>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d040      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a7a      	ldr	r2, [pc, #488]	; (800aad8 <HAL_DMA_IRQHandler+0xc80>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d03b      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a79      	ldr	r2, [pc, #484]	; (800aadc <HAL_DMA_IRQHandler+0xc84>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d036      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a77      	ldr	r2, [pc, #476]	; (800aae0 <HAL_DMA_IRQHandler+0xc88>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d031      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a76      	ldr	r2, [pc, #472]	; (800aae4 <HAL_DMA_IRQHandler+0xc8c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d02c      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a74      	ldr	r2, [pc, #464]	; (800aae8 <HAL_DMA_IRQHandler+0xc90>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d027      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a73      	ldr	r2, [pc, #460]	; (800aaec <HAL_DMA_IRQHandler+0xc94>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d022      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a71      	ldr	r2, [pc, #452]	; (800aaf0 <HAL_DMA_IRQHandler+0xc98>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01d      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a70      	ldr	r2, [pc, #448]	; (800aaf4 <HAL_DMA_IRQHandler+0xc9c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d018      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a6e      	ldr	r2, [pc, #440]	; (800aaf8 <HAL_DMA_IRQHandler+0xca0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a6d      	ldr	r2, [pc, #436]	; (800aafc <HAL_DMA_IRQHandler+0xca4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a6b      	ldr	r2, [pc, #428]	; (800ab00 <HAL_DMA_IRQHandler+0xca8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a6a      	ldr	r2, [pc, #424]	; (800ab04 <HAL_DMA_IRQHandler+0xcac>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_DMA_IRQHandler+0xb12>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a68      	ldr	r2, [pc, #416]	; (800ab08 <HAL_DMA_IRQHandler+0xcb0>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d108      	bne.n	800a97c <HAL_DMA_IRQHandler+0xb24>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0208 	bic.w	r2, r2, #8
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	e007      	b.n	800a98c <HAL_DMA_IRQHandler+0xb34>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0204 	bic.w	r2, r2, #4
 800a98a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 8165 	beq.w	800ac60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a99e:	e15f      	b.n	800ac60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	409a      	lsls	r2, r3
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 80c5 	beq.w	800ab40 <HAL_DMA_IRQHandler+0xce8>
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 80bf 	beq.w	800ab40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	409a      	lsls	r2, r3
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d018      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 813a 	beq.w	800ac64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9f8:	e134      	b.n	800ac64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8130 	beq.w	800ac64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa0c:	e12a      	b.n	800ac64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f040 8089 	bne.w	800ab2c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a2b      	ldr	r2, [pc, #172]	; (800aacc <HAL_DMA_IRQHandler+0xc74>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d04a      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a29      	ldr	r2, [pc, #164]	; (800aad0 <HAL_DMA_IRQHandler+0xc78>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d045      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a28      	ldr	r2, [pc, #160]	; (800aad4 <HAL_DMA_IRQHandler+0xc7c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d040      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <HAL_DMA_IRQHandler+0xc80>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d03b      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a25      	ldr	r2, [pc, #148]	; (800aadc <HAL_DMA_IRQHandler+0xc84>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d036      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a23      	ldr	r2, [pc, #140]	; (800aae0 <HAL_DMA_IRQHandler+0xc88>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d031      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a22      	ldr	r2, [pc, #136]	; (800aae4 <HAL_DMA_IRQHandler+0xc8c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d02c      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a20      	ldr	r2, [pc, #128]	; (800aae8 <HAL_DMA_IRQHandler+0xc90>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d027      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a1f      	ldr	r2, [pc, #124]	; (800aaec <HAL_DMA_IRQHandler+0xc94>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d022      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a1d      	ldr	r2, [pc, #116]	; (800aaf0 <HAL_DMA_IRQHandler+0xc98>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d01d      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a1c      	ldr	r2, [pc, #112]	; (800aaf4 <HAL_DMA_IRQHandler+0xc9c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d018      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a1a      	ldr	r2, [pc, #104]	; (800aaf8 <HAL_DMA_IRQHandler+0xca0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d013      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a19      	ldr	r2, [pc, #100]	; (800aafc <HAL_DMA_IRQHandler+0xca4>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00e      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a17      	ldr	r2, [pc, #92]	; (800ab00 <HAL_DMA_IRQHandler+0xca8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d009      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a16      	ldr	r2, [pc, #88]	; (800ab04 <HAL_DMA_IRQHandler+0xcac>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_DMA_IRQHandler+0xc62>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <HAL_DMA_IRQHandler+0xcb0>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d128      	bne.n	800ab0c <HAL_DMA_IRQHandler+0xcb4>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0214 	bic.w	r2, r2, #20
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	e027      	b.n	800ab1c <HAL_DMA_IRQHandler+0xcc4>
 800aacc:	40020010 	.word	0x40020010
 800aad0:	40020028 	.word	0x40020028
 800aad4:	40020040 	.word	0x40020040
 800aad8:	40020058 	.word	0x40020058
 800aadc:	40020070 	.word	0x40020070
 800aae0:	40020088 	.word	0x40020088
 800aae4:	400200a0 	.word	0x400200a0
 800aae8:	400200b8 	.word	0x400200b8
 800aaec:	40020410 	.word	0x40020410
 800aaf0:	40020428 	.word	0x40020428
 800aaf4:	40020440 	.word	0x40020440
 800aaf8:	40020458 	.word	0x40020458
 800aafc:	40020470 	.word	0x40020470
 800ab00:	40020488 	.word	0x40020488
 800ab04:	400204a0 	.word	0x400204a0
 800ab08:	400204b8 	.word	0x400204b8
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 020a 	bic.w	r2, r2, #10
 800ab1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 8097 	beq.w	800ac64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab3e:	e091      	b.n	800ac64 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab44:	f003 031f 	and.w	r3, r3, #31
 800ab48:	2208      	movs	r2, #8
 800ab4a:	409a      	lsls	r2, r3
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 8088 	beq.w	800ac66 <HAL_DMA_IRQHandler+0xe0e>
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f003 0308 	and.w	r3, r3, #8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8082 	beq.w	800ac66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a41      	ldr	r2, [pc, #260]	; (800ac6c <HAL_DMA_IRQHandler+0xe14>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d04a      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a3f      	ldr	r2, [pc, #252]	; (800ac70 <HAL_DMA_IRQHandler+0xe18>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d045      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a3e      	ldr	r2, [pc, #248]	; (800ac74 <HAL_DMA_IRQHandler+0xe1c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d040      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a3c      	ldr	r2, [pc, #240]	; (800ac78 <HAL_DMA_IRQHandler+0xe20>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d03b      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3b      	ldr	r2, [pc, #236]	; (800ac7c <HAL_DMA_IRQHandler+0xe24>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d036      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a39      	ldr	r2, [pc, #228]	; (800ac80 <HAL_DMA_IRQHandler+0xe28>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d031      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a38      	ldr	r2, [pc, #224]	; (800ac84 <HAL_DMA_IRQHandler+0xe2c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d02c      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a36      	ldr	r2, [pc, #216]	; (800ac88 <HAL_DMA_IRQHandler+0xe30>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d027      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a35      	ldr	r2, [pc, #212]	; (800ac8c <HAL_DMA_IRQHandler+0xe34>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d022      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a33      	ldr	r2, [pc, #204]	; (800ac90 <HAL_DMA_IRQHandler+0xe38>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d01d      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a32      	ldr	r2, [pc, #200]	; (800ac94 <HAL_DMA_IRQHandler+0xe3c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d018      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a30      	ldr	r2, [pc, #192]	; (800ac98 <HAL_DMA_IRQHandler+0xe40>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d013      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <HAL_DMA_IRQHandler+0xe44>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00e      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a2d      	ldr	r2, [pc, #180]	; (800aca0 <HAL_DMA_IRQHandler+0xe48>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d009      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a2c      	ldr	r2, [pc, #176]	; (800aca4 <HAL_DMA_IRQHandler+0xe4c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d004      	beq.n	800ac02 <HAL_DMA_IRQHandler+0xdaa>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <HAL_DMA_IRQHandler+0xe50>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d108      	bne.n	800ac14 <HAL_DMA_IRQHandler+0xdbc>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 021c 	bic.w	r2, r2, #28
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	e007      	b.n	800ac24 <HAL_DMA_IRQHandler+0xdcc>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 020e 	bic.w	r2, r2, #14
 800ac22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac28:	f003 031f 	and.w	r3, r3, #31
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	409a      	lsls	r2, r3
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d009      	beq.n	800ac66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
 800ac5a:	e004      	b.n	800ac66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ac5c:	bf00      	nop
 800ac5e:	e002      	b.n	800ac66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ac66:	3728      	adds	r7, #40	; 0x28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	40020010 	.word	0x40020010
 800ac70:	40020028 	.word	0x40020028
 800ac74:	40020040 	.word	0x40020040
 800ac78:	40020058 	.word	0x40020058
 800ac7c:	40020070 	.word	0x40020070
 800ac80:	40020088 	.word	0x40020088
 800ac84:	400200a0 	.word	0x400200a0
 800ac88:	400200b8 	.word	0x400200b8
 800ac8c:	40020410 	.word	0x40020410
 800ac90:	40020428 	.word	0x40020428
 800ac94:	40020440 	.word	0x40020440
 800ac98:	40020458 	.word	0x40020458
 800ac9c:	40020470 	.word	0x40020470
 800aca0:	40020488 	.word	0x40020488
 800aca4:	400204a0 	.word	0x400204a0
 800aca8:	400204b8 	.word	0x400204b8

0800acac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a7f      	ldr	r2, [pc, #508]	; (800aec8 <DMA_SetConfig+0x21c>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d072      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a7d      	ldr	r2, [pc, #500]	; (800aecc <DMA_SetConfig+0x220>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d06d      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a7c      	ldr	r2, [pc, #496]	; (800aed0 <DMA_SetConfig+0x224>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d068      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a7a      	ldr	r2, [pc, #488]	; (800aed4 <DMA_SetConfig+0x228>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d063      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a79      	ldr	r2, [pc, #484]	; (800aed8 <DMA_SetConfig+0x22c>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d05e      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a77      	ldr	r2, [pc, #476]	; (800aedc <DMA_SetConfig+0x230>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d059      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a76      	ldr	r2, [pc, #472]	; (800aee0 <DMA_SetConfig+0x234>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d054      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a74      	ldr	r2, [pc, #464]	; (800aee4 <DMA_SetConfig+0x238>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d04f      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a73      	ldr	r2, [pc, #460]	; (800aee8 <DMA_SetConfig+0x23c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d04a      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a71      	ldr	r2, [pc, #452]	; (800aeec <DMA_SetConfig+0x240>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d045      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a70      	ldr	r2, [pc, #448]	; (800aef0 <DMA_SetConfig+0x244>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d040      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a6e      	ldr	r2, [pc, #440]	; (800aef4 <DMA_SetConfig+0x248>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d03b      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a6d      	ldr	r2, [pc, #436]	; (800aef8 <DMA_SetConfig+0x24c>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d036      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a6b      	ldr	r2, [pc, #428]	; (800aefc <DMA_SetConfig+0x250>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d031      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a6a      	ldr	r2, [pc, #424]	; (800af00 <DMA_SetConfig+0x254>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d02c      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a68      	ldr	r2, [pc, #416]	; (800af04 <DMA_SetConfig+0x258>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d027      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a67      	ldr	r2, [pc, #412]	; (800af08 <DMA_SetConfig+0x25c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d022      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a65      	ldr	r2, [pc, #404]	; (800af0c <DMA_SetConfig+0x260>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d01d      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a64      	ldr	r2, [pc, #400]	; (800af10 <DMA_SetConfig+0x264>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d018      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a62      	ldr	r2, [pc, #392]	; (800af14 <DMA_SetConfig+0x268>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d013      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a61      	ldr	r2, [pc, #388]	; (800af18 <DMA_SetConfig+0x26c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00e      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a5f      	ldr	r2, [pc, #380]	; (800af1c <DMA_SetConfig+0x270>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d009      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a5e      	ldr	r2, [pc, #376]	; (800af20 <DMA_SetConfig+0x274>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d004      	beq.n	800adb6 <DMA_SetConfig+0x10a>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a5c      	ldr	r2, [pc, #368]	; (800af24 <DMA_SetConfig+0x278>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d101      	bne.n	800adba <DMA_SetConfig+0x10e>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <DMA_SetConfig+0x110>
 800adba:	2300      	movs	r3, #0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800adc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800adda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a39      	ldr	r2, [pc, #228]	; (800aec8 <DMA_SetConfig+0x21c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d04a      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a38      	ldr	r2, [pc, #224]	; (800aecc <DMA_SetConfig+0x220>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d045      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a36      	ldr	r2, [pc, #216]	; (800aed0 <DMA_SetConfig+0x224>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d040      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a35      	ldr	r2, [pc, #212]	; (800aed4 <DMA_SetConfig+0x228>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d03b      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a33      	ldr	r2, [pc, #204]	; (800aed8 <DMA_SetConfig+0x22c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d036      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a32      	ldr	r2, [pc, #200]	; (800aedc <DMA_SetConfig+0x230>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d031      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a30      	ldr	r2, [pc, #192]	; (800aee0 <DMA_SetConfig+0x234>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d02c      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a2f      	ldr	r2, [pc, #188]	; (800aee4 <DMA_SetConfig+0x238>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d027      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a2d      	ldr	r2, [pc, #180]	; (800aee8 <DMA_SetConfig+0x23c>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d022      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a2c      	ldr	r2, [pc, #176]	; (800aeec <DMA_SetConfig+0x240>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d01d      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a2a      	ldr	r2, [pc, #168]	; (800aef0 <DMA_SetConfig+0x244>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d018      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a29      	ldr	r2, [pc, #164]	; (800aef4 <DMA_SetConfig+0x248>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d013      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a27      	ldr	r2, [pc, #156]	; (800aef8 <DMA_SetConfig+0x24c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00e      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a26      	ldr	r2, [pc, #152]	; (800aefc <DMA_SetConfig+0x250>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d009      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a24      	ldr	r2, [pc, #144]	; (800af00 <DMA_SetConfig+0x254>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d004      	beq.n	800ae7c <DMA_SetConfig+0x1d0>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a23      	ldr	r2, [pc, #140]	; (800af04 <DMA_SetConfig+0x258>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d101      	bne.n	800ae80 <DMA_SetConfig+0x1d4>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <DMA_SetConfig+0x1d6>
 800ae80:	2300      	movs	r3, #0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d059      	beq.n	800af3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8a:	f003 031f 	and.w	r3, r3, #31
 800ae8e:	223f      	movs	r2, #63	; 0x3f
 800ae90:	409a      	lsls	r2, r3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aea4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	2b40      	cmp	r3, #64	; 0x40
 800aeb4:	d138      	bne.n	800af28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800aec6:	e086      	b.n	800afd6 <DMA_SetConfig+0x32a>
 800aec8:	40020010 	.word	0x40020010
 800aecc:	40020028 	.word	0x40020028
 800aed0:	40020040 	.word	0x40020040
 800aed4:	40020058 	.word	0x40020058
 800aed8:	40020070 	.word	0x40020070
 800aedc:	40020088 	.word	0x40020088
 800aee0:	400200a0 	.word	0x400200a0
 800aee4:	400200b8 	.word	0x400200b8
 800aee8:	40020410 	.word	0x40020410
 800aeec:	40020428 	.word	0x40020428
 800aef0:	40020440 	.word	0x40020440
 800aef4:	40020458 	.word	0x40020458
 800aef8:	40020470 	.word	0x40020470
 800aefc:	40020488 	.word	0x40020488
 800af00:	400204a0 	.word	0x400204a0
 800af04:	400204b8 	.word	0x400204b8
 800af08:	58025408 	.word	0x58025408
 800af0c:	5802541c 	.word	0x5802541c
 800af10:	58025430 	.word	0x58025430
 800af14:	58025444 	.word	0x58025444
 800af18:	58025458 	.word	0x58025458
 800af1c:	5802546c 	.word	0x5802546c
 800af20:	58025480 	.word	0x58025480
 800af24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
}
 800af38:	e04d      	b.n	800afd6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a29      	ldr	r2, [pc, #164]	; (800afe4 <DMA_SetConfig+0x338>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d022      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a27      	ldr	r2, [pc, #156]	; (800afe8 <DMA_SetConfig+0x33c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d01d      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a26      	ldr	r2, [pc, #152]	; (800afec <DMA_SetConfig+0x340>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d018      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a24      	ldr	r2, [pc, #144]	; (800aff0 <DMA_SetConfig+0x344>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d013      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a23      	ldr	r2, [pc, #140]	; (800aff4 <DMA_SetConfig+0x348>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d00e      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a21      	ldr	r2, [pc, #132]	; (800aff8 <DMA_SetConfig+0x34c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d009      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a20      	ldr	r2, [pc, #128]	; (800affc <DMA_SetConfig+0x350>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d004      	beq.n	800af8a <DMA_SetConfig+0x2de>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a1e      	ldr	r2, [pc, #120]	; (800b000 <DMA_SetConfig+0x354>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d101      	bne.n	800af8e <DMA_SetConfig+0x2e2>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <DMA_SetConfig+0x2e4>
 800af8e:	2300      	movs	r3, #0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d020      	beq.n	800afd6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	2201      	movs	r2, #1
 800af9e:	409a      	lsls	r2, r3
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2b40      	cmp	r3, #64	; 0x40
 800afb2:	d108      	bne.n	800afc6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	60da      	str	r2, [r3, #12]
}
 800afc4:	e007      	b.n	800afd6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	60da      	str	r2, [r3, #12]
}
 800afd6:	bf00      	nop
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	58025408 	.word	0x58025408
 800afe8:	5802541c 	.word	0x5802541c
 800afec:	58025430 	.word	0x58025430
 800aff0:	58025444 	.word	0x58025444
 800aff4:	58025458 	.word	0x58025458
 800aff8:	5802546c 	.word	0x5802546c
 800affc:	58025480 	.word	0x58025480
 800b000:	58025494 	.word	0x58025494

0800b004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a42      	ldr	r2, [pc, #264]	; (800b11c <DMA_CalcBaseAndBitshift+0x118>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d04a      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a41      	ldr	r2, [pc, #260]	; (800b120 <DMA_CalcBaseAndBitshift+0x11c>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d045      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a3f      	ldr	r2, [pc, #252]	; (800b124 <DMA_CalcBaseAndBitshift+0x120>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d040      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a3e      	ldr	r2, [pc, #248]	; (800b128 <DMA_CalcBaseAndBitshift+0x124>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d03b      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a3c      	ldr	r2, [pc, #240]	; (800b12c <DMA_CalcBaseAndBitshift+0x128>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d036      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a3b      	ldr	r2, [pc, #236]	; (800b130 <DMA_CalcBaseAndBitshift+0x12c>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d031      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a39      	ldr	r2, [pc, #228]	; (800b134 <DMA_CalcBaseAndBitshift+0x130>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d02c      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a38      	ldr	r2, [pc, #224]	; (800b138 <DMA_CalcBaseAndBitshift+0x134>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d027      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a36      	ldr	r2, [pc, #216]	; (800b13c <DMA_CalcBaseAndBitshift+0x138>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d022      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a35      	ldr	r2, [pc, #212]	; (800b140 <DMA_CalcBaseAndBitshift+0x13c>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d01d      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a33      	ldr	r2, [pc, #204]	; (800b144 <DMA_CalcBaseAndBitshift+0x140>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d018      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a32      	ldr	r2, [pc, #200]	; (800b148 <DMA_CalcBaseAndBitshift+0x144>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d013      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a30      	ldr	r2, [pc, #192]	; (800b14c <DMA_CalcBaseAndBitshift+0x148>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00e      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a2f      	ldr	r2, [pc, #188]	; (800b150 <DMA_CalcBaseAndBitshift+0x14c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d009      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a2d      	ldr	r2, [pc, #180]	; (800b154 <DMA_CalcBaseAndBitshift+0x150>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d004      	beq.n	800b0ac <DMA_CalcBaseAndBitshift+0xa8>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a2c      	ldr	r2, [pc, #176]	; (800b158 <DMA_CalcBaseAndBitshift+0x154>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d101      	bne.n	800b0b0 <DMA_CalcBaseAndBitshift+0xac>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e000      	b.n	800b0b2 <DMA_CalcBaseAndBitshift+0xae>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d024      	beq.n	800b100 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	3b10      	subs	r3, #16
 800b0be:	4a27      	ldr	r2, [pc, #156]	; (800b15c <DMA_CalcBaseAndBitshift+0x158>)
 800b0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c4:	091b      	lsrs	r3, r3, #4
 800b0c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	4a24      	ldr	r2, [pc, #144]	; (800b160 <DMA_CalcBaseAndBitshift+0x15c>)
 800b0d0:	5cd3      	ldrb	r3, [r2, r3]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d908      	bls.n	800b0f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4b1f      	ldr	r3, [pc, #124]	; (800b164 <DMA_CalcBaseAndBitshift+0x160>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	659a      	str	r2, [r3, #88]	; 0x58
 800b0ee:	e00d      	b.n	800b10c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b1b      	ldr	r3, [pc, #108]	; (800b164 <DMA_CalcBaseAndBitshift+0x160>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6593      	str	r3, [r2, #88]	; 0x58
 800b0fe:	e005      	b.n	800b10c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	40020010 	.word	0x40020010
 800b120:	40020028 	.word	0x40020028
 800b124:	40020040 	.word	0x40020040
 800b128:	40020058 	.word	0x40020058
 800b12c:	40020070 	.word	0x40020070
 800b130:	40020088 	.word	0x40020088
 800b134:	400200a0 	.word	0x400200a0
 800b138:	400200b8 	.word	0x400200b8
 800b13c:	40020410 	.word	0x40020410
 800b140:	40020428 	.word	0x40020428
 800b144:	40020440 	.word	0x40020440
 800b148:	40020458 	.word	0x40020458
 800b14c:	40020470 	.word	0x40020470
 800b150:	40020488 	.word	0x40020488
 800b154:	400204a0 	.word	0x400204a0
 800b158:	400204b8 	.word	0x400204b8
 800b15c:	aaaaaaab 	.word	0xaaaaaaab
 800b160:	08015834 	.word	0x08015834
 800b164:	fffffc00 	.word	0xfffffc00

0800b168 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d120      	bne.n	800b1be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b180:	2b03      	cmp	r3, #3
 800b182:	d858      	bhi.n	800b236 <DMA_CheckFifoParam+0xce>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <DMA_CheckFifoParam+0x24>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b1af 	.word	0x0800b1af
 800b194:	0800b19d 	.word	0x0800b19d
 800b198:	0800b237 	.word	0x0800b237
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d048      	beq.n	800b23a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b1ac:	e045      	b.n	800b23a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b1b6:	d142      	bne.n	800b23e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b1bc:	e03f      	b.n	800b23e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1c6:	d123      	bne.n	800b210 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d838      	bhi.n	800b242 <DMA_CheckFifoParam+0xda>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <DMA_CheckFifoParam+0x70>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b1ef 	.word	0x0800b1ef
 800b1e0:	0800b1e9 	.word	0x0800b1e9
 800b1e4:	0800b201 	.word	0x0800b201
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	73fb      	strb	r3, [r7, #15]
        break;
 800b1ec:	e030      	b.n	800b250 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d025      	beq.n	800b246 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b1fe:	e022      	b.n	800b246 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b208:	d11f      	bne.n	800b24a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b20e:	e01c      	b.n	800b24a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b214:	2b02      	cmp	r3, #2
 800b216:	d902      	bls.n	800b21e <DMA_CheckFifoParam+0xb6>
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d003      	beq.n	800b224 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b21c:	e018      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	73fb      	strb	r3, [r7, #15]
        break;
 800b222:	e015      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00e      	beq.n	800b24e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
    break;
 800b234:	e00b      	b.n	800b24e <DMA_CheckFifoParam+0xe6>
        break;
 800b236:	bf00      	nop
 800b238:	e00a      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        break;
 800b23a:	bf00      	nop
 800b23c:	e008      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        break;
 800b23e:	bf00      	nop
 800b240:	e006      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        break;
 800b242:	bf00      	nop
 800b244:	e004      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        break;
 800b246:	bf00      	nop
 800b248:	e002      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
        break;
 800b24a:	bf00      	nop
 800b24c:	e000      	b.n	800b250 <DMA_CheckFifoParam+0xe8>
    break;
 800b24e:	bf00      	nop
    }
  }

  return status;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop

0800b260 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a38      	ldr	r2, [pc, #224]	; (800b354 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d022      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a36      	ldr	r2, [pc, #216]	; (800b358 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d01d      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a35      	ldr	r2, [pc, #212]	; (800b35c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d018      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a33      	ldr	r2, [pc, #204]	; (800b360 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d013      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a32      	ldr	r2, [pc, #200]	; (800b364 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d00e      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a30      	ldr	r2, [pc, #192]	; (800b368 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d009      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a2f      	ldr	r2, [pc, #188]	; (800b36c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d004      	beq.n	800b2be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a2d      	ldr	r2, [pc, #180]	; (800b370 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d101      	bne.n	800b2c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01a      	beq.n	800b2fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	3b08      	subs	r3, #8
 800b2d0:	4a28      	ldr	r2, [pc, #160]	; (800b374 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	091b      	lsrs	r3, r3, #4
 800b2d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	4b26      	ldr	r3, [pc, #152]	; (800b378 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a24      	ldr	r2, [pc, #144]	; (800b37c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b2ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f003 031f 	and.w	r3, r3, #31
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	409a      	lsls	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b2fc:	e024      	b.n	800b348 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	3b10      	subs	r3, #16
 800b306:	4a1e      	ldr	r2, [pc, #120]	; (800b380 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b308:	fba2 2303 	umull	r2, r3, r2, r3
 800b30c:	091b      	lsrs	r3, r3, #4
 800b30e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	4a1c      	ldr	r2, [pc, #112]	; (800b384 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d806      	bhi.n	800b326 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	4a1b      	ldr	r2, [pc, #108]	; (800b388 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d902      	bls.n	800b326 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3308      	adds	r3, #8
 800b324:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	4b18      	ldr	r3, [pc, #96]	; (800b38c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	461a      	mov	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a16      	ldr	r2, [pc, #88]	; (800b390 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b338:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f003 031f 	and.w	r3, r3, #31
 800b340:	2201      	movs	r2, #1
 800b342:	409a      	lsls	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	58025408 	.word	0x58025408
 800b358:	5802541c 	.word	0x5802541c
 800b35c:	58025430 	.word	0x58025430
 800b360:	58025444 	.word	0x58025444
 800b364:	58025458 	.word	0x58025458
 800b368:	5802546c 	.word	0x5802546c
 800b36c:	58025480 	.word	0x58025480
 800b370:	58025494 	.word	0x58025494
 800b374:	cccccccd 	.word	0xcccccccd
 800b378:	16009600 	.word	0x16009600
 800b37c:	58025880 	.word	0x58025880
 800b380:	aaaaaaab 	.word	0xaaaaaaab
 800b384:	400204b8 	.word	0x400204b8
 800b388:	4002040f 	.word	0x4002040f
 800b38c:	10008200 	.word	0x10008200
 800b390:	40020880 	.word	0x40020880

0800b394 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d04a      	beq.n	800b440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b08      	cmp	r3, #8
 800b3ae:	d847      	bhi.n	800b440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a25      	ldr	r2, [pc, #148]	; (800b44c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d022      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a24      	ldr	r2, [pc, #144]	; (800b450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d01d      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a22      	ldr	r2, [pc, #136]	; (800b454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d018      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a21      	ldr	r2, [pc, #132]	; (800b458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d013      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a1f      	ldr	r2, [pc, #124]	; (800b45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00e      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d009      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a1c      	ldr	r2, [pc, #112]	; (800b464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d004      	beq.n	800b400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a1b      	ldr	r2, [pc, #108]	; (800b468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d101      	bne.n	800b404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b400:	2301      	movs	r3, #1
 800b402:	e000      	b.n	800b406 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b404:	2300      	movs	r3, #0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4b17      	ldr	r3, [pc, #92]	; (800b46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	461a      	mov	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a15      	ldr	r2, [pc, #84]	; (800b470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b41c:	671a      	str	r2, [r3, #112]	; 0x70
 800b41e:	e009      	b.n	800b434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	461a      	mov	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a11      	ldr	r2, [pc, #68]	; (800b478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b432:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3b01      	subs	r3, #1
 800b438:	2201      	movs	r2, #1
 800b43a:	409a      	lsls	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	58025408 	.word	0x58025408
 800b450:	5802541c 	.word	0x5802541c
 800b454:	58025430 	.word	0x58025430
 800b458:	58025444 	.word	0x58025444
 800b45c:	58025458 	.word	0x58025458
 800b460:	5802546c 	.word	0x5802546c
 800b464:	58025480 	.word	0x58025480
 800b468:	58025494 	.word	0x58025494
 800b46c:	1600963f 	.word	0x1600963f
 800b470:	58025940 	.word	0x58025940
 800b474:	1000823f 	.word	0x1000823f
 800b478:	40020940 	.word	0x40020940

0800b47c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	; 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b48a:	4b89      	ldr	r3, [pc, #548]	; (800b6b0 <HAL_GPIO_Init+0x234>)
 800b48c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b48e:	e194      	b.n	800b7ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	2101      	movs	r1, #1
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	fa01 f303 	lsl.w	r3, r1, r3
 800b49c:	4013      	ands	r3, r2
 800b49e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 8186 	beq.w	800b7b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f003 0303 	and.w	r3, r3, #3
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d005      	beq.n	800b4c0 <HAL_GPIO_Init+0x44>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d130      	bne.n	800b522 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	2203      	movs	r2, #3
 800b4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e4:	69ba      	ldr	r2, [r7, #24]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fe:	43db      	mvns	r3, r3
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	4013      	ands	r3, r2
 800b504:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	091b      	lsrs	r3, r3, #4
 800b50c:	f003 0201 	and.w	r2, r3, #1
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	fa02 f303 	lsl.w	r3, r2, r3
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	4313      	orrs	r3, r2
 800b51a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d017      	beq.n	800b55e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	2203      	movs	r2, #3
 800b53a:	fa02 f303 	lsl.w	r3, r2, r3
 800b53e:	43db      	mvns	r3, r3
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	4013      	ands	r3, r2
 800b544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	689a      	ldr	r2, [r3, #8]
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	fa02 f303 	lsl.w	r3, r2, r3
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	4313      	orrs	r3, r2
 800b556:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b02      	cmp	r3, #2
 800b568:	d123      	bne.n	800b5b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	08da      	lsrs	r2, r3, #3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3208      	adds	r2, #8
 800b572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	220f      	movs	r2, #15
 800b582:	fa02 f303 	lsl.w	r3, r2, r3
 800b586:	43db      	mvns	r3, r3
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	4013      	ands	r3, r2
 800b58c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	08da      	lsrs	r2, r3, #3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3208      	adds	r2, #8
 800b5ac:	69b9      	ldr	r1, [r7, #24]
 800b5ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	2203      	movs	r2, #3
 800b5be:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f003 0203 	and.w	r2, r3, #3
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 80e0 	beq.w	800b7b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5f4:	4b2f      	ldr	r3, [pc, #188]	; (800b6b4 <HAL_GPIO_Init+0x238>)
 800b5f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5fa:	4a2e      	ldr	r2, [pc, #184]	; (800b6b4 <HAL_GPIO_Init+0x238>)
 800b5fc:	f043 0302 	orr.w	r3, r3, #2
 800b600:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b604:	4b2b      	ldr	r3, [pc, #172]	; (800b6b4 <HAL_GPIO_Init+0x238>)
 800b606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b612:	4a29      	ldr	r2, [pc, #164]	; (800b6b8 <HAL_GPIO_Init+0x23c>)
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	089b      	lsrs	r3, r3, #2
 800b618:	3302      	adds	r3, #2
 800b61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b61e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	220f      	movs	r2, #15
 800b62a:	fa02 f303 	lsl.w	r3, r2, r3
 800b62e:	43db      	mvns	r3, r3
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	4013      	ands	r3, r2
 800b634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a20      	ldr	r2, [pc, #128]	; (800b6bc <HAL_GPIO_Init+0x240>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d052      	beq.n	800b6e4 <HAL_GPIO_Init+0x268>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a1f      	ldr	r2, [pc, #124]	; (800b6c0 <HAL_GPIO_Init+0x244>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d031      	beq.n	800b6aa <HAL_GPIO_Init+0x22e>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a1e      	ldr	r2, [pc, #120]	; (800b6c4 <HAL_GPIO_Init+0x248>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d02b      	beq.n	800b6a6 <HAL_GPIO_Init+0x22a>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a1d      	ldr	r2, [pc, #116]	; (800b6c8 <HAL_GPIO_Init+0x24c>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d025      	beq.n	800b6a2 <HAL_GPIO_Init+0x226>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a1c      	ldr	r2, [pc, #112]	; (800b6cc <HAL_GPIO_Init+0x250>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d01f      	beq.n	800b69e <HAL_GPIO_Init+0x222>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a1b      	ldr	r2, [pc, #108]	; (800b6d0 <HAL_GPIO_Init+0x254>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d019      	beq.n	800b69a <HAL_GPIO_Init+0x21e>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a1a      	ldr	r2, [pc, #104]	; (800b6d4 <HAL_GPIO_Init+0x258>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d013      	beq.n	800b696 <HAL_GPIO_Init+0x21a>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a19      	ldr	r2, [pc, #100]	; (800b6d8 <HAL_GPIO_Init+0x25c>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d00d      	beq.n	800b692 <HAL_GPIO_Init+0x216>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a18      	ldr	r2, [pc, #96]	; (800b6dc <HAL_GPIO_Init+0x260>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d007      	beq.n	800b68e <HAL_GPIO_Init+0x212>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a17      	ldr	r2, [pc, #92]	; (800b6e0 <HAL_GPIO_Init+0x264>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d101      	bne.n	800b68a <HAL_GPIO_Init+0x20e>
 800b686:	2309      	movs	r3, #9
 800b688:	e02d      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b68a:	230a      	movs	r3, #10
 800b68c:	e02b      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b68e:	2308      	movs	r3, #8
 800b690:	e029      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b692:	2307      	movs	r3, #7
 800b694:	e027      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b696:	2306      	movs	r3, #6
 800b698:	e025      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b69a:	2305      	movs	r3, #5
 800b69c:	e023      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b69e:	2304      	movs	r3, #4
 800b6a0:	e021      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e01f      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e01d      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e01b      	b.n	800b6e6 <HAL_GPIO_Init+0x26a>
 800b6ae:	bf00      	nop
 800b6b0:	58000080 	.word	0x58000080
 800b6b4:	58024400 	.word	0x58024400
 800b6b8:	58000400 	.word	0x58000400
 800b6bc:	58020000 	.word	0x58020000
 800b6c0:	58020400 	.word	0x58020400
 800b6c4:	58020800 	.word	0x58020800
 800b6c8:	58020c00 	.word	0x58020c00
 800b6cc:	58021000 	.word	0x58021000
 800b6d0:	58021400 	.word	0x58021400
 800b6d4:	58021800 	.word	0x58021800
 800b6d8:	58021c00 	.word	0x58021c00
 800b6dc:	58022000 	.word	0x58022000
 800b6e0:	58022400 	.word	0x58022400
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	f002 0203 	and.w	r2, r2, #3
 800b6ec:	0092      	lsls	r2, r2, #2
 800b6ee:	4093      	lsls	r3, r2
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6f6:	4938      	ldr	r1, [pc, #224]	; (800b7d8 <HAL_GPIO_Init+0x35c>)
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	089b      	lsrs	r3, r3, #2
 800b6fc:	3302      	adds	r3, #2
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	43db      	mvns	r3, r3
 800b710:	69ba      	ldr	r2, [r7, #24]
 800b712:	4013      	ands	r3, r2
 800b714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	4313      	orrs	r3, r2
 800b728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b72a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	69ba      	ldr	r2, [r7, #24]
 800b740:	4013      	ands	r3, r2
 800b742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	4313      	orrs	r3, r2
 800b756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	43db      	mvns	r3, r3
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	4013      	ands	r3, r2
 800b76e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	4313      	orrs	r3, r2
 800b782:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	43db      	mvns	r3, r3
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	4013      	ands	r3, r2
 800b798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f47f ae63 	bne.w	800b490 <HAL_GPIO_Init+0x14>
  }
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	3724      	adds	r7, #36	; 0x24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	58000400 	.word	0x58000400

0800b7dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	691a      	ldr	r2, [r3, #16]
 800b7ec:	887b      	ldrh	r3, [r7, #2]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	e001      	b.n	800b7fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	807b      	strh	r3, [r7, #2]
 800b818:	4613      	mov	r3, r2
 800b81a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b81c:	787b      	ldrb	r3, [r7, #1]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b822:	887a      	ldrh	r2, [r7, #2]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b828:	e003      	b.n	800b832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b82a:	887b      	ldrh	r3, [r7, #2]
 800b82c:	041a      	lsls	r2, r3, #16
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	619a      	str	r2, [r3, #24]
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b83e:	b480      	push	{r7}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b850:	887a      	ldrh	r2, [r7, #2]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4013      	ands	r3, r2
 800b856:	041a      	lsls	r2, r3, #16
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	43d9      	mvns	r1, r3
 800b85c:	887b      	ldrh	r3, [r7, #2]
 800b85e:	400b      	ands	r3, r1
 800b860:	431a      	orrs	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	619a      	str	r2, [r3, #24]
}
 800b866:	bf00      	nop
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
	...

0800b874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e07f      	b.n	800b986 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7f9 ff0e 	bl	80056bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2224      	movs	r2, #36	; 0x24
 800b8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f022 0201 	bic.w	r2, r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b8c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d107      	bne.n	800b8ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	689a      	ldr	r2, [r3, #8]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8ea:	609a      	str	r2, [r3, #8]
 800b8ec:	e006      	b.n	800b8fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b8fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d104      	bne.n	800b90e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b90c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6859      	ldr	r1, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	4b1d      	ldr	r3, [pc, #116]	; (800b990 <HAL_I2C_Init+0x11c>)
 800b91a:	430b      	orrs	r3, r1
 800b91c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68da      	ldr	r2, [r3, #12]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b92c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691a      	ldr	r2, [r3, #16]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	430a      	orrs	r2, r1
 800b946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	69d9      	ldr	r1, [r3, #28]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1a      	ldr	r2, [r3, #32]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0201 	orr.w	r2, r2, #1
 800b966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2220      	movs	r2, #32
 800b972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	02008000 	.word	0x02008000

0800b994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b20      	cmp	r3, #32
 800b9a8:	d138      	bne.n	800ba1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e032      	b.n	800ba1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2224      	movs	r2, #36	; 0x24
 800b9c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f022 0201 	bic.w	r2, r2, #1
 800b9d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6819      	ldr	r1, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0201 	orr.w	r2, r2, #1
 800ba06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba1c:	2302      	movs	r3, #2
  }
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b20      	cmp	r3, #32
 800ba3e:	d139      	bne.n	800bab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e033      	b.n	800bab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2224      	movs	r2, #36	; 0x24
 800ba5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0201 	bic.w	r2, r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	021b      	lsls	r3, r3, #8
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2220      	movs	r2, #32
 800baa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	e000      	b.n	800bab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bab4:	2302      	movs	r3, #2
  }
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac4:	b08f      	sub	sp, #60	; 0x3c
 800bac6:	af0a      	add	r7, sp, #40	; 0x28
 800bac8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e116      	b.n	800bd02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d106      	bne.n	800baf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7fa fc50 	bl	8006394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2203      	movs	r2, #3
 800baf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f008 fbfc 	bl	8014310 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	687e      	ldr	r6, [r7, #4]
 800bb20:	466d      	mov	r5, sp
 800bb22:	f106 0410 	add.w	r4, r6, #16
 800bb26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb32:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb36:	1d33      	adds	r3, r6, #4
 800bb38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb3a:	6838      	ldr	r0, [r7, #0]
 800bb3c:	f008 fb7a 	bl	8014234 <USB_CoreInit>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e0d7      	b.n	800bd02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2100      	movs	r1, #0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f008 fbea 	bl	8014332 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
 800bb62:	e04a      	b.n	800bbfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bb64:	7bfa      	ldrb	r2, [r7, #15]
 800bb66:	6879      	ldr	r1, [r7, #4]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	440b      	add	r3, r1
 800bb72:	333d      	adds	r3, #61	; 0x3d
 800bb74:	2201      	movs	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bb78:	7bfa      	ldrb	r2, [r7, #15]
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	440b      	add	r3, r1
 800bb86:	333c      	adds	r3, #60	; 0x3c
 800bb88:	7bfa      	ldrb	r2, [r7, #15]
 800bb8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bb8c:	7bfa      	ldrb	r2, [r7, #15]
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	b298      	uxth	r0, r3
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3356      	adds	r3, #86	; 0x56
 800bba0:	4602      	mov	r2, r0
 800bba2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bba4:	7bfa      	ldrb	r2, [r7, #15]
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	440b      	add	r3, r1
 800bbb2:	3340      	adds	r3, #64	; 0x40
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bbb8:	7bfa      	ldrb	r2, [r7, #15]
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	440b      	add	r3, r1
 800bbc6:	3344      	adds	r3, #68	; 0x44
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bbcc:	7bfa      	ldrb	r2, [r7, #15]
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	4413      	add	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	440b      	add	r3, r1
 800bbda:	3348      	adds	r3, #72	; 0x48
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bbe0:	7bfa      	ldrb	r2, [r7, #15]
 800bbe2:	6879      	ldr	r1, [r7, #4]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	00db      	lsls	r3, r3, #3
 800bbe8:	4413      	add	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	440b      	add	r3, r1
 800bbee:	334c      	adds	r3, #76	; 0x4c
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	73fb      	strb	r3, [r7, #15]
 800bbfa:	7bfa      	ldrb	r2, [r7, #15]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d3af      	bcc.n	800bb64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
 800bc08:	e044      	b.n	800bc94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bc0a:	7bfa      	ldrb	r2, [r7, #15]
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	440b      	add	r3, r1
 800bc18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bc20:	7bfa      	ldrb	r2, [r7, #15]
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	4613      	mov	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800bc32:	7bfa      	ldrb	r2, [r7, #15]
 800bc34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bc36:	7bfa      	ldrb	r2, [r7, #15]
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	00db      	lsls	r3, r3, #3
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	440b      	add	r3, r1
 800bc44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bc4c:	7bfa      	ldrb	r2, [r7, #15]
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	4613      	mov	r3, r2
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	4413      	add	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	440b      	add	r3, r1
 800bc5a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bc62:	7bfa      	ldrb	r2, [r7, #15]
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4613      	mov	r3, r2
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	4413      	add	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	440b      	add	r3, r1
 800bc70:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bc74:	2200      	movs	r2, #0
 800bc76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bc78:	7bfa      	ldrb	r2, [r7, #15]
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	440b      	add	r3, r1
 800bc86:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	3301      	adds	r3, #1
 800bc92:	73fb      	strb	r3, [r7, #15]
 800bc94:	7bfa      	ldrb	r2, [r7, #15]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d3b5      	bcc.n	800bc0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	603b      	str	r3, [r7, #0]
 800bca4:	687e      	ldr	r6, [r7, #4]
 800bca6:	466d      	mov	r5, sp
 800bca8:	f106 0410 	add.w	r4, r6, #16
 800bcac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bcb8:	e885 0003 	stmia.w	r5, {r0, r1}
 800bcbc:	1d33      	adds	r3, r6, #4
 800bcbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcc0:	6838      	ldr	r0, [r7, #0]
 800bcc2:	f008 fb83 	bl	80143cc <USB_DevInit>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e014      	b.n	800bd02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d102      	bne.n	800bcf6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f80b 	bl	800bd0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f008 fd41 	bl	8014782 <USB_DevDisconnect>

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bd0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd3a:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <HAL_PCDEx_ActivateLPM+0x44>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	10000003 	.word	0x10000003

0800bd54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bd5c:	4b19      	ldr	r3, [pc, #100]	; (800bdc4 <HAL_PWREx_ConfigSupply+0x70>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	d00a      	beq.n	800bd7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bd68:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <HAL_PWREx_ConfigSupply+0x70>)
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d001      	beq.n	800bd7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e01f      	b.n	800bdba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e01d      	b.n	800bdba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bd7e:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <HAL_PWREx_ConfigSupply+0x70>)
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f023 0207 	bic.w	r2, r3, #7
 800bd86:	490f      	ldr	r1, [pc, #60]	; (800bdc4 <HAL_PWREx_ConfigSupply+0x70>)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bd8e:	f7fb f893 	bl	8006eb8 <HAL_GetTick>
 800bd92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bd94:	e009      	b.n	800bdaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bd96:	f7fb f88f 	bl	8006eb8 <HAL_GetTick>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bda4:	d901      	bls.n	800bdaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e007      	b.n	800bdba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bdaa:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <HAL_PWREx_ConfigSupply+0x70>)
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdb6:	d1ee      	bne.n	800bd96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	58024800 	.word	0x58024800

0800bdc8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	4a04      	ldr	r2, [pc, #16]	; (800bde4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bdd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdd6:	60d3      	str	r3, [r2, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	58024800 	.word	0x58024800

0800bde8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af02      	add	r7, sp, #8
 800bdee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bdf0:	f7fb f862 	bl	8006eb8 <HAL_GetTick>
 800bdf4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e05f      	b.n	800bec0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d107      	bne.n	800be1c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7fa f805 	bl	8005e1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800be12:	f241 3188 	movw	r1, #5000	; 0x1388
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa5e 	bl	800c2d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	021a      	lsls	r2, r3, #8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	430a      	orrs	r2, r1
 800be34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	2120      	movs	r1, #32
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa56 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800be4c:	7afb      	ldrb	r3, [r7, #11]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d135      	bne.n	800bebe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <HAL_QSPI_Init+0xe0>)
 800be5a:	4013      	ands	r3, r2
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	6852      	ldr	r2, [r2, #4]
 800be60:	0611      	lsls	r1, r2, #24
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	68d2      	ldr	r2, [r2, #12]
 800be66:	4311      	orrs	r1, r2
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	69d2      	ldr	r2, [r2, #28]
 800be6c:	4311      	orrs	r1, r2
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	6a12      	ldr	r2, [r2, #32]
 800be72:	4311      	orrs	r1, r2
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	430b      	orrs	r3, r1
 800be7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	4b12      	ldr	r3, [pc, #72]	; (800becc <HAL_QSPI_Init+0xe4>)
 800be84:	4013      	ands	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6912      	ldr	r2, [r2, #16]
 800be8a:	0411      	lsls	r1, r2, #16
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6952      	ldr	r2, [r2, #20]
 800be90:	4311      	orrs	r1, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	6992      	ldr	r2, [r2, #24]
 800be96:	4311      	orrs	r1, r2
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f042 0201 	orr.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800bebe:	7afb      	ldrb	r3, [r7, #11]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	00ffff2f 	.word	0x00ffff2f
 800becc:	ffe0f8fe 	.word	0xffe0f8fe

0800bed0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bedc:	f7fa ffec 	bl	8006eb8 <HAL_GetTick>
 800bee0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <HAL_QSPI_Command+0x22>
 800beee:	2302      	movs	r3, #2
 800bef0:	e048      	b.n	800bf84 <HAL_QSPI_Command+0xb4>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d137      	bne.n	800bf76 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2120      	movs	r1, #32
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 f9e8 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d125      	bne.n	800bf7a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bf2e:	2200      	movs	r2, #0
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fa15 	bl	800c362 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d115      	bne.n	800bf6c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2201      	movs	r2, #1
 800bf48:	2102      	movs	r1, #2
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 f9d2 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800bf50:	4603      	mov	r3, r0
 800bf52:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10f      	bne.n	800bf7a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf6a:	e006      	b.n	800bf7a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf74:	e001      	b.n	800bf7a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800bf76:	2302      	movs	r3, #2
 800bf78:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3718      	adds	r7, #24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	; 0x28
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800bf9c:	f7fa ff8c 	bl	8006eb8 <HAL_GetTick>
 800bfa0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3320      	adds	r3, #32
 800bfa8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <HAL_QSPI_Transmit+0x2e>
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	e076      	b.n	800c0a8 <HAL_QSPI_Transmit+0x11c>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d165      	bne.n	800c09a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d056      	beq.n	800c088 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2212      	movs	r2, #18
 800bfde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695a      	ldr	r2, [r3, #20]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c00e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c010:	e01b      	b.n	800c04a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2201      	movs	r2, #1
 800c01a:	2104      	movs	r1, #4
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f969 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c022:	4603      	mov	r3, r0
 800c024:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c026:	7ffb      	ldrb	r3, [r7, #31]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d113      	bne.n	800c054 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	781a      	ldrb	r2, [r3, #0]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	1e5a      	subs	r2, r3, #1
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1df      	bne.n	800c012 <HAL_QSPI_Transmit+0x86>
 800c052:	e000      	b.n	800c056 <HAL_QSPI_Transmit+0xca>
          break;
 800c054:	bf00      	nop
      }

      if (status == HAL_OK)
 800c056:	7ffb      	ldrb	r3, [r7, #31]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d110      	bne.n	800c07e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2201      	movs	r2, #1
 800c064:	2102      	movs	r1, #2
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 f944 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c06c:	4603      	mov	r3, r0
 800c06e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c070:	7ffb      	ldrb	r3, [r7, #31]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d103      	bne.n	800c07e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2202      	movs	r2, #2
 800c07c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c086:	e00a      	b.n	800c09e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08c:	f043 0208 	orr.w	r2, r3, #8
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e001      	b.n	800c09e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c09a:	2302      	movs	r3, #2
 800c09c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c0a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3720      	adds	r7, #32
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c0c0:	f7fa fefa 	bl	8006eb8 <HAL_GetTick>
 800c0c4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3320      	adds	r3, #32
 800c0d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <HAL_QSPI_Receive+0x36>
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	e07d      	b.n	800c1e2 <HAL_QSPI_Receive+0x132>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d16c      	bne.n	800c1d4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d05d      	beq.n	800c1c2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2222      	movs	r2, #34	; 0x22
 800c10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c13e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c148:	e01c      	b.n	800c184 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2201      	movs	r2, #1
 800c152:	2106      	movs	r1, #6
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f8cd 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c15a:	4603      	mov	r3, r0
 800c15c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c15e:	7ffb      	ldrb	r3, [r7, #31]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d114      	bne.n	800c18e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	b2d2      	uxtb	r2, r2
 800c16e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17e:	1e5a      	subs	r2, r3, #1
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1de      	bne.n	800c14a <HAL_QSPI_Receive+0x9a>
 800c18c:	e000      	b.n	800c190 <HAL_QSPI_Receive+0xe0>
          break;
 800c18e:	bf00      	nop
      }

      if (status == HAL_OK)
 800c190:	7ffb      	ldrb	r3, [r7, #31]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d110      	bne.n	800c1b8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	2201      	movs	r2, #1
 800c19e:	2102      	movs	r1, #2
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 f8a7 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c1aa:	7ffb      	ldrb	r3, [r7, #31]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d103      	bne.n	800c1b8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1c0:	e00a      	b.n	800c1d8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c6:	f043 0208 	orr.w	r2, r3, #8
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	77fb      	strb	r3, [r7, #31]
 800c1d2:	e001      	b.n	800c1d8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c1e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3720      	adds	r7, #32
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b088      	sub	sp, #32
 800c1ee:	af02      	add	r7, sp, #8
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
 800c1f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c1f8:	f7fa fe5e 	bl	8006eb8 <HAL_GetTick>
 800c1fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <HAL_QSPI_AutoPolling+0x24>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e060      	b.n	800c2d0 <HAL_QSPI_AutoPolling+0xe6>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d14f      	bne.n	800c2c2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2242      	movs	r2, #66	; 0x42
 800c22c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	2200      	movs	r2, #0
 800c238:	2120      	movs	r1, #32
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f85a 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c240:	4603      	mov	r3, r0
 800c242:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d13d      	bne.n	800c2c6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6812      	ldr	r2, [r2, #0]
 800c252:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	6852      	ldr	r2, [r2, #4]
 800c25c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6892      	ldr	r2, [r2, #8]
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	431a      	orrs	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c280:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68da      	ldr	r2, [r3, #12]
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c28a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c28e:	68b9      	ldr	r1, [r7, #8]
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 f866 	bl	800c362 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2201      	movs	r2, #1
 800c29e:	2108      	movs	r1, #8
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f000 f827 	bl	800c2f4 <QSPI_WaitFlagStateUntilTimeout>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2c0:	e001      	b.n	800c2c6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	603b      	str	r3, [r7, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c304:	e01a      	b.n	800c33c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c30c:	d016      	beq.n	800c33c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c30e:	f7fa fdd3 	bl	8006eb8 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d302      	bcc.n	800c324 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10b      	bne.n	800c33c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2204      	movs	r2, #4
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c330:	f043 0201 	orr.w	r2, r3, #1
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	e00e      	b.n	800c35a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	4013      	ands	r3, r2
 800c346:	2b00      	cmp	r3, #0
 800c348:	bf14      	ite	ne
 800c34a:	2301      	movne	r3, #1
 800c34c:	2300      	moveq	r3, #0
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	429a      	cmp	r2, r3
 800c356:	d1d6      	bne.n	800c306 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c362:	b480      	push	{r7}
 800c364:	b085      	sub	sp, #20
 800c366:	af00      	add	r7, sp, #0
 800c368:	60f8      	str	r0, [r7, #12]
 800c36a:	60b9      	str	r1, [r7, #8]
 800c36c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <QSPI_Config+0x28>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c37c:	d005      	beq.n	800c38a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3a01      	subs	r2, #1
 800c388:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80b9 	beq.w	800c506 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d05f      	beq.n	800c45c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	6892      	ldr	r2, [r2, #8]
 800c3a4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d031      	beq.n	800c412 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	049b      	lsls	r3, r3, #18
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	ea42 0103 	orr.w	r1, r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c402:	f000 812e 	beq.w	800c662 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	6852      	ldr	r2, [r2, #4]
 800c40e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c410:	e127      	b.n	800c662 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41a:	431a      	orrs	r2, r3
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c420:	431a      	orrs	r2, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	431a      	orrs	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	049b      	lsls	r3, r3, #18
 800c42e:	431a      	orrs	r2, r3
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	431a      	orrs	r2, r3
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	431a      	orrs	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	431a      	orrs	r2, r3
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	431a      	orrs	r2, r3
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	ea42 0103 	orr.w	r1, r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	430a      	orrs	r2, r1
 800c458:	615a      	str	r2, [r3, #20]
}
 800c45a:	e102      	b.n	800c662 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	69db      	ldr	r3, [r3, #28]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d02e      	beq.n	800c4c2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46c:	431a      	orrs	r2, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c472:	431a      	orrs	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	431a      	orrs	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	049b      	lsls	r3, r3, #18
 800c480:	431a      	orrs	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	431a      	orrs	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	431a      	orrs	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	431a      	orrs	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	431a      	orrs	r2, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	ea42 0103 	orr.w	r1, r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	430a      	orrs	r2, r1
 800c4aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c4b2:	f000 80d6 	beq.w	800c662 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	6852      	ldr	r2, [r2, #4]
 800c4be:	619a      	str	r2, [r3, #24]
}
 800c4c0:	e0cf      	b.n	800c662 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	049b      	lsls	r3, r3, #18
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	ea42 0103 	orr.w	r1, r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	430a      	orrs	r2, r1
 800c502:	615a      	str	r2, [r3, #20]
}
 800c504:	e0ad      	b.n	800c662 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d058      	beq.n	800c5c0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	6892      	ldr	r2, [r2, #8]
 800c516:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d02d      	beq.n	800c57c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c528:	431a      	orrs	r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52e:	431a      	orrs	r2, r3
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	431a      	orrs	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	049b      	lsls	r3, r3, #18
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	431a      	orrs	r2, r3
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	431a      	orrs	r2, r3
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	431a      	orrs	r2, r3
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	431a      	orrs	r2, r3
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	ea42 0103 	orr.w	r1, r2, r3
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	430a      	orrs	r2, r1
 800c566:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c56e:	d078      	beq.n	800c662 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	6852      	ldr	r2, [r2, #4]
 800c578:	619a      	str	r2, [r3, #24]
}
 800c57a:	e072      	b.n	800c662 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c584:	431a      	orrs	r2, r3
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c58a:	431a      	orrs	r2, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c590:	431a      	orrs	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	049b      	lsls	r3, r3, #18
 800c598:	431a      	orrs	r2, r3
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	431a      	orrs	r2, r3
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	ea42 0103 	orr.w	r1, r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	430a      	orrs	r2, r1
 800c5bc:	615a      	str	r2, [r3, #20]
}
 800c5be:	e050      	b.n	800c662 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d02a      	beq.n	800c61e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	049b      	lsls	r3, r3, #18
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	ea42 0103 	orr.w	r1, r2, r3
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	430a      	orrs	r2, r1
 800c608:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c610:	d027      	beq.n	800c662 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	6852      	ldr	r2, [r2, #4]
 800c61a:	619a      	str	r2, [r3, #24]
}
 800c61c:	e021      	b.n	800c662 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c622:	2b00      	cmp	r3, #0
 800c624:	d01d      	beq.n	800c662 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c62e:	431a      	orrs	r2, r3
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c634:	431a      	orrs	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63a:	431a      	orrs	r2, r3
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	049b      	lsls	r3, r3, #18
 800c642:	431a      	orrs	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	431a      	orrs	r2, r3
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	431a      	orrs	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	ea42 0103 	orr.w	r1, r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	430a      	orrs	r2, r1
 800c660:	615a      	str	r2, [r3, #20]
}
 800c662:	bf00      	nop
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08c      	sub	sp, #48	; 0x30
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	f000 bc48 	b.w	800cf14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 8088 	beq.w	800c7a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c692:	4b99      	ldr	r3, [pc, #612]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c69c:	4b96      	ldr	r3, [pc, #600]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	2b10      	cmp	r3, #16
 800c6a6:	d007      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x48>
 800c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6aa:	2b18      	cmp	r3, #24
 800c6ac:	d111      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x62>
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d10c      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6b8:	4b8f      	ldr	r3, [pc, #572]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d06d      	beq.n	800c7a0 <HAL_RCC_OscConfig+0x130>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d169      	bne.n	800c7a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f000 bc21 	b.w	800cf14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6da:	d106      	bne.n	800c6ea <HAL_RCC_OscConfig+0x7a>
 800c6dc:	4b86      	ldr	r3, [pc, #536]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a85      	ldr	r2, [pc, #532]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c6e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	e02e      	b.n	800c748 <HAL_RCC_OscConfig+0xd8>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10c      	bne.n	800c70c <HAL_RCC_OscConfig+0x9c>
 800c6f2:	4b81      	ldr	r3, [pc, #516]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a80      	ldr	r2, [pc, #512]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c6f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	4b7e      	ldr	r3, [pc, #504]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a7d      	ldr	r2, [pc, #500]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	e01d      	b.n	800c748 <HAL_RCC_OscConfig+0xd8>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c714:	d10c      	bne.n	800c730 <HAL_RCC_OscConfig+0xc0>
 800c716:	4b78      	ldr	r3, [pc, #480]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a77      	ldr	r2, [pc, #476]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c71c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c720:	6013      	str	r3, [r2, #0]
 800c722:	4b75      	ldr	r3, [pc, #468]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a74      	ldr	r2, [pc, #464]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c72c:	6013      	str	r3, [r2, #0]
 800c72e:	e00b      	b.n	800c748 <HAL_RCC_OscConfig+0xd8>
 800c730:	4b71      	ldr	r3, [pc, #452]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a70      	ldr	r2, [pc, #448]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	4b6e      	ldr	r3, [pc, #440]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a6d      	ldr	r2, [pc, #436]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d013      	beq.n	800c778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c750:	f7fa fbb2 	bl	8006eb8 <HAL_GetTick>
 800c754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c756:	e008      	b.n	800c76a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c758:	f7fa fbae 	bl	8006eb8 <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	2b64      	cmp	r3, #100	; 0x64
 800c764:	d901      	bls.n	800c76a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e3d4      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c76a:	4b63      	ldr	r3, [pc, #396]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0f0      	beq.n	800c758 <HAL_RCC_OscConfig+0xe8>
 800c776:	e014      	b.n	800c7a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c778:	f7fa fb9e 	bl	8006eb8 <HAL_GetTick>
 800c77c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c77e:	e008      	b.n	800c792 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c780:	f7fa fb9a 	bl	8006eb8 <HAL_GetTick>
 800c784:	4602      	mov	r2, r0
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	2b64      	cmp	r3, #100	; 0x64
 800c78c:	d901      	bls.n	800c792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c78e:	2303      	movs	r3, #3
 800c790:	e3c0      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c792:	4b59      	ldr	r3, [pc, #356]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1f0      	bne.n	800c780 <HAL_RCC_OscConfig+0x110>
 800c79e:	e000      	b.n	800c7a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 0302 	and.w	r3, r3, #2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 80ca 	beq.w	800c944 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7b0:	4b51      	ldr	r3, [pc, #324]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c7ba:	4b4f      	ldr	r3, [pc, #316]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d007      	beq.n	800c7d6 <HAL_RCC_OscConfig+0x166>
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	2b18      	cmp	r3, #24
 800c7ca:	d156      	bne.n	800c87a <HAL_RCC_OscConfig+0x20a>
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	f003 0303 	and.w	r3, r3, #3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d151      	bne.n	800c87a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c7d6:	4b48      	ldr	r3, [pc, #288]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 0304 	and.w	r3, r3, #4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <HAL_RCC_OscConfig+0x17e>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e392      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c7ee:	4b42      	ldr	r3, [pc, #264]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f023 0219 	bic.w	r2, r3, #25
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	493f      	ldr	r1, [pc, #252]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c800:	f7fa fb5a 	bl	8006eb8 <HAL_GetTick>
 800c804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c806:	e008      	b.n	800c81a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c808:	f7fa fb56 	bl	8006eb8 <HAL_GetTick>
 800c80c:	4602      	mov	r2, r0
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	2b02      	cmp	r3, #2
 800c814:	d901      	bls.n	800c81a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e37c      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c81a:	4b37      	ldr	r3, [pc, #220]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0304 	and.w	r3, r3, #4
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0f0      	beq.n	800c808 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c826:	f7fa fb77 	bl	8006f18 <HAL_GetREVID>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f241 0203 	movw	r2, #4099	; 0x1003
 800c830:	4293      	cmp	r3, r2
 800c832:	d817      	bhi.n	800c864 <HAL_RCC_OscConfig+0x1f4>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	2b40      	cmp	r3, #64	; 0x40
 800c83a:	d108      	bne.n	800c84e <HAL_RCC_OscConfig+0x1de>
 800c83c:	4b2e      	ldr	r3, [pc, #184]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c844:	4a2c      	ldr	r2, [pc, #176]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c84a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c84c:	e07a      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c84e:	4b2a      	ldr	r3, [pc, #168]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	031b      	lsls	r3, r3, #12
 800c85c:	4926      	ldr	r1, [pc, #152]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c862:	e06f      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c864:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	061b      	lsls	r3, r3, #24
 800c872:	4921      	ldr	r1, [pc, #132]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c874:	4313      	orrs	r3, r2
 800c876:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c878:	e064      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d047      	beq.n	800c912 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c882:	4b1d      	ldr	r3, [pc, #116]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f023 0219 	bic.w	r2, r3, #25
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	491a      	ldr	r1, [pc, #104]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c890:	4313      	orrs	r3, r2
 800c892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c894:	f7fa fb10 	bl	8006eb8 <HAL_GetTick>
 800c898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c89a:	e008      	b.n	800c8ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c89c:	f7fa fb0c 	bl	8006eb8 <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e332      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c8ae:	4b12      	ldr	r3, [pc, #72]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0304 	and.w	r3, r3, #4
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0f0      	beq.n	800c89c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8ba:	f7fa fb2d 	bl	8006f18 <HAL_GetREVID>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d819      	bhi.n	800c8fc <HAL_RCC_OscConfig+0x28c>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b40      	cmp	r3, #64	; 0x40
 800c8ce:	d108      	bne.n	800c8e2 <HAL_RCC_OscConfig+0x272>
 800c8d0:	4b09      	ldr	r3, [pc, #36]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c8d8:	4a07      	ldr	r2, [pc, #28]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c8da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8de:	6053      	str	r3, [r2, #4]
 800c8e0:	e030      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	031b      	lsls	r3, r3, #12
 800c8f0:	4901      	ldr	r1, [pc, #4]	; (800c8f8 <HAL_RCC_OscConfig+0x288>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	604b      	str	r3, [r1, #4]
 800c8f6:	e025      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
 800c8f8:	58024400 	.word	0x58024400
 800c8fc:	4b9a      	ldr	r3, [pc, #616]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	061b      	lsls	r3, r3, #24
 800c90a:	4997      	ldr	r1, [pc, #604]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	604b      	str	r3, [r1, #4]
 800c910:	e018      	b.n	800c944 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c912:	4b95      	ldr	r3, [pc, #596]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a94      	ldr	r2, [pc, #592]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c918:	f023 0301 	bic.w	r3, r3, #1
 800c91c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c91e:	f7fa facb 	bl	8006eb8 <HAL_GetTick>
 800c922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c924:	e008      	b.n	800c938 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c926:	f7fa fac7 	bl	8006eb8 <HAL_GetTick>
 800c92a:	4602      	mov	r2, r0
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b02      	cmp	r3, #2
 800c932:	d901      	bls.n	800c938 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e2ed      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c938:	4b8b      	ldr	r3, [pc, #556]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1f0      	bne.n	800c926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 80a9 	beq.w	800caa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c952:	4b85      	ldr	r3, [pc, #532]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c95a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c95c:	4b82      	ldr	r3, [pc, #520]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c960:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	2b08      	cmp	r3, #8
 800c966:	d007      	beq.n	800c978 <HAL_RCC_OscConfig+0x308>
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2b18      	cmp	r3, #24
 800c96c:	d13a      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x374>
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	2b01      	cmp	r3, #1
 800c976:	d135      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c978:	4b7b      	ldr	r3, [pc, #492]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <HAL_RCC_OscConfig+0x320>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	69db      	ldr	r3, [r3, #28]
 800c988:	2b80      	cmp	r3, #128	; 0x80
 800c98a:	d001      	beq.n	800c990 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e2c1      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c990:	f7fa fac2 	bl	8006f18 <HAL_GetREVID>
 800c994:	4603      	mov	r3, r0
 800c996:	f241 0203 	movw	r2, #4099	; 0x1003
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d817      	bhi.n	800c9ce <HAL_RCC_OscConfig+0x35e>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	2b20      	cmp	r3, #32
 800c9a4:	d108      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x348>
 800c9a6:	4b70      	ldr	r3, [pc, #448]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c9ae:	4a6e      	ldr	r2, [pc, #440]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c9b6:	e075      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c9b8:	4b6b      	ldr	r3, [pc, #428]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	069b      	lsls	r3, r3, #26
 800c9c6:	4968      	ldr	r1, [pc, #416]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c9cc:	e06a      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c9ce:	4b66      	ldr	r3, [pc, #408]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	061b      	lsls	r3, r3, #24
 800c9dc:	4962      	ldr	r1, [pc, #392]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c9e2:	e05f      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d042      	beq.n	800ca72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c9ec:	4b5e      	ldr	r3, [pc, #376]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a5d      	ldr	r2, [pc, #372]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800c9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9f8:	f7fa fa5e 	bl	8006eb8 <HAL_GetTick>
 800c9fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c9fe:	e008      	b.n	800ca12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ca00:	f7fa fa5a 	bl	8006eb8 <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d901      	bls.n	800ca12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e280      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ca12:	4b55      	ldr	r3, [pc, #340]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0f0      	beq.n	800ca00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca1e:	f7fa fa7b 	bl	8006f18 <HAL_GetREVID>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f241 0203 	movw	r2, #4099	; 0x1003
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d817      	bhi.n	800ca5c <HAL_RCC_OscConfig+0x3ec>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	2b20      	cmp	r3, #32
 800ca32:	d108      	bne.n	800ca46 <HAL_RCC_OscConfig+0x3d6>
 800ca34:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ca3c:	4a4a      	ldr	r2, [pc, #296]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca42:	6053      	str	r3, [r2, #4]
 800ca44:	e02e      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
 800ca46:	4b48      	ldr	r3, [pc, #288]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a1b      	ldr	r3, [r3, #32]
 800ca52:	069b      	lsls	r3, r3, #26
 800ca54:	4944      	ldr	r1, [pc, #272]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	604b      	str	r3, [r1, #4]
 800ca5a:	e023      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
 800ca5c:	4b42      	ldr	r3, [pc, #264]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	061b      	lsls	r3, r3, #24
 800ca6a:	493f      	ldr	r1, [pc, #252]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	60cb      	str	r3, [r1, #12]
 800ca70:	e018      	b.n	800caa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ca72:	4b3d      	ldr	r3, [pc, #244]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a3c      	ldr	r2, [pc, #240]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca7e:	f7fa fa1b 	bl	8006eb8 <HAL_GetTick>
 800ca82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ca84:	e008      	b.n	800ca98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ca86:	f7fa fa17 	bl	8006eb8 <HAL_GetTick>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d901      	bls.n	800ca98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e23d      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ca98:	4b33      	ldr	r3, [pc, #204]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1f0      	bne.n	800ca86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d036      	beq.n	800cb1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	695b      	ldr	r3, [r3, #20]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d019      	beq.n	800caec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cab8:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800caba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cabc:	4a2a      	ldr	r2, [pc, #168]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cabe:	f043 0301 	orr.w	r3, r3, #1
 800cac2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cac4:	f7fa f9f8 	bl	8006eb8 <HAL_GetTick>
 800cac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800caca:	e008      	b.n	800cade <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cacc:	f7fa f9f4 	bl	8006eb8 <HAL_GetTick>
 800cad0:	4602      	mov	r2, r0
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d901      	bls.n	800cade <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cada:	2303      	movs	r3, #3
 800cadc:	e21a      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae2:	f003 0302 	and.w	r3, r3, #2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d0f0      	beq.n	800cacc <HAL_RCC_OscConfig+0x45c>
 800caea:	e018      	b.n	800cb1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800caec:	4b1e      	ldr	r3, [pc, #120]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800caee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caf0:	4a1d      	ldr	r2, [pc, #116]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800caf2:	f023 0301 	bic.w	r3, r3, #1
 800caf6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caf8:	f7fa f9de 	bl	8006eb8 <HAL_GetTick>
 800cafc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cafe:	e008      	b.n	800cb12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb00:	f7fa f9da 	bl	8006eb8 <HAL_GetTick>
 800cb04:	4602      	mov	r2, r0
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d901      	bls.n	800cb12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e200      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f0      	bne.n	800cb00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0320 	and.w	r3, r3, #32
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d039      	beq.n	800cb9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d01c      	beq.n	800cb6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cb32:	4b0d      	ldr	r3, [pc, #52]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0c      	ldr	r2, [pc, #48]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cb38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cb3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cb3e:	f7fa f9bb 	bl	8006eb8 <HAL_GetTick>
 800cb42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cb44:	e008      	b.n	800cb58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb46:	f7fa f9b7 	bl	8006eb8 <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d901      	bls.n	800cb58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e1dd      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cb58:	4b03      	ldr	r3, [pc, #12]	; (800cb68 <HAL_RCC_OscConfig+0x4f8>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0f0      	beq.n	800cb46 <HAL_RCC_OscConfig+0x4d6>
 800cb64:	e01b      	b.n	800cb9e <HAL_RCC_OscConfig+0x52e>
 800cb66:	bf00      	nop
 800cb68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cb6c:	4b9b      	ldr	r3, [pc, #620]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a9a      	ldr	r2, [pc, #616]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cb72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cb78:	f7fa f99e 	bl	8006eb8 <HAL_GetTick>
 800cb7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cb7e:	e008      	b.n	800cb92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb80:	f7fa f99a 	bl	8006eb8 <HAL_GetTick>
 800cb84:	4602      	mov	r2, r0
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d901      	bls.n	800cb92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e1c0      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cb92:	4b92      	ldr	r3, [pc, #584]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1f0      	bne.n	800cb80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 0304 	and.w	r3, r3, #4
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 8081 	beq.w	800ccae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cbac:	4b8c      	ldr	r3, [pc, #560]	; (800cde0 <HAL_RCC_OscConfig+0x770>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a8b      	ldr	r2, [pc, #556]	; (800cde0 <HAL_RCC_OscConfig+0x770>)
 800cbb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cbb8:	f7fa f97e 	bl	8006eb8 <HAL_GetTick>
 800cbbc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cbbe:	e008      	b.n	800cbd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbc0:	f7fa f97a 	bl	8006eb8 <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b64      	cmp	r3, #100	; 0x64
 800cbcc:	d901      	bls.n	800cbd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e1a0      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cbd2:	4b83      	ldr	r3, [pc, #524]	; (800cde0 <HAL_RCC_OscConfig+0x770>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0f0      	beq.n	800cbc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d106      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x584>
 800cbe6:	4b7d      	ldr	r3, [pc, #500]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	4a7c      	ldr	r2, [pc, #496]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cbec:	f043 0301 	orr.w	r3, r3, #1
 800cbf0:	6713      	str	r3, [r2, #112]	; 0x70
 800cbf2:	e02d      	b.n	800cc50 <HAL_RCC_OscConfig+0x5e0>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10c      	bne.n	800cc16 <HAL_RCC_OscConfig+0x5a6>
 800cbfc:	4b77      	ldr	r3, [pc, #476]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc00:	4a76      	ldr	r2, [pc, #472]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc02:	f023 0301 	bic.w	r3, r3, #1
 800cc06:	6713      	str	r3, [r2, #112]	; 0x70
 800cc08:	4b74      	ldr	r3, [pc, #464]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0c:	4a73      	ldr	r2, [pc, #460]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc0e:	f023 0304 	bic.w	r3, r3, #4
 800cc12:	6713      	str	r3, [r2, #112]	; 0x70
 800cc14:	e01c      	b.n	800cc50 <HAL_RCC_OscConfig+0x5e0>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	2b05      	cmp	r3, #5
 800cc1c:	d10c      	bne.n	800cc38 <HAL_RCC_OscConfig+0x5c8>
 800cc1e:	4b6f      	ldr	r3, [pc, #444]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	4a6e      	ldr	r2, [pc, #440]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc24:	f043 0304 	orr.w	r3, r3, #4
 800cc28:	6713      	str	r3, [r2, #112]	; 0x70
 800cc2a:	4b6c      	ldr	r3, [pc, #432]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2e:	4a6b      	ldr	r2, [pc, #428]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc30:	f043 0301 	orr.w	r3, r3, #1
 800cc34:	6713      	str	r3, [r2, #112]	; 0x70
 800cc36:	e00b      	b.n	800cc50 <HAL_RCC_OscConfig+0x5e0>
 800cc38:	4b68      	ldr	r3, [pc, #416]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3c:	4a67      	ldr	r2, [pc, #412]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc3e:	f023 0301 	bic.w	r3, r3, #1
 800cc42:	6713      	str	r3, [r2, #112]	; 0x70
 800cc44:	4b65      	ldr	r3, [pc, #404]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc48:	4a64      	ldr	r2, [pc, #400]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc4a:	f023 0304 	bic.w	r3, r3, #4
 800cc4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d015      	beq.n	800cc84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc58:	f7fa f92e 	bl	8006eb8 <HAL_GetTick>
 800cc5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc5e:	e00a      	b.n	800cc76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc60:	f7fa f92a 	bl	8006eb8 <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e14e      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc76:	4b59      	ldr	r3, [pc, #356]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0ee      	beq.n	800cc60 <HAL_RCC_OscConfig+0x5f0>
 800cc82:	e014      	b.n	800ccae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc84:	f7fa f918 	bl	8006eb8 <HAL_GetTick>
 800cc88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cc8a:	e00a      	b.n	800cca2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc8c:	f7fa f914 	bl	8006eb8 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d901      	bls.n	800cca2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e138      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cca2:	4b4e      	ldr	r3, [pc, #312]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1ee      	bne.n	800cc8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 812d 	beq.w	800cf12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ccb8:	4b48      	ldr	r3, [pc, #288]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccc0:	2b18      	cmp	r3, #24
 800ccc2:	f000 80bd 	beq.w	800ce40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	f040 809e 	bne.w	800ce0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccd0:	4b42      	ldr	r3, [pc, #264]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a41      	ldr	r2, [pc, #260]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800ccd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccdc:	f7fa f8ec 	bl	8006eb8 <HAL_GetTick>
 800cce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cce4:	f7fa f8e8 	bl	8006eb8 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e10e      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ccf6:	4b39      	ldr	r3, [pc, #228]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f0      	bne.n	800cce4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd02:	4b36      	ldr	r3, [pc, #216]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd06:	4b37      	ldr	r3, [pc, #220]	; (800cde4 <HAL_RCC_OscConfig+0x774>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cd12:	0112      	lsls	r2, r2, #4
 800cd14:	430a      	orrs	r2, r1
 800cd16:	4931      	ldr	r1, [pc, #196]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	628b      	str	r3, [r1, #40]	; 0x28
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	3b01      	subs	r3, #1
 800cd22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	025b      	lsls	r3, r3, #9
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	431a      	orrs	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	3b01      	subs	r3, #1
 800cd38:	041b      	lsls	r3, r3, #16
 800cd3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd44:	3b01      	subs	r3, #1
 800cd46:	061b      	lsls	r3, r3, #24
 800cd48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd4c:	4923      	ldr	r1, [pc, #140]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cd52:	4b22      	ldr	r3, [pc, #136]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd56:	4a21      	ldr	r2, [pc, #132]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd58:	f023 0301 	bic.w	r3, r3, #1
 800cd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cd5e:	4b1f      	ldr	r3, [pc, #124]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd62:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <HAL_RCC_OscConfig+0x778>)
 800cd64:	4013      	ands	r3, r2
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd6a:	00d2      	lsls	r2, r2, #3
 800cd6c:	491b      	ldr	r1, [pc, #108]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cd72:	4b1a      	ldr	r3, [pc, #104]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd76:	f023 020c 	bic.w	r2, r3, #12
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7e:	4917      	ldr	r1, [pc, #92]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd80:	4313      	orrs	r3, r2
 800cd82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cd84:	4b15      	ldr	r3, [pc, #84]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	f023 0202 	bic.w	r2, r3, #2
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd90:	4912      	ldr	r1, [pc, #72]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd92:	4313      	orrs	r3, r2
 800cd94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cd96:	4b11      	ldr	r3, [pc, #68]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9a:	4a10      	ldr	r2, [pc, #64]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cd9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cda0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cda2:	4b0e      	ldr	r3, [pc, #56]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda6:	4a0d      	ldr	r2, [pc, #52]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cda8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cdae:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb2:	4a0a      	ldr	r2, [pc, #40]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cdb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cdba:	4b08      	ldr	r3, [pc, #32]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbe:	4a07      	ldr	r2, [pc, #28]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdc0:	f043 0301 	orr.w	r3, r3, #1
 800cdc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdc6:	4b05      	ldr	r3, [pc, #20]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a04      	ldr	r2, [pc, #16]	; (800cddc <HAL_RCC_OscConfig+0x76c>)
 800cdcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdd2:	f7fa f871 	bl	8006eb8 <HAL_GetTick>
 800cdd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cdd8:	e011      	b.n	800cdfe <HAL_RCC_OscConfig+0x78e>
 800cdda:	bf00      	nop
 800cddc:	58024400 	.word	0x58024400
 800cde0:	58024800 	.word	0x58024800
 800cde4:	fffffc0c 	.word	0xfffffc0c
 800cde8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdec:	f7fa f864 	bl	8006eb8 <HAL_GetTick>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d901      	bls.n	800cdfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e08a      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cdfe:	4b47      	ldr	r3, [pc, #284]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d0f0      	beq.n	800cdec <HAL_RCC_OscConfig+0x77c>
 800ce0a:	e082      	b.n	800cf12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce0c:	4b43      	ldr	r3, [pc, #268]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a42      	ldr	r2, [pc, #264]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce18:	f7fa f84e 	bl	8006eb8 <HAL_GetTick>
 800ce1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce1e:	e008      	b.n	800ce32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce20:	f7fa f84a 	bl	8006eb8 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d901      	bls.n	800ce32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e070      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce32:	4b3a      	ldr	r3, [pc, #232]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1f0      	bne.n	800ce20 <HAL_RCC_OscConfig+0x7b0>
 800ce3e:	e068      	b.n	800cf12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ce40:	4b36      	ldr	r3, [pc, #216]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ce46:	4b35      	ldr	r3, [pc, #212]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ce48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d031      	beq.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	f003 0203 	and.w	r2, r3, #3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d12a      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	091b      	lsrs	r3, r3, #4
 800ce66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d122      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d11a      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	0a5b      	lsrs	r3, r3, #9
 800ce86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d111      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	0c1b      	lsrs	r3, r3, #16
 800ce98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d108      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	0e1b      	lsrs	r3, r3, #24
 800ceaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d001      	beq.n	800cebc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e02b      	b.n	800cf14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cebc:	4b17      	ldr	r3, [pc, #92]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec0:	08db      	lsrs	r3, r3, #3
 800cec2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cec6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d01f      	beq.n	800cf12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ced2:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	4a11      	ldr	r2, [pc, #68]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800ced8:	f023 0301 	bic.w	r3, r3, #1
 800cedc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cede:	f7f9 ffeb 	bl	8006eb8 <HAL_GetTick>
 800cee2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cee4:	bf00      	nop
 800cee6:	f7f9 ffe7 	bl	8006eb8 <HAL_GetTick>
 800ceea:	4602      	mov	r2, r0
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d0f9      	beq.n	800cee6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cef2:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800cef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cef6:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <HAL_RCC_OscConfig+0x8b0>)
 800cef8:	4013      	ands	r3, r2
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cefe:	00d2      	lsls	r2, r2, #3
 800cf00:	4906      	ldr	r1, [pc, #24]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800cf02:	4313      	orrs	r3, r2
 800cf04:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	4a04      	ldr	r2, [pc, #16]	; (800cf1c <HAL_RCC_OscConfig+0x8ac>)
 800cf0c:	f043 0301 	orr.w	r3, r3, #1
 800cf10:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3730      	adds	r7, #48	; 0x30
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	58024400 	.word	0x58024400
 800cf20:	ffff0007 	.word	0xffff0007

0800cf24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e19c      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf38:	4b8a      	ldr	r3, [pc, #552]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d910      	bls.n	800cf68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf46:	4b87      	ldr	r3, [pc, #540]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f023 020f 	bic.w	r2, r3, #15
 800cf4e:	4985      	ldr	r1, [pc, #532]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf56:	4b83      	ldr	r3, [pc, #524]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 030f 	and.w	r3, r3, #15
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d001      	beq.n	800cf68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e184      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d010      	beq.n	800cf96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	691a      	ldr	r2, [r3, #16]
 800cf78:	4b7b      	ldr	r3, [pc, #492]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d908      	bls.n	800cf96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cf84:	4b78      	ldr	r3, [pc, #480]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	4975      	ldr	r1, [pc, #468]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0308 	and.w	r3, r3, #8
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d010      	beq.n	800cfc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	695a      	ldr	r2, [r3, #20]
 800cfa6:	4b70      	ldr	r3, [pc, #448]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfa8:	69db      	ldr	r3, [r3, #28]
 800cfaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d908      	bls.n	800cfc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cfb2:	4b6d      	ldr	r3, [pc, #436]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	496a      	ldr	r1, [pc, #424]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 0310 	and.w	r3, r3, #16
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d010      	beq.n	800cff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	699a      	ldr	r2, [r3, #24]
 800cfd4:	4b64      	ldr	r3, [pc, #400]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d908      	bls.n	800cff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cfe0:	4b61      	ldr	r3, [pc, #388]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	495e      	ldr	r1, [pc, #376]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d010      	beq.n	800d020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	69da      	ldr	r2, [r3, #28]
 800d002:	4b59      	ldr	r3, [pc, #356]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d908      	bls.n	800d020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d00e:	4b56      	ldr	r3, [pc, #344]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	4953      	ldr	r1, [pc, #332]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d01c:	4313      	orrs	r3, r2
 800d01e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d010      	beq.n	800d04e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68da      	ldr	r2, [r3, #12]
 800d030:	4b4d      	ldr	r3, [pc, #308]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	f003 030f 	and.w	r3, r3, #15
 800d038:	429a      	cmp	r2, r3
 800d03a:	d908      	bls.n	800d04e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d03c:	4b4a      	ldr	r3, [pc, #296]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	f023 020f 	bic.w	r2, r3, #15
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4947      	ldr	r1, [pc, #284]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d04a:	4313      	orrs	r3, r2
 800d04c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d055      	beq.n	800d106 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d05a:	4b43      	ldr	r3, [pc, #268]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	4940      	ldr	r1, [pc, #256]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d068:	4313      	orrs	r3, r2
 800d06a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	2b02      	cmp	r3, #2
 800d072:	d107      	bne.n	800d084 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d074:	4b3c      	ldr	r3, [pc, #240]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d121      	bne.n	800d0c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e0f6      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d107      	bne.n	800d09c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d08c:	4b36      	ldr	r3, [pc, #216]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d115      	bne.n	800d0c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e0ea      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d107      	bne.n	800d0b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d0a4:	4b30      	ldr	r3, [pc, #192]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d109      	bne.n	800d0c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e0de      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0b4:	4b2c      	ldr	r3, [pc, #176]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0304 	and.w	r3, r3, #4
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e0d6      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d0c4:	4b28      	ldr	r3, [pc, #160]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	f023 0207 	bic.w	r2, r3, #7
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	4925      	ldr	r1, [pc, #148]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0d6:	f7f9 feef 	bl	8006eb8 <HAL_GetTick>
 800d0da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0dc:	e00a      	b.n	800d0f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0de:	f7f9 feeb 	bl	8006eb8 <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d901      	bls.n	800d0f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e0be      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0f4:	4b1c      	ldr	r3, [pc, #112]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	429a      	cmp	r2, r3
 800d104:	d1eb      	bne.n	800d0de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 0302 	and.w	r3, r3, #2
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d010      	beq.n	800d134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	f003 030f 	and.w	r3, r3, #15
 800d11e:	429a      	cmp	r2, r3
 800d120:	d208      	bcs.n	800d134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d122:	4b11      	ldr	r3, [pc, #68]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	f023 020f 	bic.w	r2, r3, #15
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	490e      	ldr	r1, [pc, #56]	; (800d168 <HAL_RCC_ClockConfig+0x244>)
 800d130:	4313      	orrs	r3, r2
 800d132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d134:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f003 030f 	and.w	r3, r3, #15
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d214      	bcs.n	800d16c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d142:	4b08      	ldr	r3, [pc, #32]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f023 020f 	bic.w	r2, r3, #15
 800d14a:	4906      	ldr	r1, [pc, #24]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	4313      	orrs	r3, r2
 800d150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <HAL_RCC_ClockConfig+0x240>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 030f 	and.w	r3, r3, #15
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d005      	beq.n	800d16c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e086      	b.n	800d272 <HAL_RCC_ClockConfig+0x34e>
 800d164:	52002000 	.word	0x52002000
 800d168:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	d010      	beq.n	800d19a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	4b3f      	ldr	r3, [pc, #252]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d184:	429a      	cmp	r2, r3
 800d186:	d208      	bcs.n	800d19a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d188:	4b3c      	ldr	r3, [pc, #240]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d18a:	699b      	ldr	r3, [r3, #24]
 800d18c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	4939      	ldr	r1, [pc, #228]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d196:	4313      	orrs	r3, r2
 800d198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0308 	and.w	r3, r3, #8
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d010      	beq.n	800d1c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	695a      	ldr	r2, [r3, #20]
 800d1aa:	4b34      	ldr	r3, [pc, #208]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d208      	bcs.n	800d1c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1b6:	4b31      	ldr	r3, [pc, #196]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1b8:	69db      	ldr	r3, [r3, #28]
 800d1ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	492e      	ldr	r1, [pc, #184]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0310 	and.w	r3, r3, #16
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d010      	beq.n	800d1f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	4b28      	ldr	r3, [pc, #160]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d208      	bcs.n	800d1f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d1e4:	4b25      	ldr	r3, [pc, #148]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	699b      	ldr	r3, [r3, #24]
 800d1f0:	4922      	ldr	r1, [pc, #136]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 0320 	and.w	r3, r3, #32
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d010      	beq.n	800d224 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69da      	ldr	r2, [r3, #28]
 800d206:	4b1d      	ldr	r3, [pc, #116]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d20e:	429a      	cmp	r2, r3
 800d210:	d208      	bcs.n	800d224 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d212:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	4917      	ldr	r1, [pc, #92]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d220:	4313      	orrs	r3, r2
 800d222:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d224:	f000 f834 	bl	800d290 <HAL_RCC_GetSysClockFreq>
 800d228:	4602      	mov	r2, r0
 800d22a:	4b14      	ldr	r3, [pc, #80]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	0a1b      	lsrs	r3, r3, #8
 800d230:	f003 030f 	and.w	r3, r3, #15
 800d234:	4912      	ldr	r1, [pc, #72]	; (800d280 <HAL_RCC_ClockConfig+0x35c>)
 800d236:	5ccb      	ldrb	r3, [r1, r3]
 800d238:	f003 031f 	and.w	r3, r3, #31
 800d23c:	fa22 f303 	lsr.w	r3, r2, r3
 800d240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d242:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <HAL_RCC_ClockConfig+0x358>)
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	f003 030f 	and.w	r3, r3, #15
 800d24a:	4a0d      	ldr	r2, [pc, #52]	; (800d280 <HAL_RCC_ClockConfig+0x35c>)
 800d24c:	5cd3      	ldrb	r3, [r2, r3]
 800d24e:	f003 031f 	and.w	r3, r3, #31
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	fa22 f303 	lsr.w	r3, r2, r3
 800d258:	4a0a      	ldr	r2, [pc, #40]	; (800d284 <HAL_RCC_ClockConfig+0x360>)
 800d25a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d25c:	4a0a      	ldr	r2, [pc, #40]	; (800d288 <HAL_RCC_ClockConfig+0x364>)
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d262:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <HAL_RCC_ClockConfig+0x368>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4618      	mov	r0, r3
 800d268:	f7f9 fddc 	bl	8006e24 <HAL_InitTick>
 800d26c:	4603      	mov	r3, r0
 800d26e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	58024400 	.word	0x58024400
 800d280:	08015824 	.word	0x08015824
 800d284:	24000044 	.word	0x24000044
 800d288:	24000040 	.word	0x24000040
 800d28c:	24000048 	.word	0x24000048

0800d290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d290:	b480      	push	{r7}
 800d292:	b089      	sub	sp, #36	; 0x24
 800d294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d296:	4bb3      	ldr	r3, [pc, #716]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d29e:	2b18      	cmp	r3, #24
 800d2a0:	f200 8155 	bhi.w	800d54e <HAL_RCC_GetSysClockFreq+0x2be>
 800d2a4:	a201      	add	r2, pc, #4	; (adr r2, 800d2ac <HAL_RCC_GetSysClockFreq+0x1c>)
 800d2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2aa:	bf00      	nop
 800d2ac:	0800d311 	.word	0x0800d311
 800d2b0:	0800d54f 	.word	0x0800d54f
 800d2b4:	0800d54f 	.word	0x0800d54f
 800d2b8:	0800d54f 	.word	0x0800d54f
 800d2bc:	0800d54f 	.word	0x0800d54f
 800d2c0:	0800d54f 	.word	0x0800d54f
 800d2c4:	0800d54f 	.word	0x0800d54f
 800d2c8:	0800d54f 	.word	0x0800d54f
 800d2cc:	0800d337 	.word	0x0800d337
 800d2d0:	0800d54f 	.word	0x0800d54f
 800d2d4:	0800d54f 	.word	0x0800d54f
 800d2d8:	0800d54f 	.word	0x0800d54f
 800d2dc:	0800d54f 	.word	0x0800d54f
 800d2e0:	0800d54f 	.word	0x0800d54f
 800d2e4:	0800d54f 	.word	0x0800d54f
 800d2e8:	0800d54f 	.word	0x0800d54f
 800d2ec:	0800d33d 	.word	0x0800d33d
 800d2f0:	0800d54f 	.word	0x0800d54f
 800d2f4:	0800d54f 	.word	0x0800d54f
 800d2f8:	0800d54f 	.word	0x0800d54f
 800d2fc:	0800d54f 	.word	0x0800d54f
 800d300:	0800d54f 	.word	0x0800d54f
 800d304:	0800d54f 	.word	0x0800d54f
 800d308:	0800d54f 	.word	0x0800d54f
 800d30c:	0800d343 	.word	0x0800d343
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d310:	4b94      	ldr	r3, [pc, #592]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d009      	beq.n	800d330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d31c:	4b91      	ldr	r3, [pc, #580]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	08db      	lsrs	r3, r3, #3
 800d322:	f003 0303 	and.w	r3, r3, #3
 800d326:	4a90      	ldr	r2, [pc, #576]	; (800d568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d328:	fa22 f303 	lsr.w	r3, r2, r3
 800d32c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d32e:	e111      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d330:	4b8d      	ldr	r3, [pc, #564]	; (800d568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d332:	61bb      	str	r3, [r7, #24]
      break;
 800d334:	e10e      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d336:	4b8d      	ldr	r3, [pc, #564]	; (800d56c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d338:	61bb      	str	r3, [r7, #24]
      break;
 800d33a:	e10b      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d33c:	4b8c      	ldr	r3, [pc, #560]	; (800d570 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d33e:	61bb      	str	r3, [r7, #24]
      break;
 800d340:	e108      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d342:	4b88      	ldr	r3, [pc, #544]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d34c:	4b85      	ldr	r3, [pc, #532]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d350:	091b      	lsrs	r3, r3, #4
 800d352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d356:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d358:	4b82      	ldr	r3, [pc, #520]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d362:	4b80      	ldr	r3, [pc, #512]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d366:	08db      	lsrs	r3, r3, #3
 800d368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	fb02 f303 	mul.w	r3, r2, r3
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 80e1 	beq.w	800d548 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	f000 8083 	beq.w	800d494 <HAL_RCC_GetSysClockFreq+0x204>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	2b02      	cmp	r3, #2
 800d392:	f200 80a1 	bhi.w	800d4d8 <HAL_RCC_GetSysClockFreq+0x248>
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <HAL_RCC_GetSysClockFreq+0x114>
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d056      	beq.n	800d450 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d3a2:	e099      	b.n	800d4d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3a4:	4b6f      	ldr	r3, [pc, #444]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 0320 	and.w	r3, r3, #32
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d02d      	beq.n	800d40c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3b0:	4b6c      	ldr	r3, [pc, #432]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	08db      	lsrs	r3, r3, #3
 800d3b6:	f003 0303 	and.w	r3, r3, #3
 800d3ba:	4a6b      	ldr	r2, [pc, #428]	; (800d568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	ee07 3a90 	vmov	s15, r3
 800d3c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	ee07 3a90 	vmov	s15, r3
 800d3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3da:	4b62      	ldr	r3, [pc, #392]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800d3ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d406:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d40a:	e087      	b.n	800d51c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d416:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d578 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d41e:	4b51      	ldr	r3, [pc, #324]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d426:	ee07 3a90 	vmov	s15, r3
 800d42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d432:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d44a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d44e:	e065      	b.n	800d51c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	ee07 3a90 	vmov	s15, r3
 800d456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d45a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d57c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d462:	4b40      	ldr	r3, [pc, #256]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d472:	ed97 6a02 	vldr	s12, [r7, #8]
 800d476:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d48e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d492:	e043      	b.n	800d51c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d580 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a6:	4b2f      	ldr	r3, [pc, #188]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d4d6:	e021      	b.n	800d51c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d57c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ea:	4b1e      	ldr	r3, [pc, #120]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d51a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d51c:	4b11      	ldr	r3, [pc, #68]	; (800d564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d520:	0a5b      	lsrs	r3, r3, #9
 800d522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d526:	3301      	adds	r3, #1
 800d528:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	ee07 3a90 	vmov	s15, r3
 800d530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d534:	edd7 6a07 	vldr	s13, [r7, #28]
 800d538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d53c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d540:	ee17 3a90 	vmov	r3, s15
 800d544:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d546:	e005      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	61bb      	str	r3, [r7, #24]
      break;
 800d54c:	e002      	b.n	800d554 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d54e:	4b07      	ldr	r3, [pc, #28]	; (800d56c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d550:	61bb      	str	r3, [r7, #24]
      break;
 800d552:	bf00      	nop
  }

  return sysclockfreq;
 800d554:	69bb      	ldr	r3, [r7, #24]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3724      	adds	r7, #36	; 0x24
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	58024400 	.word	0x58024400
 800d568:	03d09000 	.word	0x03d09000
 800d56c:	003d0900 	.word	0x003d0900
 800d570:	017d7840 	.word	0x017d7840
 800d574:	46000000 	.word	0x46000000
 800d578:	4c742400 	.word	0x4c742400
 800d57c:	4a742400 	.word	0x4a742400
 800d580:	4bbebc20 	.word	0x4bbebc20

0800d584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d58a:	f7ff fe81 	bl	800d290 <HAL_RCC_GetSysClockFreq>
 800d58e:	4602      	mov	r2, r0
 800d590:	4b10      	ldr	r3, [pc, #64]	; (800d5d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	0a1b      	lsrs	r3, r3, #8
 800d596:	f003 030f 	and.w	r3, r3, #15
 800d59a:	490f      	ldr	r1, [pc, #60]	; (800d5d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800d59c:	5ccb      	ldrb	r3, [r1, r3]
 800d59e:	f003 031f 	and.w	r3, r3, #31
 800d5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	f003 030f 	and.w	r3, r3, #15
 800d5b0:	4a09      	ldr	r2, [pc, #36]	; (800d5d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800d5b2:	5cd3      	ldrb	r3, [r2, r3]
 800d5b4:	f003 031f 	and.w	r3, r3, #31
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d5be:	4a07      	ldr	r2, [pc, #28]	; (800d5dc <HAL_RCC_GetHCLKFreq+0x58>)
 800d5c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d5c2:	4a07      	ldr	r2, [pc, #28]	; (800d5e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d5c8:	4b04      	ldr	r3, [pc, #16]	; (800d5dc <HAL_RCC_GetHCLKFreq+0x58>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	58024400 	.word	0x58024400
 800d5d8:	08015824 	.word	0x08015824
 800d5dc:	24000044 	.word	0x24000044
 800d5e0:	24000040 	.word	0x24000040

0800d5e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d5e8:	f7ff ffcc 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	4b06      	ldr	r3, [pc, #24]	; (800d608 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	091b      	lsrs	r3, r3, #4
 800d5f4:	f003 0307 	and.w	r3, r3, #7
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d5fa:	5ccb      	ldrb	r3, [r1, r3]
 800d5fc:	f003 031f 	and.w	r3, r3, #31
 800d600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d604:	4618      	mov	r0, r3
 800d606:	bd80      	pop	{r7, pc}
 800d608:	58024400 	.word	0x58024400
 800d60c:	08015824 	.word	0x08015824

0800d610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d614:	f7ff ffb6 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 800d618:	4602      	mov	r2, r0
 800d61a:	4b06      	ldr	r3, [pc, #24]	; (800d634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	0a1b      	lsrs	r3, r3, #8
 800d620:	f003 0307 	and.w	r3, r3, #7
 800d624:	4904      	ldr	r1, [pc, #16]	; (800d638 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d626:	5ccb      	ldrb	r3, [r1, r3]
 800d628:	f003 031f 	and.w	r3, r3, #31
 800d62c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d630:	4618      	mov	r0, r3
 800d632:	bd80      	pop	{r7, pc}
 800d634:	58024400 	.word	0x58024400
 800d638:	08015824 	.word	0x08015824

0800d63c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d63c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d640:	b0ca      	sub	sp, #296	; 0x128
 800d642:	af00      	add	r7, sp, #0
 800d644:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d648:	2300      	movs	r3, #0
 800d64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d64e:	2300      	movs	r3, #0
 800d650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d660:	2500      	movs	r5, #0
 800d662:	ea54 0305 	orrs.w	r3, r4, r5
 800d666:	d049      	beq.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d66e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d672:	d02f      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d678:	d828      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d67a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d67e:	d01a      	beq.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d684:	d822      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d68a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d68e:	d007      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d690:	e01c      	b.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d692:	4bb8      	ldr	r3, [pc, #736]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	4ab7      	ldr	r2, [pc, #732]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d69c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d69e:	e01a      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	2102      	movs	r1, #2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f002 fb61 	bl	800fd70 <RCCEx_PLL2_Config>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d6b4:	e00f      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ba:	3328      	adds	r3, #40	; 0x28
 800d6bc:	2102      	movs	r1, #2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f002 fc08 	bl	800fed4 <RCCEx_PLL3_Config>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d6ca:	e004      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6d2:	e000      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d6d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10a      	bne.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d6de:	4ba5      	ldr	r3, [pc, #660]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ec:	4aa1      	ldr	r2, [pc, #644]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	6513      	str	r3, [r2, #80]	; 0x50
 800d6f2:	e003      	b.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d708:	f04f 0900 	mov.w	r9, #0
 800d70c:	ea58 0309 	orrs.w	r3, r8, r9
 800d710:	d047      	beq.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d718:	2b04      	cmp	r3, #4
 800d71a:	d82a      	bhi.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d71c:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d722:	bf00      	nop
 800d724:	0800d739 	.word	0x0800d739
 800d728:	0800d747 	.word	0x0800d747
 800d72c:	0800d75d 	.word	0x0800d75d
 800d730:	0800d77b 	.word	0x0800d77b
 800d734:	0800d77b 	.word	0x0800d77b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d738:	4b8e      	ldr	r3, [pc, #568]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	4a8d      	ldr	r2, [pc, #564]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d744:	e01a      	b.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d74a:	3308      	adds	r3, #8
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f002 fb0e 	bl	800fd70 <RCCEx_PLL2_Config>
 800d754:	4603      	mov	r3, r0
 800d756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d75a:	e00f      	b.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d760:	3328      	adds	r3, #40	; 0x28
 800d762:	2100      	movs	r1, #0
 800d764:	4618      	mov	r0, r3
 800d766:	f002 fbb5 	bl	800fed4 <RCCEx_PLL3_Config>
 800d76a:	4603      	mov	r3, r0
 800d76c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d770:	e004      	b.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d778:	e000      	b.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d77a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d77c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d784:	4b7b      	ldr	r3, [pc, #492]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d788:	f023 0107 	bic.w	r1, r3, #7
 800d78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d792:	4a78      	ldr	r2, [pc, #480]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d794:	430b      	orrs	r3, r1
 800d796:	6513      	str	r3, [r2, #80]	; 0x50
 800d798:	e003      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d79e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d7ae:	f04f 0b00 	mov.w	fp, #0
 800d7b2:	ea5a 030b 	orrs.w	r3, sl, fp
 800d7b6:	d04c      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7c2:	d030      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7c8:	d829      	bhi.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d7ca:	2bc0      	cmp	r3, #192	; 0xc0
 800d7cc:	d02d      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d7ce:	2bc0      	cmp	r3, #192	; 0xc0
 800d7d0:	d825      	bhi.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d7d2:	2b80      	cmp	r3, #128	; 0x80
 800d7d4:	d018      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d7d6:	2b80      	cmp	r3, #128	; 0x80
 800d7d8:	d821      	bhi.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d7de:	2b40      	cmp	r3, #64	; 0x40
 800d7e0:	d007      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d7e2:	e01c      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7e4:	4b63      	ldr	r3, [pc, #396]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	4a62      	ldr	r2, [pc, #392]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d7f0:	e01c      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f002 fab8 	bl	800fd70 <RCCEx_PLL2_Config>
 800d800:	4603      	mov	r3, r0
 800d802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d806:	e011      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d80c:	3328      	adds	r3, #40	; 0x28
 800d80e:	2100      	movs	r1, #0
 800d810:	4618      	mov	r0, r3
 800d812:	f002 fb5f 	bl	800fed4 <RCCEx_PLL3_Config>
 800d816:	4603      	mov	r3, r0
 800d818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d81c:	e006      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d824:	e002      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d826:	bf00      	nop
 800d828:	e000      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d834:	4b4f      	ldr	r3, [pc, #316]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d838:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d842:	4a4c      	ldr	r2, [pc, #304]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d844:	430b      	orrs	r3, r1
 800d846:	6513      	str	r3, [r2, #80]	; 0x50
 800d848:	e003      	b.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d84e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d85e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d862:	2300      	movs	r3, #0
 800d864:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d868:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800d86c:	460b      	mov	r3, r1
 800d86e:	4313      	orrs	r3, r2
 800d870:	d053      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d876:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d87a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d87e:	d035      	beq.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d880:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d884:	d82e      	bhi.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d886:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d88a:	d031      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d88c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d890:	d828      	bhi.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d896:	d01a      	beq.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d89c:	d822      	bhi.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d003      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d8a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8a6:	d007      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d8a8:	e01c      	b.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8aa:	4b32      	ldr	r3, [pc, #200]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	4a31      	ldr	r2, [pc, #196]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d8b6:	e01c      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8bc:	3308      	adds	r3, #8
 800d8be:	2100      	movs	r1, #0
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f002 fa55 	bl	800fd70 <RCCEx_PLL2_Config>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d8cc:	e011      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8d2:	3328      	adds	r3, #40	; 0x28
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f002 fafc 	bl	800fed4 <RCCEx_PLL3_Config>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d8e2:	e006      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d8ea:	e002      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d8ec:	bf00      	nop
 800d8ee:	e000      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d8f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10b      	bne.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d8fa:	4b1e      	ldr	r3, [pc, #120]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8fe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800d902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d90a:	4a1a      	ldr	r2, [pc, #104]	; (800d974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d90c:	430b      	orrs	r3, r1
 800d90e:	6593      	str	r3, [r2, #88]	; 0x58
 800d910:	e003      	b.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d916:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d92a:	2300      	movs	r3, #0
 800d92c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d930:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d934:	460b      	mov	r3, r1
 800d936:	4313      	orrs	r3, r2
 800d938:	d056      	beq.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d93e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d946:	d038      	beq.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d94c:	d831      	bhi.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d94e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d952:	d034      	beq.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d958:	d82b      	bhi.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d95a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d95e:	d01d      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d964:	d825      	bhi.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d006      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d96a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d96e:	d00a      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d970:	e01f      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d972:	bf00      	nop
 800d974:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d978:	4ba2      	ldr	r3, [pc, #648]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	4aa1      	ldr	r2, [pc, #644]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d97e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d984:	e01c      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d98a:	3308      	adds	r3, #8
 800d98c:	2100      	movs	r1, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f002 f9ee 	bl	800fd70 <RCCEx_PLL2_Config>
 800d994:	4603      	mov	r3, r0
 800d996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d99a:	e011      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9a0:	3328      	adds	r3, #40	; 0x28
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f002 fa95 	bl	800fed4 <RCCEx_PLL3_Config>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9b0:	e006      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9b8:	e002      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d9ba:	bf00      	nop
 800d9bc:	e000      	b.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d9be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10b      	bne.n	800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d9c8:	4b8e      	ldr	r3, [pc, #568]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800d9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d9d8:	4a8a      	ldr	r2, [pc, #552]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d9da:	430b      	orrs	r3, r1
 800d9dc:	6593      	str	r3, [r2, #88]	; 0x58
 800d9de:	e003      	b.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d9f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800da02:	460b      	mov	r3, r1
 800da04:	4313      	orrs	r3, r2
 800da06:	d03a      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800da08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da0e:	2b30      	cmp	r3, #48	; 0x30
 800da10:	d01f      	beq.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800da12:	2b30      	cmp	r3, #48	; 0x30
 800da14:	d819      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800da16:	2b20      	cmp	r3, #32
 800da18:	d00c      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800da1a:	2b20      	cmp	r3, #32
 800da1c:	d815      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d019      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800da22:	2b10      	cmp	r3, #16
 800da24:	d111      	bne.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da26:	4b77      	ldr	r3, [pc, #476]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2a:	4a76      	ldr	r2, [pc, #472]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800da32:	e011      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da38:	3308      	adds	r3, #8
 800da3a:	2102      	movs	r1, #2
 800da3c:	4618      	mov	r0, r3
 800da3e:	f002 f997 	bl	800fd70 <RCCEx_PLL2_Config>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800da48:	e006      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da50:	e002      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800da52:	bf00      	nop
 800da54:	e000      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800da56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800da60:	4b68      	ldr	r3, [pc, #416]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da6e:	4a65      	ldr	r2, [pc, #404]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da70:	430b      	orrs	r3, r1
 800da72:	64d3      	str	r3, [r2, #76]	; 0x4c
 800da74:	e003      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800da7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800da8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800da8e:	2300      	movs	r3, #0
 800da90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800da94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800da98:	460b      	mov	r3, r1
 800da9a:	4313      	orrs	r3, r2
 800da9c:	d051      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800da9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daa8:	d035      	beq.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800daaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daae:	d82e      	bhi.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dab0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dab4:	d031      	beq.n	800db1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800daba:	d828      	bhi.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dabc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dac0:	d01a      	beq.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dac6:	d822      	bhi.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dad0:	d007      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dad2:	e01c      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dad4:	4b4b      	ldr	r3, [pc, #300]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	4a4a      	ldr	r2, [pc, #296]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dae0:	e01c      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae6:	3308      	adds	r3, #8
 800dae8:	2100      	movs	r1, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f002 f940 	bl	800fd70 <RCCEx_PLL2_Config>
 800daf0:	4603      	mov	r3, r0
 800daf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800daf6:	e011      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800daf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dafc:	3328      	adds	r3, #40	; 0x28
 800dafe:	2100      	movs	r1, #0
 800db00:	4618      	mov	r0, r3
 800db02:	f002 f9e7 	bl	800fed4 <RCCEx_PLL3_Config>
 800db06:	4603      	mov	r3, r0
 800db08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db0c:	e006      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db14:	e002      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800db16:	bf00      	nop
 800db18:	e000      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800db1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10a      	bne.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800db24:	4b37      	ldr	r3, [pc, #220]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800db2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db32:	4a34      	ldr	r2, [pc, #208]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db34:	430b      	orrs	r3, r1
 800db36:	6513      	str	r3, [r2, #80]	; 0x50
 800db38:	e003      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800db42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800db4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db52:	2300      	movs	r3, #0
 800db54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800db58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800db5c:	460b      	mov	r3, r1
 800db5e:	4313      	orrs	r3, r2
 800db60:	d056      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800db62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db6c:	d033      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800db6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db72:	d82c      	bhi.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800db74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800db78:	d02f      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800db7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800db7e:	d826      	bhi.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800db80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800db84:	d02b      	beq.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800db86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800db8a:	d820      	bhi.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800db8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db90:	d012      	beq.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800db92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db96:	d81a      	bhi.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d022      	beq.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800db9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba0:	d115      	bne.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba6:	3308      	adds	r3, #8
 800dba8:	2101      	movs	r1, #1
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f002 f8e0 	bl	800fd70 <RCCEx_PLL2_Config>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dbb6:	e015      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbbc:	3328      	adds	r3, #40	; 0x28
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f002 f987 	bl	800fed4 <RCCEx_PLL3_Config>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dbcc:	e00a      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbd4:	e006      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dbd6:	bf00      	nop
 800dbd8:	e004      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dbda:	bf00      	nop
 800dbdc:	e002      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dbde:	bf00      	nop
 800dbe0:	e000      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dbe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10d      	bne.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800dbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbfa:	4a02      	ldr	r2, [pc, #8]	; (800dc04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbfc:	430b      	orrs	r3, r1
 800dbfe:	6513      	str	r3, [r2, #80]	; 0x50
 800dc00:	e006      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dc02:	bf00      	nop
 800dc04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800dc1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dc26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	d055      	beq.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dc38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc3c:	d033      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dc3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc42:	d82c      	bhi.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dc44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc48:	d02f      	beq.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc4e:	d826      	bhi.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dc50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc54:	d02b      	beq.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dc56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc5a:	d820      	bhi.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dc5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc60:	d012      	beq.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800dc62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc66:	d81a      	bhi.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d022      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800dc6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc70:	d115      	bne.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc76:	3308      	adds	r3, #8
 800dc78:	2101      	movs	r1, #1
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 f878 	bl	800fd70 <RCCEx_PLL2_Config>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dc86:	e015      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc8c:	3328      	adds	r3, #40	; 0x28
 800dc8e:	2101      	movs	r1, #1
 800dc90:	4618      	mov	r0, r3
 800dc92:	f002 f91f 	bl	800fed4 <RCCEx_PLL3_Config>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dc9c:	e00a      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dca4:	e006      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dca6:	bf00      	nop
 800dca8:	e004      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dcaa:	bf00      	nop
 800dcac:	e002      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dcae:	bf00      	nop
 800dcb0:	e000      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dcb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10b      	bne.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dcbc:	4ba3      	ldr	r3, [pc, #652]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dcbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800dcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dccc:	4a9f      	ldr	r2, [pc, #636]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dcce:	430b      	orrs	r3, r1
 800dcd0:	6593      	str	r3, [r2, #88]	; 0x58
 800dcd2:	e003      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800dce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcec:	2300      	movs	r3, #0
 800dcee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dcf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	d037      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd06:	d00e      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800dd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd0c:	d816      	bhi.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d018      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800dd12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd16:	d111      	bne.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd18:	4b8c      	ldr	r3, [pc, #560]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd1c:	4a8b      	ldr	r2, [pc, #556]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dd24:	e00f      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2a:	3308      	adds	r3, #8
 800dd2c:	2101      	movs	r1, #1
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f002 f81e 	bl	800fd70 <RCCEx_PLL2_Config>
 800dd34:	4603      	mov	r3, r0
 800dd36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dd3a:	e004      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd42:	e000      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800dd44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10a      	bne.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dd4e:	4b7f      	ldr	r3, [pc, #508]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd5c:	4a7b      	ldr	r2, [pc, #492]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	6513      	str	r3, [r2, #80]	; 0x50
 800dd62:	e003      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800dd78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dd82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	d039      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d81c      	bhi.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dd96:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddd9 	.word	0x0800ddd9
 800dda0:	0800ddad 	.word	0x0800ddad
 800dda4:	0800ddbb 	.word	0x0800ddbb
 800dda8:	0800ddd9 	.word	0x0800ddd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddac:	4b67      	ldr	r3, [pc, #412]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb0:	4a66      	ldr	r2, [pc, #408]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ddb8:	e00f      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ddba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	2102      	movs	r1, #2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 ffd4 	bl	800fd70 <RCCEx_PLL2_Config>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ddce:	e004      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ddd6:	e000      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ddd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10a      	bne.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dde2:	4b5a      	ldr	r3, [pc, #360]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dde4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dde6:	f023 0103 	bic.w	r1, r3, #3
 800ddea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddf0:	4a56      	ldr	r2, [pc, #344]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddf2:	430b      	orrs	r3, r1
 800ddf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ddf6:	e003      	b.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800de00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800de0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de10:	2300      	movs	r3, #0
 800de12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800de1a:	460b      	mov	r3, r1
 800de1c:	4313      	orrs	r3, r2
 800de1e:	f000 809f 	beq.w	800df60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800de22:	4b4b      	ldr	r3, [pc, #300]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a4a      	ldr	r2, [pc, #296]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800de28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de2e:	f7f9 f843 	bl	8006eb8 <HAL_GetTick>
 800de32:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de36:	e00b      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de38:	f7f9 f83e 	bl	8006eb8 <HAL_GetTick>
 800de3c:	4602      	mov	r2, r0
 800de3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	2b64      	cmp	r3, #100	; 0x64
 800de46:	d903      	bls.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de4e:	e005      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de50:	4b3f      	ldr	r3, [pc, #252]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0ed      	beq.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800de5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de60:	2b00      	cmp	r3, #0
 800de62:	d179      	bne.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800de64:	4b39      	ldr	r3, [pc, #228]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800de68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800de70:	4053      	eors	r3, r2
 800de72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de76:	2b00      	cmp	r3, #0
 800de78:	d015      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800de7a:	4b34      	ldr	r3, [pc, #208]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de86:	4b31      	ldr	r3, [pc, #196]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8a:	4a30      	ldr	r2, [pc, #192]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de90:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de92:	4b2e      	ldr	r3, [pc, #184]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de96:	4a2d      	ldr	r2, [pc, #180]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de9c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800de9e:	4a2b      	ldr	r2, [pc, #172]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dea4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800deae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deb2:	d118      	bne.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb4:	f7f9 f800 	bl	8006eb8 <HAL_GetTick>
 800deb8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800debc:	e00d      	b.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800debe:	f7f8 fffb 	bl	8006eb8 <HAL_GetTick>
 800dec2:	4602      	mov	r2, r0
 800dec4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dec8:	1ad2      	subs	r2, r2, r3
 800deca:	f241 3388 	movw	r3, #5000	; 0x1388
 800dece:	429a      	cmp	r2, r3
 800ded0:	d903      	bls.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800ded8:	e005      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800deda:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0eb      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800dee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800deea:	2b00      	cmp	r3, #0
 800deec:	d129      	bne.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800deee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800def2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800def6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800defa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800defe:	d10e      	bne.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800df00:	4b12      	ldr	r3, [pc, #72]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df10:	091a      	lsrs	r2, r3, #4
 800df12:	4b10      	ldr	r3, [pc, #64]	; (800df54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800df14:	4013      	ands	r3, r2
 800df16:	4a0d      	ldr	r2, [pc, #52]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df18:	430b      	orrs	r3, r1
 800df1a:	6113      	str	r3, [r2, #16]
 800df1c:	e005      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	4a0a      	ldr	r2, [pc, #40]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df28:	6113      	str	r3, [r2, #16]
 800df2a:	4b08      	ldr	r3, [pc, #32]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800df2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df3a:	4a04      	ldr	r2, [pc, #16]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df3c:	430b      	orrs	r3, r1
 800df3e:	6713      	str	r3, [r2, #112]	; 0x70
 800df40:	e00e      	b.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800df42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800df4a:	e009      	b.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800df4c:	58024400 	.word	0x58024400
 800df50:	58024800 	.word	0x58024800
 800df54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800df60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f002 0301 	and.w	r3, r2, #1
 800df6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df70:	2300      	movs	r3, #0
 800df72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4313      	orrs	r3, r2
 800df7e:	f000 8089 	beq.w	800e094 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800df82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df88:	2b28      	cmp	r3, #40	; 0x28
 800df8a:	d86b      	bhi.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800df8c:	a201      	add	r2, pc, #4	; (adr r2, 800df94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800df8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df92:	bf00      	nop
 800df94:	0800e06d 	.word	0x0800e06d
 800df98:	0800e065 	.word	0x0800e065
 800df9c:	0800e065 	.word	0x0800e065
 800dfa0:	0800e065 	.word	0x0800e065
 800dfa4:	0800e065 	.word	0x0800e065
 800dfa8:	0800e065 	.word	0x0800e065
 800dfac:	0800e065 	.word	0x0800e065
 800dfb0:	0800e065 	.word	0x0800e065
 800dfb4:	0800e039 	.word	0x0800e039
 800dfb8:	0800e065 	.word	0x0800e065
 800dfbc:	0800e065 	.word	0x0800e065
 800dfc0:	0800e065 	.word	0x0800e065
 800dfc4:	0800e065 	.word	0x0800e065
 800dfc8:	0800e065 	.word	0x0800e065
 800dfcc:	0800e065 	.word	0x0800e065
 800dfd0:	0800e065 	.word	0x0800e065
 800dfd4:	0800e04f 	.word	0x0800e04f
 800dfd8:	0800e065 	.word	0x0800e065
 800dfdc:	0800e065 	.word	0x0800e065
 800dfe0:	0800e065 	.word	0x0800e065
 800dfe4:	0800e065 	.word	0x0800e065
 800dfe8:	0800e065 	.word	0x0800e065
 800dfec:	0800e065 	.word	0x0800e065
 800dff0:	0800e065 	.word	0x0800e065
 800dff4:	0800e06d 	.word	0x0800e06d
 800dff8:	0800e065 	.word	0x0800e065
 800dffc:	0800e065 	.word	0x0800e065
 800e000:	0800e065 	.word	0x0800e065
 800e004:	0800e065 	.word	0x0800e065
 800e008:	0800e065 	.word	0x0800e065
 800e00c:	0800e065 	.word	0x0800e065
 800e010:	0800e065 	.word	0x0800e065
 800e014:	0800e06d 	.word	0x0800e06d
 800e018:	0800e065 	.word	0x0800e065
 800e01c:	0800e065 	.word	0x0800e065
 800e020:	0800e065 	.word	0x0800e065
 800e024:	0800e065 	.word	0x0800e065
 800e028:	0800e065 	.word	0x0800e065
 800e02c:	0800e065 	.word	0x0800e065
 800e030:	0800e065 	.word	0x0800e065
 800e034:	0800e06d 	.word	0x0800e06d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e03c:	3308      	adds	r3, #8
 800e03e:	2101      	movs	r1, #1
 800e040:	4618      	mov	r0, r3
 800e042:	f001 fe95 	bl	800fd70 <RCCEx_PLL2_Config>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e04c:	e00f      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e052:	3328      	adds	r3, #40	; 0x28
 800e054:	2101      	movs	r1, #1
 800e056:	4618      	mov	r0, r3
 800e058:	f001 ff3c 	bl	800fed4 <RCCEx_PLL3_Config>
 800e05c:	4603      	mov	r3, r0
 800e05e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e062:	e004      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e06a:	e000      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e06c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e06e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10a      	bne.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e076:	4bbf      	ldr	r3, [pc, #764]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e084:	4abb      	ldr	r2, [pc, #748]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e086:	430b      	orrs	r3, r1
 800e088:	6553      	str	r3, [r2, #84]	; 0x54
 800e08a:	e003      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e08c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f002 0302 	and.w	r3, r2, #2
 800e0a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e0aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	d041      	beq.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d824      	bhi.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e0be:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e111 	.word	0x0800e111
 800e0c8:	0800e0dd 	.word	0x0800e0dd
 800e0cc:	0800e0f3 	.word	0x0800e0f3
 800e0d0:	0800e111 	.word	0x0800e111
 800e0d4:	0800e111 	.word	0x0800e111
 800e0d8:	0800e111 	.word	0x0800e111
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	2101      	movs	r1, #1
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f001 fe43 	bl	800fd70 <RCCEx_PLL2_Config>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e0f0:	e00f      	b.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0f6:	3328      	adds	r3, #40	; 0x28
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 feea 	bl	800fed4 <RCCEx_PLL3_Config>
 800e100:	4603      	mov	r3, r0
 800e102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e106:	e004      	b.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e10e:	e000      	b.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10a      	bne.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e11a:	4b96      	ldr	r3, [pc, #600]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11e:	f023 0107 	bic.w	r1, r3, #7
 800e122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e128:	4a92      	ldr	r2, [pc, #584]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e12a:	430b      	orrs	r3, r1
 800e12c:	6553      	str	r3, [r2, #84]	; 0x54
 800e12e:	e003      	b.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e134:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	f002 0304 	and.w	r3, r2, #4
 800e144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e148:	2300      	movs	r3, #0
 800e14a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e14e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e152:	460b      	mov	r3, r1
 800e154:	4313      	orrs	r3, r2
 800e156:	d044      	beq.n	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e160:	2b05      	cmp	r3, #5
 800e162:	d825      	bhi.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e164:	a201      	add	r2, pc, #4	; (adr r2, 800e16c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16a:	bf00      	nop
 800e16c:	0800e1b9 	.word	0x0800e1b9
 800e170:	0800e185 	.word	0x0800e185
 800e174:	0800e19b 	.word	0x0800e19b
 800e178:	0800e1b9 	.word	0x0800e1b9
 800e17c:	0800e1b9 	.word	0x0800e1b9
 800e180:	0800e1b9 	.word	0x0800e1b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e188:	3308      	adds	r3, #8
 800e18a:	2101      	movs	r1, #1
 800e18c:	4618      	mov	r0, r3
 800e18e:	f001 fdef 	bl	800fd70 <RCCEx_PLL2_Config>
 800e192:	4603      	mov	r3, r0
 800e194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e198:	e00f      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e19e:	3328      	adds	r3, #40	; 0x28
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 fe96 	bl	800fed4 <RCCEx_PLL3_Config>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e1ae:	e004      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1b6:	e000      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10b      	bne.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e1c2:	4b6c      	ldr	r3, [pc, #432]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1c6:	f023 0107 	bic.w	r1, r3, #7
 800e1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e1d2:	4a68      	ldr	r2, [pc, #416]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1d4:	430b      	orrs	r3, r1
 800e1d6:	6593      	str	r3, [r2, #88]	; 0x58
 800e1d8:	e003      	b.n	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f002 0320 	and.w	r3, r2, #32
 800e1ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	4313      	orrs	r3, r2
 800e200:	d055      	beq.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e20a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e20e:	d033      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e214:	d82c      	bhi.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21a:	d02f      	beq.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e220:	d826      	bhi.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e226:	d02b      	beq.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e22c:	d820      	bhi.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e232:	d012      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e238:	d81a      	bhi.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d022      	beq.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e242:	d115      	bne.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e248:	3308      	adds	r3, #8
 800e24a:	2100      	movs	r1, #0
 800e24c:	4618      	mov	r0, r3
 800e24e:	f001 fd8f 	bl	800fd70 <RCCEx_PLL2_Config>
 800e252:	4603      	mov	r3, r0
 800e254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e258:	e015      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e25e:	3328      	adds	r3, #40	; 0x28
 800e260:	2102      	movs	r1, #2
 800e262:	4618      	mov	r0, r3
 800e264:	f001 fe36 	bl	800fed4 <RCCEx_PLL3_Config>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e26e:	e00a      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e270:	2301      	movs	r3, #1
 800e272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e276:	e006      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e278:	bf00      	nop
 800e27a:	e004      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e27c:	bf00      	nop
 800e27e:	e002      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e280:	bf00      	nop
 800e282:	e000      	b.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10b      	bne.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e28e:	4b39      	ldr	r3, [pc, #228]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e292:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e29e:	4a35      	ldr	r2, [pc, #212]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	6553      	str	r3, [r2, #84]	; 0x54
 800e2a4:	e003      	b.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e2c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	d058      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e2d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e2da:	d033      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e2dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e2e0:	d82c      	bhi.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2e6:	d02f      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2ec:	d826      	bhi.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e2ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2f2:	d02b      	beq.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e2f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2f8:	d820      	bhi.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2fe:	d012      	beq.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e304:	d81a      	bhi.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d022      	beq.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e30e:	d115      	bne.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e314:	3308      	adds	r3, #8
 800e316:	2100      	movs	r1, #0
 800e318:	4618      	mov	r0, r3
 800e31a:	f001 fd29 	bl	800fd70 <RCCEx_PLL2_Config>
 800e31e:	4603      	mov	r3, r0
 800e320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e324:	e015      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e32a:	3328      	adds	r3, #40	; 0x28
 800e32c:	2102      	movs	r1, #2
 800e32e:	4618      	mov	r0, r3
 800e330:	f001 fdd0 	bl	800fed4 <RCCEx_PLL3_Config>
 800e334:	4603      	mov	r3, r0
 800e336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e33a:	e00a      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e342:	e006      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e344:	bf00      	nop
 800e346:	e004      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e348:	bf00      	nop
 800e34a:	e002      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e34c:	bf00      	nop
 800e34e:	e000      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10e      	bne.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e35e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e36a:	4a02      	ldr	r2, [pc, #8]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e36c:	430b      	orrs	r3, r1
 800e36e:	6593      	str	r3, [r2, #88]	; 0x58
 800e370:	e006      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e372:	bf00      	nop
 800e374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e37c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e38c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e390:	2300      	movs	r3, #0
 800e392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e396:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e39a:	460b      	mov	r3, r1
 800e39c:	4313      	orrs	r3, r2
 800e39e:	d055      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e3a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e3ac:	d033      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e3ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e3b2:	d82c      	bhi.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3b8:	d02f      	beq.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3be:	d826      	bhi.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e3c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e3c4:	d02b      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e3c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e3ca:	d820      	bhi.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e3cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3d0:	d012      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e3d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3d6:	d81a      	bhi.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d022      	beq.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e3dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3e0:	d115      	bne.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f001 fcc0 	bl	800fd70 <RCCEx_PLL2_Config>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e3f6:	e015      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3fc:	3328      	adds	r3, #40	; 0x28
 800e3fe:	2102      	movs	r1, #2
 800e400:	4618      	mov	r0, r3
 800e402:	f001 fd67 	bl	800fed4 <RCCEx_PLL3_Config>
 800e406:	4603      	mov	r3, r0
 800e408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e40c:	e00a      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e414:	e006      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e416:	bf00      	nop
 800e418:	e004      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e41a:	bf00      	nop
 800e41c:	e002      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e41e:	bf00      	nop
 800e420:	e000      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10b      	bne.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e42c:	4ba1      	ldr	r3, [pc, #644]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e430:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e43c:	4a9d      	ldr	r2, [pc, #628]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e43e:	430b      	orrs	r3, r1
 800e440:	6593      	str	r3, [r2, #88]	; 0x58
 800e442:	e003      	b.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	f002 0308 	and.w	r3, r2, #8
 800e458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e45c:	2300      	movs	r3, #0
 800e45e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e462:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e466:	460b      	mov	r3, r1
 800e468:	4313      	orrs	r3, r2
 800e46a:	d01e      	beq.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e478:	d10c      	bne.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e47e:	3328      	adds	r3, #40	; 0x28
 800e480:	2102      	movs	r1, #2
 800e482:	4618      	mov	r0, r3
 800e484:	f001 fd26 	bl	800fed4 <RCCEx_PLL3_Config>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d002      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e494:	4b87      	ldr	r3, [pc, #540]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e498:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4a4:	4a83      	ldr	r2, [pc, #524]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4a6:	430b      	orrs	r3, r1
 800e4a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	f002 0310 	and.w	r3, r2, #16
 800e4b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	d01e      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4d6:	d10c      	bne.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4dc:	3328      	adds	r3, #40	; 0x28
 800e4de:	2102      	movs	r1, #2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 fcf7 	bl	800fed4 <RCCEx_PLL3_Config>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e4f2:	4b70      	ldr	r3, [pc, #448]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e502:	4a6c      	ldr	r2, [pc, #432]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e504:	430b      	orrs	r3, r1
 800e506:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e518:	2300      	movs	r3, #0
 800e51a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e51e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e522:	460b      	mov	r3, r1
 800e524:	4313      	orrs	r3, r2
 800e526:	d03e      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e52c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e534:	d022      	beq.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e53a:	d81b      	bhi.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e544:	d00b      	beq.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e546:	e015      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e54c:	3308      	adds	r3, #8
 800e54e:	2100      	movs	r1, #0
 800e550:	4618      	mov	r0, r3
 800e552:	f001 fc0d 	bl	800fd70 <RCCEx_PLL2_Config>
 800e556:	4603      	mov	r3, r0
 800e558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e55c:	e00f      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e562:	3328      	adds	r3, #40	; 0x28
 800e564:	2102      	movs	r1, #2
 800e566:	4618      	mov	r0, r3
 800e568:	f001 fcb4 	bl	800fed4 <RCCEx_PLL3_Config>
 800e56c:	4603      	mov	r3, r0
 800e56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e572:	e004      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e57a:	e000      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10b      	bne.n	800e59e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e586:	4b4b      	ldr	r3, [pc, #300]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e58a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e596:	4a47      	ldr	r2, [pc, #284]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e598:	430b      	orrs	r3, r1
 800e59a:	6593      	str	r3, [r2, #88]	; 0x58
 800e59c:	e003      	b.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e59e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e5b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e5b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	d03b      	beq.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e5ce:	d01f      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e5d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e5d4:	d818      	bhi.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5da:	d003      	beq.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e5dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5e0:	d007      	beq.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e5e2:	e011      	b.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5e4:	4b33      	ldr	r3, [pc, #204]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e8:	4a32      	ldr	r2, [pc, #200]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e5f0:	e00f      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5f6:	3328      	adds	r3, #40	; 0x28
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f001 fc6a 	bl	800fed4 <RCCEx_PLL3_Config>
 800e600:	4603      	mov	r3, r0
 800e602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e606:	e004      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e60e:	e000      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10b      	bne.n	800e632 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e61a:	4b26      	ldr	r3, [pc, #152]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e61e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e62a:	4a22      	ldr	r2, [pc, #136]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e62c:	430b      	orrs	r3, r1
 800e62e:	6553      	str	r3, [r2, #84]	; 0x54
 800e630:	e003      	b.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e642:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e646:	673b      	str	r3, [r7, #112]	; 0x70
 800e648:	2300      	movs	r3, #0
 800e64a:	677b      	str	r3, [r7, #116]	; 0x74
 800e64c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e650:	460b      	mov	r3, r1
 800e652:	4313      	orrs	r3, r2
 800e654:	d034      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e664:	d007      	beq.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e666:	e011      	b.n	800e68c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e668:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66c:	4a11      	ldr	r2, [pc, #68]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e66e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e674:	e00e      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e67a:	3308      	adds	r3, #8
 800e67c:	2102      	movs	r1, #2
 800e67e:	4618      	mov	r0, r3
 800e680:	f001 fb76 	bl	800fd70 <RCCEx_PLL2_Config>
 800e684:	4603      	mov	r3, r0
 800e686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e68a:	e003      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e692:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10d      	bne.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6aa:	4a02      	ldr	r2, [pc, #8]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6ac:	430b      	orrs	r3, r1
 800e6ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6b0:	e006      	b.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e6b2:	bf00      	nop
 800e6b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e6cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	d00c      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6e0:	3328      	adds	r3, #40	; 0x28
 800e6e2:	2102      	movs	r1, #2
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f001 fbf5 	bl	800fed4 <RCCEx_PLL3_Config>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e702:	663b      	str	r3, [r7, #96]	; 0x60
 800e704:	2300      	movs	r3, #0
 800e706:	667b      	str	r3, [r7, #100]	; 0x64
 800e708:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e70c:	460b      	mov	r3, r1
 800e70e:	4313      	orrs	r3, r2
 800e710:	d038      	beq.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e71a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e71e:	d018      	beq.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e724:	d811      	bhi.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e72a:	d014      	beq.n	800e756 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e730:	d80b      	bhi.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e732:	2b00      	cmp	r3, #0
 800e734:	d011      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e73a:	d106      	bne.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e73c:	4bc3      	ldr	r3, [pc, #780]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e740:	4ac2      	ldr	r2, [pc, #776]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e748:	e008      	b.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e750:	e004      	b.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e752:	bf00      	nop
 800e754:	e002      	b.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e756:	bf00      	nop
 800e758:	e000      	b.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e75a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e75c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10b      	bne.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e764:	4bb9      	ldr	r3, [pc, #740]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e768:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e774:	4ab5      	ldr	r2, [pc, #724]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e776:	430b      	orrs	r3, r1
 800e778:	6553      	str	r3, [r2, #84]	; 0x54
 800e77a:	e003      	b.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e77c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e790:	65bb      	str	r3, [r7, #88]	; 0x58
 800e792:	2300      	movs	r3, #0
 800e794:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e796:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e79a:	460b      	mov	r3, r1
 800e79c:	4313      	orrs	r3, r2
 800e79e:	d009      	beq.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e7a0:	4baa      	ldr	r3, [pc, #680]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ae:	4aa7      	ldr	r2, [pc, #668]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e7c0:	653b      	str	r3, [r7, #80]	; 0x50
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	657b      	str	r3, [r7, #84]	; 0x54
 800e7c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	d00a      	beq.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e7d0:	4b9e      	ldr	r3, [pc, #632]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e7e0:	4a9a      	ldr	r2, [pc, #616]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7e2:	430b      	orrs	r3, r1
 800e7e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e7f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4313      	orrs	r3, r2
 800e800:	d009      	beq.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e802:	4b92      	ldr	r3, [pc, #584]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e806:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e810:	4a8e      	ldr	r2, [pc, #568]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e812:	430b      	orrs	r3, r1
 800e814:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e822:	643b      	str	r3, [r7, #64]	; 0x40
 800e824:	2300      	movs	r3, #0
 800e826:	647b      	str	r3, [r7, #68]	; 0x44
 800e828:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e82c:	460b      	mov	r3, r1
 800e82e:	4313      	orrs	r3, r2
 800e830:	d00e      	beq.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e832:	4b86      	ldr	r3, [pc, #536]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	4a85      	ldr	r2, [pc, #532]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e83c:	6113      	str	r3, [r2, #16]
 800e83e:	4b83      	ldr	r3, [pc, #524]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e840:	6919      	ldr	r1, [r3, #16]
 800e842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e846:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e84a:	4a80      	ldr	r2, [pc, #512]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e84c:	430b      	orrs	r3, r1
 800e84e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e85c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85e:	2300      	movs	r3, #0
 800e860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e862:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e866:	460b      	mov	r3, r1
 800e868:	4313      	orrs	r3, r2
 800e86a:	d009      	beq.n	800e880 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e86c:	4b77      	ldr	r3, [pc, #476]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e86e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e870:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e87a:	4a74      	ldr	r2, [pc, #464]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e87c:	430b      	orrs	r3, r1
 800e87e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e88c:	633b      	str	r3, [r7, #48]	; 0x30
 800e88e:	2300      	movs	r3, #0
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
 800e892:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e896:	460b      	mov	r3, r1
 800e898:	4313      	orrs	r3, r2
 800e89a:	d00a      	beq.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e89c:	4b6b      	ldr	r3, [pc, #428]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8a0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ac:	4a67      	ldr	r2, [pc, #412]	; (800ea4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8ae:	430b      	orrs	r3, r1
 800e8b0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	d011      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8d2:	3308      	adds	r3, #8
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f001 fa4a 	bl	800fd70 <RCCEx_PLL2_Config>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d003      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	6239      	str	r1, [r7, #32]
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
 800e904:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e908:	460b      	mov	r3, r1
 800e90a:	4313      	orrs	r3, r2
 800e90c:	d011      	beq.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e912:	3308      	adds	r3, #8
 800e914:	2101      	movs	r1, #1
 800e916:	4618      	mov	r0, r3
 800e918:	f001 fa2a 	bl	800fd70 <RCCEx_PLL2_Config>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e926:	2b00      	cmp	r3, #0
 800e928:	d003      	beq.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e92e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	2100      	movs	r1, #0
 800e93c:	61b9      	str	r1, [r7, #24]
 800e93e:	f003 0304 	and.w	r3, r3, #4
 800e942:	61fb      	str	r3, [r7, #28]
 800e944:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e948:	460b      	mov	r3, r1
 800e94a:	4313      	orrs	r3, r2
 800e94c:	d011      	beq.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e952:	3308      	adds	r3, #8
 800e954:	2102      	movs	r1, #2
 800e956:	4618      	mov	r0, r3
 800e958:	f001 fa0a 	bl	800fd70 <RCCEx_PLL2_Config>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e96a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e96e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	2100      	movs	r1, #0
 800e97c:	6139      	str	r1, [r7, #16]
 800e97e:	f003 0308 	and.w	r3, r3, #8
 800e982:	617b      	str	r3, [r7, #20]
 800e984:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e988:	460b      	mov	r3, r1
 800e98a:	4313      	orrs	r3, r2
 800e98c:	d011      	beq.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e992:	3328      	adds	r3, #40	; 0x28
 800e994:	2100      	movs	r1, #0
 800e996:	4618      	mov	r0, r3
 800e998:	f001 fa9c 	bl	800fed4 <RCCEx_PLL3_Config>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800e9a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	f003 0310 	and.w	r3, r3, #16
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	d011      	beq.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d2:	3328      	adds	r3, #40	; 0x28
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f001 fa7c 	bl	800fed4 <RCCEx_PLL3_Config>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	6039      	str	r1, [r7, #0]
 800e9fe:	f003 0320 	and.w	r3, r3, #32
 800ea02:	607b      	str	r3, [r7, #4]
 800ea04:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	d011      	beq.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea12:	3328      	adds	r3, #40	; 0x28
 800ea14:	2102      	movs	r1, #2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f001 fa5c 	bl	800fed4 <RCCEx_PLL3_Config>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ea22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ea32:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d101      	bne.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e000      	b.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ea3e:	2301      	movs	r3, #1
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ea46:	46bd      	mov	sp, r7
 800ea48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea4c:	58024400 	.word	0x58024400

0800ea50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b090      	sub	sp, #64	; 0x40
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ea5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea5e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ea62:	430b      	orrs	r3, r1
 800ea64:	f040 8094 	bne.w	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ea68:	4b9e      	ldr	r3, [pc, #632]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ea6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea6c:	f003 0307 	and.w	r3, r3, #7
 800ea70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	2b04      	cmp	r3, #4
 800ea76:	f200 8087 	bhi.w	800eb88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ea7a:	a201      	add	r2, pc, #4	; (adr r2, 800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ea7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea80:	0800ea95 	.word	0x0800ea95
 800ea84:	0800eabd 	.word	0x0800eabd
 800ea88:	0800eae5 	.word	0x0800eae5
 800ea8c:	0800eb81 	.word	0x0800eb81
 800ea90:	0800eb0d 	.word	0x0800eb0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea94:	4b93      	ldr	r3, [pc, #588]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaa0:	d108      	bne.n	800eab4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eaa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 f810 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eab0:	f000 bd45 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab8:	f000 bd41 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eabc:	4b89      	ldr	r3, [pc, #548]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eac8:	d108      	bne.n	800eadc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaca:	f107 0318 	add.w	r3, r7, #24
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fd54 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ead8:	f000 bd31 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae0:	f000 bd2d 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eae4:	4b7f      	ldr	r3, [pc, #508]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eaec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eaf0:	d108      	bne.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaf2:	f107 030c 	add.w	r3, r7, #12
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f000 fe94 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb00:	f000 bd1d 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb04:	2300      	movs	r3, #0
 800eb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb08:	f000 bd19 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eb0c:	4b75      	ldr	r3, [pc, #468]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eb16:	4b73      	ldr	r3, [pc, #460]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f003 0304 	and.w	r3, r3, #4
 800eb1e:	2b04      	cmp	r3, #4
 800eb20:	d10c      	bne.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d109      	bne.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb28:	4b6e      	ldr	r3, [pc, #440]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	08db      	lsrs	r3, r3, #3
 800eb2e:	f003 0303 	and.w	r3, r3, #3
 800eb32:	4a6d      	ldr	r2, [pc, #436]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800eb34:	fa22 f303 	lsr.w	r3, r2, r3
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb3a:	e01f      	b.n	800eb7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb3c:	4b69      	ldr	r3, [pc, #420]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb48:	d106      	bne.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800eb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb50:	d102      	bne.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eb52:	4b66      	ldr	r3, [pc, #408]	; (800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eb54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb56:	e011      	b.n	800eb7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb58:	4b62      	ldr	r3, [pc, #392]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb64:	d106      	bne.n	800eb74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800eb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb6c:	d102      	bne.n	800eb74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eb6e:	4b60      	ldr	r3, [pc, #384]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800eb70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb72:	e003      	b.n	800eb7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eb78:	f000 bce1 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eb7c:	f000 bcdf 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eb80:	4b5c      	ldr	r3, [pc, #368]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800eb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb84:	f000 bcdb 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8c:	f000 bcd7 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800eb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb94:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800eb98:	430b      	orrs	r3, r1
 800eb9a:	f040 80ad 	bne.w	800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800eb9e:	4b51      	ldr	r3, [pc, #324]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eba2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800eba6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebae:	d056      	beq.n	800ec5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebb6:	f200 8090 	bhi.w	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	2bc0      	cmp	r3, #192	; 0xc0
 800ebbe:	f000 8088 	beq.w	800ecd2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	2bc0      	cmp	r3, #192	; 0xc0
 800ebc6:	f200 8088 	bhi.w	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	2b80      	cmp	r3, #128	; 0x80
 800ebce:	d032      	beq.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	2b80      	cmp	r3, #128	; 0x80
 800ebd4:	f200 8081 	bhi.w	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d003      	beq.n	800ebe6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	2b40      	cmp	r3, #64	; 0x40
 800ebe2:	d014      	beq.n	800ec0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ebe4:	e079      	b.n	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebe6:	4b3f      	ldr	r3, [pc, #252]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebf2:	d108      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 ff67 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec02:	f000 bc9c 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec0a:	f000 bc98 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec0e:	4b35      	ldr	r3, [pc, #212]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec1a:	d108      	bne.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec1c:	f107 0318 	add.w	r3, r7, #24
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 fcab 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec2a:	f000 bc88 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec32:	f000 bc84 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec36:	4b2b      	ldr	r3, [pc, #172]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec42:	d108      	bne.n	800ec56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec44:	f107 030c 	add.w	r3, r7, #12
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f000 fdeb 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec52:	f000 bc74 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec5a:	f000 bc70 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ec5e:	4b21      	ldr	r3, [pc, #132]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec68:	4b1e      	ldr	r3, [pc, #120]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d10c      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ec74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d109      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec7a:	4b1a      	ldr	r3, [pc, #104]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	08db      	lsrs	r3, r3, #3
 800ec80:	f003 0303 	and.w	r3, r3, #3
 800ec84:	4a18      	ldr	r2, [pc, #96]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ec86:	fa22 f303 	lsr.w	r3, r2, r3
 800ec8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec8c:	e01f      	b.n	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec8e:	4b15      	ldr	r3, [pc, #84]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec9a:	d106      	bne.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eca2:	d102      	bne.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eca4:	4b11      	ldr	r3, [pc, #68]	; (800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eca8:	e011      	b.n	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ecaa:	4b0e      	ldr	r3, [pc, #56]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecb6:	d106      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ecbe:	d102      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ecc0:	4b0b      	ldr	r3, [pc, #44]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ecc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecc4:	e003      	b.n	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ecca:	f000 bc38 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ecce:	f000 bc36 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ecd2:	4b08      	ldr	r3, [pc, #32]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ecd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecd6:	f000 bc32 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecde:	f000 bc2e 	b.w	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ece2:	bf00      	nop
 800ece4:	58024400 	.word	0x58024400
 800ece8:	03d09000 	.word	0x03d09000
 800ecec:	003d0900 	.word	0x003d0900
 800ecf0:	017d7840 	.word	0x017d7840
 800ecf4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ecf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecfc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ed00:	430b      	orrs	r3, r1
 800ed02:	f040 809c 	bne.w	800ee3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ed06:	4b9e      	ldr	r3, [pc, #632]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed0a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ed0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed16:	d054      	beq.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed1e:	f200 808b 	bhi.w	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed28:	f000 8083 	beq.w	800ee32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed32:	f200 8081 	bhi.w	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed3c:	d02f      	beq.n	800ed9e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed44:	d878      	bhi.n	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d004      	beq.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed52:	d012      	beq.n	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ed54:	e070      	b.n	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed56:	4b8a      	ldr	r3, [pc, #552]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed62:	d107      	bne.n	800ed74 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 feaf 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed72:	e3e4      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed74:	2300      	movs	r3, #0
 800ed76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed78:	e3e1      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed7a:	4b81      	ldr	r3, [pc, #516]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed86:	d107      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed88:	f107 0318 	add.w	r3, r7, #24
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 fbf5 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed96:	e3d2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed9c:	e3cf      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed9e:	4b78      	ldr	r3, [pc, #480]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eda6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edaa:	d107      	bne.n	800edbc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edac:	f107 030c 	add.w	r3, r7, #12
 800edb0:	4618      	mov	r0, r3
 800edb2:	f000 fd37 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edba:	e3c0      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edc0:	e3bd      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800edc2:	4b6f      	ldr	r3, [pc, #444]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800edca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800edcc:	4b6c      	ldr	r3, [pc, #432]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f003 0304 	and.w	r3, r3, #4
 800edd4:	2b04      	cmp	r3, #4
 800edd6:	d10c      	bne.n	800edf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800edd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d109      	bne.n	800edf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edde:	4b68      	ldr	r3, [pc, #416]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	08db      	lsrs	r3, r3, #3
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	4a66      	ldr	r2, [pc, #408]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800edea:	fa22 f303 	lsr.w	r3, r2, r3
 800edee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edf0:	e01e      	b.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800edf2:	4b63      	ldr	r3, [pc, #396]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfe:	d106      	bne.n	800ee0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ee00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee06:	d102      	bne.n	800ee0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ee08:	4b5f      	ldr	r3, [pc, #380]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ee0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee0c:	e010      	b.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ee0e:	4b5c      	ldr	r3, [pc, #368]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee1a:	d106      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ee1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee22:	d102      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ee24:	4b59      	ldr	r3, [pc, #356]	; (800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ee26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee28:	e002      	b.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ee2e:	e386      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee30:	e385      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ee32:	4b57      	ldr	r3, [pc, #348]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ee34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee36:	e382      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee3c:	e37f      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ee3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee42:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ee46:	430b      	orrs	r3, r1
 800ee48:	f040 80a7 	bne.w	800ef9a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ee4c:	4b4c      	ldr	r3, [pc, #304]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee50:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ee54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee5c:	d055      	beq.n	800ef0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee64:	f200 8096 	bhi.w	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee6e:	f000 8084 	beq.w	800ef7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee78:	f200 808c 	bhi.w	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee82:	d030      	beq.n	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee8a:	f200 8083 	bhi.w	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ee9a:	d012      	beq.n	800eec2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ee9c:	e07a      	b.n	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee9e:	4b38      	ldr	r3, [pc, #224]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eeaa:	d107      	bne.n	800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 fe0b 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eeba:	e340      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eec0:	e33d      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eec2:	4b2f      	ldr	r3, [pc, #188]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eeca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eece:	d107      	bne.n	800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eed0:	f107 0318 	add.w	r3, r7, #24
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fb51 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eede:	e32e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eee4:	e32b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eee6:	4b26      	ldr	r3, [pc, #152]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eeee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eef2:	d107      	bne.n	800ef04 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eef4:	f107 030c 	add.w	r3, r7, #12
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fc93 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef02:	e31c      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef08:	e319      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef0a:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ef12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef14:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f003 0304 	and.w	r3, r3, #4
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d10c      	bne.n	800ef3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ef20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d109      	bne.n	800ef3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef26:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	08db      	lsrs	r3, r3, #3
 800ef2c:	f003 0303 	and.w	r3, r3, #3
 800ef30:	4a14      	ldr	r2, [pc, #80]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ef32:	fa22 f303 	lsr.w	r3, r2, r3
 800ef36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef38:	e01e      	b.n	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef3a:	4b11      	ldr	r3, [pc, #68]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef46:	d106      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ef48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef4e:	d102      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ef50:	4b0d      	ldr	r3, [pc, #52]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ef52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef54:	e010      	b.n	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef56:	4b0a      	ldr	r3, [pc, #40]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef62:	d106      	bne.n	800ef72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ef64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef6a:	d102      	bne.n	800ef72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef6c:	4b07      	ldr	r3, [pc, #28]	; (800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef70:	e002      	b.n	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ef76:	e2e2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef78:	e2e1      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef7a:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ef7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef7e:	e2de      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef80:	58024400 	.word	0x58024400
 800ef84:	03d09000 	.word	0x03d09000
 800ef88:	003d0900 	.word	0x003d0900
 800ef8c:	017d7840 	.word	0x017d7840
 800ef90:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef98:	e2d1      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ef9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef9e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800efa2:	430b      	orrs	r3, r1
 800efa4:	f040 809c 	bne.w	800f0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800efa8:	4b93      	ldr	r3, [pc, #588]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800efaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800efb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efb8:	d054      	beq.n	800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efc0:	f200 808b 	bhi.w	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800efc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efca:	f000 8083 	beq.w	800f0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efd4:	f200 8081 	bhi.w	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efde:	d02f      	beq.n	800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe6:	d878      	bhi.n	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	2b00      	cmp	r3, #0
 800efec:	d004      	beq.n	800eff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eff4:	d012      	beq.n	800f01c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800eff6:	e070      	b.n	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eff8:	4b7f      	ldr	r3, [pc, #508]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f004:	d107      	bne.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 fd5e 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f014:	e293      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f01a:	e290      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f01c:	4b76      	ldr	r3, [pc, #472]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f028:	d107      	bne.n	800f03a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f02a:	f107 0318 	add.w	r3, r7, #24
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 faa4 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f038:	e281      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f03e:	e27e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f040:	4b6d      	ldr	r3, [pc, #436]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f04c:	d107      	bne.n	800f05e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f04e:	f107 030c 	add.w	r3, r7, #12
 800f052:	4618      	mov	r0, r3
 800f054:	f000 fbe6 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f05c:	e26f      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f062:	e26c      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f064:	4b64      	ldr	r3, [pc, #400]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f06c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f06e:	4b62      	ldr	r3, [pc, #392]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f003 0304 	and.w	r3, r3, #4
 800f076:	2b04      	cmp	r3, #4
 800f078:	d10c      	bne.n	800f094 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d109      	bne.n	800f094 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f080:	4b5d      	ldr	r3, [pc, #372]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	08db      	lsrs	r3, r3, #3
 800f086:	f003 0303 	and.w	r3, r3, #3
 800f08a:	4a5c      	ldr	r2, [pc, #368]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f08c:	fa22 f303 	lsr.w	r3, r2, r3
 800f090:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f092:	e01e      	b.n	800f0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f094:	4b58      	ldr	r3, [pc, #352]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0a0:	d106      	bne.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0a8:	d102      	bne.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f0aa:	4b55      	ldr	r3, [pc, #340]	; (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0ae:	e010      	b.n	800f0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f0b0:	4b51      	ldr	r3, [pc, #324]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0bc:	d106      	bne.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0c4:	d102      	bne.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f0c6:	4b4f      	ldr	r3, [pc, #316]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0ca:	e002      	b.n	800f0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f0d0:	e235      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0d2:	e234      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f0d4:	4b4c      	ldr	r3, [pc, #304]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0d8:	e231      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0de:	e22e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0e4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f0e8:	430b      	orrs	r3, r1
 800f0ea:	f040 808f 	bne.w	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f0ee:	4b42      	ldr	r3, [pc, #264]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0f2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f0f6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0fe:	d06b      	beq.n	800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f106:	d874      	bhi.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f10e:	d056      	beq.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f116:	d86c      	bhi.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f11e:	d03b      	beq.n	800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f126:	d864      	bhi.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f12e:	d021      	beq.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f136:	d85c      	bhi.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d004      	beq.n	800f148 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f144:	d004      	beq.n	800f150 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f146:	e054      	b.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f148:	f7fe fa4c 	bl	800d5e4 <HAL_RCC_GetPCLK1Freq>
 800f14c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f14e:	e1f6      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f150:	4b29      	ldr	r3, [pc, #164]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f15c:	d107      	bne.n	800f16e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f15e:	f107 0318 	add.w	r3, r7, #24
 800f162:	4618      	mov	r0, r3
 800f164:	f000 fa0a 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f16c:	e1e7      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f172:	e1e4      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f174:	4b20      	ldr	r3, [pc, #128]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f180:	d107      	bne.n	800f192 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f182:	f107 030c 	add.w	r3, r7, #12
 800f186:	4618      	mov	r0, r3
 800f188:	f000 fb4c 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f190:	e1d5      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f192:	2300      	movs	r3, #0
 800f194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f196:	e1d2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f198:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0304 	and.w	r3, r3, #4
 800f1a0:	2b04      	cmp	r3, #4
 800f1a2:	d109      	bne.n	800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f1a4:	4b14      	ldr	r3, [pc, #80]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	08db      	lsrs	r3, r3, #3
 800f1aa:	f003 0303 	and.w	r3, r3, #3
 800f1ae:	4a13      	ldr	r2, [pc, #76]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1b6:	e1c2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1bc:	e1bf      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f1be:	4b0e      	ldr	r3, [pc, #56]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ca:	d102      	bne.n	800f1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f1cc:	4b0c      	ldr	r3, [pc, #48]	; (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1d0:	e1b5      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d6:	e1b2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f1d8:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1e4:	d102      	bne.n	800f1ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f1e6:	4b07      	ldr	r3, [pc, #28]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1ea:	e1a8      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1f0:	e1a5      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1f6:	e1a2      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1f8:	58024400 	.word	0x58024400
 800f1fc:	03d09000 	.word	0x03d09000
 800f200:	003d0900 	.word	0x003d0900
 800f204:	017d7840 	.word	0x017d7840
 800f208:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f210:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f214:	430b      	orrs	r3, r1
 800f216:	d173      	bne.n	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f218:	4b9c      	ldr	r3, [pc, #624]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f21c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f220:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f228:	d02f      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f230:	d863      	bhi.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f234:	2b00      	cmp	r3, #0
 800f236:	d004      	beq.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f23e:	d012      	beq.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f240:	e05b      	b.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f242:	4b92      	ldr	r3, [pc, #584]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f24a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f24e:	d107      	bne.n	800f260 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f250:	f107 0318 	add.w	r3, r7, #24
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f991 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f25e:	e16e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f264:	e16b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f266:	4b89      	ldr	r3, [pc, #548]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f272:	d107      	bne.n	800f284 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f274:	f107 030c 	add.w	r3, r7, #12
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fad3 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f282:	e15c      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f288:	e159      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f28a:	4b80      	ldr	r3, [pc, #512]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f28e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f292:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f294:	4b7d      	ldr	r3, [pc, #500]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 0304 	and.w	r3, r3, #4
 800f29c:	2b04      	cmp	r3, #4
 800f29e:	d10c      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d109      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2a6:	4b79      	ldr	r3, [pc, #484]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	08db      	lsrs	r3, r3, #3
 800f2ac:	f003 0303 	and.w	r3, r3, #3
 800f2b0:	4a77      	ldr	r2, [pc, #476]	; (800f490 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2b8:	e01e      	b.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2ba:	4b74      	ldr	r3, [pc, #464]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2c6:	d106      	bne.n	800f2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2ce:	d102      	bne.n	800f2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2d0:	4b70      	ldr	r3, [pc, #448]	; (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2d4:	e010      	b.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2d6:	4b6d      	ldr	r3, [pc, #436]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2e2:	d106      	bne.n	800f2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2ea:	d102      	bne.n	800f2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2ec:	4b6a      	ldr	r3, [pc, #424]	; (800f498 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2f0:	e002      	b.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f2f6:	e122      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2f8:	e121      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2fe:	e11e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f304:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f308:	430b      	orrs	r3, r1
 800f30a:	d133      	bne.n	800f374 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f30c:	4b5f      	ldr	r3, [pc, #380]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f314:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d004      	beq.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f322:	d012      	beq.n	800f34a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f324:	e023      	b.n	800f36e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f326:	4b59      	ldr	r3, [pc, #356]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f32e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f332:	d107      	bne.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 fbc7 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f342:	e0fc      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f348:	e0f9      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f34a:	4b50      	ldr	r3, [pc, #320]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f356:	d107      	bne.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f358:	f107 0318 	add.w	r3, r7, #24
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 f90d 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f366:	e0ea      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f36c:	e0e7      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f372:	e0e4      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f374:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f378:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f37c:	430b      	orrs	r3, r1
 800f37e:	f040 808d 	bne.w	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f382:	4b42      	ldr	r3, [pc, #264]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f386:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f38a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f392:	d06b      	beq.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f39a:	d874      	bhi.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3a2:	d056      	beq.n	800f452 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3aa:	d86c      	bhi.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f3b2:	d03b      	beq.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f3ba:	d864      	bhi.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3c2:	d021      	beq.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3ca:	d85c      	bhi.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d004      	beq.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3d8:	d004      	beq.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f3da:	e054      	b.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f3dc:	f000 f8b8 	bl	800f550 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3e2:	e0ac      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3e4:	4b29      	ldr	r3, [pc, #164]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3f0:	d107      	bne.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3f2:	f107 0318 	add.w	r3, r7, #24
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 f8c0 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f400:	e09d      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f406:	e09a      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f408:	4b20      	ldr	r3, [pc, #128]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f414:	d107      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f416:	f107 030c 	add.w	r3, r7, #12
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 fa02 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f424:	e08b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42a:	e088      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f42c:	4b17      	ldr	r3, [pc, #92]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f003 0304 	and.w	r3, r3, #4
 800f434:	2b04      	cmp	r3, #4
 800f436:	d109      	bne.n	800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f438:	4b14      	ldr	r3, [pc, #80]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	08db      	lsrs	r3, r3, #3
 800f43e:	f003 0303 	and.w	r3, r3, #3
 800f442:	4a13      	ldr	r2, [pc, #76]	; (800f490 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f444:	fa22 f303 	lsr.w	r3, r2, r3
 800f448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f44a:	e078      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f450:	e075      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f452:	4b0e      	ldr	r3, [pc, #56]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f45e:	d102      	bne.n	800f466 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f460:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f464:	e06b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f466:	2300      	movs	r3, #0
 800f468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f46a:	e068      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f46c:	4b07      	ldr	r3, [pc, #28]	; (800f48c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f478:	d102      	bne.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f47a:	4b07      	ldr	r3, [pc, #28]	; (800f498 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f47e:	e05e      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f480:	2300      	movs	r3, #0
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f484:	e05b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f48a:	e058      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f48c:	58024400 	.word	0x58024400
 800f490:	03d09000 	.word	0x03d09000
 800f494:	003d0900 	.word	0x003d0900
 800f498:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f49c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4a0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f4a4:	430b      	orrs	r3, r1
 800f4a6:	d148      	bne.n	800f53a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f4a8:	4b27      	ldr	r3, [pc, #156]	; (800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f4b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4b8:	d02a      	beq.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4c0:	d838      	bhi.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d004      	beq.n	800f4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4ce:	d00d      	beq.n	800f4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f4d0:	e030      	b.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f4d2:	4b1d      	ldr	r3, [pc, #116]	; (800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4de:	d102      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f4e0:	4b1a      	ldr	r3, [pc, #104]	; (800f54c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4e4:	e02b      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ea:	e028      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4ec:	4b16      	ldr	r3, [pc, #88]	; (800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4f8:	d107      	bne.n	800f50a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 fae4 	bl	800facc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f508:	e019      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f50a:	2300      	movs	r3, #0
 800f50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f50e:	e016      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f510:	4b0d      	ldr	r3, [pc, #52]	; (800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f51c:	d107      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f51e:	f107 0318 	add.w	r3, r7, #24
 800f522:	4618      	mov	r0, r3
 800f524:	f000 f82a 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f52c:	e007      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f532:	e004      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f538:	e001      	b.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f540:	4618      	mov	r0, r3
 800f542:	3740      	adds	r7, #64	; 0x40
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	58024400 	.word	0x58024400
 800f54c:	017d7840 	.word	0x017d7840

0800f550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f554:	f7fe f816 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 800f558:	4602      	mov	r2, r0
 800f55a:	4b06      	ldr	r3, [pc, #24]	; (800f574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	091b      	lsrs	r3, r3, #4
 800f560:	f003 0307 	and.w	r3, r3, #7
 800f564:	4904      	ldr	r1, [pc, #16]	; (800f578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f566:	5ccb      	ldrb	r3, [r1, r3]
 800f568:	f003 031f 	and.w	r3, r3, #31
 800f56c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f570:	4618      	mov	r0, r3
 800f572:	bd80      	pop	{r7, pc}
 800f574:	58024400 	.word	0x58024400
 800f578:	08015824 	.word	0x08015824

0800f57c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b089      	sub	sp, #36	; 0x24
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f584:	4ba1      	ldr	r3, [pc, #644]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f588:	f003 0303 	and.w	r3, r3, #3
 800f58c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f58e:	4b9f      	ldr	r3, [pc, #636]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f592:	0b1b      	lsrs	r3, r3, #12
 800f594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f59a:	4b9c      	ldr	r3, [pc, #624]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59e:	091b      	lsrs	r3, r3, #4
 800f5a0:	f003 0301 	and.w	r3, r3, #1
 800f5a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f5a6:	4b99      	ldr	r3, [pc, #612]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5aa:	08db      	lsrs	r3, r3, #3
 800f5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5b0:	693a      	ldr	r2, [r7, #16]
 800f5b2:	fb02 f303 	mul.w	r3, r2, r3
 800f5b6:	ee07 3a90 	vmov	s15, r3
 800f5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 8111 	beq.w	800f7ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	f000 8083 	beq.w	800f6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	f200 80a1 	bhi.w	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d003      	beq.n	800f5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d056      	beq.n	800f694 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f5e6:	e099      	b.n	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5e8:	4b88      	ldr	r3, [pc, #544]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 0320 	and.w	r3, r3, #32
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d02d      	beq.n	800f650 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5f4:	4b85      	ldr	r3, [pc, #532]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	08db      	lsrs	r3, r3, #3
 800f5fa:	f003 0303 	and.w	r3, r3, #3
 800f5fe:	4a84      	ldr	r2, [pc, #528]	; (800f810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f600:	fa22 f303 	lsr.w	r3, r2, r3
 800f604:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	ee07 3a90 	vmov	s15, r3
 800f60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	ee07 3a90 	vmov	s15, r3
 800f616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f61e:	4b7b      	ldr	r3, [pc, #492]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f626:	ee07 3a90 	vmov	s15, r3
 800f62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f632:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f64a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f64e:	e087      	b.n	800f760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	ee07 3a90 	vmov	s15, r3
 800f656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f65a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f818 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f662:	4b6a      	ldr	r3, [pc, #424]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f66a:	ee07 3a90 	vmov	s15, r3
 800f66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f672:	ed97 6a03 	vldr	s12, [r7, #12]
 800f676:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f68e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f692:	e065      	b.n	800f760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	ee07 3a90 	vmov	s15, r3
 800f69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f69e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f81c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6a6:	4b59      	ldr	r3, [pc, #356]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ae:	ee07 3a90 	vmov	s15, r3
 800f6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6d6:	e043      	b.n	800f760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	ee07 3a90 	vmov	s15, r3
 800f6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6ea:	4b48      	ldr	r3, [pc, #288]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6f2:	ee07 3a90 	vmov	s15, r3
 800f6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f71a:	e021      	b.n	800f760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	ee07 3a90 	vmov	s15, r3
 800f722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f81c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f72e:	4b37      	ldr	r3, [pc, #220]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f736:	ee07 3a90 	vmov	s15, r3
 800f73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f742:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f75a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f75e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f760:	4b2a      	ldr	r3, [pc, #168]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f764:	0a5b      	lsrs	r3, r3, #9
 800f766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f76a:	ee07 3a90 	vmov	s15, r3
 800f76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f786:	ee17 2a90 	vmov	r2, s15
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f78e:	4b1f      	ldr	r3, [pc, #124]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f792:	0c1b      	lsrs	r3, r3, #16
 800f794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f798:	ee07 3a90 	vmov	s15, r3
 800f79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7b4:	ee17 2a90 	vmov	r2, s15
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f7bc:	4b13      	ldr	r3, [pc, #76]	; (800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c0:	0e1b      	lsrs	r3, r3, #24
 800f7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7c6:	ee07 3a90 	vmov	s15, r3
 800f7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7e2:	ee17 2a90 	vmov	r2, s15
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f7ea:	e008      	b.n	800f7fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	609a      	str	r2, [r3, #8]
}
 800f7fe:	bf00      	nop
 800f800:	3724      	adds	r7, #36	; 0x24
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	58024400 	.word	0x58024400
 800f810:	03d09000 	.word	0x03d09000
 800f814:	46000000 	.word	0x46000000
 800f818:	4c742400 	.word	0x4c742400
 800f81c:	4a742400 	.word	0x4a742400
 800f820:	4bbebc20 	.word	0x4bbebc20

0800f824 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f824:	b480      	push	{r7}
 800f826:	b089      	sub	sp, #36	; 0x24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f82c:	4ba1      	ldr	r3, [pc, #644]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f830:	f003 0303 	and.w	r3, r3, #3
 800f834:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f836:	4b9f      	ldr	r3, [pc, #636]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f83a:	0d1b      	lsrs	r3, r3, #20
 800f83c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f840:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f842:	4b9c      	ldr	r3, [pc, #624]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f846:	0a1b      	lsrs	r3, r3, #8
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f84e:	4b99      	ldr	r3, [pc, #612]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f852:	08db      	lsrs	r3, r3, #3
 800f854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	fb02 f303 	mul.w	r3, r2, r3
 800f85e:	ee07 3a90 	vmov	s15, r3
 800f862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 8111 	beq.w	800fa94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	2b02      	cmp	r3, #2
 800f876:	f000 8083 	beq.w	800f980 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	f200 80a1 	bhi.w	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f882:	69bb      	ldr	r3, [r7, #24]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d003      	beq.n	800f890 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d056      	beq.n	800f93c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f88e:	e099      	b.n	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f890:	4b88      	ldr	r3, [pc, #544]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 0320 	and.w	r3, r3, #32
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d02d      	beq.n	800f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f89c:	4b85      	ldr	r3, [pc, #532]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	08db      	lsrs	r3, r3, #3
 800f8a2:	f003 0303 	and.w	r3, r3, #3
 800f8a6:	4a84      	ldr	r2, [pc, #528]	; (800fab8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	ee07 3a90 	vmov	s15, r3
 800f8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	ee07 3a90 	vmov	s15, r3
 800f8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8c6:	4b7b      	ldr	r3, [pc, #492]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ce:	ee07 3a90 	vmov	s15, r3
 800f8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f8f6:	e087      	b.n	800fa08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	ee07 3a90 	vmov	s15, r3
 800f8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f902:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fac0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f90a:	4b6a      	ldr	r3, [pc, #424]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f912:	ee07 3a90 	vmov	s15, r3
 800f916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f91e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f93a:	e065      	b.n	800fa08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	ee07 3a90 	vmov	s15, r3
 800f942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f946:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f94e:	4b59      	ldr	r3, [pc, #356]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f956:	ee07 3a90 	vmov	s15, r3
 800f95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f962:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f97a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f97e:	e043      	b.n	800fa08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	ee07 3a90 	vmov	s15, r3
 800f986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f98a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f992:	4b48      	ldr	r3, [pc, #288]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9c2:	e021      	b.n	800fa08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	ee07 3a90 	vmov	s15, r3
 800f9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9d6:	4b37      	ldr	r3, [pc, #220]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9de:	ee07 3a90 	vmov	s15, r3
 800f9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fa08:	4b2a      	ldr	r3, [pc, #168]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0c:	0a5b      	lsrs	r3, r3, #9
 800fa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa12:	ee07 3a90 	vmov	s15, r3
 800fa16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa22:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa2e:	ee17 2a90 	vmov	r2, s15
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fa36:	4b1f      	ldr	r3, [pc, #124]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3a:	0c1b      	lsrs	r3, r3, #16
 800fa3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa40:	ee07 3a90 	vmov	s15, r3
 800fa44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa50:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa5c:	ee17 2a90 	vmov	r2, s15
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fa64:	4b13      	ldr	r3, [pc, #76]	; (800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa68:	0e1b      	lsrs	r3, r3, #24
 800fa6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa6e:	ee07 3a90 	vmov	s15, r3
 800fa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa8a:	ee17 2a90 	vmov	r2, s15
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fa92:	e008      	b.n	800faa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	609a      	str	r2, [r3, #8]
}
 800faa6:	bf00      	nop
 800faa8:	3724      	adds	r7, #36	; 0x24
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	58024400 	.word	0x58024400
 800fab8:	03d09000 	.word	0x03d09000
 800fabc:	46000000 	.word	0x46000000
 800fac0:	4c742400 	.word	0x4c742400
 800fac4:	4a742400 	.word	0x4a742400
 800fac8:	4bbebc20 	.word	0x4bbebc20

0800facc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800facc:	b480      	push	{r7}
 800face:	b089      	sub	sp, #36	; 0x24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fad4:	4ba0      	ldr	r3, [pc, #640]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad8:	f003 0303 	and.w	r3, r3, #3
 800fadc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fade:	4b9e      	ldr	r3, [pc, #632]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae2:	091b      	lsrs	r3, r3, #4
 800fae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fae8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800faea:	4b9b      	ldr	r3, [pc, #620]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800faf4:	4b98      	ldr	r3, [pc, #608]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf8:	08db      	lsrs	r3, r3, #3
 800fafa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fafe:	693a      	ldr	r2, [r7, #16]
 800fb00:	fb02 f303 	mul.w	r3, r2, r3
 800fb04:	ee07 3a90 	vmov	s15, r3
 800fb08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 8111 	beq.w	800fd3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	2b02      	cmp	r3, #2
 800fb1c:	f000 8083 	beq.w	800fc26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	f200 80a1 	bhi.w	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d056      	beq.n	800fbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fb34:	e099      	b.n	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb36:	4b88      	ldr	r3, [pc, #544]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f003 0320 	and.w	r3, r3, #32
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d02d      	beq.n	800fb9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb42:	4b85      	ldr	r3, [pc, #532]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	08db      	lsrs	r3, r3, #3
 800fb48:	f003 0303 	and.w	r3, r3, #3
 800fb4c:	4a83      	ldr	r2, [pc, #524]	; (800fd5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fb4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	ee07 3a90 	vmov	s15, r3
 800fb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	ee07 3a90 	vmov	s15, r3
 800fb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb6c:	4b7a      	ldr	r3, [pc, #488]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb74:	ee07 3a90 	vmov	s15, r3
 800fb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb9c:	e087      	b.n	800fcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	ee07 3a90 	vmov	s15, r3
 800fba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fba8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fd64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fbac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbb0:	4b69      	ldr	r3, [pc, #420]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbb8:	ee07 3a90 	vmov	s15, r3
 800fbbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbc4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fbc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbe0:	e065      	b.n	800fcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	ee07 3a90 	vmov	s15, r3
 800fbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fd68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbf4:	4b58      	ldr	r3, [pc, #352]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbfc:	ee07 3a90 	vmov	s15, r3
 800fc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc04:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc08:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc24:	e043      	b.n	800fcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	ee07 3a90 	vmov	s15, r3
 800fc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fd6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fc34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc38:	4b47      	ldr	r3, [pc, #284]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc48:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc68:	e021      	b.n	800fcae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	ee07 3a90 	vmov	s15, r3
 800fc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fd64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc7c:	4b36      	ldr	r3, [pc, #216]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc84:	ee07 3a90 	vmov	s15, r3
 800fc88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc90:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fd60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fcac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fcae:	4b2a      	ldr	r3, [pc, #168]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb2:	0a5b      	lsrs	r3, r3, #9
 800fcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcb8:	ee07 3a90 	vmov	s15, r3
 800fcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800fccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcd4:	ee17 2a90 	vmov	r2, s15
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fcdc:	4b1e      	ldr	r3, [pc, #120]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce0:	0c1b      	lsrs	r3, r3, #16
 800fce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fce6:	ee07 3a90 	vmov	s15, r3
 800fcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd02:	ee17 2a90 	vmov	r2, s15
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd0e:	0e1b      	lsrs	r3, r3, #24
 800fd10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd14:	ee07 3a90 	vmov	s15, r3
 800fd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd24:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd30:	ee17 2a90 	vmov	r2, s15
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fd38:	e008      	b.n	800fd4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	609a      	str	r2, [r3, #8]
}
 800fd4c:	bf00      	nop
 800fd4e:	3724      	adds	r7, #36	; 0x24
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr
 800fd58:	58024400 	.word	0x58024400
 800fd5c:	03d09000 	.word	0x03d09000
 800fd60:	46000000 	.word	0x46000000
 800fd64:	4c742400 	.word	0x4c742400
 800fd68:	4a742400 	.word	0x4a742400
 800fd6c:	4bbebc20 	.word	0x4bbebc20

0800fd70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fd7e:	4b53      	ldr	r3, [pc, #332]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd82:	f003 0303 	and.w	r3, r3, #3
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d101      	bne.n	800fd8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e099      	b.n	800fec2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fd8e:	4b4f      	ldr	r3, [pc, #316]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4a4e      	ldr	r2, [pc, #312]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fd94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fd98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd9a:	f7f7 f88d 	bl	8006eb8 <HAL_GetTick>
 800fd9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fda0:	e008      	b.n	800fdb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fda2:	f7f7 f889 	bl	8006eb8 <HAL_GetTick>
 800fda6:	4602      	mov	r2, r0
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d901      	bls.n	800fdb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	e086      	b.n	800fec2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fdb4:	4b45      	ldr	r3, [pc, #276]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1f0      	bne.n	800fda2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fdc0:	4b42      	ldr	r3, [pc, #264]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	031b      	lsls	r3, r3, #12
 800fdce:	493f      	ldr	r1, [pc, #252]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	628b      	str	r3, [r1, #40]	; 0x28
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	025b      	lsls	r3, r3, #9
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	431a      	orrs	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	041b      	lsls	r3, r3, #16
 800fdf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fdf6:	431a      	orrs	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	061b      	lsls	r3, r3, #24
 800fe00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fe04:	4931      	ldr	r1, [pc, #196]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fe0a:	4b30      	ldr	r3, [pc, #192]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	695b      	ldr	r3, [r3, #20]
 800fe16:	492d      	ldr	r1, [pc, #180]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fe1c:	4b2b      	ldr	r3, [pc, #172]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe20:	f023 0220 	bic.w	r2, r3, #32
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	699b      	ldr	r3, [r3, #24]
 800fe28:	4928      	ldr	r1, [pc, #160]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fe2e:	4b27      	ldr	r3, [pc, #156]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe32:	4a26      	ldr	r2, [pc, #152]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe34:	f023 0310 	bic.w	r3, r3, #16
 800fe38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fe3a:	4b24      	ldr	r3, [pc, #144]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe3e:	4b24      	ldr	r3, [pc, #144]	; (800fed0 <RCCEx_PLL2_Config+0x160>)
 800fe40:	4013      	ands	r3, r2
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	69d2      	ldr	r2, [r2, #28]
 800fe46:	00d2      	lsls	r2, r2, #3
 800fe48:	4920      	ldr	r1, [pc, #128]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fe4e:	4b1f      	ldr	r3, [pc, #124]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe52:	4a1e      	ldr	r2, [pc, #120]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe54:	f043 0310 	orr.w	r3, r3, #16
 800fe58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d106      	bne.n	800fe6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fe60:	4b1a      	ldr	r3, [pc, #104]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe64:	4a19      	ldr	r2, [pc, #100]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe6c:	e00f      	b.n	800fe8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d106      	bne.n	800fe82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fe74:	4b15      	ldr	r3, [pc, #84]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe78:	4a14      	ldr	r2, [pc, #80]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe80:	e005      	b.n	800fe8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fe82:	4b12      	ldr	r3, [pc, #72]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe86:	4a11      	ldr	r2, [pc, #68]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fe8e:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a0e      	ldr	r2, [pc, #56]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800fe94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe9a:	f7f7 f80d 	bl	8006eb8 <HAL_GetTick>
 800fe9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fea0:	e008      	b.n	800feb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fea2:	f7f7 f809 	bl	8006eb8 <HAL_GetTick>
 800fea6:	4602      	mov	r2, r0
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	2b02      	cmp	r3, #2
 800feae:	d901      	bls.n	800feb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800feb0:	2303      	movs	r3, #3
 800feb2:	e006      	b.n	800fec2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800feb4:	4b05      	ldr	r3, [pc, #20]	; (800fecc <RCCEx_PLL2_Config+0x15c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800febc:	2b00      	cmp	r3, #0
 800febe:	d0f0      	beq.n	800fea2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	58024400 	.word	0x58024400
 800fed0:	ffff0007 	.word	0xffff0007

0800fed4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fee2:	4b53      	ldr	r3, [pc, #332]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800fee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee6:	f003 0303 	and.w	r3, r3, #3
 800feea:	2b03      	cmp	r3, #3
 800feec:	d101      	bne.n	800fef2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	e099      	b.n	8010026 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fef2:	4b4f      	ldr	r3, [pc, #316]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a4e      	ldr	r2, [pc, #312]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800fef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fefc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fefe:	f7f6 ffdb 	bl	8006eb8 <HAL_GetTick>
 800ff02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff04:	e008      	b.n	800ff18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ff06:	f7f6 ffd7 	bl	8006eb8 <HAL_GetTick>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	1ad3      	subs	r3, r2, r3
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d901      	bls.n	800ff18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ff14:	2303      	movs	r3, #3
 800ff16:	e086      	b.n	8010026 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff18:	4b45      	ldr	r3, [pc, #276]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1f0      	bne.n	800ff06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ff24:	4b42      	ldr	r3, [pc, #264]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	051b      	lsls	r3, r3, #20
 800ff32:	493f      	ldr	r1, [pc, #252]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff34:	4313      	orrs	r3, r2
 800ff36:	628b      	str	r3, [r1, #40]	; 0x28
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	3b01      	subs	r3, #1
 800ff3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	3b01      	subs	r3, #1
 800ff48:	025b      	lsls	r3, r3, #9
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	431a      	orrs	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	3b01      	subs	r3, #1
 800ff54:	041b      	lsls	r3, r3, #16
 800ff56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	3b01      	subs	r3, #1
 800ff62:	061b      	lsls	r3, r3, #24
 800ff64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ff68:	4931      	ldr	r1, [pc, #196]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ff6e:	4b30      	ldr	r3, [pc, #192]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	695b      	ldr	r3, [r3, #20]
 800ff7a:	492d      	ldr	r1, [pc, #180]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ff80:	4b2b      	ldr	r3, [pc, #172]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	4928      	ldr	r1, [pc, #160]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ff92:	4b27      	ldr	r3, [pc, #156]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff96:	4a26      	ldr	r2, [pc, #152]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ff98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ff9e:	4b24      	ldr	r3, [pc, #144]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffa2:	4b24      	ldr	r3, [pc, #144]	; (8010034 <RCCEx_PLL3_Config+0x160>)
 800ffa4:	4013      	ands	r3, r2
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	69d2      	ldr	r2, [r2, #28]
 800ffaa:	00d2      	lsls	r2, r2, #3
 800ffac:	4920      	ldr	r1, [pc, #128]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ffb2:	4b1f      	ldr	r3, [pc, #124]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb6:	4a1e      	ldr	r2, [pc, #120]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ffbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d106      	bne.n	800ffd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ffc4:	4b1a      	ldr	r3, [pc, #104]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	4a19      	ldr	r2, [pc, #100]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ffce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ffd0:	e00f      	b.n	800fff2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d106      	bne.n	800ffe6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ffd8:	4b15      	ldr	r3, [pc, #84]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffdc:	4a14      	ldr	r2, [pc, #80]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ffe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ffe4:	e005      	b.n	800fff2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ffe6:	4b12      	ldr	r3, [pc, #72]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffea:	4a11      	ldr	r2, [pc, #68]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800ffec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fff0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fff2:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a0e      	ldr	r2, [pc, #56]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 800fff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fffe:	f7f6 ff5b 	bl	8006eb8 <HAL_GetTick>
 8010002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010004:	e008      	b.n	8010018 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010006:	f7f6 ff57 	bl	8006eb8 <HAL_GetTick>
 801000a:	4602      	mov	r2, r0
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	2b02      	cmp	r3, #2
 8010012:	d901      	bls.n	8010018 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010014:	2303      	movs	r3, #3
 8010016:	e006      	b.n	8010026 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010018:	4b05      	ldr	r3, [pc, #20]	; (8010030 <RCCEx_PLL3_Config+0x15c>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010020:	2b00      	cmp	r3, #0
 8010022:	d0f0      	beq.n	8010006 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010024:	7bfb      	ldrb	r3, [r7, #15]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	58024400 	.word	0x58024400
 8010034:	ffff0007 	.word	0xffff0007

08010038 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d101      	bne.n	801004a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010046:	2301      	movs	r3, #1
 8010048:	e10f      	b.n	801026a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a87      	ldr	r2, [pc, #540]	; (8010274 <HAL_SPI_Init+0x23c>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d00f      	beq.n	801007a <HAL_SPI_Init+0x42>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a86      	ldr	r2, [pc, #536]	; (8010278 <HAL_SPI_Init+0x240>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d00a      	beq.n	801007a <HAL_SPI_Init+0x42>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a84      	ldr	r2, [pc, #528]	; (801027c <HAL_SPI_Init+0x244>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d005      	beq.n	801007a <HAL_SPI_Init+0x42>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	2b0f      	cmp	r3, #15
 8010074:	d901      	bls.n	801007a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010076:	2301      	movs	r3, #1
 8010078:	e0f7      	b.n	801026a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f900 	bl	8010280 <SPI_GetPacketSize>
 8010080:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a7b      	ldr	r2, [pc, #492]	; (8010274 <HAL_SPI_Init+0x23c>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d00c      	beq.n	80100a6 <HAL_SPI_Init+0x6e>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a79      	ldr	r2, [pc, #484]	; (8010278 <HAL_SPI_Init+0x240>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d007      	beq.n	80100a6 <HAL_SPI_Init+0x6e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a78      	ldr	r2, [pc, #480]	; (801027c <HAL_SPI_Init+0x244>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d002      	beq.n	80100a6 <HAL_SPI_Init+0x6e>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b08      	cmp	r3, #8
 80100a4:	d811      	bhi.n	80100ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80100aa:	4a72      	ldr	r2, [pc, #456]	; (8010274 <HAL_SPI_Init+0x23c>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d009      	beq.n	80100c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a70      	ldr	r2, [pc, #448]	; (8010278 <HAL_SPI_Init+0x240>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d004      	beq.n	80100c4 <HAL_SPI_Init+0x8c>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a6f      	ldr	r2, [pc, #444]	; (801027c <HAL_SPI_Init+0x244>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d104      	bne.n	80100ce <HAL_SPI_Init+0x96>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2b10      	cmp	r3, #16
 80100c8:	d901      	bls.n	80100ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e0cd      	b.n	801026a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d106      	bne.n	80100e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7f5 ff64 	bl	8005fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2202      	movs	r2, #2
 80100ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f022 0201 	bic.w	r2, r2, #1
 80100fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801010a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	699b      	ldr	r3, [r3, #24]
 8010110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010114:	d119      	bne.n	801014a <HAL_SPI_Init+0x112>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801011e:	d103      	bne.n	8010128 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010124:	2b00      	cmp	r3, #0
 8010126:	d008      	beq.n	801013a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10c      	bne.n	801014a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010138:	d107      	bne.n	801014a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010148:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00f      	beq.n	8010176 <HAL_SPI_Init+0x13e>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	2b06      	cmp	r3, #6
 801015c:	d90b      	bls.n	8010176 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	430a      	orrs	r2, r1
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	e007      	b.n	8010186 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010184:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	69da      	ldr	r2, [r3, #28]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801018e:	431a      	orrs	r2, r3
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	431a      	orrs	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010198:	ea42 0103 	orr.w	r1, r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68da      	ldr	r2, [r3, #12]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	430a      	orrs	r2, r1
 80101a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b0:	431a      	orrs	r2, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b6:	431a      	orrs	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	431a      	orrs	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	691b      	ldr	r3, [r3, #16]
 80101c2:	431a      	orrs	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	431a      	orrs	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a1b      	ldr	r3, [r3, #32]
 80101ce:	431a      	orrs	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	431a      	orrs	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101da:	431a      	orrs	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	431a      	orrs	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101e6:	ea42 0103 	orr.w	r1, r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	430a      	orrs	r2, r1
 80101f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d113      	bne.n	8010226 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010210:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010224:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f022 0201 	bic.w	r2, r2, #1
 8010234:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00a      	beq.n	8010258 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	430a      	orrs	r2, r1
 8010256:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	40013000 	.word	0x40013000
 8010278:	40003800 	.word	0x40003800
 801027c:	40003c00 	.word	0x40003c00

08010280 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801028c:	095b      	lsrs	r3, r3, #5
 801028e:	3301      	adds	r3, #1
 8010290:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	3301      	adds	r3, #1
 8010298:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	3307      	adds	r3, #7
 801029e:	08db      	lsrs	r3, r3, #3
 80102a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3714      	adds	r7, #20
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d101      	bne.n	80102c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80102c4:	2301      	movs	r3, #1
 80102c6:	e049      	b.n	801035c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d106      	bne.n	80102e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7f5 ffaf 	bl	8006240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2202      	movs	r2, #2
 80102e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3304      	adds	r3, #4
 80102f2:	4619      	mov	r1, r3
 80102f4:	4610      	mov	r0, r2
 80102f6:	f000 ffe5 	bl	80112c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2201      	movs	r2, #1
 80102fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2201      	movs	r2, #1
 8010306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2201      	movs	r2, #1
 801031e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2201      	movs	r2, #1
 8010326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2201      	movs	r2, #1
 801032e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2201      	movs	r2, #1
 8010336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2201      	movs	r2, #1
 801033e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2201      	movs	r2, #1
 8010346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2201      	movs	r2, #1
 801034e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b01      	cmp	r3, #1
 8010376:	d001      	beq.n	801037c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	e054      	b.n	8010426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2202      	movs	r2, #2
 8010380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68da      	ldr	r2, [r3, #12]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f042 0201 	orr.w	r2, r2, #1
 8010392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a26      	ldr	r2, [pc, #152]	; (8010434 <HAL_TIM_Base_Start_IT+0xd0>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d022      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103a6:	d01d      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a22      	ldr	r2, [pc, #136]	; (8010438 <HAL_TIM_Base_Start_IT+0xd4>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d018      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a21      	ldr	r2, [pc, #132]	; (801043c <HAL_TIM_Base_Start_IT+0xd8>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d013      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a1f      	ldr	r2, [pc, #124]	; (8010440 <HAL_TIM_Base_Start_IT+0xdc>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d00e      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a1e      	ldr	r2, [pc, #120]	; (8010444 <HAL_TIM_Base_Start_IT+0xe0>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d009      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a1c      	ldr	r2, [pc, #112]	; (8010448 <HAL_TIM_Base_Start_IT+0xe4>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d004      	beq.n	80103e4 <HAL_TIM_Base_Start_IT+0x80>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a1b      	ldr	r2, [pc, #108]	; (801044c <HAL_TIM_Base_Start_IT+0xe8>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d115      	bne.n	8010410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	689a      	ldr	r2, [r3, #8]
 80103ea:	4b19      	ldr	r3, [pc, #100]	; (8010450 <HAL_TIM_Base_Start_IT+0xec>)
 80103ec:	4013      	ands	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b06      	cmp	r3, #6
 80103f4:	d015      	beq.n	8010422 <HAL_TIM_Base_Start_IT+0xbe>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103fc:	d011      	beq.n	8010422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f042 0201 	orr.w	r2, r2, #1
 801040c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801040e:	e008      	b.n	8010422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f042 0201 	orr.w	r2, r2, #1
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	e000      	b.n	8010424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010424:	2300      	movs	r3, #0
}
 8010426:	4618      	mov	r0, r3
 8010428:	3714      	adds	r7, #20
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	40010000 	.word	0x40010000
 8010438:	40000400 	.word	0x40000400
 801043c:	40000800 	.word	0x40000800
 8010440:	40000c00 	.word	0x40000c00
 8010444:	40010400 	.word	0x40010400
 8010448:	40001800 	.word	0x40001800
 801044c:	40014000 	.word	0x40014000
 8010450:	00010007 	.word	0x00010007

08010454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d101      	bne.n	8010466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010462:	2301      	movs	r3, #1
 8010464:	e049      	b.n	80104fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801046c:	b2db      	uxtb	r3, r3
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7f5 fe26 	bl	80060cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2202      	movs	r2, #2
 8010484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3304      	adds	r3, #4
 8010490:	4619      	mov	r1, r3
 8010492:	4610      	mov	r0, r2
 8010494:	f000 ff16 	bl	80112c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2201      	movs	r2, #1
 80104a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2201      	movs	r2, #1
 80104ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2201      	movs	r2, #1
 80104b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
	...

08010504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d109      	bne.n	8010528 <HAL_TIM_PWM_Start+0x24>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b01      	cmp	r3, #1
 801051e:	bf14      	ite	ne
 8010520:	2301      	movne	r3, #1
 8010522:	2300      	moveq	r3, #0
 8010524:	b2db      	uxtb	r3, r3
 8010526:	e03c      	b.n	80105a2 <HAL_TIM_PWM_Start+0x9e>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	2b04      	cmp	r3, #4
 801052c:	d109      	bne.n	8010542 <HAL_TIM_PWM_Start+0x3e>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b01      	cmp	r3, #1
 8010538:	bf14      	ite	ne
 801053a:	2301      	movne	r3, #1
 801053c:	2300      	moveq	r3, #0
 801053e:	b2db      	uxtb	r3, r3
 8010540:	e02f      	b.n	80105a2 <HAL_TIM_PWM_Start+0x9e>
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b08      	cmp	r3, #8
 8010546:	d109      	bne.n	801055c <HAL_TIM_PWM_Start+0x58>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b01      	cmp	r3, #1
 8010552:	bf14      	ite	ne
 8010554:	2301      	movne	r3, #1
 8010556:	2300      	moveq	r3, #0
 8010558:	b2db      	uxtb	r3, r3
 801055a:	e022      	b.n	80105a2 <HAL_TIM_PWM_Start+0x9e>
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	2b0c      	cmp	r3, #12
 8010560:	d109      	bne.n	8010576 <HAL_TIM_PWM_Start+0x72>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010568:	b2db      	uxtb	r3, r3
 801056a:	2b01      	cmp	r3, #1
 801056c:	bf14      	ite	ne
 801056e:	2301      	movne	r3, #1
 8010570:	2300      	moveq	r3, #0
 8010572:	b2db      	uxtb	r3, r3
 8010574:	e015      	b.n	80105a2 <HAL_TIM_PWM_Start+0x9e>
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b10      	cmp	r3, #16
 801057a:	d109      	bne.n	8010590 <HAL_TIM_PWM_Start+0x8c>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010582:	b2db      	uxtb	r3, r3
 8010584:	2b01      	cmp	r3, #1
 8010586:	bf14      	ite	ne
 8010588:	2301      	movne	r3, #1
 801058a:	2300      	moveq	r3, #0
 801058c:	b2db      	uxtb	r3, r3
 801058e:	e008      	b.n	80105a2 <HAL_TIM_PWM_Start+0x9e>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b01      	cmp	r3, #1
 801059a:	bf14      	ite	ne
 801059c:	2301      	movne	r3, #1
 801059e:	2300      	moveq	r3, #0
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e0a1      	b.n	80106ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d104      	bne.n	80105ba <HAL_TIM_PWM_Start+0xb6>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2202      	movs	r2, #2
 80105b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105b8:	e023      	b.n	8010602 <HAL_TIM_PWM_Start+0xfe>
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	2b04      	cmp	r3, #4
 80105be:	d104      	bne.n	80105ca <HAL_TIM_PWM_Start+0xc6>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2202      	movs	r2, #2
 80105c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105c8:	e01b      	b.n	8010602 <HAL_TIM_PWM_Start+0xfe>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	2b08      	cmp	r3, #8
 80105ce:	d104      	bne.n	80105da <HAL_TIM_PWM_Start+0xd6>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2202      	movs	r2, #2
 80105d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105d8:	e013      	b.n	8010602 <HAL_TIM_PWM_Start+0xfe>
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b0c      	cmp	r3, #12
 80105de:	d104      	bne.n	80105ea <HAL_TIM_PWM_Start+0xe6>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105e8:	e00b      	b.n	8010602 <HAL_TIM_PWM_Start+0xfe>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	2b10      	cmp	r3, #16
 80105ee:	d104      	bne.n	80105fa <HAL_TIM_PWM_Start+0xf6>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2202      	movs	r2, #2
 80105f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105f8:	e003      	b.n	8010602 <HAL_TIM_PWM_Start+0xfe>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2202      	movs	r2, #2
 80105fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2201      	movs	r2, #1
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	4618      	mov	r0, r3
 801060c:	f001 fc5d 	bl	8011eca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a38      	ldr	r2, [pc, #224]	; (80106f8 <HAL_TIM_PWM_Start+0x1f4>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d013      	beq.n	8010642 <HAL_TIM_PWM_Start+0x13e>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a37      	ldr	r2, [pc, #220]	; (80106fc <HAL_TIM_PWM_Start+0x1f8>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d00e      	beq.n	8010642 <HAL_TIM_PWM_Start+0x13e>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a35      	ldr	r2, [pc, #212]	; (8010700 <HAL_TIM_PWM_Start+0x1fc>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d009      	beq.n	8010642 <HAL_TIM_PWM_Start+0x13e>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a34      	ldr	r2, [pc, #208]	; (8010704 <HAL_TIM_PWM_Start+0x200>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d004      	beq.n	8010642 <HAL_TIM_PWM_Start+0x13e>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a32      	ldr	r2, [pc, #200]	; (8010708 <HAL_TIM_PWM_Start+0x204>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d101      	bne.n	8010646 <HAL_TIM_PWM_Start+0x142>
 8010642:	2301      	movs	r3, #1
 8010644:	e000      	b.n	8010648 <HAL_TIM_PWM_Start+0x144>
 8010646:	2300      	movs	r3, #0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d007      	beq.n	801065c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801065a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a25      	ldr	r2, [pc, #148]	; (80106f8 <HAL_TIM_PWM_Start+0x1f4>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d022      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801066e:	d01d      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a25      	ldr	r2, [pc, #148]	; (801070c <HAL_TIM_PWM_Start+0x208>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d018      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a24      	ldr	r2, [pc, #144]	; (8010710 <HAL_TIM_PWM_Start+0x20c>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d013      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a22      	ldr	r2, [pc, #136]	; (8010714 <HAL_TIM_PWM_Start+0x210>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00e      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a1a      	ldr	r2, [pc, #104]	; (80106fc <HAL_TIM_PWM_Start+0x1f8>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d009      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a1e      	ldr	r2, [pc, #120]	; (8010718 <HAL_TIM_PWM_Start+0x214>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d004      	beq.n	80106ac <HAL_TIM_PWM_Start+0x1a8>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a16      	ldr	r2, [pc, #88]	; (8010700 <HAL_TIM_PWM_Start+0x1fc>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d115      	bne.n	80106d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	689a      	ldr	r2, [r3, #8]
 80106b2:	4b1a      	ldr	r3, [pc, #104]	; (801071c <HAL_TIM_PWM_Start+0x218>)
 80106b4:	4013      	ands	r3, r2
 80106b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2b06      	cmp	r3, #6
 80106bc:	d015      	beq.n	80106ea <HAL_TIM_PWM_Start+0x1e6>
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106c4:	d011      	beq.n	80106ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f042 0201 	orr.w	r2, r2, #1
 80106d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106d6:	e008      	b.n	80106ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f042 0201 	orr.w	r2, r2, #1
 80106e6:	601a      	str	r2, [r3, #0]
 80106e8:	e000      	b.n	80106ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	40010000 	.word	0x40010000
 80106fc:	40010400 	.word	0x40010400
 8010700:	40014000 	.word	0x40014000
 8010704:	40014400 	.word	0x40014400
 8010708:	40014800 	.word	0x40014800
 801070c:	40000400 	.word	0x40000400
 8010710:	40000800 	.word	0x40000800
 8010714:	40000c00 	.word	0x40000c00
 8010718:	40001800 	.word	0x40001800
 801071c:	00010007 	.word	0x00010007

08010720 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801072e:	2301      	movs	r3, #1
 8010730:	e049      	b.n	80107c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	d106      	bne.n	801074c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7f5 fcf8 	bl	800613c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2202      	movs	r2, #2
 8010750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	3304      	adds	r3, #4
 801075c:	4619      	mov	r1, r3
 801075e:	4610      	mov	r0, r2
 8010760:	f000 fdb0 	bl	80112c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2201      	movs	r2, #1
 80107b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
	...

080107d0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d104      	bne.n	80107ea <HAL_TIM_IC_Start+0x1a>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	e023      	b.n	8010832 <HAL_TIM_IC_Start+0x62>
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	2b04      	cmp	r3, #4
 80107ee:	d104      	bne.n	80107fa <HAL_TIM_IC_Start+0x2a>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	e01b      	b.n	8010832 <HAL_TIM_IC_Start+0x62>
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	2b08      	cmp	r3, #8
 80107fe:	d104      	bne.n	801080a <HAL_TIM_IC_Start+0x3a>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010806:	b2db      	uxtb	r3, r3
 8010808:	e013      	b.n	8010832 <HAL_TIM_IC_Start+0x62>
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b0c      	cmp	r3, #12
 801080e:	d104      	bne.n	801081a <HAL_TIM_IC_Start+0x4a>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010816:	b2db      	uxtb	r3, r3
 8010818:	e00b      	b.n	8010832 <HAL_TIM_IC_Start+0x62>
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b10      	cmp	r3, #16
 801081e:	d104      	bne.n	801082a <HAL_TIM_IC_Start+0x5a>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010826:	b2db      	uxtb	r3, r3
 8010828:	e003      	b.n	8010832 <HAL_TIM_IC_Start+0x62>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010830:	b2db      	uxtb	r3, r3
 8010832:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d104      	bne.n	8010844 <HAL_TIM_IC_Start+0x74>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010840:	b2db      	uxtb	r3, r3
 8010842:	e013      	b.n	801086c <HAL_TIM_IC_Start+0x9c>
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	2b04      	cmp	r3, #4
 8010848:	d104      	bne.n	8010854 <HAL_TIM_IC_Start+0x84>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010850:	b2db      	uxtb	r3, r3
 8010852:	e00b      	b.n	801086c <HAL_TIM_IC_Start+0x9c>
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b08      	cmp	r3, #8
 8010858:	d104      	bne.n	8010864 <HAL_TIM_IC_Start+0x94>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010860:	b2db      	uxtb	r3, r3
 8010862:	e003      	b.n	801086c <HAL_TIM_IC_Start+0x9c>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801086a:	b2db      	uxtb	r3, r3
 801086c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801086e:	7bfb      	ldrb	r3, [r7, #15]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d102      	bne.n	801087a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010874:	7bbb      	ldrb	r3, [r7, #14]
 8010876:	2b01      	cmp	r3, #1
 8010878:	d001      	beq.n	801087e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 801087a:	2301      	movs	r3, #1
 801087c:	e097      	b.n	80109ae <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d104      	bne.n	801088e <HAL_TIM_IC_Start+0xbe>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2202      	movs	r2, #2
 8010888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801088c:	e023      	b.n	80108d6 <HAL_TIM_IC_Start+0x106>
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2b04      	cmp	r3, #4
 8010892:	d104      	bne.n	801089e <HAL_TIM_IC_Start+0xce>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2202      	movs	r2, #2
 8010898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801089c:	e01b      	b.n	80108d6 <HAL_TIM_IC_Start+0x106>
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	2b08      	cmp	r3, #8
 80108a2:	d104      	bne.n	80108ae <HAL_TIM_IC_Start+0xde>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2202      	movs	r2, #2
 80108a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108ac:	e013      	b.n	80108d6 <HAL_TIM_IC_Start+0x106>
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b0c      	cmp	r3, #12
 80108b2:	d104      	bne.n	80108be <HAL_TIM_IC_Start+0xee>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2202      	movs	r2, #2
 80108b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80108bc:	e00b      	b.n	80108d6 <HAL_TIM_IC_Start+0x106>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2b10      	cmp	r3, #16
 80108c2:	d104      	bne.n	80108ce <HAL_TIM_IC_Start+0xfe>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2202      	movs	r2, #2
 80108c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108cc:	e003      	b.n	80108d6 <HAL_TIM_IC_Start+0x106>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2202      	movs	r2, #2
 80108d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <HAL_TIM_IC_Start+0x116>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2202      	movs	r2, #2
 80108e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108e4:	e013      	b.n	801090e <HAL_TIM_IC_Start+0x13e>
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	2b04      	cmp	r3, #4
 80108ea:	d104      	bne.n	80108f6 <HAL_TIM_IC_Start+0x126>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2202      	movs	r2, #2
 80108f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108f4:	e00b      	b.n	801090e <HAL_TIM_IC_Start+0x13e>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	2b08      	cmp	r3, #8
 80108fa:	d104      	bne.n	8010906 <HAL_TIM_IC_Start+0x136>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2202      	movs	r2, #2
 8010900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010904:	e003      	b.n	801090e <HAL_TIM_IC_Start+0x13e>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2202      	movs	r2, #2
 801090a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	2201      	movs	r2, #1
 8010914:	6839      	ldr	r1, [r7, #0]
 8010916:	4618      	mov	r0, r3
 8010918:	f001 fad7 	bl	8011eca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a25      	ldr	r2, [pc, #148]	; (80109b8 <HAL_TIM_IC_Start+0x1e8>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d022      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801092e:	d01d      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a21      	ldr	r2, [pc, #132]	; (80109bc <HAL_TIM_IC_Start+0x1ec>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d018      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4a20      	ldr	r2, [pc, #128]	; (80109c0 <HAL_TIM_IC_Start+0x1f0>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d013      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a1e      	ldr	r2, [pc, #120]	; (80109c4 <HAL_TIM_IC_Start+0x1f4>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d00e      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a1d      	ldr	r2, [pc, #116]	; (80109c8 <HAL_TIM_IC_Start+0x1f8>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d009      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a1b      	ldr	r2, [pc, #108]	; (80109cc <HAL_TIM_IC_Start+0x1fc>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d004      	beq.n	801096c <HAL_TIM_IC_Start+0x19c>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a1a      	ldr	r2, [pc, #104]	; (80109d0 <HAL_TIM_IC_Start+0x200>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d115      	bne.n	8010998 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	689a      	ldr	r2, [r3, #8]
 8010972:	4b18      	ldr	r3, [pc, #96]	; (80109d4 <HAL_TIM_IC_Start+0x204>)
 8010974:	4013      	ands	r3, r2
 8010976:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b06      	cmp	r3, #6
 801097c:	d015      	beq.n	80109aa <HAL_TIM_IC_Start+0x1da>
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010984:	d011      	beq.n	80109aa <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f042 0201 	orr.w	r2, r2, #1
 8010994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010996:	e008      	b.n	80109aa <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f042 0201 	orr.w	r2, r2, #1
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	e000      	b.n	80109ac <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	40010000 	.word	0x40010000
 80109bc:	40000400 	.word	0x40000400
 80109c0:	40000800 	.word	0x40000800
 80109c4:	40000c00 	.word	0x40000c00
 80109c8:	40010400 	.word	0x40010400
 80109cc:	40001800 	.word	0x40001800
 80109d0:	40014000 	.word	0x40014000
 80109d4:	00010007 	.word	0x00010007

080109d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d104      	bne.n	80109f6 <HAL_TIM_IC_Start_IT+0x1e>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	e023      	b.n	8010a3e <HAL_TIM_IC_Start_IT+0x66>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	2b04      	cmp	r3, #4
 80109fa:	d104      	bne.n	8010a06 <HAL_TIM_IC_Start_IT+0x2e>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	e01b      	b.n	8010a3e <HAL_TIM_IC_Start_IT+0x66>
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2b08      	cmp	r3, #8
 8010a0a:	d104      	bne.n	8010a16 <HAL_TIM_IC_Start_IT+0x3e>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	e013      	b.n	8010a3e <HAL_TIM_IC_Start_IT+0x66>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b0c      	cmp	r3, #12
 8010a1a:	d104      	bne.n	8010a26 <HAL_TIM_IC_Start_IT+0x4e>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	e00b      	b.n	8010a3e <HAL_TIM_IC_Start_IT+0x66>
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	2b10      	cmp	r3, #16
 8010a2a:	d104      	bne.n	8010a36 <HAL_TIM_IC_Start_IT+0x5e>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	e003      	b.n	8010a3e <HAL_TIM_IC_Start_IT+0x66>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d104      	bne.n	8010a50 <HAL_TIM_IC_Start_IT+0x78>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	e013      	b.n	8010a78 <HAL_TIM_IC_Start_IT+0xa0>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2b04      	cmp	r3, #4
 8010a54:	d104      	bne.n	8010a60 <HAL_TIM_IC_Start_IT+0x88>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	e00b      	b.n	8010a78 <HAL_TIM_IC_Start_IT+0xa0>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b08      	cmp	r3, #8
 8010a64:	d104      	bne.n	8010a70 <HAL_TIM_IC_Start_IT+0x98>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	e003      	b.n	8010a78 <HAL_TIM_IC_Start_IT+0xa0>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d102      	bne.n	8010a86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010a80:	7b7b      	ldrb	r3, [r7, #13]
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d001      	beq.n	8010a8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010a86:	2301      	movs	r3, #1
 8010a88:	e0e2      	b.n	8010c50 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d104      	bne.n	8010a9a <HAL_TIM_IC_Start_IT+0xc2>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2202      	movs	r2, #2
 8010a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a98:	e023      	b.n	8010ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b04      	cmp	r3, #4
 8010a9e:	d104      	bne.n	8010aaa <HAL_TIM_IC_Start_IT+0xd2>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2202      	movs	r2, #2
 8010aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010aa8:	e01b      	b.n	8010ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	2b08      	cmp	r3, #8
 8010aae:	d104      	bne.n	8010aba <HAL_TIM_IC_Start_IT+0xe2>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ab8:	e013      	b.n	8010ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	2b0c      	cmp	r3, #12
 8010abe:	d104      	bne.n	8010aca <HAL_TIM_IC_Start_IT+0xf2>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010ac8:	e00b      	b.n	8010ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	2b10      	cmp	r3, #16
 8010ace:	d104      	bne.n	8010ada <HAL_TIM_IC_Start_IT+0x102>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2202      	movs	r2, #2
 8010ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010ad8:	e003      	b.n	8010ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2202      	movs	r2, #2
 8010ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d104      	bne.n	8010af2 <HAL_TIM_IC_Start_IT+0x11a>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2202      	movs	r2, #2
 8010aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010af0:	e013      	b.n	8010b1a <HAL_TIM_IC_Start_IT+0x142>
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	d104      	bne.n	8010b02 <HAL_TIM_IC_Start_IT+0x12a>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2202      	movs	r2, #2
 8010afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b00:	e00b      	b.n	8010b1a <HAL_TIM_IC_Start_IT+0x142>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2b08      	cmp	r3, #8
 8010b06:	d104      	bne.n	8010b12 <HAL_TIM_IC_Start_IT+0x13a>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b10:	e003      	b.n	8010b1a <HAL_TIM_IC_Start_IT+0x142>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2202      	movs	r2, #2
 8010b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2b0c      	cmp	r3, #12
 8010b1e:	d841      	bhi.n	8010ba4 <HAL_TIM_IC_Start_IT+0x1cc>
 8010b20:	a201      	add	r2, pc, #4	; (adr r2, 8010b28 <HAL_TIM_IC_Start_IT+0x150>)
 8010b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b26:	bf00      	nop
 8010b28:	08010b5d 	.word	0x08010b5d
 8010b2c:	08010ba5 	.word	0x08010ba5
 8010b30:	08010ba5 	.word	0x08010ba5
 8010b34:	08010ba5 	.word	0x08010ba5
 8010b38:	08010b6f 	.word	0x08010b6f
 8010b3c:	08010ba5 	.word	0x08010ba5
 8010b40:	08010ba5 	.word	0x08010ba5
 8010b44:	08010ba5 	.word	0x08010ba5
 8010b48:	08010b81 	.word	0x08010b81
 8010b4c:	08010ba5 	.word	0x08010ba5
 8010b50:	08010ba5 	.word	0x08010ba5
 8010b54:	08010ba5 	.word	0x08010ba5
 8010b58:	08010b93 	.word	0x08010b93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f042 0202 	orr.w	r2, r2, #2
 8010b6a:	60da      	str	r2, [r3, #12]
      break;
 8010b6c:	e01d      	b.n	8010baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	68da      	ldr	r2, [r3, #12]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f042 0204 	orr.w	r2, r2, #4
 8010b7c:	60da      	str	r2, [r3, #12]
      break;
 8010b7e:	e014      	b.n	8010baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	68da      	ldr	r2, [r3, #12]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f042 0208 	orr.w	r2, r2, #8
 8010b8e:	60da      	str	r2, [r3, #12]
      break;
 8010b90:	e00b      	b.n	8010baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68da      	ldr	r2, [r3, #12]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f042 0210 	orr.w	r2, r2, #16
 8010ba0:	60da      	str	r2, [r3, #12]
      break;
 8010ba2:	e002      	b.n	8010baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d14e      	bne.n	8010c4e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 f986 	bl	8011eca <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a25      	ldr	r2, [pc, #148]	; (8010c58 <HAL_TIM_IC_Start_IT+0x280>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d022      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bd0:	d01d      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a21      	ldr	r2, [pc, #132]	; (8010c5c <HAL_TIM_IC_Start_IT+0x284>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d018      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a1f      	ldr	r2, [pc, #124]	; (8010c60 <HAL_TIM_IC_Start_IT+0x288>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d013      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a1e      	ldr	r2, [pc, #120]	; (8010c64 <HAL_TIM_IC_Start_IT+0x28c>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d00e      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a1c      	ldr	r2, [pc, #112]	; (8010c68 <HAL_TIM_IC_Start_IT+0x290>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d009      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a1b      	ldr	r2, [pc, #108]	; (8010c6c <HAL_TIM_IC_Start_IT+0x294>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d004      	beq.n	8010c0e <HAL_TIM_IC_Start_IT+0x236>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4a19      	ldr	r2, [pc, #100]	; (8010c70 <HAL_TIM_IC_Start_IT+0x298>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d115      	bne.n	8010c3a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	689a      	ldr	r2, [r3, #8]
 8010c14:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <HAL_TIM_IC_Start_IT+0x29c>)
 8010c16:	4013      	ands	r3, r2
 8010c18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	2b06      	cmp	r3, #6
 8010c1e:	d015      	beq.n	8010c4c <HAL_TIM_IC_Start_IT+0x274>
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c26:	d011      	beq.n	8010c4c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f042 0201 	orr.w	r2, r2, #1
 8010c36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c38:	e008      	b.n	8010c4c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f042 0201 	orr.w	r2, r2, #1
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	e000      	b.n	8010c4e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c4c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	40010000 	.word	0x40010000
 8010c5c:	40000400 	.word	0x40000400
 8010c60:	40000800 	.word	0x40000800
 8010c64:	40000c00 	.word	0x40000c00
 8010c68:	40010400 	.word	0x40010400
 8010c6c:	40001800 	.word	0x40001800
 8010c70:	40014000 	.word	0x40014000
 8010c74:	00010007 	.word	0x00010007

08010c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	f003 0302 	and.w	r3, r3, #2
 8010c8a:	2b02      	cmp	r3, #2
 8010c8c:	d122      	bne.n	8010cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	f003 0302 	and.w	r3, r3, #2
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	d11b      	bne.n	8010cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f06f 0202 	mvn.w	r2, #2
 8010ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	699b      	ldr	r3, [r3, #24]
 8010cb2:	f003 0303 	and.w	r3, r3, #3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d003      	beq.n	8010cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7f3 f8da 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8010cc0:	e005      	b.n	8010cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 faea 	bl	801129c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7f3 f8dd 	bl	8003e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	f003 0304 	and.w	r3, r3, #4
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d122      	bne.n	8010d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	f003 0304 	and.w	r3, r3, #4
 8010cec:	2b04      	cmp	r3, #4
 8010cee:	d11b      	bne.n	8010d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f06f 0204 	mvn.w	r2, #4
 8010cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2202      	movs	r2, #2
 8010cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	699b      	ldr	r3, [r3, #24]
 8010d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7f3 f8b0 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8010d14:	e005      	b.n	8010d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 fac0 	bl	801129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f3 f8b3 	bl	8003e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	f003 0308 	and.w	r3, r3, #8
 8010d32:	2b08      	cmp	r3, #8
 8010d34:	d122      	bne.n	8010d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	f003 0308 	and.w	r3, r3, #8
 8010d40:	2b08      	cmp	r3, #8
 8010d42:	d11b      	bne.n	8010d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f06f 0208 	mvn.w	r2, #8
 8010d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2204      	movs	r2, #4
 8010d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	69db      	ldr	r3, [r3, #28]
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d003      	beq.n	8010d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7f3 f886 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8010d68:	e005      	b.n	8010d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 fa96 	bl	801129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7f3 f889 	bl	8003e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	f003 0310 	and.w	r3, r3, #16
 8010d86:	2b10      	cmp	r3, #16
 8010d88:	d122      	bne.n	8010dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	f003 0310 	and.w	r3, r3, #16
 8010d94:	2b10      	cmp	r3, #16
 8010d96:	d11b      	bne.n	8010dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f06f 0210 	mvn.w	r2, #16
 8010da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2208      	movs	r2, #8
 8010da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	69db      	ldr	r3, [r3, #28]
 8010dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d003      	beq.n	8010dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7f3 f85c 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8010dbc:	e005      	b.n	8010dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fa6c 	bl	801129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7f3 f85f 	bl	8003e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d10e      	bne.n	8010dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	f003 0301 	and.w	r3, r3, #1
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d107      	bne.n	8010dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f06f 0201 	mvn.w	r2, #1
 8010df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7f3 f852 	bl	8003ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e06:	2b80      	cmp	r3, #128	; 0x80
 8010e08:	d10e      	bne.n	8010e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e14:	2b80      	cmp	r3, #128	; 0x80
 8010e16:	d107      	bne.n	8010e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f001 f90e 	bl	8012044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e36:	d10e      	bne.n	8010e56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e42:	2b80      	cmp	r3, #128	; 0x80
 8010e44:	d107      	bne.n	8010e56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f001 f901 	bl	8012058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	691b      	ldr	r3, [r3, #16]
 8010e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e60:	2b40      	cmp	r3, #64	; 0x40
 8010e62:	d10e      	bne.n	8010e82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e6e:	2b40      	cmp	r3, #64	; 0x40
 8010e70:	d107      	bne.n	8010e82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fa17 	bl	80112b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	f003 0320 	and.w	r3, r3, #32
 8010e8c:	2b20      	cmp	r3, #32
 8010e8e:	d10e      	bne.n	8010eae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	f003 0320 	and.w	r3, r3, #32
 8010e9a:	2b20      	cmp	r3, #32
 8010e9c:	d107      	bne.n	8010eae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f06f 0220 	mvn.w	r2, #32
 8010ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f001 f8c1 	bl	8012030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010eae:	bf00      	nop
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b086      	sub	sp, #24
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	60f8      	str	r0, [r7, #12]
 8010ebe:	60b9      	str	r1, [r7, #8]
 8010ec0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d101      	bne.n	8010ed4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8010ed0:	2302      	movs	r3, #2
 8010ed2:	e088      	b.n	8010fe6 <HAL_TIM_IC_ConfigChannel+0x130>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d11b      	bne.n	8010f1a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010ef2:	f000 fe41 	bl	8011b78 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	699a      	ldr	r2, [r3, #24]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f022 020c 	bic.w	r2, r2, #12
 8010f04:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6999      	ldr	r1, [r3, #24]
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	689a      	ldr	r2, [r3, #8]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	430a      	orrs	r2, r1
 8010f16:	619a      	str	r2, [r3, #24]
 8010f18:	e060      	b.n	8010fdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2b04      	cmp	r3, #4
 8010f1e:	d11c      	bne.n	8010f5a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010f30:	f000 fec5 	bl	8011cbe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	699a      	ldr	r2, [r3, #24]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010f42:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	6999      	ldr	r1, [r3, #24]
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	021a      	lsls	r2, r3, #8
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	430a      	orrs	r2, r1
 8010f56:	619a      	str	r2, [r3, #24]
 8010f58:	e040      	b.n	8010fdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b08      	cmp	r3, #8
 8010f5e:	d11b      	bne.n	8010f98 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8010f70:	f000 ff12 	bl	8011d98 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	69da      	ldr	r2, [r3, #28]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f022 020c 	bic.w	r2, r2, #12
 8010f82:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	69d9      	ldr	r1, [r3, #28]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	689a      	ldr	r2, [r3, #8]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	430a      	orrs	r2, r1
 8010f94:	61da      	str	r2, [r3, #28]
 8010f96:	e021      	b.n	8010fdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b0c      	cmp	r3, #12
 8010f9c:	d11c      	bne.n	8010fd8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010fae:	f000 ff2f 	bl	8011e10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	69da      	ldr	r2, [r3, #28]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010fc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	69d9      	ldr	r1, [r3, #28]
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	689b      	ldr	r3, [r3, #8]
 8010fcc:	021a      	lsls	r2, r3, #8
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	430a      	orrs	r2, r1
 8010fd4:	61da      	str	r2, [r3, #28]
 8010fd6:	e001      	b.n	8010fdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
	...

08010ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011006:	2b01      	cmp	r3, #1
 8011008:	d101      	bne.n	801100e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801100a:	2302      	movs	r3, #2
 801100c:	e0ff      	b.n	801120e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b14      	cmp	r3, #20
 801101a:	f200 80f0 	bhi.w	80111fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 801101e:	a201      	add	r2, pc, #4	; (adr r2, 8011024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011024:	08011079 	.word	0x08011079
 8011028:	080111ff 	.word	0x080111ff
 801102c:	080111ff 	.word	0x080111ff
 8011030:	080111ff 	.word	0x080111ff
 8011034:	080110b9 	.word	0x080110b9
 8011038:	080111ff 	.word	0x080111ff
 801103c:	080111ff 	.word	0x080111ff
 8011040:	080111ff 	.word	0x080111ff
 8011044:	080110fb 	.word	0x080110fb
 8011048:	080111ff 	.word	0x080111ff
 801104c:	080111ff 	.word	0x080111ff
 8011050:	080111ff 	.word	0x080111ff
 8011054:	0801113b 	.word	0x0801113b
 8011058:	080111ff 	.word	0x080111ff
 801105c:	080111ff 	.word	0x080111ff
 8011060:	080111ff 	.word	0x080111ff
 8011064:	0801117d 	.word	0x0801117d
 8011068:	080111ff 	.word	0x080111ff
 801106c:	080111ff 	.word	0x080111ff
 8011070:	080111ff 	.word	0x080111ff
 8011074:	080111bd 	.word	0x080111bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	68b9      	ldr	r1, [r7, #8]
 801107e:	4618      	mov	r0, r3
 8011080:	f000 f9ba 	bl	80113f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	699a      	ldr	r2, [r3, #24]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f042 0208 	orr.w	r2, r2, #8
 8011092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	699a      	ldr	r2, [r3, #24]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f022 0204 	bic.w	r2, r2, #4
 80110a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	6999      	ldr	r1, [r3, #24]
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	691a      	ldr	r2, [r3, #16]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	430a      	orrs	r2, r1
 80110b4:	619a      	str	r2, [r3, #24]
      break;
 80110b6:	e0a5      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	68b9      	ldr	r1, [r7, #8]
 80110be:	4618      	mov	r0, r3
 80110c0:	f000 fa2a 	bl	8011518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	699a      	ldr	r2, [r3, #24]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	699a      	ldr	r2, [r3, #24]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80110e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	6999      	ldr	r1, [r3, #24]
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	021a      	lsls	r2, r3, #8
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	430a      	orrs	r2, r1
 80110f6:	619a      	str	r2, [r3, #24]
      break;
 80110f8:	e084      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	68b9      	ldr	r1, [r7, #8]
 8011100:	4618      	mov	r0, r3
 8011102:	f000 fa93 	bl	801162c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	69da      	ldr	r2, [r3, #28]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f042 0208 	orr.w	r2, r2, #8
 8011114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	69da      	ldr	r2, [r3, #28]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f022 0204 	bic.w	r2, r2, #4
 8011124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	69d9      	ldr	r1, [r3, #28]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	691a      	ldr	r2, [r3, #16]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	430a      	orrs	r2, r1
 8011136:	61da      	str	r2, [r3, #28]
      break;
 8011138:	e064      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68b9      	ldr	r1, [r7, #8]
 8011140:	4618      	mov	r0, r3
 8011142:	f000 fafb 	bl	801173c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	69da      	ldr	r2, [r3, #28]
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	69da      	ldr	r2, [r3, #28]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	69d9      	ldr	r1, [r3, #28]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	691b      	ldr	r3, [r3, #16]
 8011170:	021a      	lsls	r2, r3, #8
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	430a      	orrs	r2, r1
 8011178:	61da      	str	r2, [r3, #28]
      break;
 801117a:	e043      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	68b9      	ldr	r1, [r7, #8]
 8011182:	4618      	mov	r0, r3
 8011184:	f000 fb44 	bl	8011810 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f042 0208 	orr.w	r2, r2, #8
 8011196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f022 0204 	bic.w	r2, r2, #4
 80111a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	691a      	ldr	r2, [r3, #16]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	430a      	orrs	r2, r1
 80111b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80111ba:	e023      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68b9      	ldr	r1, [r7, #8]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f000 fb88 	bl	80118d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80111e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	691b      	ldr	r3, [r3, #16]
 80111f2:	021a      	lsls	r2, r3, #8
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	430a      	orrs	r2, r1
 80111fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80111fc:	e002      	b.n	8011204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	75fb      	strb	r3, [r7, #23]
      break;
 8011202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801120c:	7dfb      	ldrb	r3, [r7, #23]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop

08011218 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011228:	2b01      	cmp	r3, #1
 801122a:	d101      	bne.n	8011230 <HAL_TIM_SlaveConfigSynchro+0x18>
 801122c:	2302      	movs	r3, #2
 801122e:	e031      	b.n	8011294 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2202      	movs	r2, #2
 801123c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8011240:	6839      	ldr	r1, [r7, #0]
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fbae 	bl	80119a4 <TIM_SlaveTimer_SetConfig>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d009      	beq.n	8011262 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2201      	movs	r2, #1
 8011252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801125e:	2301      	movs	r3, #1
 8011260:	e018      	b.n	8011294 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011270:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	68da      	ldr	r2, [r3, #12]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011280:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2201      	movs	r2, #1
 8011286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80112a4:	bf00      	nop
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a40      	ldr	r2, [pc, #256]	; (80113d8 <TIM_Base_SetConfig+0x114>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d013      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112e2:	d00f      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a3d      	ldr	r2, [pc, #244]	; (80113dc <TIM_Base_SetConfig+0x118>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d00b      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a3c      	ldr	r2, [pc, #240]	; (80113e0 <TIM_Base_SetConfig+0x11c>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d007      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4a3b      	ldr	r2, [pc, #236]	; (80113e4 <TIM_Base_SetConfig+0x120>)
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d003      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	4a3a      	ldr	r2, [pc, #232]	; (80113e8 <TIM_Base_SetConfig+0x124>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d108      	bne.n	8011316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801130a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	4313      	orrs	r3, r2
 8011314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a2f      	ldr	r2, [pc, #188]	; (80113d8 <TIM_Base_SetConfig+0x114>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d01f      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011324:	d01b      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a2c      	ldr	r2, [pc, #176]	; (80113dc <TIM_Base_SetConfig+0x118>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d017      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a2b      	ldr	r2, [pc, #172]	; (80113e0 <TIM_Base_SetConfig+0x11c>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d013      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a2a      	ldr	r2, [pc, #168]	; (80113e4 <TIM_Base_SetConfig+0x120>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d00f      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a29      	ldr	r2, [pc, #164]	; (80113e8 <TIM_Base_SetConfig+0x124>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d00b      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a28      	ldr	r2, [pc, #160]	; (80113ec <TIM_Base_SetConfig+0x128>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d007      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a27      	ldr	r2, [pc, #156]	; (80113f0 <TIM_Base_SetConfig+0x12c>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d003      	beq.n	801135e <TIM_Base_SetConfig+0x9a>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4a26      	ldr	r2, [pc, #152]	; (80113f4 <TIM_Base_SetConfig+0x130>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d108      	bne.n	8011370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	4313      	orrs	r3, r2
 801136e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	4313      	orrs	r3, r2
 801137c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	689a      	ldr	r2, [r3, #8]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a10      	ldr	r2, [pc, #64]	; (80113d8 <TIM_Base_SetConfig+0x114>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d00f      	beq.n	80113bc <TIM_Base_SetConfig+0xf8>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	4a12      	ldr	r2, [pc, #72]	; (80113e8 <TIM_Base_SetConfig+0x124>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d00b      	beq.n	80113bc <TIM_Base_SetConfig+0xf8>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4a11      	ldr	r2, [pc, #68]	; (80113ec <TIM_Base_SetConfig+0x128>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d007      	beq.n	80113bc <TIM_Base_SetConfig+0xf8>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a10      	ldr	r2, [pc, #64]	; (80113f0 <TIM_Base_SetConfig+0x12c>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d003      	beq.n	80113bc <TIM_Base_SetConfig+0xf8>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	4a0f      	ldr	r2, [pc, #60]	; (80113f4 <TIM_Base_SetConfig+0x130>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d103      	bne.n	80113c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	691a      	ldr	r2, [r3, #16]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2201      	movs	r2, #1
 80113c8:	615a      	str	r2, [r3, #20]
}
 80113ca:	bf00      	nop
 80113cc:	3714      	adds	r7, #20
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	40010000 	.word	0x40010000
 80113dc:	40000400 	.word	0x40000400
 80113e0:	40000800 	.word	0x40000800
 80113e4:	40000c00 	.word	0x40000c00
 80113e8:	40010400 	.word	0x40010400
 80113ec:	40014000 	.word	0x40014000
 80113f0:	40014400 	.word	0x40014400
 80113f4:	40014800 	.word	0x40014800

080113f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b087      	sub	sp, #28
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6a1b      	ldr	r3, [r3, #32]
 8011406:	f023 0201 	bic.w	r2, r3, #1
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a1b      	ldr	r3, [r3, #32]
 8011412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	4b37      	ldr	r3, [pc, #220]	; (8011500 <TIM_OC1_SetConfig+0x108>)
 8011424:	4013      	ands	r3, r2
 8011426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f023 0303 	bic.w	r3, r3, #3
 801142e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	4313      	orrs	r3, r2
 8011438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	f023 0302 	bic.w	r3, r3, #2
 8011440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	4313      	orrs	r3, r2
 801144a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4a2d      	ldr	r2, [pc, #180]	; (8011504 <TIM_OC1_SetConfig+0x10c>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d00f      	beq.n	8011474 <TIM_OC1_SetConfig+0x7c>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	4a2c      	ldr	r2, [pc, #176]	; (8011508 <TIM_OC1_SetConfig+0x110>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d00b      	beq.n	8011474 <TIM_OC1_SetConfig+0x7c>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	4a2b      	ldr	r2, [pc, #172]	; (801150c <TIM_OC1_SetConfig+0x114>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d007      	beq.n	8011474 <TIM_OC1_SetConfig+0x7c>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	4a2a      	ldr	r2, [pc, #168]	; (8011510 <TIM_OC1_SetConfig+0x118>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d003      	beq.n	8011474 <TIM_OC1_SetConfig+0x7c>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4a29      	ldr	r2, [pc, #164]	; (8011514 <TIM_OC1_SetConfig+0x11c>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d10c      	bne.n	801148e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	f023 0308 	bic.w	r3, r3, #8
 801147a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	697a      	ldr	r2, [r7, #20]
 8011482:	4313      	orrs	r3, r2
 8011484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	f023 0304 	bic.w	r3, r3, #4
 801148c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a1c      	ldr	r2, [pc, #112]	; (8011504 <TIM_OC1_SetConfig+0x10c>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d00f      	beq.n	80114b6 <TIM_OC1_SetConfig+0xbe>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4a1b      	ldr	r2, [pc, #108]	; (8011508 <TIM_OC1_SetConfig+0x110>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d00b      	beq.n	80114b6 <TIM_OC1_SetConfig+0xbe>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4a1a      	ldr	r2, [pc, #104]	; (801150c <TIM_OC1_SetConfig+0x114>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d007      	beq.n	80114b6 <TIM_OC1_SetConfig+0xbe>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	4a19      	ldr	r2, [pc, #100]	; (8011510 <TIM_OC1_SetConfig+0x118>)
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d003      	beq.n	80114b6 <TIM_OC1_SetConfig+0xbe>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	4a18      	ldr	r2, [pc, #96]	; (8011514 <TIM_OC1_SetConfig+0x11c>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d111      	bne.n	80114da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	695b      	ldr	r3, [r3, #20]
 80114ca:	693a      	ldr	r2, [r7, #16]
 80114cc:	4313      	orrs	r3, r2
 80114ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	693a      	ldr	r2, [r7, #16]
 80114de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	685a      	ldr	r2, [r3, #4]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	697a      	ldr	r2, [r7, #20]
 80114f2:	621a      	str	r2, [r3, #32]
}
 80114f4:	bf00      	nop
 80114f6:	371c      	adds	r7, #28
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	fffeff8f 	.word	0xfffeff8f
 8011504:	40010000 	.word	0x40010000
 8011508:	40010400 	.word	0x40010400
 801150c:	40014000 	.word	0x40014000
 8011510:	40014400 	.word	0x40014400
 8011514:	40014800 	.word	0x40014800

08011518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011518:	b480      	push	{r7}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a1b      	ldr	r3, [r3, #32]
 8011526:	f023 0210 	bic.w	r2, r3, #16
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a1b      	ldr	r3, [r3, #32]
 8011532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011540:	68fa      	ldr	r2, [r7, #12]
 8011542:	4b34      	ldr	r3, [pc, #208]	; (8011614 <TIM_OC2_SetConfig+0xfc>)
 8011544:	4013      	ands	r3, r2
 8011546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801154e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	021b      	lsls	r3, r3, #8
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	4313      	orrs	r3, r2
 801155a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	f023 0320 	bic.w	r3, r3, #32
 8011562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	011b      	lsls	r3, r3, #4
 801156a:	697a      	ldr	r2, [r7, #20]
 801156c:	4313      	orrs	r3, r2
 801156e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4a29      	ldr	r2, [pc, #164]	; (8011618 <TIM_OC2_SetConfig+0x100>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d003      	beq.n	8011580 <TIM_OC2_SetConfig+0x68>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4a28      	ldr	r2, [pc, #160]	; (801161c <TIM_OC2_SetConfig+0x104>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d10d      	bne.n	801159c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	697a      	ldr	r2, [r7, #20]
 8011590:	4313      	orrs	r3, r2
 8011592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801159a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	4a1e      	ldr	r2, [pc, #120]	; (8011618 <TIM_OC2_SetConfig+0x100>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d00f      	beq.n	80115c4 <TIM_OC2_SetConfig+0xac>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a1d      	ldr	r2, [pc, #116]	; (801161c <TIM_OC2_SetConfig+0x104>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d00b      	beq.n	80115c4 <TIM_OC2_SetConfig+0xac>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	4a1c      	ldr	r2, [pc, #112]	; (8011620 <TIM_OC2_SetConfig+0x108>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d007      	beq.n	80115c4 <TIM_OC2_SetConfig+0xac>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a1b      	ldr	r2, [pc, #108]	; (8011624 <TIM_OC2_SetConfig+0x10c>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d003      	beq.n	80115c4 <TIM_OC2_SetConfig+0xac>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a1a      	ldr	r2, [pc, #104]	; (8011628 <TIM_OC2_SetConfig+0x110>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d113      	bne.n	80115ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	693a      	ldr	r2, [r7, #16]
 80115dc:	4313      	orrs	r3, r2
 80115de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	699b      	ldr	r3, [r3, #24]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	693a      	ldr	r2, [r7, #16]
 80115e8:	4313      	orrs	r3, r2
 80115ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	693a      	ldr	r2, [r7, #16]
 80115f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	621a      	str	r2, [r3, #32]
}
 8011606:	bf00      	nop
 8011608:	371c      	adds	r7, #28
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	feff8fff 	.word	0xfeff8fff
 8011618:	40010000 	.word	0x40010000
 801161c:	40010400 	.word	0x40010400
 8011620:	40014000 	.word	0x40014000
 8011624:	40014400 	.word	0x40014400
 8011628:	40014800 	.word	0x40014800

0801162c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801162c:	b480      	push	{r7}
 801162e:	b087      	sub	sp, #28
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a1b      	ldr	r3, [r3, #32]
 801163a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6a1b      	ldr	r3, [r3, #32]
 8011646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	69db      	ldr	r3, [r3, #28]
 8011652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	4b33      	ldr	r3, [pc, #204]	; (8011724 <TIM_OC3_SetConfig+0xf8>)
 8011658:	4013      	ands	r3, r2
 801165a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f023 0303 	bic.w	r3, r3, #3
 8011662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	4313      	orrs	r3, r2
 801166c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	689b      	ldr	r3, [r3, #8]
 801167a:	021b      	lsls	r3, r3, #8
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	4313      	orrs	r3, r2
 8011680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4a28      	ldr	r2, [pc, #160]	; (8011728 <TIM_OC3_SetConfig+0xfc>)
 8011686:	4293      	cmp	r3, r2
 8011688:	d003      	beq.n	8011692 <TIM_OC3_SetConfig+0x66>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4a27      	ldr	r2, [pc, #156]	; (801172c <TIM_OC3_SetConfig+0x100>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d10d      	bne.n	80116ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	021b      	lsls	r3, r3, #8
 80116a0:	697a      	ldr	r2, [r7, #20]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80116ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a1d      	ldr	r2, [pc, #116]	; (8011728 <TIM_OC3_SetConfig+0xfc>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d00f      	beq.n	80116d6 <TIM_OC3_SetConfig+0xaa>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a1c      	ldr	r2, [pc, #112]	; (801172c <TIM_OC3_SetConfig+0x100>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d00b      	beq.n	80116d6 <TIM_OC3_SetConfig+0xaa>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a1b      	ldr	r2, [pc, #108]	; (8011730 <TIM_OC3_SetConfig+0x104>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d007      	beq.n	80116d6 <TIM_OC3_SetConfig+0xaa>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a1a      	ldr	r2, [pc, #104]	; (8011734 <TIM_OC3_SetConfig+0x108>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d003      	beq.n	80116d6 <TIM_OC3_SetConfig+0xaa>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	4a19      	ldr	r2, [pc, #100]	; (8011738 <TIM_OC3_SetConfig+0x10c>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d113      	bne.n	80116fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	011b      	lsls	r3, r3, #4
 80116ec:	693a      	ldr	r2, [r7, #16]
 80116ee:	4313      	orrs	r3, r2
 80116f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	699b      	ldr	r3, [r3, #24]
 80116f6:	011b      	lsls	r3, r3, #4
 80116f8:	693a      	ldr	r2, [r7, #16]
 80116fa:	4313      	orrs	r3, r2
 80116fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	697a      	ldr	r2, [r7, #20]
 8011716:	621a      	str	r2, [r3, #32]
}
 8011718:	bf00      	nop
 801171a:	371c      	adds	r7, #28
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	fffeff8f 	.word	0xfffeff8f
 8011728:	40010000 	.word	0x40010000
 801172c:	40010400 	.word	0x40010400
 8011730:	40014000 	.word	0x40014000
 8011734:	40014400 	.word	0x40014400
 8011738:	40014800 	.word	0x40014800

0801173c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801173c:	b480      	push	{r7}
 801173e:	b087      	sub	sp, #28
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a1b      	ldr	r3, [r3, #32]
 801174a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6a1b      	ldr	r3, [r3, #32]
 8011756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	69db      	ldr	r3, [r3, #28]
 8011762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	4b24      	ldr	r3, [pc, #144]	; (80117f8 <TIM_OC4_SetConfig+0xbc>)
 8011768:	4013      	ands	r3, r2
 801176a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	021b      	lsls	r3, r3, #8
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	4313      	orrs	r3, r2
 801177e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	031b      	lsls	r3, r3, #12
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	4313      	orrs	r3, r2
 8011792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	4a19      	ldr	r2, [pc, #100]	; (80117fc <TIM_OC4_SetConfig+0xc0>)
 8011798:	4293      	cmp	r3, r2
 801179a:	d00f      	beq.n	80117bc <TIM_OC4_SetConfig+0x80>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a18      	ldr	r2, [pc, #96]	; (8011800 <TIM_OC4_SetConfig+0xc4>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d00b      	beq.n	80117bc <TIM_OC4_SetConfig+0x80>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a17      	ldr	r2, [pc, #92]	; (8011804 <TIM_OC4_SetConfig+0xc8>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d007      	beq.n	80117bc <TIM_OC4_SetConfig+0x80>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4a16      	ldr	r2, [pc, #88]	; (8011808 <TIM_OC4_SetConfig+0xcc>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d003      	beq.n	80117bc <TIM_OC4_SetConfig+0x80>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4a15      	ldr	r2, [pc, #84]	; (801180c <TIM_OC4_SetConfig+0xd0>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d109      	bne.n	80117d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80117c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	019b      	lsls	r3, r3, #6
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	4313      	orrs	r3, r2
 80117ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	685a      	ldr	r2, [r3, #4]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	693a      	ldr	r2, [r7, #16]
 80117e8:	621a      	str	r2, [r3, #32]
}
 80117ea:	bf00      	nop
 80117ec:	371c      	adds	r7, #28
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	feff8fff 	.word	0xfeff8fff
 80117fc:	40010000 	.word	0x40010000
 8011800:	40010400 	.word	0x40010400
 8011804:	40014000 	.word	0x40014000
 8011808:	40014400 	.word	0x40014400
 801180c:	40014800 	.word	0x40014800

08011810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011810:	b480      	push	{r7}
 8011812:	b087      	sub	sp, #28
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a1b      	ldr	r3, [r3, #32]
 801181e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a1b      	ldr	r3, [r3, #32]
 801182a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	4b21      	ldr	r3, [pc, #132]	; (80118c0 <TIM_OC5_SetConfig+0xb0>)
 801183c:	4013      	ands	r3, r2
 801183e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	4313      	orrs	r3, r2
 8011848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	041b      	lsls	r3, r3, #16
 8011858:	693a      	ldr	r2, [r7, #16]
 801185a:	4313      	orrs	r3, r2
 801185c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4a18      	ldr	r2, [pc, #96]	; (80118c4 <TIM_OC5_SetConfig+0xb4>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d00f      	beq.n	8011886 <TIM_OC5_SetConfig+0x76>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a17      	ldr	r2, [pc, #92]	; (80118c8 <TIM_OC5_SetConfig+0xb8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d00b      	beq.n	8011886 <TIM_OC5_SetConfig+0x76>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4a16      	ldr	r2, [pc, #88]	; (80118cc <TIM_OC5_SetConfig+0xbc>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d007      	beq.n	8011886 <TIM_OC5_SetConfig+0x76>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	4a15      	ldr	r2, [pc, #84]	; (80118d0 <TIM_OC5_SetConfig+0xc0>)
 801187a:	4293      	cmp	r3, r2
 801187c:	d003      	beq.n	8011886 <TIM_OC5_SetConfig+0x76>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4a14      	ldr	r2, [pc, #80]	; (80118d4 <TIM_OC5_SetConfig+0xc4>)
 8011882:	4293      	cmp	r3, r2
 8011884:	d109      	bne.n	801189a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801188c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	695b      	ldr	r3, [r3, #20]
 8011892:	021b      	lsls	r3, r3, #8
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	4313      	orrs	r3, r2
 8011898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	697a      	ldr	r2, [r7, #20]
 801189e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	685a      	ldr	r2, [r3, #4]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	693a      	ldr	r2, [r7, #16]
 80118b2:	621a      	str	r2, [r3, #32]
}
 80118b4:	bf00      	nop
 80118b6:	371c      	adds	r7, #28
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	fffeff8f 	.word	0xfffeff8f
 80118c4:	40010000 	.word	0x40010000
 80118c8:	40010400 	.word	0x40010400
 80118cc:	40014000 	.word	0x40014000
 80118d0:	40014400 	.word	0x40014400
 80118d4:	40014800 	.word	0x40014800

080118d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80118d8:	b480      	push	{r7}
 80118da:	b087      	sub	sp, #28
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6a1b      	ldr	r3, [r3, #32]
 80118e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a1b      	ldr	r3, [r3, #32]
 80118f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	4b22      	ldr	r3, [pc, #136]	; (801198c <TIM_OC6_SetConfig+0xb4>)
 8011904:	4013      	ands	r3, r2
 8011906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	021b      	lsls	r3, r3, #8
 801190e:	68fa      	ldr	r2, [r7, #12]
 8011910:	4313      	orrs	r3, r2
 8011912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801191a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	051b      	lsls	r3, r3, #20
 8011922:	693a      	ldr	r2, [r7, #16]
 8011924:	4313      	orrs	r3, r2
 8011926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	4a19      	ldr	r2, [pc, #100]	; (8011990 <TIM_OC6_SetConfig+0xb8>)
 801192c:	4293      	cmp	r3, r2
 801192e:	d00f      	beq.n	8011950 <TIM_OC6_SetConfig+0x78>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	4a18      	ldr	r2, [pc, #96]	; (8011994 <TIM_OC6_SetConfig+0xbc>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d00b      	beq.n	8011950 <TIM_OC6_SetConfig+0x78>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4a17      	ldr	r2, [pc, #92]	; (8011998 <TIM_OC6_SetConfig+0xc0>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d007      	beq.n	8011950 <TIM_OC6_SetConfig+0x78>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4a16      	ldr	r2, [pc, #88]	; (801199c <TIM_OC6_SetConfig+0xc4>)
 8011944:	4293      	cmp	r3, r2
 8011946:	d003      	beq.n	8011950 <TIM_OC6_SetConfig+0x78>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	4a15      	ldr	r2, [pc, #84]	; (80119a0 <TIM_OC6_SetConfig+0xc8>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d109      	bne.n	8011964 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	695b      	ldr	r3, [r3, #20]
 801195c:	029b      	lsls	r3, r3, #10
 801195e:	697a      	ldr	r2, [r7, #20]
 8011960:	4313      	orrs	r3, r2
 8011962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	697a      	ldr	r2, [r7, #20]
 8011968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	685a      	ldr	r2, [r3, #4]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	693a      	ldr	r2, [r7, #16]
 801197c:	621a      	str	r2, [r3, #32]
}
 801197e:	bf00      	nop
 8011980:	371c      	adds	r7, #28
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	feff8fff 	.word	0xfeff8fff
 8011990:	40010000 	.word	0x40010000
 8011994:	40010400 	.word	0x40010400
 8011998:	40014000 	.word	0x40014000
 801199c:	40014400 	.word	0x40014400
 80119a0:	40014800 	.word	0x40014800

080119a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80119ba:	693a      	ldr	r2, [r7, #16]
 80119bc:	4b65      	ldr	r3, [pc, #404]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80119be:	4013      	ands	r3, r2
 80119c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	693a      	ldr	r2, [r7, #16]
 80119c8:	4313      	orrs	r3, r2
 80119ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80119cc:	693a      	ldr	r2, [r7, #16]
 80119ce:	4b62      	ldr	r3, [pc, #392]	; (8011b58 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80119d0:	4013      	ands	r3, r2
 80119d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	693a      	ldr	r2, [r7, #16]
 80119da:	4313      	orrs	r3, r2
 80119dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	693a      	ldr	r2, [r7, #16]
 80119e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	4a5c      	ldr	r2, [pc, #368]	; (8011b5c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80119ec:	4293      	cmp	r3, r2
 80119ee:	f000 80ab 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 80119f2:	4a5a      	ldr	r2, [pc, #360]	; (8011b5c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	f200 80a4 	bhi.w	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 80119fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80119fe:	f000 80a3 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a06:	f200 809c 	bhi.w	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a0a:	4a55      	ldr	r2, [pc, #340]	; (8011b60 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	f000 809b 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a12:	4a53      	ldr	r2, [pc, #332]	; (8011b60 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	f200 8094 	bhi.w	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a1a:	4a52      	ldr	r2, [pc, #328]	; (8011b64 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	f000 8093 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a22:	4a50      	ldr	r2, [pc, #320]	; (8011b64 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	f200 808c 	bhi.w	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a2a:	4a4f      	ldr	r2, [pc, #316]	; (8011b68 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	f000 808b 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a32:	4a4d      	ldr	r2, [pc, #308]	; (8011b68 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	f200 8084 	bhi.w	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a3a:	4a4c      	ldr	r2, [pc, #304]	; (8011b6c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	f000 8083 	beq.w	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a42:	4a4a      	ldr	r2, [pc, #296]	; (8011b6c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d87c      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a48:	4a49      	ldr	r2, [pc, #292]	; (8011b70 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d07c      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a4e:	4a48      	ldr	r2, [pc, #288]	; (8011b70 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d876      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a54:	4a47      	ldr	r2, [pc, #284]	; (8011b74 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d076      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a5a:	4a46      	ldr	r2, [pc, #280]	; (8011b74 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d870      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011a64:	d070      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a66:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011a6a:	d86a      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a70:	d06a      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a76:	d864      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a78:	2b70      	cmp	r3, #112	; 0x70
 8011a7a:	d01a      	beq.n	8011ab2 <TIM_SlaveTimer_SetConfig+0x10e>
 8011a7c:	2b70      	cmp	r3, #112	; 0x70
 8011a7e:	d860      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a80:	2b60      	cmp	r3, #96	; 0x60
 8011a82:	d054      	beq.n	8011b2e <TIM_SlaveTimer_SetConfig+0x18a>
 8011a84:	2b60      	cmp	r3, #96	; 0x60
 8011a86:	d85c      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a88:	2b50      	cmp	r3, #80	; 0x50
 8011a8a:	d046      	beq.n	8011b1a <TIM_SlaveTimer_SetConfig+0x176>
 8011a8c:	2b50      	cmp	r3, #80	; 0x50
 8011a8e:	d858      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a90:	2b40      	cmp	r3, #64	; 0x40
 8011a92:	d019      	beq.n	8011ac8 <TIM_SlaveTimer_SetConfig+0x124>
 8011a94:	2b40      	cmp	r3, #64	; 0x40
 8011a96:	d854      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011a98:	2b30      	cmp	r3, #48	; 0x30
 8011a9a:	d055      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011a9c:	2b30      	cmp	r3, #48	; 0x30
 8011a9e:	d850      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011aa0:	2b20      	cmp	r3, #32
 8011aa2:	d051      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011aa4:	2b20      	cmp	r3, #32
 8011aa6:	d84c      	bhi.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d04d      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011aac:	2b10      	cmp	r3, #16
 8011aae:	d04b      	beq.n	8011b48 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011ab0:	e047      	b.n	8011b42 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011ac2:	f000 f9e2 	bl	8011e8a <TIM_ETR_SetConfig>
      break;
 8011ac6:	e040      	b.n	8011b4a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b05      	cmp	r3, #5
 8011ace:	d101      	bne.n	8011ad4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e03b      	b.n	8011b4c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	6a1a      	ldr	r2, [r3, #32]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f022 0201 	bic.w	r2, r2, #1
 8011aea:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	699b      	ldr	r3, [r3, #24]
 8011af2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011afa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	011b      	lsls	r3, r3, #4
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	4313      	orrs	r3, r2
 8011b06:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	621a      	str	r2, [r3, #32]
      break;
 8011b18:	e017      	b.n	8011b4a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011b26:	461a      	mov	r2, r3
 8011b28:	f000 f89a 	bl	8011c60 <TIM_TI1_ConfigInputStage>
      break;
 8011b2c:	e00d      	b.n	8011b4a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	f000 f8fc 	bl	8011d38 <TIM_TI2_ConfigInputStage>
      break;
 8011b40:	e003      	b.n	8011b4a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8011b42:	2301      	movs	r3, #1
 8011b44:	75fb      	strb	r3, [r7, #23]
      break;
 8011b46:	e000      	b.n	8011b4a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8011b48:	bf00      	nop
  }

  return status;
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3718      	adds	r7, #24
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	ffcfff8f 	.word	0xffcfff8f
 8011b58:	fffefff8 	.word	0xfffefff8
 8011b5c:	00200010 	.word	0x00200010
 8011b60:	00100070 	.word	0x00100070
 8011b64:	00100060 	.word	0x00100060
 8011b68:	00100050 	.word	0x00100050
 8011b6c:	00100040 	.word	0x00100040
 8011b70:	00100030 	.word	0x00100030
 8011b74:	00100020 	.word	0x00100020

08011b78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b087      	sub	sp, #28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	6a1b      	ldr	r3, [r3, #32]
 8011b8a:	f023 0201 	bic.w	r2, r3, #1
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	699b      	ldr	r3, [r3, #24]
 8011b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6a1b      	ldr	r3, [r3, #32]
 8011b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	4a28      	ldr	r2, [pc, #160]	; (8011c44 <TIM_TI1_SetConfig+0xcc>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d01b      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011bac:	d017      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	4a25      	ldr	r2, [pc, #148]	; (8011c48 <TIM_TI1_SetConfig+0xd0>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d013      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	4a24      	ldr	r2, [pc, #144]	; (8011c4c <TIM_TI1_SetConfig+0xd4>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d00f      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	4a23      	ldr	r2, [pc, #140]	; (8011c50 <TIM_TI1_SetConfig+0xd8>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d00b      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	4a22      	ldr	r2, [pc, #136]	; (8011c54 <TIM_TI1_SetConfig+0xdc>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d007      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	4a21      	ldr	r2, [pc, #132]	; (8011c58 <TIM_TI1_SetConfig+0xe0>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d003      	beq.n	8011bde <TIM_TI1_SetConfig+0x66>
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	4a20      	ldr	r2, [pc, #128]	; (8011c5c <TIM_TI1_SetConfig+0xe4>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d101      	bne.n	8011be2 <TIM_TI1_SetConfig+0x6a>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e000      	b.n	8011be4 <TIM_TI1_SetConfig+0x6c>
 8011be2:	2300      	movs	r3, #0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d008      	beq.n	8011bfa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f023 0303 	bic.w	r3, r3, #3
 8011bee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011bf0:	697a      	ldr	r2, [r7, #20]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	617b      	str	r3, [r7, #20]
 8011bf8:	e003      	b.n	8011c02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	f043 0301 	orr.w	r3, r3, #1
 8011c00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	011b      	lsls	r3, r3, #4
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	697a      	ldr	r2, [r7, #20]
 8011c12:	4313      	orrs	r3, r2
 8011c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	f023 030a 	bic.w	r3, r3, #10
 8011c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	f003 030a 	and.w	r3, r3, #10
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	693a      	ldr	r2, [r7, #16]
 8011c34:	621a      	str	r2, [r3, #32]
}
 8011c36:	bf00      	nop
 8011c38:	371c      	adds	r7, #28
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	40010000 	.word	0x40010000
 8011c48:	40000400 	.word	0x40000400
 8011c4c:	40000800 	.word	0x40000800
 8011c50:	40000c00 	.word	0x40000c00
 8011c54:	40010400 	.word	0x40010400
 8011c58:	40001800 	.word	0x40001800
 8011c5c:	40014000 	.word	0x40014000

08011c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b087      	sub	sp, #28
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	6a1b      	ldr	r3, [r3, #32]
 8011c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	f023 0201 	bic.w	r2, r3, #1
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	699b      	ldr	r3, [r3, #24]
 8011c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	011b      	lsls	r3, r3, #4
 8011c90:	693a      	ldr	r2, [r7, #16]
 8011c92:	4313      	orrs	r3, r2
 8011c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	f023 030a 	bic.w	r3, r3, #10
 8011c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	621a      	str	r2, [r3, #32]
}
 8011cb2:	bf00      	nop
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr

08011cbe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011cbe:	b480      	push	{r7}
 8011cc0:	b087      	sub	sp, #28
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	60b9      	str	r1, [r7, #8]
 8011cc8:	607a      	str	r2, [r7, #4]
 8011cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	6a1b      	ldr	r3, [r3, #32]
 8011cd0:	f023 0210 	bic.w	r2, r3, #16
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	6a1b      	ldr	r3, [r3, #32]
 8011ce2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	021b      	lsls	r3, r3, #8
 8011cf0:	697a      	ldr	r2, [r7, #20]
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	031b      	lsls	r3, r3, #12
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	697a      	ldr	r2, [r7, #20]
 8011d06:	4313      	orrs	r3, r2
 8011d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011d10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	011b      	lsls	r3, r3, #4
 8011d16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011d1a:	693a      	ldr	r2, [r7, #16]
 8011d1c:	4313      	orrs	r3, r2
 8011d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	621a      	str	r2, [r3, #32]
}
 8011d2c:	bf00      	nop
 8011d2e:	371c      	adds	r7, #28
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b087      	sub	sp, #28
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6a1b      	ldr	r3, [r3, #32]
 8011d48:	f023 0210 	bic.w	r2, r3, #16
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	699b      	ldr	r3, [r3, #24]
 8011d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	031b      	lsls	r3, r3, #12
 8011d68:	697a      	ldr	r2, [r7, #20]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	011b      	lsls	r3, r3, #4
 8011d7a:	693a      	ldr	r2, [r7, #16]
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	693a      	ldr	r2, [r7, #16]
 8011d8a:	621a      	str	r2, [r3, #32]
}
 8011d8c:	bf00      	nop
 8011d8e:	371c      	adds	r7, #28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b087      	sub	sp, #28
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	607a      	str	r2, [r7, #4]
 8011da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	6a1b      	ldr	r3, [r3, #32]
 8011daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	69db      	ldr	r3, [r3, #28]
 8011db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6a1b      	ldr	r3, [r3, #32]
 8011dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	f023 0303 	bic.w	r3, r3, #3
 8011dc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8011dc6:	697a      	ldr	r2, [r7, #20]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	011b      	lsls	r3, r3, #4
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	4313      	orrs	r3, r2
 8011de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8011de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	021b      	lsls	r3, r3, #8
 8011dee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	697a      	ldr	r2, [r7, #20]
 8011dfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	621a      	str	r2, [r3, #32]
}
 8011e04:	bf00      	nop
 8011e06:	371c      	adds	r7, #28
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b087      	sub	sp, #28
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
 8011e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	6a1b      	ldr	r3, [r3, #32]
 8011e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	69db      	ldr	r3, [r3, #28]
 8011e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6a1b      	ldr	r3, [r3, #32]
 8011e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011e3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	021b      	lsls	r3, r3, #8
 8011e42:	697a      	ldr	r2, [r7, #20]
 8011e44:	4313      	orrs	r3, r2
 8011e46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011e4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	031b      	lsls	r3, r3, #12
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	4313      	orrs	r3, r2
 8011e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8011e62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	031b      	lsls	r3, r3, #12
 8011e68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8011e6c:	693a      	ldr	r2, [r7, #16]
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	621a      	str	r2, [r3, #32]
}
 8011e7e:	bf00      	nop
 8011e80:	371c      	adds	r7, #28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr

08011e8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011e8a:	b480      	push	{r7}
 8011e8c:	b087      	sub	sp, #28
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	60f8      	str	r0, [r7, #12]
 8011e92:	60b9      	str	r1, [r7, #8]
 8011e94:	607a      	str	r2, [r7, #4]
 8011e96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011ea4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	021a      	lsls	r2, r3, #8
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	431a      	orrs	r2, r3
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	697a      	ldr	r2, [r7, #20]
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	697a      	ldr	r2, [r7, #20]
 8011ebc:	609a      	str	r2, [r3, #8]
}
 8011ebe:	bf00      	nop
 8011ec0:	371c      	adds	r7, #28
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b087      	sub	sp, #28
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	60f8      	str	r0, [r7, #12]
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	f003 031f 	and.w	r3, r3, #31
 8011edc:	2201      	movs	r2, #1
 8011ede:	fa02 f303 	lsl.w	r3, r2, r3
 8011ee2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	6a1a      	ldr	r2, [r3, #32]
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	43db      	mvns	r3, r3
 8011eec:	401a      	ands	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6a1a      	ldr	r2, [r3, #32]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	f003 031f 	and.w	r3, r3, #31
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	fa01 f303 	lsl.w	r3, r1, r3
 8011f02:	431a      	orrs	r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	621a      	str	r2, [r3, #32]
}
 8011f08:	bf00      	nop
 8011f0a:	371c      	adds	r7, #28
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d101      	bne.n	8011f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011f28:	2302      	movs	r3, #2
 8011f2a:	e06d      	b.n	8012008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2202      	movs	r2, #2
 8011f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a30      	ldr	r2, [pc, #192]	; (8012014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d004      	beq.n	8011f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4a2f      	ldr	r2, [pc, #188]	; (8012018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d108      	bne.n	8011f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	68fa      	ldr	r2, [r7, #12]
 8011f80:	4313      	orrs	r3, r2
 8011f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a20      	ldr	r2, [pc, #128]	; (8012014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d022      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f9e:	d01d      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a1d      	ldr	r2, [pc, #116]	; (801201c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d018      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a1c      	ldr	r2, [pc, #112]	; (8012020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d013      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a1a      	ldr	r2, [pc, #104]	; (8012024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d00e      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a15      	ldr	r2, [pc, #84]	; (8012018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d009      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a16      	ldr	r2, [pc, #88]	; (8012028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d004      	beq.n	8011fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a15      	ldr	r2, [pc, #84]	; (801202c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d10c      	bne.n	8011ff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	4313      	orrs	r3, r2
 8011fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	68ba      	ldr	r2, [r7, #8]
 8011ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012006:	2300      	movs	r3, #0
}
 8012008:	4618      	mov	r0, r3
 801200a:	3714      	adds	r7, #20
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	40010000 	.word	0x40010000
 8012018:	40010400 	.word	0x40010400
 801201c:	40000400 	.word	0x40000400
 8012020:	40000800 	.word	0x40000800
 8012024:	40000c00 	.word	0x40000c00
 8012028:	40001800 	.word	0x40001800
 801202c:	40014000 	.word	0x40014000

08012030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012038:	bf00      	nop
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801204c:	bf00      	nop
 801204e:	370c      	adds	r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d101      	bne.n	801207e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801207a:	2301      	movs	r3, #1
 801207c:	e042      	b.n	8012104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012084:	2b00      	cmp	r3, #0
 8012086:	d106      	bne.n	8012096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7f3 fb7d 	bl	8005790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2224      	movs	r2, #36	; 0x24
 801209a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f022 0201 	bic.w	r2, r2, #1
 80120ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f000 fd54 	bl	8012b5c <UART_SetConfig>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d101      	bne.n	80120be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80120ba:	2301      	movs	r3, #1
 80120bc:	e022      	b.n	8012104 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d002      	beq.n	80120cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f001 fab0 	bl	801362c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	685a      	ldr	r2, [r3, #4]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80120da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	689a      	ldr	r2, [r3, #8]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80120ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f042 0201 	orr.w	r2, r2, #1
 80120fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f001 fb37 	bl	8013770 <UART_CheckIdleState>
 8012102:	4603      	mov	r3, r0
}
 8012104:	4618      	mov	r0, r3
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b08a      	sub	sp, #40	; 0x28
 8012110:	af02      	add	r7, sp, #8
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	4613      	mov	r3, r2
 801211a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012122:	2b20      	cmp	r3, #32
 8012124:	d17b      	bne.n	801221e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d002      	beq.n	8012132 <HAL_UART_Transmit+0x26>
 801212c:	88fb      	ldrh	r3, [r7, #6]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d101      	bne.n	8012136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	e074      	b.n	8012220 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2200      	movs	r2, #0
 801213a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2221      	movs	r2, #33	; 0x21
 8012142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012146:	f7f4 feb7 	bl	8006eb8 <HAL_GetTick>
 801214a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	88fa      	ldrh	r2, [r7, #6]
 8012150:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	88fa      	ldrh	r2, [r7, #6]
 8012158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012164:	d108      	bne.n	8012178 <HAL_UART_Transmit+0x6c>
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d104      	bne.n	8012178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801216e:	2300      	movs	r3, #0
 8012170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	61bb      	str	r3, [r7, #24]
 8012176:	e003      	b.n	8012180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801217c:	2300      	movs	r3, #0
 801217e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012180:	e030      	b.n	80121e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2200      	movs	r2, #0
 801218a:	2180      	movs	r1, #128	; 0x80
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f001 fb99 	bl	80138c4 <UART_WaitOnFlagUntilTimeout>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d005      	beq.n	80121a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2220      	movs	r2, #32
 801219c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80121a0:	2303      	movs	r3, #3
 80121a2:	e03d      	b.n	8012220 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10b      	bne.n	80121c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80121aa:	69bb      	ldr	r3, [r7, #24]
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	461a      	mov	r2, r3
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80121b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	3302      	adds	r3, #2
 80121be:	61bb      	str	r3, [r7, #24]
 80121c0:	e007      	b.n	80121d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	781a      	ldrb	r2, [r3, #0]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	3301      	adds	r3, #1
 80121d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80121d8:	b29b      	uxth	r3, r3
 80121da:	3b01      	subs	r3, #1
 80121dc:	b29a      	uxth	r2, r3
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d1c8      	bne.n	8012182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2200      	movs	r2, #0
 80121f8:	2140      	movs	r1, #64	; 0x40
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f001 fb62 	bl	80138c4 <UART_WaitOnFlagUntilTimeout>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d005      	beq.n	8012212 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2220      	movs	r2, #32
 801220a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801220e:	2303      	movs	r3, #3
 8012210:	e006      	b.n	8012220 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2220      	movs	r2, #32
 8012216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801221a:	2300      	movs	r3, #0
 801221c:	e000      	b.n	8012220 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801221e:	2302      	movs	r3, #2
  }
}
 8012220:	4618      	mov	r0, r3
 8012222:	3720      	adds	r7, #32
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b08a      	sub	sp, #40	; 0x28
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	4613      	mov	r3, r2
 8012234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801223c:	2b20      	cmp	r3, #32
 801223e:	d167      	bne.n	8012310 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d002      	beq.n	801224c <HAL_UART_Transmit_DMA+0x24>
 8012246:	88fb      	ldrh	r3, [r7, #6]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d101      	bne.n	8012250 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	e060      	b.n	8012312 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	88fa      	ldrh	r2, [r7, #6]
 801225a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	88fa      	ldrh	r2, [r7, #6]
 8012262:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2200      	movs	r2, #0
 801226a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2221      	movs	r2, #33	; 0x21
 8012272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801227a:	2b00      	cmp	r3, #0
 801227c:	d028      	beq.n	80122d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012282:	4a26      	ldr	r2, [pc, #152]	; (801231c <HAL_UART_Transmit_DMA+0xf4>)
 8012284:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801228a:	4a25      	ldr	r2, [pc, #148]	; (8012320 <HAL_UART_Transmit_DMA+0xf8>)
 801228c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012292:	4a24      	ldr	r2, [pc, #144]	; (8012324 <HAL_UART_Transmit_DMA+0xfc>)
 8012294:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801229a:	2200      	movs	r2, #0
 801229c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122a6:	4619      	mov	r1, r3
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	3328      	adds	r3, #40	; 0x28
 80122ae:	461a      	mov	r2, r3
 80122b0:	88fb      	ldrh	r3, [r7, #6]
 80122b2:	f7f6 fe03 	bl	8008ebc <HAL_DMA_Start_IT>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d009      	beq.n	80122d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2210      	movs	r2, #16
 80122c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2220      	movs	r2, #32
 80122c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80122cc:	2301      	movs	r3, #1
 80122ce:	e020      	b.n	8012312 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2240      	movs	r2, #64	; 0x40
 80122d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3308      	adds	r3, #8
 80122de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	e853 3f00 	ldrex	r3, [r3]
 80122e6:	613b      	str	r3, [r7, #16]
   return(result);
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ee:	627b      	str	r3, [r7, #36]	; 0x24
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	3308      	adds	r3, #8
 80122f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122f8:	623a      	str	r2, [r7, #32]
 80122fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fc:	69f9      	ldr	r1, [r7, #28]
 80122fe:	6a3a      	ldr	r2, [r7, #32]
 8012300:	e841 2300 	strex	r3, r2, [r1]
 8012304:	61bb      	str	r3, [r7, #24]
   return(result);
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1e5      	bne.n	80122d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801230c:	2300      	movs	r3, #0
 801230e:	e000      	b.n	8012312 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8012310:	2302      	movs	r3, #2
  }
}
 8012312:	4618      	mov	r0, r3
 8012314:	3728      	adds	r7, #40	; 0x28
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	08013c31 	.word	0x08013c31
 8012320:	08013cc7 	.word	0x08013cc7
 8012324:	08013e49 	.word	0x08013e49

08012328 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b08a      	sub	sp, #40	; 0x28
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	4613      	mov	r3, r2
 8012334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801233c:	2b20      	cmp	r3, #32
 801233e:	d137      	bne.n	80123b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d002      	beq.n	801234c <HAL_UART_Receive_DMA+0x24>
 8012346:	88fb      	ldrh	r3, [r7, #6]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d101      	bne.n	8012350 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801234c:	2301      	movs	r3, #1
 801234e:	e030      	b.n	80123b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2200      	movs	r2, #0
 8012354:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a18      	ldr	r2, [pc, #96]	; (80123bc <HAL_UART_Receive_DMA+0x94>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d01f      	beq.n	80123a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801236a:	2b00      	cmp	r3, #0
 801236c:	d018      	beq.n	80123a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	e853 3f00 	ldrex	r3, [r3]
 801237a:	613b      	str	r3, [r7, #16]
   return(result);
 801237c:	693b      	ldr	r3, [r7, #16]
 801237e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012382:	627b      	str	r3, [r7, #36]	; 0x24
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	461a      	mov	r2, r3
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	623b      	str	r3, [r7, #32]
 801238e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012390:	69f9      	ldr	r1, [r7, #28]
 8012392:	6a3a      	ldr	r2, [r7, #32]
 8012394:	e841 2300 	strex	r3, r2, [r1]
 8012398:	61bb      	str	r3, [r7, #24]
   return(result);
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1e6      	bne.n	801236e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80123a0:	88fb      	ldrh	r3, [r7, #6]
 80123a2:	461a      	mov	r2, r3
 80123a4:	68b9      	ldr	r1, [r7, #8]
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f001 faf4 	bl	8013994 <UART_Start_Receive_DMA>
 80123ac:	4603      	mov	r3, r0
 80123ae:	e000      	b.n	80123b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80123b0:	2302      	movs	r3, #2
  }
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3728      	adds	r7, #40	; 0x28
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	58000c00 	.word	0x58000c00

080123c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b0ba      	sub	sp, #232	; 0xe8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	69db      	ldr	r3, [r3, #28]
 80123ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	689b      	ldr	r3, [r3, #8]
 80123e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80123e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80123ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80123ee:	4013      	ands	r3, r2
 80123f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80123f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d11b      	bne.n	8012434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80123fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012400:	f003 0320 	and.w	r3, r3, #32
 8012404:	2b00      	cmp	r3, #0
 8012406:	d015      	beq.n	8012434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801240c:	f003 0320 	and.w	r3, r3, #32
 8012410:	2b00      	cmp	r3, #0
 8012412:	d105      	bne.n	8012420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d009      	beq.n	8012434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012424:	2b00      	cmp	r3, #0
 8012426:	f000 8377 	beq.w	8012b18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	4798      	blx	r3
      }
      return;
 8012432:	e371      	b.n	8012b18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012438:	2b00      	cmp	r3, #0
 801243a:	f000 8123 	beq.w	8012684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801243e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012442:	4b8d      	ldr	r3, [pc, #564]	; (8012678 <HAL_UART_IRQHandler+0x2b8>)
 8012444:	4013      	ands	r3, r2
 8012446:	2b00      	cmp	r3, #0
 8012448:	d106      	bne.n	8012458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801244a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801244e:	4b8b      	ldr	r3, [pc, #556]	; (801267c <HAL_UART_IRQHandler+0x2bc>)
 8012450:	4013      	ands	r3, r2
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 8116 	beq.w	8012684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801245c:	f003 0301 	and.w	r3, r3, #1
 8012460:	2b00      	cmp	r3, #0
 8012462:	d011      	beq.n	8012488 <HAL_UART_IRQHandler+0xc8>
 8012464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00b      	beq.n	8012488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2201      	movs	r2, #1
 8012476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801247e:	f043 0201 	orr.w	r2, r3, #1
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801248c:	f003 0302 	and.w	r3, r3, #2
 8012490:	2b00      	cmp	r3, #0
 8012492:	d011      	beq.n	80124b8 <HAL_UART_IRQHandler+0xf8>
 8012494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012498:	f003 0301 	and.w	r3, r3, #1
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00b      	beq.n	80124b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2202      	movs	r2, #2
 80124a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ae:	f043 0204 	orr.w	r2, r3, #4
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124bc:	f003 0304 	and.w	r3, r3, #4
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d011      	beq.n	80124e8 <HAL_UART_IRQHandler+0x128>
 80124c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80124c8:	f003 0301 	and.w	r3, r3, #1
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00b      	beq.n	80124e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2204      	movs	r2, #4
 80124d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124de:	f043 0202 	orr.w	r2, r3, #2
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80124e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124ec:	f003 0308 	and.w	r3, r3, #8
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d017      	beq.n	8012524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80124f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80124f8:	f003 0320 	and.w	r3, r3, #32
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d105      	bne.n	801250c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012504:	4b5c      	ldr	r3, [pc, #368]	; (8012678 <HAL_UART_IRQHandler+0x2b8>)
 8012506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00b      	beq.n	8012524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2208      	movs	r2, #8
 8012512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801251a:	f043 0208 	orr.w	r2, r3, #8
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801252c:	2b00      	cmp	r3, #0
 801252e:	d012      	beq.n	8012556 <HAL_UART_IRQHandler+0x196>
 8012530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00c      	beq.n	8012556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801254c:	f043 0220 	orr.w	r2, r3, #32
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801255c:	2b00      	cmp	r3, #0
 801255e:	f000 82dd 	beq.w	8012b1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012566:	f003 0320 	and.w	r3, r3, #32
 801256a:	2b00      	cmp	r3, #0
 801256c:	d013      	beq.n	8012596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801256e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012572:	f003 0320 	and.w	r3, r3, #32
 8012576:	2b00      	cmp	r3, #0
 8012578:	d105      	bne.n	8012586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801257a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012582:	2b00      	cmp	r3, #0
 8012584:	d007      	beq.n	8012596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801258a:	2b00      	cmp	r3, #0
 801258c:	d003      	beq.n	8012596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801259c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125aa:	2b40      	cmp	r3, #64	; 0x40
 80125ac:	d005      	beq.n	80125ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80125ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80125b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d054      	beq.n	8012664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f001 fad2 	bl	8013b64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125ca:	2b40      	cmp	r3, #64	; 0x40
 80125cc:	d146      	bne.n	801265c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3308      	adds	r3, #8
 80125d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80125dc:	e853 3f00 	ldrex	r3, [r3]
 80125e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80125e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	3308      	adds	r3, #8
 80125f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80125fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80125fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801260a:	e841 2300 	strex	r3, r2, [r1]
 801260e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1d9      	bne.n	80125ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012620:	2b00      	cmp	r3, #0
 8012622:	d017      	beq.n	8012654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801262a:	4a15      	ldr	r2, [pc, #84]	; (8012680 <HAL_UART_IRQHandler+0x2c0>)
 801262c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012634:	4618      	mov	r0, r3
 8012636:	f7f7 f9c9 	bl	80099cc <HAL_DMA_Abort_IT>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d019      	beq.n	8012674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801264e:	4610      	mov	r0, r2
 8012650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012652:	e00f      	b.n	8012674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7f1 fbe3 	bl	8003e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801265a:	e00b      	b.n	8012674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f7f1 fbdf 	bl	8003e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012662:	e007      	b.n	8012674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f7f1 fbdb 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012672:	e253      	b.n	8012b1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012674:	bf00      	nop
    return;
 8012676:	e251      	b.n	8012b1c <HAL_UART_IRQHandler+0x75c>
 8012678:	10000001 	.word	0x10000001
 801267c:	04000120 	.word	0x04000120
 8012680:	08013ec9 	.word	0x08013ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012688:	2b01      	cmp	r3, #1
 801268a:	f040 81e7 	bne.w	8012a5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012692:	f003 0310 	and.w	r3, r3, #16
 8012696:	2b00      	cmp	r3, #0
 8012698:	f000 81e0 	beq.w	8012a5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801269c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126a0:	f003 0310 	and.w	r3, r3, #16
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f000 81d9 	beq.w	8012a5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2210      	movs	r2, #16
 80126b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126bc:	2b40      	cmp	r3, #64	; 0x40
 80126be:	f040 8151 	bne.w	8012964 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4a96      	ldr	r2, [pc, #600]	; (8012924 <HAL_UART_IRQHandler+0x564>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d068      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a93      	ldr	r2, [pc, #588]	; (8012928 <HAL_UART_IRQHandler+0x568>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d061      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4a91      	ldr	r2, [pc, #580]	; (801292c <HAL_UART_IRQHandler+0x56c>)
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d05a      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4a8e      	ldr	r2, [pc, #568]	; (8012930 <HAL_UART_IRQHandler+0x570>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d053      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4a8c      	ldr	r2, [pc, #560]	; (8012934 <HAL_UART_IRQHandler+0x574>)
 8012704:	4293      	cmp	r3, r2
 8012706:	d04c      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a89      	ldr	r2, [pc, #548]	; (8012938 <HAL_UART_IRQHandler+0x578>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d045      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4a87      	ldr	r2, [pc, #540]	; (801293c <HAL_UART_IRQHandler+0x57c>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d03e      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a84      	ldr	r2, [pc, #528]	; (8012940 <HAL_UART_IRQHandler+0x580>)
 801272e:	4293      	cmp	r3, r2
 8012730:	d037      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a82      	ldr	r2, [pc, #520]	; (8012944 <HAL_UART_IRQHandler+0x584>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d030      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a7f      	ldr	r2, [pc, #508]	; (8012948 <HAL_UART_IRQHandler+0x588>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d029      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4a7d      	ldr	r2, [pc, #500]	; (801294c <HAL_UART_IRQHandler+0x58c>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d022      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	4a7a      	ldr	r2, [pc, #488]	; (8012950 <HAL_UART_IRQHandler+0x590>)
 8012766:	4293      	cmp	r3, r2
 8012768:	d01b      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a78      	ldr	r2, [pc, #480]	; (8012954 <HAL_UART_IRQHandler+0x594>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d014      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a75      	ldr	r2, [pc, #468]	; (8012958 <HAL_UART_IRQHandler+0x598>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d00d      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	4a73      	ldr	r2, [pc, #460]	; (801295c <HAL_UART_IRQHandler+0x59c>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d006      	beq.n	80127a2 <HAL_UART_IRQHandler+0x3e2>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4a70      	ldr	r2, [pc, #448]	; (8012960 <HAL_UART_IRQHandler+0x5a0>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d106      	bne.n	80127b0 <HAL_UART_IRQHandler+0x3f0>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	e005      	b.n	80127bc <HAL_UART_IRQHandler+0x3fc>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80127c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f000 81ab 	beq.w	8012b20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80127d4:	429a      	cmp	r2, r3
 80127d6:	f080 81a3 	bcs.w	8012b20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80127e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127f0:	f000 8087 	beq.w	8012902 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012800:	e853 3f00 	ldrex	r3, [r3]
 8012804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801280c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	461a      	mov	r2, r3
 801281a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801281e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012822:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801282a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801282e:	e841 2300 	strex	r3, r2, [r1]
 8012832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1da      	bne.n	80127f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	3308      	adds	r3, #8
 8012844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012848:	e853 3f00 	ldrex	r3, [r3]
 801284c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012850:	f023 0301 	bic.w	r3, r3, #1
 8012854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3308      	adds	r3, #8
 801285e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801286a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801286e:	e841 2300 	strex	r3, r2, [r1]
 8012872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1e1      	bne.n	801283e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	3308      	adds	r3, #8
 8012880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012884:	e853 3f00 	ldrex	r3, [r3]
 8012888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801288c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	3308      	adds	r3, #8
 801289a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801289e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80128a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80128a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80128a6:	e841 2300 	strex	r3, r2, [r1]
 80128aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80128ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d1e3      	bne.n	801287a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2220      	movs	r2, #32
 80128b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128c8:	e853 3f00 	ldrex	r3, [r3]
 80128cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80128ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128d0:	f023 0310 	bic.w	r3, r3, #16
 80128d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	461a      	mov	r2, r3
 80128de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80128e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80128e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80128ea:	e841 2300 	strex	r3, r2, [r1]
 80128ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80128f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1e4      	bne.n	80128c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f6 fd47 	bl	8009390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2202      	movs	r2, #2
 8012906:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012914:	b29b      	uxth	r3, r3
 8012916:	1ad3      	subs	r3, r2, r3
 8012918:	b29b      	uxth	r3, r3
 801291a:	4619      	mov	r1, r3
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7f1 f94d 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012922:	e0fd      	b.n	8012b20 <HAL_UART_IRQHandler+0x760>
 8012924:	40020010 	.word	0x40020010
 8012928:	40020028 	.word	0x40020028
 801292c:	40020040 	.word	0x40020040
 8012930:	40020058 	.word	0x40020058
 8012934:	40020070 	.word	0x40020070
 8012938:	40020088 	.word	0x40020088
 801293c:	400200a0 	.word	0x400200a0
 8012940:	400200b8 	.word	0x400200b8
 8012944:	40020410 	.word	0x40020410
 8012948:	40020428 	.word	0x40020428
 801294c:	40020440 	.word	0x40020440
 8012950:	40020458 	.word	0x40020458
 8012954:	40020470 	.word	0x40020470
 8012958:	40020488 	.word	0x40020488
 801295c:	400204a0 	.word	0x400204a0
 8012960:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012970:	b29b      	uxth	r3, r3
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801297e:	b29b      	uxth	r3, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	f000 80cf 	beq.w	8012b24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 80ca 	beq.w	8012b24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012998:	e853 3f00 	ldrex	r3, [r3]
 801299c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	461a      	mov	r2, r3
 80129ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80129b2:	647b      	str	r3, [r7, #68]	; 0x44
 80129b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129ba:	e841 2300 	strex	r3, r2, [r1]
 80129be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1e4      	bne.n	8012990 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	3308      	adds	r3, #8
 80129cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d0:	e853 3f00 	ldrex	r3, [r3]
 80129d4:	623b      	str	r3, [r7, #32]
   return(result);
 80129d6:	6a3a      	ldr	r2, [r7, #32]
 80129d8:	4b55      	ldr	r3, [pc, #340]	; (8012b30 <HAL_UART_IRQHandler+0x770>)
 80129da:	4013      	ands	r3, r2
 80129dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3308      	adds	r3, #8
 80129e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80129ea:	633a      	str	r2, [r7, #48]	; 0x30
 80129ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129f2:	e841 2300 	strex	r3, r2, [r1]
 80129f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80129f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1e3      	bne.n	80129c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2220      	movs	r2, #32
 8012a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	e853 3f00 	ldrex	r3, [r3]
 8012a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	f023 0310 	bic.w	r3, r3, #16
 8012a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012a34:	61fb      	str	r3, [r7, #28]
 8012a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a38:	69b9      	ldr	r1, [r7, #24]
 8012a3a:	69fa      	ldr	r2, [r7, #28]
 8012a3c:	e841 2300 	strex	r3, r2, [r1]
 8012a40:	617b      	str	r3, [r7, #20]
   return(result);
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1e4      	bne.n	8012a12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2202      	movs	r2, #2
 8012a4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012a52:	4619      	mov	r1, r3
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7f1 f8b1 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012a5a:	e063      	b.n	8012b24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00e      	beq.n	8012a86 <HAL_UART_IRQHandler+0x6c6>
 8012a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d008      	beq.n	8012a86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f001 fa63 	bl	8013f4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a84:	e051      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d014      	beq.n	8012abc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d105      	bne.n	8012aaa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d008      	beq.n	8012abc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d03a      	beq.n	8012b28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	4798      	blx	r3
    }
    return;
 8012aba:	e035      	b.n	8012b28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d009      	beq.n	8012adc <HAL_UART_IRQHandler+0x71c>
 8012ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d003      	beq.n	8012adc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f001 fa0d 	bl	8013ef4 <UART_EndTransmit_IT>
    return;
 8012ada:	e026      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d009      	beq.n	8012afc <HAL_UART_IRQHandler+0x73c>
 8012ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012aec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f001 fa3c 	bl	8013f72 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012afa:	e016      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d010      	beq.n	8012b2a <HAL_UART_IRQHandler+0x76a>
 8012b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	da0c      	bge.n	8012b2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f001 fa24 	bl	8013f5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012b16:	e008      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
      return;
 8012b18:	bf00      	nop
 8012b1a:	e006      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
    return;
 8012b1c:	bf00      	nop
 8012b1e:	e004      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
      return;
 8012b20:	bf00      	nop
 8012b22:	e002      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
      return;
 8012b24:	bf00      	nop
 8012b26:	e000      	b.n	8012b2a <HAL_UART_IRQHandler+0x76a>
    return;
 8012b28:	bf00      	nop
  }
}
 8012b2a:	37e8      	adds	r7, #232	; 0xe8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	effffffe 	.word	0xeffffffe

08012b34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012b50:	bf00      	nop
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012b60:	b092      	sub	sp, #72	; 0x48
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012b66:	2300      	movs	r3, #0
 8012b68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	689a      	ldr	r2, [r3, #8]
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	431a      	orrs	r2, r3
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	695b      	ldr	r3, [r3, #20]
 8012b7a:	431a      	orrs	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	4313      	orrs	r3, r2
 8012b82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	681a      	ldr	r2, [r3, #0]
 8012b8a:	4bbe      	ldr	r3, [pc, #760]	; (8012e84 <UART_SetConfig+0x328>)
 8012b8c:	4013      	ands	r3, r2
 8012b8e:	697a      	ldr	r2, [r7, #20]
 8012b90:	6812      	ldr	r2, [r2, #0]
 8012b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b94:	430b      	orrs	r3, r1
 8012b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	68da      	ldr	r2, [r3, #12]
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	430a      	orrs	r2, r1
 8012bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	4ab3      	ldr	r2, [pc, #716]	; (8012e88 <UART_SetConfig+0x32c>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d004      	beq.n	8012bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	6a1b      	ldr	r3, [r3, #32]
 8012bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	689a      	ldr	r2, [r3, #8]
 8012bce:	4baf      	ldr	r3, [pc, #700]	; (8012e8c <UART_SetConfig+0x330>)
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	697a      	ldr	r2, [r7, #20]
 8012bd4:	6812      	ldr	r2, [r2, #0]
 8012bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012bd8:	430b      	orrs	r3, r1
 8012bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be2:	f023 010f 	bic.w	r1, r3, #15
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	430a      	orrs	r2, r1
 8012bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4aa6      	ldr	r2, [pc, #664]	; (8012e90 <UART_SetConfig+0x334>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d177      	bne.n	8012cec <UART_SetConfig+0x190>
 8012bfc:	4ba5      	ldr	r3, [pc, #660]	; (8012e94 <UART_SetConfig+0x338>)
 8012bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c04:	2b28      	cmp	r3, #40	; 0x28
 8012c06:	d86d      	bhi.n	8012ce4 <UART_SetConfig+0x188>
 8012c08:	a201      	add	r2, pc, #4	; (adr r2, 8012c10 <UART_SetConfig+0xb4>)
 8012c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c0e:	bf00      	nop
 8012c10:	08012cb5 	.word	0x08012cb5
 8012c14:	08012ce5 	.word	0x08012ce5
 8012c18:	08012ce5 	.word	0x08012ce5
 8012c1c:	08012ce5 	.word	0x08012ce5
 8012c20:	08012ce5 	.word	0x08012ce5
 8012c24:	08012ce5 	.word	0x08012ce5
 8012c28:	08012ce5 	.word	0x08012ce5
 8012c2c:	08012ce5 	.word	0x08012ce5
 8012c30:	08012cbd 	.word	0x08012cbd
 8012c34:	08012ce5 	.word	0x08012ce5
 8012c38:	08012ce5 	.word	0x08012ce5
 8012c3c:	08012ce5 	.word	0x08012ce5
 8012c40:	08012ce5 	.word	0x08012ce5
 8012c44:	08012ce5 	.word	0x08012ce5
 8012c48:	08012ce5 	.word	0x08012ce5
 8012c4c:	08012ce5 	.word	0x08012ce5
 8012c50:	08012cc5 	.word	0x08012cc5
 8012c54:	08012ce5 	.word	0x08012ce5
 8012c58:	08012ce5 	.word	0x08012ce5
 8012c5c:	08012ce5 	.word	0x08012ce5
 8012c60:	08012ce5 	.word	0x08012ce5
 8012c64:	08012ce5 	.word	0x08012ce5
 8012c68:	08012ce5 	.word	0x08012ce5
 8012c6c:	08012ce5 	.word	0x08012ce5
 8012c70:	08012ccd 	.word	0x08012ccd
 8012c74:	08012ce5 	.word	0x08012ce5
 8012c78:	08012ce5 	.word	0x08012ce5
 8012c7c:	08012ce5 	.word	0x08012ce5
 8012c80:	08012ce5 	.word	0x08012ce5
 8012c84:	08012ce5 	.word	0x08012ce5
 8012c88:	08012ce5 	.word	0x08012ce5
 8012c8c:	08012ce5 	.word	0x08012ce5
 8012c90:	08012cd5 	.word	0x08012cd5
 8012c94:	08012ce5 	.word	0x08012ce5
 8012c98:	08012ce5 	.word	0x08012ce5
 8012c9c:	08012ce5 	.word	0x08012ce5
 8012ca0:	08012ce5 	.word	0x08012ce5
 8012ca4:	08012ce5 	.word	0x08012ce5
 8012ca8:	08012ce5 	.word	0x08012ce5
 8012cac:	08012ce5 	.word	0x08012ce5
 8012cb0:	08012cdd 	.word	0x08012cdd
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cba:	e222      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012cbc:	2304      	movs	r3, #4
 8012cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cc2:	e21e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012cc4:	2308      	movs	r3, #8
 8012cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cca:	e21a      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012ccc:	2310      	movs	r3, #16
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cd2:	e216      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012cd4:	2320      	movs	r3, #32
 8012cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cda:	e212      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012cdc:	2340      	movs	r3, #64	; 0x40
 8012cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ce2:	e20e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012ce4:	2380      	movs	r3, #128	; 0x80
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cea:	e20a      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4a69      	ldr	r2, [pc, #420]	; (8012e98 <UART_SetConfig+0x33c>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d130      	bne.n	8012d58 <UART_SetConfig+0x1fc>
 8012cf6:	4b67      	ldr	r3, [pc, #412]	; (8012e94 <UART_SetConfig+0x338>)
 8012cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cfa:	f003 0307 	and.w	r3, r3, #7
 8012cfe:	2b05      	cmp	r3, #5
 8012d00:	d826      	bhi.n	8012d50 <UART_SetConfig+0x1f4>
 8012d02:	a201      	add	r2, pc, #4	; (adr r2, 8012d08 <UART_SetConfig+0x1ac>)
 8012d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d08:	08012d21 	.word	0x08012d21
 8012d0c:	08012d29 	.word	0x08012d29
 8012d10:	08012d31 	.word	0x08012d31
 8012d14:	08012d39 	.word	0x08012d39
 8012d18:	08012d41 	.word	0x08012d41
 8012d1c:	08012d49 	.word	0x08012d49
 8012d20:	2300      	movs	r3, #0
 8012d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d26:	e1ec      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d28:	2304      	movs	r3, #4
 8012d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d2e:	e1e8      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d30:	2308      	movs	r3, #8
 8012d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d36:	e1e4      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d38:	2310      	movs	r3, #16
 8012d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d3e:	e1e0      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d40:	2320      	movs	r3, #32
 8012d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d46:	e1dc      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d48:	2340      	movs	r3, #64	; 0x40
 8012d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d4e:	e1d8      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d50:	2380      	movs	r3, #128	; 0x80
 8012d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d56:	e1d4      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4a4f      	ldr	r2, [pc, #316]	; (8012e9c <UART_SetConfig+0x340>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d130      	bne.n	8012dc4 <UART_SetConfig+0x268>
 8012d62:	4b4c      	ldr	r3, [pc, #304]	; (8012e94 <UART_SetConfig+0x338>)
 8012d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d66:	f003 0307 	and.w	r3, r3, #7
 8012d6a:	2b05      	cmp	r3, #5
 8012d6c:	d826      	bhi.n	8012dbc <UART_SetConfig+0x260>
 8012d6e:	a201      	add	r2, pc, #4	; (adr r2, 8012d74 <UART_SetConfig+0x218>)
 8012d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d74:	08012d8d 	.word	0x08012d8d
 8012d78:	08012d95 	.word	0x08012d95
 8012d7c:	08012d9d 	.word	0x08012d9d
 8012d80:	08012da5 	.word	0x08012da5
 8012d84:	08012dad 	.word	0x08012dad
 8012d88:	08012db5 	.word	0x08012db5
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d92:	e1b6      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d94:	2304      	movs	r3, #4
 8012d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d9a:	e1b2      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012d9c:	2308      	movs	r3, #8
 8012d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012da2:	e1ae      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012da4:	2310      	movs	r3, #16
 8012da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012daa:	e1aa      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012dac:	2320      	movs	r3, #32
 8012dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012db2:	e1a6      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012db4:	2340      	movs	r3, #64	; 0x40
 8012db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dba:	e1a2      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012dbc:	2380      	movs	r3, #128	; 0x80
 8012dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dc2:	e19e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	4a35      	ldr	r2, [pc, #212]	; (8012ea0 <UART_SetConfig+0x344>)
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	d130      	bne.n	8012e30 <UART_SetConfig+0x2d4>
 8012dce:	4b31      	ldr	r3, [pc, #196]	; (8012e94 <UART_SetConfig+0x338>)
 8012dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dd2:	f003 0307 	and.w	r3, r3, #7
 8012dd6:	2b05      	cmp	r3, #5
 8012dd8:	d826      	bhi.n	8012e28 <UART_SetConfig+0x2cc>
 8012dda:	a201      	add	r2, pc, #4	; (adr r2, 8012de0 <UART_SetConfig+0x284>)
 8012ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de0:	08012df9 	.word	0x08012df9
 8012de4:	08012e01 	.word	0x08012e01
 8012de8:	08012e09 	.word	0x08012e09
 8012dec:	08012e11 	.word	0x08012e11
 8012df0:	08012e19 	.word	0x08012e19
 8012df4:	08012e21 	.word	0x08012e21
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dfe:	e180      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e00:	2304      	movs	r3, #4
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e06:	e17c      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e08:	2308      	movs	r3, #8
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0e:	e178      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e10:	2310      	movs	r3, #16
 8012e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e16:	e174      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e18:	2320      	movs	r3, #32
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1e:	e170      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e20:	2340      	movs	r3, #64	; 0x40
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e26:	e16c      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e28:	2380      	movs	r3, #128	; 0x80
 8012e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e2e:	e168      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4a1b      	ldr	r2, [pc, #108]	; (8012ea4 <UART_SetConfig+0x348>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d142      	bne.n	8012ec0 <UART_SetConfig+0x364>
 8012e3a:	4b16      	ldr	r3, [pc, #88]	; (8012e94 <UART_SetConfig+0x338>)
 8012e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e3e:	f003 0307 	and.w	r3, r3, #7
 8012e42:	2b05      	cmp	r3, #5
 8012e44:	d838      	bhi.n	8012eb8 <UART_SetConfig+0x35c>
 8012e46:	a201      	add	r2, pc, #4	; (adr r2, 8012e4c <UART_SetConfig+0x2f0>)
 8012e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e4c:	08012e65 	.word	0x08012e65
 8012e50:	08012e6d 	.word	0x08012e6d
 8012e54:	08012e75 	.word	0x08012e75
 8012e58:	08012e7d 	.word	0x08012e7d
 8012e5c:	08012ea9 	.word	0x08012ea9
 8012e60:	08012eb1 	.word	0x08012eb1
 8012e64:	2300      	movs	r3, #0
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6a:	e14a      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e6c:	2304      	movs	r3, #4
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e72:	e146      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e74:	2308      	movs	r3, #8
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e7a:	e142      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e7c:	2310      	movs	r3, #16
 8012e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e82:	e13e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012e84:	cfff69f3 	.word	0xcfff69f3
 8012e88:	58000c00 	.word	0x58000c00
 8012e8c:	11fff4ff 	.word	0x11fff4ff
 8012e90:	40011000 	.word	0x40011000
 8012e94:	58024400 	.word	0x58024400
 8012e98:	40004400 	.word	0x40004400
 8012e9c:	40004800 	.word	0x40004800
 8012ea0:	40004c00 	.word	0x40004c00
 8012ea4:	40005000 	.word	0x40005000
 8012ea8:	2320      	movs	r3, #32
 8012eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eae:	e128      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012eb0:	2340      	movs	r3, #64	; 0x40
 8012eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb6:	e124      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012eb8:	2380      	movs	r3, #128	; 0x80
 8012eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ebe:	e120      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4acb      	ldr	r2, [pc, #812]	; (80131f4 <UART_SetConfig+0x698>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d176      	bne.n	8012fb8 <UART_SetConfig+0x45c>
 8012eca:	4bcb      	ldr	r3, [pc, #812]	; (80131f8 <UART_SetConfig+0x69c>)
 8012ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ed2:	2b28      	cmp	r3, #40	; 0x28
 8012ed4:	d86c      	bhi.n	8012fb0 <UART_SetConfig+0x454>
 8012ed6:	a201      	add	r2, pc, #4	; (adr r2, 8012edc <UART_SetConfig+0x380>)
 8012ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012edc:	08012f81 	.word	0x08012f81
 8012ee0:	08012fb1 	.word	0x08012fb1
 8012ee4:	08012fb1 	.word	0x08012fb1
 8012ee8:	08012fb1 	.word	0x08012fb1
 8012eec:	08012fb1 	.word	0x08012fb1
 8012ef0:	08012fb1 	.word	0x08012fb1
 8012ef4:	08012fb1 	.word	0x08012fb1
 8012ef8:	08012fb1 	.word	0x08012fb1
 8012efc:	08012f89 	.word	0x08012f89
 8012f00:	08012fb1 	.word	0x08012fb1
 8012f04:	08012fb1 	.word	0x08012fb1
 8012f08:	08012fb1 	.word	0x08012fb1
 8012f0c:	08012fb1 	.word	0x08012fb1
 8012f10:	08012fb1 	.word	0x08012fb1
 8012f14:	08012fb1 	.word	0x08012fb1
 8012f18:	08012fb1 	.word	0x08012fb1
 8012f1c:	08012f91 	.word	0x08012f91
 8012f20:	08012fb1 	.word	0x08012fb1
 8012f24:	08012fb1 	.word	0x08012fb1
 8012f28:	08012fb1 	.word	0x08012fb1
 8012f2c:	08012fb1 	.word	0x08012fb1
 8012f30:	08012fb1 	.word	0x08012fb1
 8012f34:	08012fb1 	.word	0x08012fb1
 8012f38:	08012fb1 	.word	0x08012fb1
 8012f3c:	08012f99 	.word	0x08012f99
 8012f40:	08012fb1 	.word	0x08012fb1
 8012f44:	08012fb1 	.word	0x08012fb1
 8012f48:	08012fb1 	.word	0x08012fb1
 8012f4c:	08012fb1 	.word	0x08012fb1
 8012f50:	08012fb1 	.word	0x08012fb1
 8012f54:	08012fb1 	.word	0x08012fb1
 8012f58:	08012fb1 	.word	0x08012fb1
 8012f5c:	08012fa1 	.word	0x08012fa1
 8012f60:	08012fb1 	.word	0x08012fb1
 8012f64:	08012fb1 	.word	0x08012fb1
 8012f68:	08012fb1 	.word	0x08012fb1
 8012f6c:	08012fb1 	.word	0x08012fb1
 8012f70:	08012fb1 	.word	0x08012fb1
 8012f74:	08012fb1 	.word	0x08012fb1
 8012f78:	08012fb1 	.word	0x08012fb1
 8012f7c:	08012fa9 	.word	0x08012fa9
 8012f80:	2301      	movs	r3, #1
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f86:	e0bc      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012f88:	2304      	movs	r3, #4
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8e:	e0b8      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012f90:	2308      	movs	r3, #8
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f96:	e0b4      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012f98:	2310      	movs	r3, #16
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9e:	e0b0      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012fa0:	2320      	movs	r3, #32
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa6:	e0ac      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012fa8:	2340      	movs	r3, #64	; 0x40
 8012faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fae:	e0a8      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012fb0:	2380      	movs	r3, #128	; 0x80
 8012fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fb6:	e0a4      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a8f      	ldr	r2, [pc, #572]	; (80131fc <UART_SetConfig+0x6a0>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d130      	bne.n	8013024 <UART_SetConfig+0x4c8>
 8012fc2:	4b8d      	ldr	r3, [pc, #564]	; (80131f8 <UART_SetConfig+0x69c>)
 8012fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fc6:	f003 0307 	and.w	r3, r3, #7
 8012fca:	2b05      	cmp	r3, #5
 8012fcc:	d826      	bhi.n	801301c <UART_SetConfig+0x4c0>
 8012fce:	a201      	add	r2, pc, #4	; (adr r2, 8012fd4 <UART_SetConfig+0x478>)
 8012fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd4:	08012fed 	.word	0x08012fed
 8012fd8:	08012ff5 	.word	0x08012ff5
 8012fdc:	08012ffd 	.word	0x08012ffd
 8012fe0:	08013005 	.word	0x08013005
 8012fe4:	0801300d 	.word	0x0801300d
 8012fe8:	08013015 	.word	0x08013015
 8012fec:	2300      	movs	r3, #0
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff2:	e086      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012ff4:	2304      	movs	r3, #4
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ffa:	e082      	b.n	8013102 <UART_SetConfig+0x5a6>
 8012ffc:	2308      	movs	r3, #8
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013002:	e07e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013004:	2310      	movs	r3, #16
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801300a:	e07a      	b.n	8013102 <UART_SetConfig+0x5a6>
 801300c:	2320      	movs	r3, #32
 801300e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013012:	e076      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013014:	2340      	movs	r3, #64	; 0x40
 8013016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801301a:	e072      	b.n	8013102 <UART_SetConfig+0x5a6>
 801301c:	2380      	movs	r3, #128	; 0x80
 801301e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013022:	e06e      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a75      	ldr	r2, [pc, #468]	; (8013200 <UART_SetConfig+0x6a4>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d130      	bne.n	8013090 <UART_SetConfig+0x534>
 801302e:	4b72      	ldr	r3, [pc, #456]	; (80131f8 <UART_SetConfig+0x69c>)
 8013030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013032:	f003 0307 	and.w	r3, r3, #7
 8013036:	2b05      	cmp	r3, #5
 8013038:	d826      	bhi.n	8013088 <UART_SetConfig+0x52c>
 801303a:	a201      	add	r2, pc, #4	; (adr r2, 8013040 <UART_SetConfig+0x4e4>)
 801303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013040:	08013059 	.word	0x08013059
 8013044:	08013061 	.word	0x08013061
 8013048:	08013069 	.word	0x08013069
 801304c:	08013071 	.word	0x08013071
 8013050:	08013079 	.word	0x08013079
 8013054:	08013081 	.word	0x08013081
 8013058:	2300      	movs	r3, #0
 801305a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801305e:	e050      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013060:	2304      	movs	r3, #4
 8013062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013066:	e04c      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013068:	2308      	movs	r3, #8
 801306a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801306e:	e048      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013070:	2310      	movs	r3, #16
 8013072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013076:	e044      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013078:	2320      	movs	r3, #32
 801307a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801307e:	e040      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013080:	2340      	movs	r3, #64	; 0x40
 8013082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013086:	e03c      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013088:	2380      	movs	r3, #128	; 0x80
 801308a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801308e:	e038      	b.n	8013102 <UART_SetConfig+0x5a6>
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a5b      	ldr	r2, [pc, #364]	; (8013204 <UART_SetConfig+0x6a8>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d130      	bne.n	80130fc <UART_SetConfig+0x5a0>
 801309a:	4b57      	ldr	r3, [pc, #348]	; (80131f8 <UART_SetConfig+0x69c>)
 801309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801309e:	f003 0307 	and.w	r3, r3, #7
 80130a2:	2b05      	cmp	r3, #5
 80130a4:	d826      	bhi.n	80130f4 <UART_SetConfig+0x598>
 80130a6:	a201      	add	r2, pc, #4	; (adr r2, 80130ac <UART_SetConfig+0x550>)
 80130a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ac:	080130c5 	.word	0x080130c5
 80130b0:	080130cd 	.word	0x080130cd
 80130b4:	080130d5 	.word	0x080130d5
 80130b8:	080130dd 	.word	0x080130dd
 80130bc:	080130e5 	.word	0x080130e5
 80130c0:	080130ed 	.word	0x080130ed
 80130c4:	2302      	movs	r3, #2
 80130c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ca:	e01a      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130cc:	2304      	movs	r3, #4
 80130ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130d2:	e016      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130d4:	2308      	movs	r3, #8
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130da:	e012      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130dc:	2310      	movs	r3, #16
 80130de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130e2:	e00e      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130e4:	2320      	movs	r3, #32
 80130e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ea:	e00a      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130ec:	2340      	movs	r3, #64	; 0x40
 80130ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130f2:	e006      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130f4:	2380      	movs	r3, #128	; 0x80
 80130f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130fa:	e002      	b.n	8013102 <UART_SetConfig+0x5a6>
 80130fc:	2380      	movs	r3, #128	; 0x80
 80130fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a3f      	ldr	r2, [pc, #252]	; (8013204 <UART_SetConfig+0x6a8>)
 8013108:	4293      	cmp	r3, r2
 801310a:	f040 80f8 	bne.w	80132fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801310e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013112:	2b20      	cmp	r3, #32
 8013114:	dc46      	bgt.n	80131a4 <UART_SetConfig+0x648>
 8013116:	2b02      	cmp	r3, #2
 8013118:	f2c0 8082 	blt.w	8013220 <UART_SetConfig+0x6c4>
 801311c:	3b02      	subs	r3, #2
 801311e:	2b1e      	cmp	r3, #30
 8013120:	d87e      	bhi.n	8013220 <UART_SetConfig+0x6c4>
 8013122:	a201      	add	r2, pc, #4	; (adr r2, 8013128 <UART_SetConfig+0x5cc>)
 8013124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013128:	080131ab 	.word	0x080131ab
 801312c:	08013221 	.word	0x08013221
 8013130:	080131b3 	.word	0x080131b3
 8013134:	08013221 	.word	0x08013221
 8013138:	08013221 	.word	0x08013221
 801313c:	08013221 	.word	0x08013221
 8013140:	080131c3 	.word	0x080131c3
 8013144:	08013221 	.word	0x08013221
 8013148:	08013221 	.word	0x08013221
 801314c:	08013221 	.word	0x08013221
 8013150:	08013221 	.word	0x08013221
 8013154:	08013221 	.word	0x08013221
 8013158:	08013221 	.word	0x08013221
 801315c:	08013221 	.word	0x08013221
 8013160:	080131d3 	.word	0x080131d3
 8013164:	08013221 	.word	0x08013221
 8013168:	08013221 	.word	0x08013221
 801316c:	08013221 	.word	0x08013221
 8013170:	08013221 	.word	0x08013221
 8013174:	08013221 	.word	0x08013221
 8013178:	08013221 	.word	0x08013221
 801317c:	08013221 	.word	0x08013221
 8013180:	08013221 	.word	0x08013221
 8013184:	08013221 	.word	0x08013221
 8013188:	08013221 	.word	0x08013221
 801318c:	08013221 	.word	0x08013221
 8013190:	08013221 	.word	0x08013221
 8013194:	08013221 	.word	0x08013221
 8013198:	08013221 	.word	0x08013221
 801319c:	08013221 	.word	0x08013221
 80131a0:	08013213 	.word	0x08013213
 80131a4:	2b40      	cmp	r3, #64	; 0x40
 80131a6:	d037      	beq.n	8013218 <UART_SetConfig+0x6bc>
 80131a8:	e03a      	b.n	8013220 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80131aa:	f7fc f9d1 	bl	800f550 <HAL_RCCEx_GetD3PCLK1Freq>
 80131ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80131b0:	e03c      	b.n	801322c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80131b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fc f9e0 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80131bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80131c0:	e034      	b.n	801322c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80131c2:	f107 0318 	add.w	r3, r7, #24
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7fc fb2c 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80131d0:	e02c      	b.n	801322c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80131d2:	4b09      	ldr	r3, [pc, #36]	; (80131f8 <UART_SetConfig+0x69c>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	f003 0320 	and.w	r3, r3, #32
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d016      	beq.n	801320c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80131de:	4b06      	ldr	r3, [pc, #24]	; (80131f8 <UART_SetConfig+0x69c>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	08db      	lsrs	r3, r3, #3
 80131e4:	f003 0303 	and.w	r3, r3, #3
 80131e8:	4a07      	ldr	r2, [pc, #28]	; (8013208 <UART_SetConfig+0x6ac>)
 80131ea:	fa22 f303 	lsr.w	r3, r2, r3
 80131ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80131f0:	e01c      	b.n	801322c <UART_SetConfig+0x6d0>
 80131f2:	bf00      	nop
 80131f4:	40011400 	.word	0x40011400
 80131f8:	58024400 	.word	0x58024400
 80131fc:	40007800 	.word	0x40007800
 8013200:	40007c00 	.word	0x40007c00
 8013204:	58000c00 	.word	0x58000c00
 8013208:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801320c:	4b9d      	ldr	r3, [pc, #628]	; (8013484 <UART_SetConfig+0x928>)
 801320e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013210:	e00c      	b.n	801322c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013212:	4b9d      	ldr	r3, [pc, #628]	; (8013488 <UART_SetConfig+0x92c>)
 8013214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013216:	e009      	b.n	801322c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801321c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801321e:	e005      	b.n	801322c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013220:	2300      	movs	r3, #0
 8013222:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013224:	2301      	movs	r3, #1
 8013226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801322a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801322e:	2b00      	cmp	r3, #0
 8013230:	f000 81de 	beq.w	80135f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013238:	4a94      	ldr	r2, [pc, #592]	; (801348c <UART_SetConfig+0x930>)
 801323a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801323e:	461a      	mov	r2, r3
 8013240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013242:	fbb3 f3f2 	udiv	r3, r3, r2
 8013246:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	685a      	ldr	r2, [r3, #4]
 801324c:	4613      	mov	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	4413      	add	r3, r2
 8013252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013254:	429a      	cmp	r2, r3
 8013256:	d305      	bcc.n	8013264 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801325e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013260:	429a      	cmp	r2, r3
 8013262:	d903      	bls.n	801326c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013264:	2301      	movs	r3, #1
 8013266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801326a:	e1c1      	b.n	80135f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801326e:	2200      	movs	r2, #0
 8013270:	60bb      	str	r3, [r7, #8]
 8013272:	60fa      	str	r2, [r7, #12]
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013278:	4a84      	ldr	r2, [pc, #528]	; (801348c <UART_SetConfig+0x930>)
 801327a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801327e:	b29b      	uxth	r3, r3
 8013280:	2200      	movs	r2, #0
 8013282:	603b      	str	r3, [r7, #0]
 8013284:	607a      	str	r2, [r7, #4]
 8013286:	e9d7 2300 	ldrd	r2, r3, [r7]
 801328a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801328e:	f7ed f87f 	bl	8000390 <__aeabi_uldivmod>
 8013292:	4602      	mov	r2, r0
 8013294:	460b      	mov	r3, r1
 8013296:	4610      	mov	r0, r2
 8013298:	4619      	mov	r1, r3
 801329a:	f04f 0200 	mov.w	r2, #0
 801329e:	f04f 0300 	mov.w	r3, #0
 80132a2:	020b      	lsls	r3, r1, #8
 80132a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80132a8:	0202      	lsls	r2, r0, #8
 80132aa:	6979      	ldr	r1, [r7, #20]
 80132ac:	6849      	ldr	r1, [r1, #4]
 80132ae:	0849      	lsrs	r1, r1, #1
 80132b0:	2000      	movs	r0, #0
 80132b2:	460c      	mov	r4, r1
 80132b4:	4605      	mov	r5, r0
 80132b6:	eb12 0804 	adds.w	r8, r2, r4
 80132ba:	eb43 0905 	adc.w	r9, r3, r5
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	2200      	movs	r2, #0
 80132c4:	469a      	mov	sl, r3
 80132c6:	4693      	mov	fp, r2
 80132c8:	4652      	mov	r2, sl
 80132ca:	465b      	mov	r3, fp
 80132cc:	4640      	mov	r0, r8
 80132ce:	4649      	mov	r1, r9
 80132d0:	f7ed f85e 	bl	8000390 <__aeabi_uldivmod>
 80132d4:	4602      	mov	r2, r0
 80132d6:	460b      	mov	r3, r1
 80132d8:	4613      	mov	r3, r2
 80132da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80132dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80132e2:	d308      	bcc.n	80132f6 <UART_SetConfig+0x79a>
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132ea:	d204      	bcs.n	80132f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132f2:	60da      	str	r2, [r3, #12]
 80132f4:	e17c      	b.n	80135f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80132f6:	2301      	movs	r3, #1
 80132f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80132fc:	e178      	b.n	80135f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	69db      	ldr	r3, [r3, #28]
 8013302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013306:	f040 80c5 	bne.w	8013494 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801330a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801330e:	2b20      	cmp	r3, #32
 8013310:	dc48      	bgt.n	80133a4 <UART_SetConfig+0x848>
 8013312:	2b00      	cmp	r3, #0
 8013314:	db7b      	blt.n	801340e <UART_SetConfig+0x8b2>
 8013316:	2b20      	cmp	r3, #32
 8013318:	d879      	bhi.n	801340e <UART_SetConfig+0x8b2>
 801331a:	a201      	add	r2, pc, #4	; (adr r2, 8013320 <UART_SetConfig+0x7c4>)
 801331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013320:	080133ab 	.word	0x080133ab
 8013324:	080133b3 	.word	0x080133b3
 8013328:	0801340f 	.word	0x0801340f
 801332c:	0801340f 	.word	0x0801340f
 8013330:	080133bb 	.word	0x080133bb
 8013334:	0801340f 	.word	0x0801340f
 8013338:	0801340f 	.word	0x0801340f
 801333c:	0801340f 	.word	0x0801340f
 8013340:	080133cb 	.word	0x080133cb
 8013344:	0801340f 	.word	0x0801340f
 8013348:	0801340f 	.word	0x0801340f
 801334c:	0801340f 	.word	0x0801340f
 8013350:	0801340f 	.word	0x0801340f
 8013354:	0801340f 	.word	0x0801340f
 8013358:	0801340f 	.word	0x0801340f
 801335c:	0801340f 	.word	0x0801340f
 8013360:	080133db 	.word	0x080133db
 8013364:	0801340f 	.word	0x0801340f
 8013368:	0801340f 	.word	0x0801340f
 801336c:	0801340f 	.word	0x0801340f
 8013370:	0801340f 	.word	0x0801340f
 8013374:	0801340f 	.word	0x0801340f
 8013378:	0801340f 	.word	0x0801340f
 801337c:	0801340f 	.word	0x0801340f
 8013380:	0801340f 	.word	0x0801340f
 8013384:	0801340f 	.word	0x0801340f
 8013388:	0801340f 	.word	0x0801340f
 801338c:	0801340f 	.word	0x0801340f
 8013390:	0801340f 	.word	0x0801340f
 8013394:	0801340f 	.word	0x0801340f
 8013398:	0801340f 	.word	0x0801340f
 801339c:	0801340f 	.word	0x0801340f
 80133a0:	08013401 	.word	0x08013401
 80133a4:	2b40      	cmp	r3, #64	; 0x40
 80133a6:	d02e      	beq.n	8013406 <UART_SetConfig+0x8aa>
 80133a8:	e031      	b.n	801340e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133aa:	f7fa f91b 	bl	800d5e4 <HAL_RCC_GetPCLK1Freq>
 80133ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133b0:	e033      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80133b2:	f7fa f92d 	bl	800d610 <HAL_RCC_GetPCLK2Freq>
 80133b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133b8:	e02f      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fc f8dc 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80133c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133c8:	e027      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133ca:	f107 0318 	add.w	r3, r7, #24
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fc fa28 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133d8:	e01f      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80133da:	4b2d      	ldr	r3, [pc, #180]	; (8013490 <UART_SetConfig+0x934>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f003 0320 	and.w	r3, r3, #32
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d009      	beq.n	80133fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80133e6:	4b2a      	ldr	r3, [pc, #168]	; (8013490 <UART_SetConfig+0x934>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	08db      	lsrs	r3, r3, #3
 80133ec:	f003 0303 	and.w	r3, r3, #3
 80133f0:	4a24      	ldr	r2, [pc, #144]	; (8013484 <UART_SetConfig+0x928>)
 80133f2:	fa22 f303 	lsr.w	r3, r2, r3
 80133f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80133f8:	e00f      	b.n	801341a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80133fa:	4b22      	ldr	r3, [pc, #136]	; (8013484 <UART_SetConfig+0x928>)
 80133fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133fe:	e00c      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013400:	4b21      	ldr	r3, [pc, #132]	; (8013488 <UART_SetConfig+0x92c>)
 8013402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013404:	e009      	b.n	801341a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801340a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801340c:	e005      	b.n	801341a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801340e:	2300      	movs	r3, #0
 8013410:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013412:	2301      	movs	r3, #1
 8013414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801341c:	2b00      	cmp	r3, #0
 801341e:	f000 80e7 	beq.w	80135f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013426:	4a19      	ldr	r2, [pc, #100]	; (801348c <UART_SetConfig+0x930>)
 8013428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801342c:	461a      	mov	r2, r3
 801342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013430:	fbb3 f3f2 	udiv	r3, r3, r2
 8013434:	005a      	lsls	r2, r3, #1
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	085b      	lsrs	r3, r3, #1
 801343c:	441a      	add	r2, r3
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	fbb2 f3f3 	udiv	r3, r2, r3
 8013446:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	2b0f      	cmp	r3, #15
 801344c:	d916      	bls.n	801347c <UART_SetConfig+0x920>
 801344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013454:	d212      	bcs.n	801347c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013458:	b29b      	uxth	r3, r3
 801345a:	f023 030f 	bic.w	r3, r3, #15
 801345e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013462:	085b      	lsrs	r3, r3, #1
 8013464:	b29b      	uxth	r3, r3
 8013466:	f003 0307 	and.w	r3, r3, #7
 801346a:	b29a      	uxth	r2, r3
 801346c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801346e:	4313      	orrs	r3, r2
 8013470:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013478:	60da      	str	r2, [r3, #12]
 801347a:	e0b9      	b.n	80135f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801347c:	2301      	movs	r3, #1
 801347e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013482:	e0b5      	b.n	80135f0 <UART_SetConfig+0xa94>
 8013484:	03d09000 	.word	0x03d09000
 8013488:	003d0900 	.word	0x003d0900
 801348c:	0801583c 	.word	0x0801583c
 8013490:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013494:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013498:	2b20      	cmp	r3, #32
 801349a:	dc49      	bgt.n	8013530 <UART_SetConfig+0x9d4>
 801349c:	2b00      	cmp	r3, #0
 801349e:	db7c      	blt.n	801359a <UART_SetConfig+0xa3e>
 80134a0:	2b20      	cmp	r3, #32
 80134a2:	d87a      	bhi.n	801359a <UART_SetConfig+0xa3e>
 80134a4:	a201      	add	r2, pc, #4	; (adr r2, 80134ac <UART_SetConfig+0x950>)
 80134a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134aa:	bf00      	nop
 80134ac:	08013537 	.word	0x08013537
 80134b0:	0801353f 	.word	0x0801353f
 80134b4:	0801359b 	.word	0x0801359b
 80134b8:	0801359b 	.word	0x0801359b
 80134bc:	08013547 	.word	0x08013547
 80134c0:	0801359b 	.word	0x0801359b
 80134c4:	0801359b 	.word	0x0801359b
 80134c8:	0801359b 	.word	0x0801359b
 80134cc:	08013557 	.word	0x08013557
 80134d0:	0801359b 	.word	0x0801359b
 80134d4:	0801359b 	.word	0x0801359b
 80134d8:	0801359b 	.word	0x0801359b
 80134dc:	0801359b 	.word	0x0801359b
 80134e0:	0801359b 	.word	0x0801359b
 80134e4:	0801359b 	.word	0x0801359b
 80134e8:	0801359b 	.word	0x0801359b
 80134ec:	08013567 	.word	0x08013567
 80134f0:	0801359b 	.word	0x0801359b
 80134f4:	0801359b 	.word	0x0801359b
 80134f8:	0801359b 	.word	0x0801359b
 80134fc:	0801359b 	.word	0x0801359b
 8013500:	0801359b 	.word	0x0801359b
 8013504:	0801359b 	.word	0x0801359b
 8013508:	0801359b 	.word	0x0801359b
 801350c:	0801359b 	.word	0x0801359b
 8013510:	0801359b 	.word	0x0801359b
 8013514:	0801359b 	.word	0x0801359b
 8013518:	0801359b 	.word	0x0801359b
 801351c:	0801359b 	.word	0x0801359b
 8013520:	0801359b 	.word	0x0801359b
 8013524:	0801359b 	.word	0x0801359b
 8013528:	0801359b 	.word	0x0801359b
 801352c:	0801358d 	.word	0x0801358d
 8013530:	2b40      	cmp	r3, #64	; 0x40
 8013532:	d02e      	beq.n	8013592 <UART_SetConfig+0xa36>
 8013534:	e031      	b.n	801359a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013536:	f7fa f855 	bl	800d5e4 <HAL_RCC_GetPCLK1Freq>
 801353a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801353c:	e033      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801353e:	f7fa f867 	bl	800d610 <HAL_RCC_GetPCLK2Freq>
 8013542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013544:	e02f      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801354a:	4618      	mov	r0, r3
 801354c:	f7fc f816 	bl	800f57c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013554:	e027      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013556:	f107 0318 	add.w	r3, r7, #24
 801355a:	4618      	mov	r0, r3
 801355c:	f7fc f962 	bl	800f824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013564:	e01f      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013566:	4b2d      	ldr	r3, [pc, #180]	; (801361c <UART_SetConfig+0xac0>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f003 0320 	and.w	r3, r3, #32
 801356e:	2b00      	cmp	r3, #0
 8013570:	d009      	beq.n	8013586 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013572:	4b2a      	ldr	r3, [pc, #168]	; (801361c <UART_SetConfig+0xac0>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	08db      	lsrs	r3, r3, #3
 8013578:	f003 0303 	and.w	r3, r3, #3
 801357c:	4a28      	ldr	r2, [pc, #160]	; (8013620 <UART_SetConfig+0xac4>)
 801357e:	fa22 f303 	lsr.w	r3, r2, r3
 8013582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013584:	e00f      	b.n	80135a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013586:	4b26      	ldr	r3, [pc, #152]	; (8013620 <UART_SetConfig+0xac4>)
 8013588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801358a:	e00c      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801358c:	4b25      	ldr	r3, [pc, #148]	; (8013624 <UART_SetConfig+0xac8>)
 801358e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013590:	e009      	b.n	80135a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013598:	e005      	b.n	80135a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801359a:	2300      	movs	r3, #0
 801359c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801359e:	2301      	movs	r3, #1
 80135a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80135a4:	bf00      	nop
    }

    if (pclk != 0U)
 80135a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d021      	beq.n	80135f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b0:	4a1d      	ldr	r2, [pc, #116]	; (8013628 <UART_SetConfig+0xacc>)
 80135b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135b6:	461a      	mov	r2, r3
 80135b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	085b      	lsrs	r3, r3, #1
 80135c4:	441a      	add	r2, r3
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80135ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d2:	2b0f      	cmp	r3, #15
 80135d4:	d909      	bls.n	80135ea <UART_SetConfig+0xa8e>
 80135d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135dc:	d205      	bcs.n	80135ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	60da      	str	r2, [r3, #12]
 80135e8:	e002      	b.n	80135f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80135ea:	2301      	movs	r3, #1
 80135ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	2201      	movs	r2, #1
 80135f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	2201      	movs	r2, #1
 80135fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	2200      	movs	r2, #0
 8013604:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	2200      	movs	r2, #0
 801360a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801360c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013610:	4618      	mov	r0, r3
 8013612:	3748      	adds	r7, #72	; 0x48
 8013614:	46bd      	mov	sp, r7
 8013616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801361a:	bf00      	nop
 801361c:	58024400 	.word	0x58024400
 8013620:	03d09000 	.word	0x03d09000
 8013624:	003d0900 	.word	0x003d0900
 8013628:	0801583c 	.word	0x0801583c

0801362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013638:	f003 0301 	and.w	r3, r3, #1
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00a      	beq.n	8013656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	430a      	orrs	r2, r1
 8013654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801365a:	f003 0302 	and.w	r3, r3, #2
 801365e:	2b00      	cmp	r3, #0
 8013660:	d00a      	beq.n	8013678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	430a      	orrs	r2, r1
 8013676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801367c:	f003 0304 	and.w	r3, r3, #4
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00a      	beq.n	801369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	430a      	orrs	r2, r1
 8013698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801369e:	f003 0308 	and.w	r3, r3, #8
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00a      	beq.n	80136bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	430a      	orrs	r2, r1
 80136ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136c0:	f003 0310 	and.w	r3, r3, #16
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d00a      	beq.n	80136de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	430a      	orrs	r2, r1
 80136dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136e2:	f003 0320 	and.w	r3, r3, #32
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00a      	beq.n	8013700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	689b      	ldr	r3, [r3, #8]
 80136f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	430a      	orrs	r2, r1
 80136fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013708:	2b00      	cmp	r3, #0
 801370a:	d01a      	beq.n	8013742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	430a      	orrs	r2, r1
 8013720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801372a:	d10a      	bne.n	8013742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	685b      	ldr	r3, [r3, #4]
 8013732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	430a      	orrs	r2, r1
 8013740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00a      	beq.n	8013764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	430a      	orrs	r2, r1
 8013762:	605a      	str	r2, [r3, #4]
  }
}
 8013764:	bf00      	nop
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b098      	sub	sp, #96	; 0x60
 8013774:	af02      	add	r7, sp, #8
 8013776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2200      	movs	r2, #0
 801377c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013780:	f7f3 fb9a 	bl	8006eb8 <HAL_GetTick>
 8013784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f003 0308 	and.w	r3, r3, #8
 8013790:	2b08      	cmp	r3, #8
 8013792:	d12f      	bne.n	80137f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801379c:	2200      	movs	r2, #0
 801379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f000 f88e 	bl	80138c4 <UART_WaitOnFlagUntilTimeout>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d022      	beq.n	80137f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b6:	e853 3f00 	ldrex	r3, [r3]
 80137ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80137bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137c2:	653b      	str	r3, [r7, #80]	; 0x50
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	461a      	mov	r2, r3
 80137ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137cc:	647b      	str	r3, [r7, #68]	; 0x44
 80137ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80137d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137d4:	e841 2300 	strex	r3, r2, [r1]
 80137d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80137da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1e6      	bne.n	80137ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2220      	movs	r2, #32
 80137e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2200      	movs	r2, #0
 80137ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80137f0:	2303      	movs	r3, #3
 80137f2:	e063      	b.n	80138bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f003 0304 	and.w	r3, r3, #4
 80137fe:	2b04      	cmp	r3, #4
 8013800:	d149      	bne.n	8013896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801380a:	2200      	movs	r2, #0
 801380c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f857 	bl	80138c4 <UART_WaitOnFlagUntilTimeout>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d03c      	beq.n	8013896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013824:	e853 3f00 	ldrex	r3, [r3]
 8013828:	623b      	str	r3, [r7, #32]
   return(result);
 801382a:	6a3b      	ldr	r3, [r7, #32]
 801382c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	461a      	mov	r2, r3
 8013838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801383a:	633b      	str	r3, [r7, #48]	; 0x30
 801383c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013842:	e841 2300 	strex	r3, r2, [r1]
 8013846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1e6      	bne.n	801381c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3308      	adds	r3, #8
 8013854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	e853 3f00 	ldrex	r3, [r3]
 801385c:	60fb      	str	r3, [r7, #12]
   return(result);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f023 0301 	bic.w	r3, r3, #1
 8013864:	64bb      	str	r3, [r7, #72]	; 0x48
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	3308      	adds	r3, #8
 801386c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801386e:	61fa      	str	r2, [r7, #28]
 8013870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013872:	69b9      	ldr	r1, [r7, #24]
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	e841 2300 	strex	r3, r2, [r1]
 801387a:	617b      	str	r3, [r7, #20]
   return(result);
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1e5      	bne.n	801384e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2220      	movs	r2, #32
 8013886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2200      	movs	r2, #0
 801388e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013892:	2303      	movs	r3, #3
 8013894:	e012      	b.n	80138bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2220      	movs	r2, #32
 801389a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2220      	movs	r2, #32
 80138a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3758      	adds	r7, #88	; 0x58
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	603b      	str	r3, [r7, #0]
 80138d0:	4613      	mov	r3, r2
 80138d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138d4:	e049      	b.n	801396a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138dc:	d045      	beq.n	801396a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138de:	f7f3 faeb 	bl	8006eb8 <HAL_GetTick>
 80138e2:	4602      	mov	r2, r0
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	69ba      	ldr	r2, [r7, #24]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d302      	bcc.n	80138f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d101      	bne.n	80138f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80138f4:	2303      	movs	r3, #3
 80138f6:	e048      	b.n	801398a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f003 0304 	and.w	r3, r3, #4
 8013902:	2b00      	cmp	r3, #0
 8013904:	d031      	beq.n	801396a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	69db      	ldr	r3, [r3, #28]
 801390c:	f003 0308 	and.w	r3, r3, #8
 8013910:	2b08      	cmp	r3, #8
 8013912:	d110      	bne.n	8013936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2208      	movs	r2, #8
 801391a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f000 f921 	bl	8013b64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2208      	movs	r2, #8
 8013926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2200      	movs	r2, #0
 801392e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013932:	2301      	movs	r3, #1
 8013934:	e029      	b.n	801398a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	69db      	ldr	r3, [r3, #28]
 801393c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013944:	d111      	bne.n	801396a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801394e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	f000 f907 	bl	8013b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2220      	movs	r2, #32
 801395a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2200      	movs	r2, #0
 8013962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013966:	2303      	movs	r3, #3
 8013968:	e00f      	b.n	801398a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	69da      	ldr	r2, [r3, #28]
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	4013      	ands	r3, r2
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	429a      	cmp	r2, r3
 8013978:	bf0c      	ite	eq
 801397a:	2301      	moveq	r3, #1
 801397c:	2300      	movne	r3, #0
 801397e:	b2db      	uxtb	r3, r3
 8013980:	461a      	mov	r2, r3
 8013982:	79fb      	ldrb	r3, [r7, #7]
 8013984:	429a      	cmp	r2, r3
 8013986:	d0a6      	beq.n	80138d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013988:	2300      	movs	r3, #0
}
 801398a:	4618      	mov	r0, r3
 801398c:	3710      	adds	r7, #16
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
	...

08013994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b096      	sub	sp, #88	; 0x58
 8013998:	af00      	add	r7, sp, #0
 801399a:	60f8      	str	r0, [r7, #12]
 801399c:	60b9      	str	r1, [r7, #8]
 801399e:	4613      	mov	r3, r2
 80139a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	68ba      	ldr	r2, [r7, #8]
 80139a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	88fa      	ldrh	r2, [r7, #6]
 80139ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2200      	movs	r2, #0
 80139b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2222      	movs	r2, #34	; 0x22
 80139bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d02d      	beq.n	8013a26 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139d0:	4a40      	ldr	r2, [pc, #256]	; (8013ad4 <UART_Start_Receive_DMA+0x140>)
 80139d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139da:	4a3f      	ldr	r2, [pc, #252]	; (8013ad8 <UART_Start_Receive_DMA+0x144>)
 80139dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139e4:	4a3d      	ldr	r2, [pc, #244]	; (8013adc <UART_Start_Receive_DMA+0x148>)
 80139e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139ee:	2200      	movs	r2, #0
 80139f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	3324      	adds	r3, #36	; 0x24
 80139fe:	4619      	mov	r1, r3
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a04:	461a      	mov	r2, r3
 8013a06:	88fb      	ldrh	r3, [r7, #6]
 8013a08:	f7f5 fa58 	bl	8008ebc <HAL_DMA_Start_IT>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d009      	beq.n	8013a26 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2210      	movs	r2, #16
 8013a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2220      	movs	r2, #32
 8013a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013a22:	2301      	movs	r3, #1
 8013a24:	e051      	b.n	8013aca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	691b      	ldr	r3, [r3, #16]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d018      	beq.n	8013a60 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a36:	e853 3f00 	ldrex	r3, [r3]
 8013a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a42:	657b      	str	r3, [r7, #84]	; 0x54
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	461a      	mov	r2, r3
 8013a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a4e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a54:	e841 2300 	strex	r3, r2, [r1]
 8013a58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e6      	bne.n	8013a2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	3308      	adds	r3, #8
 8013a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	e853 3f00 	ldrex	r3, [r3]
 8013a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	f043 0301 	orr.w	r3, r3, #1
 8013a76:	653b      	str	r3, [r7, #80]	; 0x50
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	3308      	adds	r3, #8
 8013a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a80:	637a      	str	r2, [r7, #52]	; 0x34
 8013a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a88:	e841 2300 	strex	r3, r2, [r1]
 8013a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d1e5      	bne.n	8013a60 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	3308      	adds	r3, #8
 8013a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	e853 3f00 	ldrex	r3, [r3]
 8013aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	3308      	adds	r3, #8
 8013ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013ab4:	623a      	str	r2, [r7, #32]
 8013ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ab8:	69f9      	ldr	r1, [r7, #28]
 8013aba:	6a3a      	ldr	r2, [r7, #32]
 8013abc:	e841 2300 	strex	r3, r2, [r1]
 8013ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8013ac2:	69bb      	ldr	r3, [r7, #24]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1e5      	bne.n	8013a94 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013ac8:	2300      	movs	r3, #0
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3758      	adds	r7, #88	; 0x58
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	08013ce3 	.word	0x08013ce3
 8013ad8:	08013e0b 	.word	0x08013e0b
 8013adc:	08013e49 	.word	0x08013e49

08013ae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b08f      	sub	sp, #60	; 0x3c
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aee:	6a3b      	ldr	r3, [r7, #32]
 8013af0:	e853 3f00 	ldrex	r3, [r3]
 8013af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8013afc:	637b      	str	r3, [r7, #52]	; 0x34
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	461a      	mov	r2, r3
 8013b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b08:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b0e:	e841 2300 	strex	r3, r2, [r1]
 8013b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1e6      	bne.n	8013ae8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3308      	adds	r3, #8
 8013b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	e853 3f00 	ldrex	r3, [r3]
 8013b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013b30:	633b      	str	r3, [r7, #48]	; 0x30
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	3308      	adds	r3, #8
 8013b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b3a:	61ba      	str	r2, [r7, #24]
 8013b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b3e:	6979      	ldr	r1, [r7, #20]
 8013b40:	69ba      	ldr	r2, [r7, #24]
 8013b42:	e841 2300 	strex	r3, r2, [r1]
 8013b46:	613b      	str	r3, [r7, #16]
   return(result);
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1e5      	bne.n	8013b1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2220      	movs	r2, #32
 8013b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8013b56:	bf00      	nop
 8013b58:	373c      	adds	r7, #60	; 0x3c
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
	...

08013b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b095      	sub	sp, #84	; 0x54
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b74:	e853 3f00 	ldrex	r3, [r3]
 8013b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	461a      	mov	r2, r3
 8013b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b92:	e841 2300 	strex	r3, r2, [r1]
 8013b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1e6      	bne.n	8013b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3308      	adds	r3, #8
 8013ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba6:	6a3b      	ldr	r3, [r7, #32]
 8013ba8:	e853 3f00 	ldrex	r3, [r3]
 8013bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8013bae:	69fa      	ldr	r2, [r7, #28]
 8013bb0:	4b1e      	ldr	r3, [pc, #120]	; (8013c2c <UART_EndRxTransfer+0xc8>)
 8013bb2:	4013      	ands	r3, r2
 8013bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	3308      	adds	r3, #8
 8013bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc6:	e841 2300 	strex	r3, r2, [r1]
 8013bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1e5      	bne.n	8013b9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d118      	bne.n	8013c0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	e853 3f00 	ldrex	r3, [r3]
 8013be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	f023 0310 	bic.w	r3, r3, #16
 8013bee:	647b      	str	r3, [r7, #68]	; 0x44
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf8:	61bb      	str	r3, [r7, #24]
 8013bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bfc:	6979      	ldr	r1, [r7, #20]
 8013bfe:	69ba      	ldr	r2, [r7, #24]
 8013c00:	e841 2300 	strex	r3, r2, [r1]
 8013c04:	613b      	str	r3, [r7, #16]
   return(result);
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d1e6      	bne.n	8013bda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2220      	movs	r2, #32
 8013c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2200      	movs	r2, #0
 8013c18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013c20:	bf00      	nop
 8013c22:	3754      	adds	r7, #84	; 0x54
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	effffffe 	.word	0xeffffffe

08013c30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b090      	sub	sp, #64	; 0x40
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	69db      	ldr	r3, [r3, #28]
 8013c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c46:	d037      	beq.n	8013cb8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8013c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	3308      	adds	r3, #8
 8013c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5a:	e853 3f00 	ldrex	r3, [r3]
 8013c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8013c60:	6a3b      	ldr	r3, [r7, #32]
 8013c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	3308      	adds	r3, #8
 8013c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c70:	633a      	str	r2, [r7, #48]	; 0x30
 8013c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c78:	e841 2300 	strex	r3, r2, [r1]
 8013c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1e5      	bne.n	8013c50 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	e853 3f00 	ldrex	r3, [r3]
 8013c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c98:	637b      	str	r3, [r7, #52]	; 0x34
 8013c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca2:	61fb      	str	r3, [r7, #28]
 8013ca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca6:	69b9      	ldr	r1, [r7, #24]
 8013ca8:	69fa      	ldr	r2, [r7, #28]
 8013caa:	e841 2300 	strex	r3, r2, [r1]
 8013cae:	617b      	str	r3, [r7, #20]
   return(result);
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1e6      	bne.n	8013c84 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013cb6:	e002      	b.n	8013cbe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013cb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cba:	f7ef ff37 	bl	8003b2c <HAL_UART_TxCpltCallback>
}
 8013cbe:	bf00      	nop
 8013cc0:	3740      	adds	r7, #64	; 0x40
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b084      	sub	sp, #16
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	f7fe ff2d 	bl	8012b34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013cda:	bf00      	nop
 8013cdc:	3710      	adds	r7, #16
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b09c      	sub	sp, #112	; 0x70
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	69db      	ldr	r3, [r3, #28]
 8013cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cf8:	d071      	beq.n	8013dde <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d0a:	e853 3f00 	ldrex	r3, [r3]
 8013d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8013d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8013d22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013d28:	e841 2300 	strex	r3, r2, [r1]
 8013d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1e6      	bne.n	8013d02 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	3308      	adds	r3, #8
 8013d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d3e:	e853 3f00 	ldrex	r3, [r3]
 8013d42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d46:	f023 0301 	bic.w	r3, r3, #1
 8013d4a:	667b      	str	r3, [r7, #100]	; 0x64
 8013d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	3308      	adds	r3, #8
 8013d52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013d54:	647a      	str	r2, [r7, #68]	; 0x44
 8013d56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d5c:	e841 2300 	strex	r3, r2, [r1]
 8013d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d1e5      	bne.n	8013d34 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3308      	adds	r3, #8
 8013d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	e853 3f00 	ldrex	r3, [r3]
 8013d76:	623b      	str	r3, [r7, #32]
   return(result);
 8013d78:	6a3b      	ldr	r3, [r7, #32]
 8013d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8013d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	3308      	adds	r3, #8
 8013d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013d88:	633a      	str	r2, [r7, #48]	; 0x30
 8013d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d90:	e841 2300 	strex	r3, r2, [r1]
 8013d94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1e5      	bne.n	8013d68 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d9e:	2220      	movs	r2, #32
 8013da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d118      	bne.n	8013dde <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	e853 3f00 	ldrex	r3, [r3]
 8013db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f023 0310 	bic.w	r3, r3, #16
 8013dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013dca:	61fb      	str	r3, [r7, #28]
 8013dcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dce:	69b9      	ldr	r1, [r7, #24]
 8013dd0:	69fa      	ldr	r2, [r7, #28]
 8013dd2:	e841 2300 	strex	r3, r2, [r1]
 8013dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1e6      	bne.n	8013dac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013de0:	2200      	movs	r2, #0
 8013de2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d107      	bne.n	8013dfc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013df2:	4619      	mov	r1, r3
 8013df4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013df6:	f7ef fee1 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013dfa:	e002      	b.n	8013e02 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013dfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013dfe:	f7ef fead 	bl	8003b5c <HAL_UART_RxCpltCallback>
}
 8013e02:	bf00      	nop
 8013e04:	3770      	adds	r7, #112	; 0x70
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}

08013e0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013e0a:	b580      	push	{r7, lr}
 8013e0c:	b084      	sub	sp, #16
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d109      	bne.n	8013e3a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013e2c:	085b      	lsrs	r3, r3, #1
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	4619      	mov	r1, r3
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f7ef fec2 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013e38:	e002      	b.n	8013e40 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f7fe fe84 	bl	8012b48 <HAL_UART_RxHalfCpltCallback>
}
 8013e40:	bf00      	nop
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b086      	sub	sp, #24
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	689b      	ldr	r3, [r3, #8]
 8013e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e70:	2b80      	cmp	r3, #128	; 0x80
 8013e72:	d109      	bne.n	8013e88 <UART_DMAError+0x40>
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	2b21      	cmp	r3, #33	; 0x21
 8013e78:	d106      	bne.n	8013e88 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8013e82:	6978      	ldr	r0, [r7, #20]
 8013e84:	f7ff fe2c 	bl	8013ae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e92:	2b40      	cmp	r3, #64	; 0x40
 8013e94:	d109      	bne.n	8013eaa <UART_DMAError+0x62>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2b22      	cmp	r3, #34	; 0x22
 8013e9a:	d106      	bne.n	8013eaa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8013ea4:	6978      	ldr	r0, [r7, #20]
 8013ea6:	f7ff fe5d 	bl	8013b64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013eb0:	f043 0210 	orr.w	r2, r3, #16
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013eba:	6978      	ldr	r0, [r7, #20]
 8013ebc:	f7ef ffb0 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013ec0:	bf00      	nop
 8013ec2:	3718      	adds	r7, #24
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013ee6:	68f8      	ldr	r0, [r7, #12]
 8013ee8:	f7ef ff9a 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013eec:	bf00      	nop
 8013eee:	3710      	adds	r7, #16
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b088      	sub	sp, #32
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	e853 3f00 	ldrex	r3, [r3]
 8013f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f10:	61fb      	str	r3, [r7, #28]
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	61bb      	str	r3, [r7, #24]
 8013f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f1e:	6979      	ldr	r1, [r7, #20]
 8013f20:	69ba      	ldr	r2, [r7, #24]
 8013f22:	e841 2300 	strex	r3, r2, [r1]
 8013f26:	613b      	str	r3, [r7, #16]
   return(result);
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d1e6      	bne.n	8013efc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2220      	movs	r2, #32
 8013f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7ef fdf5 	bl	8003b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f42:	bf00      	nop
 8013f44:	3720      	adds	r7, #32
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013f4a:	b480      	push	{r7}
 8013f4c:	b083      	sub	sp, #12
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013f52:	bf00      	nop
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013f5e:	b480      	push	{r7}
 8013f60:	b083      	sub	sp, #12
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013f66:	bf00      	nop
 8013f68:	370c      	adds	r7, #12
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr

08013f72 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013f72:	b480      	push	{r7}
 8013f74:	b083      	sub	sp, #12
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013f7a:	bf00      	nop
 8013f7c:	370c      	adds	r7, #12
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr

08013f86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013f86:	b480      	push	{r7}
 8013f88:	b085      	sub	sp, #20
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d101      	bne.n	8013f9c <HAL_UARTEx_DisableFifoMode+0x16>
 8013f98:	2302      	movs	r3, #2
 8013f9a:	e027      	b.n	8013fec <HAL_UARTEx_DisableFifoMode+0x66>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2224      	movs	r2, #36	; 0x24
 8013fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f022 0201 	bic.w	r2, r2, #1
 8013fc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013fca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2220      	movs	r2, #32
 8013fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013fea:	2300      	movs	r3, #0
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3714      	adds	r7, #20
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr

08013ff8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014008:	2b01      	cmp	r3, #1
 801400a:	d101      	bne.n	8014010 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801400c:	2302      	movs	r3, #2
 801400e:	e02d      	b.n	801406c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2201      	movs	r2, #1
 8014014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2224      	movs	r2, #36	; 0x24
 801401c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f022 0201 	bic.w	r2, r2, #1
 8014036:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	689b      	ldr	r3, [r3, #8]
 801403e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	430a      	orrs	r2, r1
 801404a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f000 f8a3 	bl	8014198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	68fa      	ldr	r2, [r7, #12]
 8014058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2220      	movs	r2, #32
 801405e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2200      	movs	r2, #0
 8014066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3710      	adds	r7, #16
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014084:	2b01      	cmp	r3, #1
 8014086:	d101      	bne.n	801408c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014088:	2302      	movs	r3, #2
 801408a:	e02d      	b.n	80140e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2224      	movs	r2, #36	; 0x24
 8014098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f022 0201 	bic.w	r2, r2, #1
 80140b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	683a      	ldr	r2, [r7, #0]
 80140c4:	430a      	orrs	r2, r1
 80140c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f000 f865 	bl	8014198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	68fa      	ldr	r2, [r7, #12]
 80140d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2220      	movs	r2, #32
 80140da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2200      	movs	r2, #0
 80140e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80140e6:	2300      	movs	r3, #0
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3710      	adds	r7, #16
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b08c      	sub	sp, #48	; 0x30
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	4613      	mov	r3, r2
 80140fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014104:	2b20      	cmp	r3, #32
 8014106:	d142      	bne.n	801418e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d002      	beq.n	8014114 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801410e:	88fb      	ldrh	r3, [r7, #6]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d101      	bne.n	8014118 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8014114:	2301      	movs	r3, #1
 8014116:	e03b      	b.n	8014190 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2201      	movs	r2, #1
 801411c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2200      	movs	r2, #0
 8014122:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8014124:	88fb      	ldrh	r3, [r7, #6]
 8014126:	461a      	mov	r2, r3
 8014128:	68b9      	ldr	r1, [r7, #8]
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f7ff fc32 	bl	8013994 <UART_Start_Receive_DMA>
 8014130:	4603      	mov	r3, r0
 8014132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8014136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801413a:	2b00      	cmp	r3, #0
 801413c:	d124      	bne.n	8014188 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014142:	2b01      	cmp	r3, #1
 8014144:	d11d      	bne.n	8014182 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2210      	movs	r2, #16
 801414c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	e853 3f00 	ldrex	r3, [r3]
 801415a:	617b      	str	r3, [r7, #20]
   return(result);
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	f043 0310 	orr.w	r3, r3, #16
 8014162:	62bb      	str	r3, [r7, #40]	; 0x28
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	461a      	mov	r2, r3
 801416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416c:	627b      	str	r3, [r7, #36]	; 0x24
 801416e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014170:	6a39      	ldr	r1, [r7, #32]
 8014172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014174:	e841 2300 	strex	r3, r2, [r1]
 8014178:	61fb      	str	r3, [r7, #28]
   return(result);
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d1e6      	bne.n	801414e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014180:	e002      	b.n	8014188 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8014188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801418c:	e000      	b.n	8014190 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801418e:	2302      	movs	r3, #2
  }
}
 8014190:	4618      	mov	r0, r3
 8014192:	3730      	adds	r7, #48	; 0x30
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014198:	b480      	push	{r7}
 801419a:	b085      	sub	sp, #20
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d108      	bne.n	80141ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2201      	movs	r2, #1
 80141ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2201      	movs	r2, #1
 80141b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80141b8:	e031      	b.n	801421e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80141ba:	2310      	movs	r3, #16
 80141bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80141be:	2310      	movs	r3, #16
 80141c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	0e5b      	lsrs	r3, r3, #25
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	f003 0307 	and.w	r3, r3, #7
 80141d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	689b      	ldr	r3, [r3, #8]
 80141d8:	0f5b      	lsrs	r3, r3, #29
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	f003 0307 	and.w	r3, r3, #7
 80141e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80141e2:	7bbb      	ldrb	r3, [r7, #14]
 80141e4:	7b3a      	ldrb	r2, [r7, #12]
 80141e6:	4911      	ldr	r1, [pc, #68]	; (801422c <UARTEx_SetNbDataToProcess+0x94>)
 80141e8:	5c8a      	ldrb	r2, [r1, r2]
 80141ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80141ee:	7b3a      	ldrb	r2, [r7, #12]
 80141f0:	490f      	ldr	r1, [pc, #60]	; (8014230 <UARTEx_SetNbDataToProcess+0x98>)
 80141f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80141f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014200:	7bfb      	ldrb	r3, [r7, #15]
 8014202:	7b7a      	ldrb	r2, [r7, #13]
 8014204:	4909      	ldr	r1, [pc, #36]	; (801422c <UARTEx_SetNbDataToProcess+0x94>)
 8014206:	5c8a      	ldrb	r2, [r1, r2]
 8014208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801420c:	7b7a      	ldrb	r2, [r7, #13]
 801420e:	4908      	ldr	r1, [pc, #32]	; (8014230 <UARTEx_SetNbDataToProcess+0x98>)
 8014210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014212:	fb93 f3f2 	sdiv	r3, r3, r2
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801421e:	bf00      	nop
 8014220:	3714      	adds	r7, #20
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	08015854 	.word	0x08015854
 8014230:	0801585c 	.word	0x0801585c

08014234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014234:	b084      	sub	sp, #16
 8014236:	b580      	push	{r7, lr}
 8014238:	b084      	sub	sp, #16
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
 801423e:	f107 001c 	add.w	r0, r7, #28
 8014242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014248:	2b01      	cmp	r3, #1
 801424a:	d120      	bne.n	801428e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	68da      	ldr	r2, [r3, #12]
 801425c:	4b2a      	ldr	r3, [pc, #168]	; (8014308 <USB_CoreInit+0xd4>)
 801425e:	4013      	ands	r3, r2
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014272:	2b01      	cmp	r3, #1
 8014274:	d105      	bne.n	8014282 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 faac 	bl	80147e0 <USB_CoreReset>
 8014288:	4603      	mov	r3, r0
 801428a:	73fb      	strb	r3, [r7, #15]
 801428c:	e01a      	b.n	80142c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 faa0 	bl	80147e0 <USB_CoreReset>
 80142a0:	4603      	mov	r3, r0
 80142a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80142a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d106      	bne.n	80142b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	639a      	str	r2, [r3, #56]	; 0x38
 80142b6:	e005      	b.n	80142c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80142c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d116      	bne.n	80142f8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80142d8:	4b0c      	ldr	r3, [pc, #48]	; (801430c <USB_CoreInit+0xd8>)
 80142da:	4313      	orrs	r3, r2
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	f043 0206 	orr.w	r2, r3, #6
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	f043 0220 	orr.w	r2, r3, #32
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80142f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014304:	b004      	add	sp, #16
 8014306:	4770      	bx	lr
 8014308:	ffbdffbf 	.word	0xffbdffbf
 801430c:	03ee0000 	.word	0x03ee0000

08014310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014310:	b480      	push	{r7}
 8014312:	b083      	sub	sp, #12
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	f023 0201 	bic.w	r2, r3, #1
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	370c      	adds	r7, #12
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr

08014332 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014332:	b580      	push	{r7, lr}
 8014334:	b084      	sub	sp, #16
 8014336:	af00      	add	r7, sp, #0
 8014338:	6078      	str	r0, [r7, #4]
 801433a:	460b      	mov	r3, r1
 801433c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801433e:	2300      	movs	r3, #0
 8014340:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801434e:	78fb      	ldrb	r3, [r7, #3]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d115      	bne.n	8014380 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014360:	2001      	movs	r0, #1
 8014362:	f7f2 fdb5 	bl	8006ed0 <HAL_Delay>
      ms++;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	3301      	adds	r3, #1
 801436a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fa29 	bl	80147c4 <USB_GetMode>
 8014372:	4603      	mov	r3, r0
 8014374:	2b01      	cmp	r3, #1
 8014376:	d01e      	beq.n	80143b6 <USB_SetCurrentMode+0x84>
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2b31      	cmp	r3, #49	; 0x31
 801437c:	d9f0      	bls.n	8014360 <USB_SetCurrentMode+0x2e>
 801437e:	e01a      	b.n	80143b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014380:	78fb      	ldrb	r3, [r7, #3]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d115      	bne.n	80143b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014392:	2001      	movs	r0, #1
 8014394:	f7f2 fd9c 	bl	8006ed0 <HAL_Delay>
      ms++;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	3301      	adds	r3, #1
 801439c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fa10 	bl	80147c4 <USB_GetMode>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d005      	beq.n	80143b6 <USB_SetCurrentMode+0x84>
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	2b31      	cmp	r3, #49	; 0x31
 80143ae:	d9f0      	bls.n	8014392 <USB_SetCurrentMode+0x60>
 80143b0:	e001      	b.n	80143b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80143b2:	2301      	movs	r3, #1
 80143b4:	e005      	b.n	80143c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2b32      	cmp	r3, #50	; 0x32
 80143ba:	d101      	bne.n	80143c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80143bc:	2301      	movs	r3, #1
 80143be:	e000      	b.n	80143c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80143c0:	2300      	movs	r3, #0
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3710      	adds	r7, #16
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
	...

080143cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80143cc:	b084      	sub	sp, #16
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b086      	sub	sp, #24
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
 80143d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80143da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80143de:	2300      	movs	r3, #0
 80143e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80143e6:	2300      	movs	r3, #0
 80143e8:	613b      	str	r3, [r7, #16]
 80143ea:	e009      	b.n	8014400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	3340      	adds	r3, #64	; 0x40
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	4413      	add	r3, r2
 80143f6:	2200      	movs	r2, #0
 80143f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	3301      	adds	r3, #1
 80143fe:	613b      	str	r3, [r7, #16]
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	2b0e      	cmp	r3, #14
 8014404:	d9f2      	bls.n	80143ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014408:	2b00      	cmp	r3, #0
 801440a:	d11c      	bne.n	8014446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801441a:	f043 0302 	orr.w	r3, r3, #2
 801441e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	601a      	str	r2, [r3, #0]
 8014444:	e005      	b.n	8014452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801444a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014458:	461a      	mov	r2, r3
 801445a:	2300      	movs	r3, #0
 801445c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014464:	4619      	mov	r1, r3
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801446c:	461a      	mov	r2, r3
 801446e:	680b      	ldr	r3, [r1, #0]
 8014470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014474:	2b01      	cmp	r3, #1
 8014476:	d10c      	bne.n	8014492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447a:	2b00      	cmp	r3, #0
 801447c:	d104      	bne.n	8014488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801447e:	2100      	movs	r1, #0
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 f965 	bl	8014750 <USB_SetDevSpeed>
 8014486:	e008      	b.n	801449a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014488:	2101      	movs	r1, #1
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f960 	bl	8014750 <USB_SetDevSpeed>
 8014490:	e003      	b.n	801449a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014492:	2103      	movs	r1, #3
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 f95b 	bl	8014750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801449a:	2110      	movs	r1, #16
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f000 f8f3 	bl	8014688 <USB_FlushTxFifo>
 80144a2:	4603      	mov	r3, r0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d001      	beq.n	80144ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80144a8:	2301      	movs	r3, #1
 80144aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 f91f 	bl	80146f0 <USB_FlushRxFifo>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d001      	beq.n	80144bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80144b8:	2301      	movs	r3, #1
 80144ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144c2:	461a      	mov	r2, r3
 80144c4:	2300      	movs	r3, #0
 80144c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ce:	461a      	mov	r2, r3
 80144d0:	2300      	movs	r3, #0
 80144d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144da:	461a      	mov	r2, r3
 80144dc:	2300      	movs	r3, #0
 80144de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144e0:	2300      	movs	r3, #0
 80144e2:	613b      	str	r3, [r7, #16]
 80144e4:	e043      	b.n	801456e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	015a      	lsls	r2, r3, #5
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	4413      	add	r3, r2
 80144ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80144f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80144fc:	d118      	bne.n	8014530 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d10a      	bne.n	801451a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	015a      	lsls	r2, r3, #5
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	4413      	add	r3, r2
 801450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014510:	461a      	mov	r2, r3
 8014512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014516:	6013      	str	r3, [r2, #0]
 8014518:	e013      	b.n	8014542 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	015a      	lsls	r2, r3, #5
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	4413      	add	r3, r2
 8014522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014526:	461a      	mov	r2, r3
 8014528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801452c:	6013      	str	r3, [r2, #0]
 801452e:	e008      	b.n	8014542 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	015a      	lsls	r2, r3, #5
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	4413      	add	r3, r2
 8014538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801453c:	461a      	mov	r2, r3
 801453e:	2300      	movs	r3, #0
 8014540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	015a      	lsls	r2, r3, #5
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	4413      	add	r3, r2
 801454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801454e:	461a      	mov	r2, r3
 8014550:	2300      	movs	r3, #0
 8014552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	015a      	lsls	r2, r3, #5
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	4413      	add	r3, r2
 801455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014560:	461a      	mov	r2, r3
 8014562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	3301      	adds	r3, #1
 801456c:	613b      	str	r3, [r7, #16]
 801456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014570:	693a      	ldr	r2, [r7, #16]
 8014572:	429a      	cmp	r2, r3
 8014574:	d3b7      	bcc.n	80144e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014576:	2300      	movs	r3, #0
 8014578:	613b      	str	r3, [r7, #16]
 801457a:	e043      	b.n	8014604 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	015a      	lsls	r2, r3, #5
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4413      	add	r3, r2
 8014584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014592:	d118      	bne.n	80145c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d10a      	bne.n	80145b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	015a      	lsls	r2, r3, #5
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	4413      	add	r3, r2
 80145a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145a6:	461a      	mov	r2, r3
 80145a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80145ac:	6013      	str	r3, [r2, #0]
 80145ae:	e013      	b.n	80145d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	015a      	lsls	r2, r3, #5
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	4413      	add	r3, r2
 80145b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145bc:	461a      	mov	r2, r3
 80145be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80145c2:	6013      	str	r3, [r2, #0]
 80145c4:	e008      	b.n	80145d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	015a      	lsls	r2, r3, #5
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	4413      	add	r3, r2
 80145ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d2:	461a      	mov	r2, r3
 80145d4:	2300      	movs	r3, #0
 80145d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	015a      	lsls	r2, r3, #5
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	4413      	add	r3, r2
 80145e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145e4:	461a      	mov	r2, r3
 80145e6:	2300      	movs	r3, #0
 80145e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	015a      	lsls	r2, r3, #5
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	4413      	add	r3, r2
 80145f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f6:	461a      	mov	r2, r3
 80145f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80145fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	3301      	adds	r3, #1
 8014602:	613b      	str	r3, [r7, #16]
 8014604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014606:	693a      	ldr	r2, [r7, #16]
 8014608:	429a      	cmp	r2, r3
 801460a:	d3b7      	bcc.n	801457c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	68fa      	ldr	r2, [r7, #12]
 8014616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801461a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801461e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801462c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014630:	2b00      	cmp	r3, #0
 8014632:	d105      	bne.n	8014640 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	699b      	ldr	r3, [r3, #24]
 8014638:	f043 0210 	orr.w	r2, r3, #16
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	699a      	ldr	r2, [r3, #24]
 8014644:	4b0e      	ldr	r3, [pc, #56]	; (8014680 <USB_DevInit+0x2b4>)
 8014646:	4313      	orrs	r3, r2
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801464e:	2b00      	cmp	r3, #0
 8014650:	d005      	beq.n	801465e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	f043 0208 	orr.w	r2, r3, #8
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014660:	2b01      	cmp	r3, #1
 8014662:	d105      	bne.n	8014670 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	699a      	ldr	r2, [r3, #24]
 8014668:	4b06      	ldr	r3, [pc, #24]	; (8014684 <USB_DevInit+0x2b8>)
 801466a:	4313      	orrs	r3, r2
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014670:	7dfb      	ldrb	r3, [r7, #23]
}
 8014672:	4618      	mov	r0, r3
 8014674:	3718      	adds	r7, #24
 8014676:	46bd      	mov	sp, r7
 8014678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801467c:	b004      	add	sp, #16
 801467e:	4770      	bx	lr
 8014680:	803c3800 	.word	0x803c3800
 8014684:	40000004 	.word	0x40000004

08014688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014688:	b480      	push	{r7}
 801468a:	b085      	sub	sp, #20
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014692:	2300      	movs	r3, #0
 8014694:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	3301      	adds	r3, #1
 801469a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	4a13      	ldr	r2, [pc, #76]	; (80146ec <USB_FlushTxFifo+0x64>)
 80146a0:	4293      	cmp	r3, r2
 80146a2:	d901      	bls.n	80146a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80146a4:	2303      	movs	r3, #3
 80146a6:	e01b      	b.n	80146e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	691b      	ldr	r3, [r3, #16]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	daf2      	bge.n	8014696 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80146b0:	2300      	movs	r3, #0
 80146b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	019b      	lsls	r3, r3, #6
 80146b8:	f043 0220 	orr.w	r2, r3, #32
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	3301      	adds	r3, #1
 80146c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	4a08      	ldr	r2, [pc, #32]	; (80146ec <USB_FlushTxFifo+0x64>)
 80146ca:	4293      	cmp	r3, r2
 80146cc:	d901      	bls.n	80146d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80146ce:	2303      	movs	r3, #3
 80146d0:	e006      	b.n	80146e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	f003 0320 	and.w	r3, r3, #32
 80146da:	2b20      	cmp	r3, #32
 80146dc:	d0f0      	beq.n	80146c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80146de:	2300      	movs	r3, #0
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3714      	adds	r7, #20
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr
 80146ec:	00030d40 	.word	0x00030d40

080146f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146f8:	2300      	movs	r3, #0
 80146fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	3301      	adds	r3, #1
 8014700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	4a11      	ldr	r2, [pc, #68]	; (801474c <USB_FlushRxFifo+0x5c>)
 8014706:	4293      	cmp	r3, r2
 8014708:	d901      	bls.n	801470e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801470a:	2303      	movs	r3, #3
 801470c:	e018      	b.n	8014740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	2b00      	cmp	r3, #0
 8014714:	daf2      	bge.n	80146fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014716:	2300      	movs	r3, #0
 8014718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2210      	movs	r2, #16
 801471e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	3301      	adds	r3, #1
 8014724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	4a08      	ldr	r2, [pc, #32]	; (801474c <USB_FlushRxFifo+0x5c>)
 801472a:	4293      	cmp	r3, r2
 801472c:	d901      	bls.n	8014732 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801472e:	2303      	movs	r3, #3
 8014730:	e006      	b.n	8014740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	f003 0310 	and.w	r3, r3, #16
 801473a:	2b10      	cmp	r3, #16
 801473c:	d0f0      	beq.n	8014720 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801473e:	2300      	movs	r3, #0
}
 8014740:	4618      	mov	r0, r3
 8014742:	3714      	adds	r7, #20
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr
 801474c:	00030d40 	.word	0x00030d40

08014750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014750:	b480      	push	{r7}
 8014752:	b085      	sub	sp, #20
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	460b      	mov	r3, r1
 801475a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	78fb      	ldrb	r3, [r7, #3]
 801476a:	68f9      	ldr	r1, [r7, #12]
 801476c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014770:	4313      	orrs	r3, r2
 8014772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014774:	2300      	movs	r3, #0
}
 8014776:	4618      	mov	r0, r3
 8014778:	3714      	adds	r7, #20
 801477a:	46bd      	mov	sp, r7
 801477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014780:	4770      	bx	lr

08014782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014782:	b480      	push	{r7}
 8014784:	b085      	sub	sp, #20
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68fa      	ldr	r2, [r7, #12]
 8014798:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801479c:	f023 0303 	bic.w	r3, r3, #3
 80147a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80147b0:	f043 0302 	orr.w	r3, r3, #2
 80147b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80147b6:	2300      	movs	r3, #0
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3714      	adds	r7, #20
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr

080147c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	695b      	ldr	r3, [r3, #20]
 80147d0:	f003 0301 	and.w	r3, r3, #1
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	370c      	adds	r7, #12
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr

080147e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b085      	sub	sp, #20
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80147e8:	2300      	movs	r3, #0
 80147ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	3301      	adds	r3, #1
 80147f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	4a13      	ldr	r2, [pc, #76]	; (8014844 <USB_CoreReset+0x64>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d901      	bls.n	80147fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80147fa:	2303      	movs	r3, #3
 80147fc:	e01b      	b.n	8014836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	2b00      	cmp	r3, #0
 8014804:	daf2      	bge.n	80147ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014806:	2300      	movs	r3, #0
 8014808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	691b      	ldr	r3, [r3, #16]
 801480e:	f043 0201 	orr.w	r2, r3, #1
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	3301      	adds	r3, #1
 801481a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	4a09      	ldr	r2, [pc, #36]	; (8014844 <USB_CoreReset+0x64>)
 8014820:	4293      	cmp	r3, r2
 8014822:	d901      	bls.n	8014828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014824:	2303      	movs	r3, #3
 8014826:	e006      	b.n	8014836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	691b      	ldr	r3, [r3, #16]
 801482c:	f003 0301 	and.w	r3, r3, #1
 8014830:	2b01      	cmp	r3, #1
 8014832:	d0f0      	beq.n	8014816 <USB_CoreReset+0x36>

  return HAL_OK;
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	3714      	adds	r7, #20
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
 8014842:	bf00      	nop
 8014844:	00030d40 	.word	0x00030d40

08014848 <_Znaj>:
 8014848:	f000 b800 	b.w	801484c <_Znwj>

0801484c <_Znwj>:
 801484c:	2801      	cmp	r0, #1
 801484e:	bf38      	it	cc
 8014850:	2001      	movcc	r0, #1
 8014852:	b510      	push	{r4, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	4620      	mov	r0, r4
 8014858:	f000 f81a 	bl	8014890 <malloc>
 801485c:	b100      	cbz	r0, 8014860 <_Znwj+0x14>
 801485e:	bd10      	pop	{r4, pc}
 8014860:	f000 f806 	bl	8014870 <_ZSt15get_new_handlerv>
 8014864:	b908      	cbnz	r0, 801486a <_Znwj+0x1e>
 8014866:	f000 f80b 	bl	8014880 <abort>
 801486a:	4780      	blx	r0
 801486c:	e7f3      	b.n	8014856 <_Znwj+0xa>
	...

08014870 <_ZSt15get_new_handlerv>:
 8014870:	4b02      	ldr	r3, [pc, #8]	; (801487c <_ZSt15get_new_handlerv+0xc>)
 8014872:	6818      	ldr	r0, [r3, #0]
 8014874:	f3bf 8f5b 	dmb	ish
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	24002b00 	.word	0x24002b00

08014880 <abort>:
 8014880:	b508      	push	{r3, lr}
 8014882:	2006      	movs	r0, #6
 8014884:	f000 f940 	bl	8014b08 <raise>
 8014888:	2001      	movs	r0, #1
 801488a:	f7f1 feb3 	bl	80065f4 <_exit>
	...

08014890 <malloc>:
 8014890:	4b02      	ldr	r3, [pc, #8]	; (801489c <malloc+0xc>)
 8014892:	4601      	mov	r1, r0
 8014894:	6818      	ldr	r0, [r3, #0]
 8014896:	f000 b823 	b.w	80148e0 <_malloc_r>
 801489a:	bf00      	nop
 801489c:	2400009c 	.word	0x2400009c

080148a0 <sbrk_aligned>:
 80148a0:	b570      	push	{r4, r5, r6, lr}
 80148a2:	4e0e      	ldr	r6, [pc, #56]	; (80148dc <sbrk_aligned+0x3c>)
 80148a4:	460c      	mov	r4, r1
 80148a6:	6831      	ldr	r1, [r6, #0]
 80148a8:	4605      	mov	r5, r0
 80148aa:	b911      	cbnz	r1, 80148b2 <sbrk_aligned+0x12>
 80148ac:	f000 f948 	bl	8014b40 <_sbrk_r>
 80148b0:	6030      	str	r0, [r6, #0]
 80148b2:	4621      	mov	r1, r4
 80148b4:	4628      	mov	r0, r5
 80148b6:	f000 f943 	bl	8014b40 <_sbrk_r>
 80148ba:	1c43      	adds	r3, r0, #1
 80148bc:	d00a      	beq.n	80148d4 <sbrk_aligned+0x34>
 80148be:	1cc4      	adds	r4, r0, #3
 80148c0:	f024 0403 	bic.w	r4, r4, #3
 80148c4:	42a0      	cmp	r0, r4
 80148c6:	d007      	beq.n	80148d8 <sbrk_aligned+0x38>
 80148c8:	1a21      	subs	r1, r4, r0
 80148ca:	4628      	mov	r0, r5
 80148cc:	f000 f938 	bl	8014b40 <_sbrk_r>
 80148d0:	3001      	adds	r0, #1
 80148d2:	d101      	bne.n	80148d8 <sbrk_aligned+0x38>
 80148d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80148d8:	4620      	mov	r0, r4
 80148da:	bd70      	pop	{r4, r5, r6, pc}
 80148dc:	24002b08 	.word	0x24002b08

080148e0 <_malloc_r>:
 80148e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148e4:	1ccd      	adds	r5, r1, #3
 80148e6:	f025 0503 	bic.w	r5, r5, #3
 80148ea:	3508      	adds	r5, #8
 80148ec:	2d0c      	cmp	r5, #12
 80148ee:	bf38      	it	cc
 80148f0:	250c      	movcc	r5, #12
 80148f2:	2d00      	cmp	r5, #0
 80148f4:	4607      	mov	r7, r0
 80148f6:	db01      	blt.n	80148fc <_malloc_r+0x1c>
 80148f8:	42a9      	cmp	r1, r5
 80148fa:	d905      	bls.n	8014908 <_malloc_r+0x28>
 80148fc:	230c      	movs	r3, #12
 80148fe:	603b      	str	r3, [r7, #0]
 8014900:	2600      	movs	r6, #0
 8014902:	4630      	mov	r0, r6
 8014904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014908:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80149dc <_malloc_r+0xfc>
 801490c:	f000 f868 	bl	80149e0 <__malloc_lock>
 8014910:	f8d8 3000 	ldr.w	r3, [r8]
 8014914:	461c      	mov	r4, r3
 8014916:	bb5c      	cbnz	r4, 8014970 <_malloc_r+0x90>
 8014918:	4629      	mov	r1, r5
 801491a:	4638      	mov	r0, r7
 801491c:	f7ff ffc0 	bl	80148a0 <sbrk_aligned>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	4604      	mov	r4, r0
 8014924:	d155      	bne.n	80149d2 <_malloc_r+0xf2>
 8014926:	f8d8 4000 	ldr.w	r4, [r8]
 801492a:	4626      	mov	r6, r4
 801492c:	2e00      	cmp	r6, #0
 801492e:	d145      	bne.n	80149bc <_malloc_r+0xdc>
 8014930:	2c00      	cmp	r4, #0
 8014932:	d048      	beq.n	80149c6 <_malloc_r+0xe6>
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	4631      	mov	r1, r6
 8014938:	4638      	mov	r0, r7
 801493a:	eb04 0903 	add.w	r9, r4, r3
 801493e:	f000 f8ff 	bl	8014b40 <_sbrk_r>
 8014942:	4581      	cmp	r9, r0
 8014944:	d13f      	bne.n	80149c6 <_malloc_r+0xe6>
 8014946:	6821      	ldr	r1, [r4, #0]
 8014948:	1a6d      	subs	r5, r5, r1
 801494a:	4629      	mov	r1, r5
 801494c:	4638      	mov	r0, r7
 801494e:	f7ff ffa7 	bl	80148a0 <sbrk_aligned>
 8014952:	3001      	adds	r0, #1
 8014954:	d037      	beq.n	80149c6 <_malloc_r+0xe6>
 8014956:	6823      	ldr	r3, [r4, #0]
 8014958:	442b      	add	r3, r5
 801495a:	6023      	str	r3, [r4, #0]
 801495c:	f8d8 3000 	ldr.w	r3, [r8]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d038      	beq.n	80149d6 <_malloc_r+0xf6>
 8014964:	685a      	ldr	r2, [r3, #4]
 8014966:	42a2      	cmp	r2, r4
 8014968:	d12b      	bne.n	80149c2 <_malloc_r+0xe2>
 801496a:	2200      	movs	r2, #0
 801496c:	605a      	str	r2, [r3, #4]
 801496e:	e00f      	b.n	8014990 <_malloc_r+0xb0>
 8014970:	6822      	ldr	r2, [r4, #0]
 8014972:	1b52      	subs	r2, r2, r5
 8014974:	d41f      	bmi.n	80149b6 <_malloc_r+0xd6>
 8014976:	2a0b      	cmp	r2, #11
 8014978:	d917      	bls.n	80149aa <_malloc_r+0xca>
 801497a:	1961      	adds	r1, r4, r5
 801497c:	42a3      	cmp	r3, r4
 801497e:	6025      	str	r5, [r4, #0]
 8014980:	bf18      	it	ne
 8014982:	6059      	strne	r1, [r3, #4]
 8014984:	6863      	ldr	r3, [r4, #4]
 8014986:	bf08      	it	eq
 8014988:	f8c8 1000 	streq.w	r1, [r8]
 801498c:	5162      	str	r2, [r4, r5]
 801498e:	604b      	str	r3, [r1, #4]
 8014990:	4638      	mov	r0, r7
 8014992:	f104 060b 	add.w	r6, r4, #11
 8014996:	f000 f829 	bl	80149ec <__malloc_unlock>
 801499a:	f026 0607 	bic.w	r6, r6, #7
 801499e:	1d23      	adds	r3, r4, #4
 80149a0:	1af2      	subs	r2, r6, r3
 80149a2:	d0ae      	beq.n	8014902 <_malloc_r+0x22>
 80149a4:	1b9b      	subs	r3, r3, r6
 80149a6:	50a3      	str	r3, [r4, r2]
 80149a8:	e7ab      	b.n	8014902 <_malloc_r+0x22>
 80149aa:	42a3      	cmp	r3, r4
 80149ac:	6862      	ldr	r2, [r4, #4]
 80149ae:	d1dd      	bne.n	801496c <_malloc_r+0x8c>
 80149b0:	f8c8 2000 	str.w	r2, [r8]
 80149b4:	e7ec      	b.n	8014990 <_malloc_r+0xb0>
 80149b6:	4623      	mov	r3, r4
 80149b8:	6864      	ldr	r4, [r4, #4]
 80149ba:	e7ac      	b.n	8014916 <_malloc_r+0x36>
 80149bc:	4634      	mov	r4, r6
 80149be:	6876      	ldr	r6, [r6, #4]
 80149c0:	e7b4      	b.n	801492c <_malloc_r+0x4c>
 80149c2:	4613      	mov	r3, r2
 80149c4:	e7cc      	b.n	8014960 <_malloc_r+0x80>
 80149c6:	230c      	movs	r3, #12
 80149c8:	603b      	str	r3, [r7, #0]
 80149ca:	4638      	mov	r0, r7
 80149cc:	f000 f80e 	bl	80149ec <__malloc_unlock>
 80149d0:	e797      	b.n	8014902 <_malloc_r+0x22>
 80149d2:	6025      	str	r5, [r4, #0]
 80149d4:	e7dc      	b.n	8014990 <_malloc_r+0xb0>
 80149d6:	605b      	str	r3, [r3, #4]
 80149d8:	deff      	udf	#255	; 0xff
 80149da:	bf00      	nop
 80149dc:	24002b04 	.word	0x24002b04

080149e0 <__malloc_lock>:
 80149e0:	4801      	ldr	r0, [pc, #4]	; (80149e8 <__malloc_lock+0x8>)
 80149e2:	f000 b8e7 	b.w	8014bb4 <__retarget_lock_acquire_recursive>
 80149e6:	bf00      	nop
 80149e8:	24002c48 	.word	0x24002c48

080149ec <__malloc_unlock>:
 80149ec:	4801      	ldr	r0, [pc, #4]	; (80149f4 <__malloc_unlock+0x8>)
 80149ee:	f000 b8e2 	b.w	8014bb6 <__retarget_lock_release_recursive>
 80149f2:	bf00      	nop
 80149f4:	24002c48 	.word	0x24002c48

080149f8 <realloc>:
 80149f8:	4b02      	ldr	r3, [pc, #8]	; (8014a04 <realloc+0xc>)
 80149fa:	460a      	mov	r2, r1
 80149fc:	4601      	mov	r1, r0
 80149fe:	6818      	ldr	r0, [r3, #0]
 8014a00:	f000 b802 	b.w	8014a08 <_realloc_r>
 8014a04:	2400009c 	.word	0x2400009c

08014a08 <_realloc_r>:
 8014a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a0c:	4680      	mov	r8, r0
 8014a0e:	4614      	mov	r4, r2
 8014a10:	460e      	mov	r6, r1
 8014a12:	b921      	cbnz	r1, 8014a1e <_realloc_r+0x16>
 8014a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a18:	4611      	mov	r1, r2
 8014a1a:	f7ff bf61 	b.w	80148e0 <_malloc_r>
 8014a1e:	b92a      	cbnz	r2, 8014a2c <_realloc_r+0x24>
 8014a20:	f000 f8d8 	bl	8014bd4 <_free_r>
 8014a24:	4625      	mov	r5, r4
 8014a26:	4628      	mov	r0, r5
 8014a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a2c:	f000 f91e 	bl	8014c6c <_malloc_usable_size_r>
 8014a30:	4284      	cmp	r4, r0
 8014a32:	4607      	mov	r7, r0
 8014a34:	d802      	bhi.n	8014a3c <_realloc_r+0x34>
 8014a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014a3a:	d812      	bhi.n	8014a62 <_realloc_r+0x5a>
 8014a3c:	4621      	mov	r1, r4
 8014a3e:	4640      	mov	r0, r8
 8014a40:	f7ff ff4e 	bl	80148e0 <_malloc_r>
 8014a44:	4605      	mov	r5, r0
 8014a46:	2800      	cmp	r0, #0
 8014a48:	d0ed      	beq.n	8014a26 <_realloc_r+0x1e>
 8014a4a:	42bc      	cmp	r4, r7
 8014a4c:	4622      	mov	r2, r4
 8014a4e:	4631      	mov	r1, r6
 8014a50:	bf28      	it	cs
 8014a52:	463a      	movcs	r2, r7
 8014a54:	f000 f8b0 	bl	8014bb8 <memcpy>
 8014a58:	4631      	mov	r1, r6
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	f000 f8ba 	bl	8014bd4 <_free_r>
 8014a60:	e7e1      	b.n	8014a26 <_realloc_r+0x1e>
 8014a62:	4635      	mov	r5, r6
 8014a64:	e7df      	b.n	8014a26 <_realloc_r+0x1e>
	...

08014a68 <siprintf>:
 8014a68:	b40e      	push	{r1, r2, r3}
 8014a6a:	b500      	push	{lr}
 8014a6c:	b09c      	sub	sp, #112	; 0x70
 8014a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8014a70:	9002      	str	r0, [sp, #8]
 8014a72:	9006      	str	r0, [sp, #24]
 8014a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a78:	4809      	ldr	r0, [pc, #36]	; (8014aa0 <siprintf+0x38>)
 8014a7a:	9107      	str	r1, [sp, #28]
 8014a7c:	9104      	str	r1, [sp, #16]
 8014a7e:	4909      	ldr	r1, [pc, #36]	; (8014aa4 <siprintf+0x3c>)
 8014a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a84:	9105      	str	r1, [sp, #20]
 8014a86:	6800      	ldr	r0, [r0, #0]
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	a902      	add	r1, sp, #8
 8014a8c:	f000 f950 	bl	8014d30 <_svfiprintf_r>
 8014a90:	9b02      	ldr	r3, [sp, #8]
 8014a92:	2200      	movs	r2, #0
 8014a94:	701a      	strb	r2, [r3, #0]
 8014a96:	b01c      	add	sp, #112	; 0x70
 8014a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a9c:	b003      	add	sp, #12
 8014a9e:	4770      	bx	lr
 8014aa0:	2400009c 	.word	0x2400009c
 8014aa4:	ffff0208 	.word	0xffff0208

08014aa8 <memset>:
 8014aa8:	4402      	add	r2, r0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d100      	bne.n	8014ab2 <memset+0xa>
 8014ab0:	4770      	bx	lr
 8014ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8014ab6:	e7f9      	b.n	8014aac <memset+0x4>

08014ab8 <_raise_r>:
 8014ab8:	291f      	cmp	r1, #31
 8014aba:	b538      	push	{r3, r4, r5, lr}
 8014abc:	4604      	mov	r4, r0
 8014abe:	460d      	mov	r5, r1
 8014ac0:	d904      	bls.n	8014acc <_raise_r+0x14>
 8014ac2:	2316      	movs	r3, #22
 8014ac4:	6003      	str	r3, [r0, #0]
 8014ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aca:	bd38      	pop	{r3, r4, r5, pc}
 8014acc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014ace:	b112      	cbz	r2, 8014ad6 <_raise_r+0x1e>
 8014ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ad4:	b94b      	cbnz	r3, 8014aea <_raise_r+0x32>
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f000 f830 	bl	8014b3c <_getpid_r>
 8014adc:	462a      	mov	r2, r5
 8014ade:	4601      	mov	r1, r0
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ae6:	f000 b817 	b.w	8014b18 <_kill_r>
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	d00a      	beq.n	8014b04 <_raise_r+0x4c>
 8014aee:	1c59      	adds	r1, r3, #1
 8014af0:	d103      	bne.n	8014afa <_raise_r+0x42>
 8014af2:	2316      	movs	r3, #22
 8014af4:	6003      	str	r3, [r0, #0]
 8014af6:	2001      	movs	r0, #1
 8014af8:	e7e7      	b.n	8014aca <_raise_r+0x12>
 8014afa:	2400      	movs	r4, #0
 8014afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b00:	4628      	mov	r0, r5
 8014b02:	4798      	blx	r3
 8014b04:	2000      	movs	r0, #0
 8014b06:	e7e0      	b.n	8014aca <_raise_r+0x12>

08014b08 <raise>:
 8014b08:	4b02      	ldr	r3, [pc, #8]	; (8014b14 <raise+0xc>)
 8014b0a:	4601      	mov	r1, r0
 8014b0c:	6818      	ldr	r0, [r3, #0]
 8014b0e:	f7ff bfd3 	b.w	8014ab8 <_raise_r>
 8014b12:	bf00      	nop
 8014b14:	2400009c 	.word	0x2400009c

08014b18 <_kill_r>:
 8014b18:	b538      	push	{r3, r4, r5, lr}
 8014b1a:	4d07      	ldr	r5, [pc, #28]	; (8014b38 <_kill_r+0x20>)
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	4604      	mov	r4, r0
 8014b20:	4608      	mov	r0, r1
 8014b22:	4611      	mov	r1, r2
 8014b24:	602b      	str	r3, [r5, #0]
 8014b26:	f7f1 fd55 	bl	80065d4 <_kill>
 8014b2a:	1c43      	adds	r3, r0, #1
 8014b2c:	d102      	bne.n	8014b34 <_kill_r+0x1c>
 8014b2e:	682b      	ldr	r3, [r5, #0]
 8014b30:	b103      	cbz	r3, 8014b34 <_kill_r+0x1c>
 8014b32:	6023      	str	r3, [r4, #0]
 8014b34:	bd38      	pop	{r3, r4, r5, pc}
 8014b36:	bf00      	nop
 8014b38:	24002c44 	.word	0x24002c44

08014b3c <_getpid_r>:
 8014b3c:	f7f1 bd42 	b.w	80065c4 <_getpid>

08014b40 <_sbrk_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4d06      	ldr	r5, [pc, #24]	; (8014b5c <_sbrk_r+0x1c>)
 8014b44:	2300      	movs	r3, #0
 8014b46:	4604      	mov	r4, r0
 8014b48:	4608      	mov	r0, r1
 8014b4a:	602b      	str	r3, [r5, #0]
 8014b4c:	f7f1 fd5c 	bl	8006608 <_sbrk>
 8014b50:	1c43      	adds	r3, r0, #1
 8014b52:	d102      	bne.n	8014b5a <_sbrk_r+0x1a>
 8014b54:	682b      	ldr	r3, [r5, #0]
 8014b56:	b103      	cbz	r3, 8014b5a <_sbrk_r+0x1a>
 8014b58:	6023      	str	r3, [r4, #0]
 8014b5a:	bd38      	pop	{r3, r4, r5, pc}
 8014b5c:	24002c44 	.word	0x24002c44

08014b60 <__errno>:
 8014b60:	4b01      	ldr	r3, [pc, #4]	; (8014b68 <__errno+0x8>)
 8014b62:	6818      	ldr	r0, [r3, #0]
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop
 8014b68:	2400009c 	.word	0x2400009c

08014b6c <__libc_init_array>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	4d0d      	ldr	r5, [pc, #52]	; (8014ba4 <__libc_init_array+0x38>)
 8014b70:	4c0d      	ldr	r4, [pc, #52]	; (8014ba8 <__libc_init_array+0x3c>)
 8014b72:	1b64      	subs	r4, r4, r5
 8014b74:	10a4      	asrs	r4, r4, #2
 8014b76:	2600      	movs	r6, #0
 8014b78:	42a6      	cmp	r6, r4
 8014b7a:	d109      	bne.n	8014b90 <__libc_init_array+0x24>
 8014b7c:	4d0b      	ldr	r5, [pc, #44]	; (8014bac <__libc_init_array+0x40>)
 8014b7e:	4c0c      	ldr	r4, [pc, #48]	; (8014bb0 <__libc_init_array+0x44>)
 8014b80:	f000 fb7e 	bl	8015280 <_init>
 8014b84:	1b64      	subs	r4, r4, r5
 8014b86:	10a4      	asrs	r4, r4, #2
 8014b88:	2600      	movs	r6, #0
 8014b8a:	42a6      	cmp	r6, r4
 8014b8c:	d105      	bne.n	8014b9a <__libc_init_array+0x2e>
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b94:	4798      	blx	r3
 8014b96:	3601      	adds	r6, #1
 8014b98:	e7ee      	b.n	8014b78 <__libc_init_array+0xc>
 8014b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b9e:	4798      	blx	r3
 8014ba0:	3601      	adds	r6, #1
 8014ba2:	e7f2      	b.n	8014b8a <__libc_init_array+0x1e>
 8014ba4:	080158a0 	.word	0x080158a0
 8014ba8:	080158a0 	.word	0x080158a0
 8014bac:	080158a0 	.word	0x080158a0
 8014bb0:	080158a8 	.word	0x080158a8

08014bb4 <__retarget_lock_acquire_recursive>:
 8014bb4:	4770      	bx	lr

08014bb6 <__retarget_lock_release_recursive>:
 8014bb6:	4770      	bx	lr

08014bb8 <memcpy>:
 8014bb8:	440a      	add	r2, r1
 8014bba:	4291      	cmp	r1, r2
 8014bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014bc0:	d100      	bne.n	8014bc4 <memcpy+0xc>
 8014bc2:	4770      	bx	lr
 8014bc4:	b510      	push	{r4, lr}
 8014bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bce:	4291      	cmp	r1, r2
 8014bd0:	d1f9      	bne.n	8014bc6 <memcpy+0xe>
 8014bd2:	bd10      	pop	{r4, pc}

08014bd4 <_free_r>:
 8014bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bd6:	2900      	cmp	r1, #0
 8014bd8:	d044      	beq.n	8014c64 <_free_r+0x90>
 8014bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bde:	9001      	str	r0, [sp, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	f1a1 0404 	sub.w	r4, r1, #4
 8014be6:	bfb8      	it	lt
 8014be8:	18e4      	addlt	r4, r4, r3
 8014bea:	f7ff fef9 	bl	80149e0 <__malloc_lock>
 8014bee:	4a1e      	ldr	r2, [pc, #120]	; (8014c68 <_free_r+0x94>)
 8014bf0:	9801      	ldr	r0, [sp, #4]
 8014bf2:	6813      	ldr	r3, [r2, #0]
 8014bf4:	b933      	cbnz	r3, 8014c04 <_free_r+0x30>
 8014bf6:	6063      	str	r3, [r4, #4]
 8014bf8:	6014      	str	r4, [r2, #0]
 8014bfa:	b003      	add	sp, #12
 8014bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c00:	f7ff bef4 	b.w	80149ec <__malloc_unlock>
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	d908      	bls.n	8014c1a <_free_r+0x46>
 8014c08:	6825      	ldr	r5, [r4, #0]
 8014c0a:	1961      	adds	r1, r4, r5
 8014c0c:	428b      	cmp	r3, r1
 8014c0e:	bf01      	itttt	eq
 8014c10:	6819      	ldreq	r1, [r3, #0]
 8014c12:	685b      	ldreq	r3, [r3, #4]
 8014c14:	1949      	addeq	r1, r1, r5
 8014c16:	6021      	streq	r1, [r4, #0]
 8014c18:	e7ed      	b.n	8014bf6 <_free_r+0x22>
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	b10b      	cbz	r3, 8014c24 <_free_r+0x50>
 8014c20:	42a3      	cmp	r3, r4
 8014c22:	d9fa      	bls.n	8014c1a <_free_r+0x46>
 8014c24:	6811      	ldr	r1, [r2, #0]
 8014c26:	1855      	adds	r5, r2, r1
 8014c28:	42a5      	cmp	r5, r4
 8014c2a:	d10b      	bne.n	8014c44 <_free_r+0x70>
 8014c2c:	6824      	ldr	r4, [r4, #0]
 8014c2e:	4421      	add	r1, r4
 8014c30:	1854      	adds	r4, r2, r1
 8014c32:	42a3      	cmp	r3, r4
 8014c34:	6011      	str	r1, [r2, #0]
 8014c36:	d1e0      	bne.n	8014bfa <_free_r+0x26>
 8014c38:	681c      	ldr	r4, [r3, #0]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	6053      	str	r3, [r2, #4]
 8014c3e:	440c      	add	r4, r1
 8014c40:	6014      	str	r4, [r2, #0]
 8014c42:	e7da      	b.n	8014bfa <_free_r+0x26>
 8014c44:	d902      	bls.n	8014c4c <_free_r+0x78>
 8014c46:	230c      	movs	r3, #12
 8014c48:	6003      	str	r3, [r0, #0]
 8014c4a:	e7d6      	b.n	8014bfa <_free_r+0x26>
 8014c4c:	6825      	ldr	r5, [r4, #0]
 8014c4e:	1961      	adds	r1, r4, r5
 8014c50:	428b      	cmp	r3, r1
 8014c52:	bf04      	itt	eq
 8014c54:	6819      	ldreq	r1, [r3, #0]
 8014c56:	685b      	ldreq	r3, [r3, #4]
 8014c58:	6063      	str	r3, [r4, #4]
 8014c5a:	bf04      	itt	eq
 8014c5c:	1949      	addeq	r1, r1, r5
 8014c5e:	6021      	streq	r1, [r4, #0]
 8014c60:	6054      	str	r4, [r2, #4]
 8014c62:	e7ca      	b.n	8014bfa <_free_r+0x26>
 8014c64:	b003      	add	sp, #12
 8014c66:	bd30      	pop	{r4, r5, pc}
 8014c68:	24002b04 	.word	0x24002b04

08014c6c <_malloc_usable_size_r>:
 8014c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c70:	1f18      	subs	r0, r3, #4
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	bfbc      	itt	lt
 8014c76:	580b      	ldrlt	r3, [r1, r0]
 8014c78:	18c0      	addlt	r0, r0, r3
 8014c7a:	4770      	bx	lr

08014c7c <__ssputs_r>:
 8014c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c80:	688e      	ldr	r6, [r1, #8]
 8014c82:	461f      	mov	r7, r3
 8014c84:	42be      	cmp	r6, r7
 8014c86:	680b      	ldr	r3, [r1, #0]
 8014c88:	4682      	mov	sl, r0
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	4690      	mov	r8, r2
 8014c8e:	d82c      	bhi.n	8014cea <__ssputs_r+0x6e>
 8014c90:	898a      	ldrh	r2, [r1, #12]
 8014c92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c96:	d026      	beq.n	8014ce6 <__ssputs_r+0x6a>
 8014c98:	6965      	ldr	r5, [r4, #20]
 8014c9a:	6909      	ldr	r1, [r1, #16]
 8014c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ca0:	eba3 0901 	sub.w	r9, r3, r1
 8014ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ca8:	1c7b      	adds	r3, r7, #1
 8014caa:	444b      	add	r3, r9
 8014cac:	106d      	asrs	r5, r5, #1
 8014cae:	429d      	cmp	r5, r3
 8014cb0:	bf38      	it	cc
 8014cb2:	461d      	movcc	r5, r3
 8014cb4:	0553      	lsls	r3, r2, #21
 8014cb6:	d527      	bpl.n	8014d08 <__ssputs_r+0x8c>
 8014cb8:	4629      	mov	r1, r5
 8014cba:	f7ff fe11 	bl	80148e0 <_malloc_r>
 8014cbe:	4606      	mov	r6, r0
 8014cc0:	b360      	cbz	r0, 8014d1c <__ssputs_r+0xa0>
 8014cc2:	6921      	ldr	r1, [r4, #16]
 8014cc4:	464a      	mov	r2, r9
 8014cc6:	f7ff ff77 	bl	8014bb8 <memcpy>
 8014cca:	89a3      	ldrh	r3, [r4, #12]
 8014ccc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cd4:	81a3      	strh	r3, [r4, #12]
 8014cd6:	6126      	str	r6, [r4, #16]
 8014cd8:	6165      	str	r5, [r4, #20]
 8014cda:	444e      	add	r6, r9
 8014cdc:	eba5 0509 	sub.w	r5, r5, r9
 8014ce0:	6026      	str	r6, [r4, #0]
 8014ce2:	60a5      	str	r5, [r4, #8]
 8014ce4:	463e      	mov	r6, r7
 8014ce6:	42be      	cmp	r6, r7
 8014ce8:	d900      	bls.n	8014cec <__ssputs_r+0x70>
 8014cea:	463e      	mov	r6, r7
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	4632      	mov	r2, r6
 8014cf0:	4641      	mov	r1, r8
 8014cf2:	f000 faab 	bl	801524c <memmove>
 8014cf6:	68a3      	ldr	r3, [r4, #8]
 8014cf8:	1b9b      	subs	r3, r3, r6
 8014cfa:	60a3      	str	r3, [r4, #8]
 8014cfc:	6823      	ldr	r3, [r4, #0]
 8014cfe:	4433      	add	r3, r6
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	2000      	movs	r0, #0
 8014d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d08:	462a      	mov	r2, r5
 8014d0a:	f7ff fe7d 	bl	8014a08 <_realloc_r>
 8014d0e:	4606      	mov	r6, r0
 8014d10:	2800      	cmp	r0, #0
 8014d12:	d1e0      	bne.n	8014cd6 <__ssputs_r+0x5a>
 8014d14:	6921      	ldr	r1, [r4, #16]
 8014d16:	4650      	mov	r0, sl
 8014d18:	f7ff ff5c 	bl	8014bd4 <_free_r>
 8014d1c:	230c      	movs	r3, #12
 8014d1e:	f8ca 3000 	str.w	r3, [sl]
 8014d22:	89a3      	ldrh	r3, [r4, #12]
 8014d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d28:	81a3      	strh	r3, [r4, #12]
 8014d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d2e:	e7e9      	b.n	8014d04 <__ssputs_r+0x88>

08014d30 <_svfiprintf_r>:
 8014d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d34:	4698      	mov	r8, r3
 8014d36:	898b      	ldrh	r3, [r1, #12]
 8014d38:	061b      	lsls	r3, r3, #24
 8014d3a:	b09d      	sub	sp, #116	; 0x74
 8014d3c:	4607      	mov	r7, r0
 8014d3e:	460d      	mov	r5, r1
 8014d40:	4614      	mov	r4, r2
 8014d42:	d50e      	bpl.n	8014d62 <_svfiprintf_r+0x32>
 8014d44:	690b      	ldr	r3, [r1, #16]
 8014d46:	b963      	cbnz	r3, 8014d62 <_svfiprintf_r+0x32>
 8014d48:	2140      	movs	r1, #64	; 0x40
 8014d4a:	f7ff fdc9 	bl	80148e0 <_malloc_r>
 8014d4e:	6028      	str	r0, [r5, #0]
 8014d50:	6128      	str	r0, [r5, #16]
 8014d52:	b920      	cbnz	r0, 8014d5e <_svfiprintf_r+0x2e>
 8014d54:	230c      	movs	r3, #12
 8014d56:	603b      	str	r3, [r7, #0]
 8014d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d5c:	e0d0      	b.n	8014f00 <_svfiprintf_r+0x1d0>
 8014d5e:	2340      	movs	r3, #64	; 0x40
 8014d60:	616b      	str	r3, [r5, #20]
 8014d62:	2300      	movs	r3, #0
 8014d64:	9309      	str	r3, [sp, #36]	; 0x24
 8014d66:	2320      	movs	r3, #32
 8014d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d70:	2330      	movs	r3, #48	; 0x30
 8014d72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014f18 <_svfiprintf_r+0x1e8>
 8014d76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d7a:	f04f 0901 	mov.w	r9, #1
 8014d7e:	4623      	mov	r3, r4
 8014d80:	469a      	mov	sl, r3
 8014d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d86:	b10a      	cbz	r2, 8014d8c <_svfiprintf_r+0x5c>
 8014d88:	2a25      	cmp	r2, #37	; 0x25
 8014d8a:	d1f9      	bne.n	8014d80 <_svfiprintf_r+0x50>
 8014d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8014d90:	d00b      	beq.n	8014daa <_svfiprintf_r+0x7a>
 8014d92:	465b      	mov	r3, fp
 8014d94:	4622      	mov	r2, r4
 8014d96:	4629      	mov	r1, r5
 8014d98:	4638      	mov	r0, r7
 8014d9a:	f7ff ff6f 	bl	8014c7c <__ssputs_r>
 8014d9e:	3001      	adds	r0, #1
 8014da0:	f000 80a9 	beq.w	8014ef6 <_svfiprintf_r+0x1c6>
 8014da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014da6:	445a      	add	r2, fp
 8014da8:	9209      	str	r2, [sp, #36]	; 0x24
 8014daa:	f89a 3000 	ldrb.w	r3, [sl]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f000 80a1 	beq.w	8014ef6 <_svfiprintf_r+0x1c6>
 8014db4:	2300      	movs	r3, #0
 8014db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dbe:	f10a 0a01 	add.w	sl, sl, #1
 8014dc2:	9304      	str	r3, [sp, #16]
 8014dc4:	9307      	str	r3, [sp, #28]
 8014dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014dca:	931a      	str	r3, [sp, #104]	; 0x68
 8014dcc:	4654      	mov	r4, sl
 8014dce:	2205      	movs	r2, #5
 8014dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dd4:	4850      	ldr	r0, [pc, #320]	; (8014f18 <_svfiprintf_r+0x1e8>)
 8014dd6:	f7eb fa8b 	bl	80002f0 <memchr>
 8014dda:	9a04      	ldr	r2, [sp, #16]
 8014ddc:	b9d8      	cbnz	r0, 8014e16 <_svfiprintf_r+0xe6>
 8014dde:	06d0      	lsls	r0, r2, #27
 8014de0:	bf44      	itt	mi
 8014de2:	2320      	movmi	r3, #32
 8014de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014de8:	0711      	lsls	r1, r2, #28
 8014dea:	bf44      	itt	mi
 8014dec:	232b      	movmi	r3, #43	; 0x2b
 8014dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014df2:	f89a 3000 	ldrb.w	r3, [sl]
 8014df6:	2b2a      	cmp	r3, #42	; 0x2a
 8014df8:	d015      	beq.n	8014e26 <_svfiprintf_r+0xf6>
 8014dfa:	9a07      	ldr	r2, [sp, #28]
 8014dfc:	4654      	mov	r4, sl
 8014dfe:	2000      	movs	r0, #0
 8014e00:	f04f 0c0a 	mov.w	ip, #10
 8014e04:	4621      	mov	r1, r4
 8014e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e0a:	3b30      	subs	r3, #48	; 0x30
 8014e0c:	2b09      	cmp	r3, #9
 8014e0e:	d94d      	bls.n	8014eac <_svfiprintf_r+0x17c>
 8014e10:	b1b0      	cbz	r0, 8014e40 <_svfiprintf_r+0x110>
 8014e12:	9207      	str	r2, [sp, #28]
 8014e14:	e014      	b.n	8014e40 <_svfiprintf_r+0x110>
 8014e16:	eba0 0308 	sub.w	r3, r0, r8
 8014e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	9304      	str	r3, [sp, #16]
 8014e22:	46a2      	mov	sl, r4
 8014e24:	e7d2      	b.n	8014dcc <_svfiprintf_r+0x9c>
 8014e26:	9b03      	ldr	r3, [sp, #12]
 8014e28:	1d19      	adds	r1, r3, #4
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	9103      	str	r1, [sp, #12]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	bfbb      	ittet	lt
 8014e32:	425b      	neglt	r3, r3
 8014e34:	f042 0202 	orrlt.w	r2, r2, #2
 8014e38:	9307      	strge	r3, [sp, #28]
 8014e3a:	9307      	strlt	r3, [sp, #28]
 8014e3c:	bfb8      	it	lt
 8014e3e:	9204      	strlt	r2, [sp, #16]
 8014e40:	7823      	ldrb	r3, [r4, #0]
 8014e42:	2b2e      	cmp	r3, #46	; 0x2e
 8014e44:	d10c      	bne.n	8014e60 <_svfiprintf_r+0x130>
 8014e46:	7863      	ldrb	r3, [r4, #1]
 8014e48:	2b2a      	cmp	r3, #42	; 0x2a
 8014e4a:	d134      	bne.n	8014eb6 <_svfiprintf_r+0x186>
 8014e4c:	9b03      	ldr	r3, [sp, #12]
 8014e4e:	1d1a      	adds	r2, r3, #4
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	9203      	str	r2, [sp, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	bfb8      	it	lt
 8014e58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014e5c:	3402      	adds	r4, #2
 8014e5e:	9305      	str	r3, [sp, #20]
 8014e60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014f28 <_svfiprintf_r+0x1f8>
 8014e64:	7821      	ldrb	r1, [r4, #0]
 8014e66:	2203      	movs	r2, #3
 8014e68:	4650      	mov	r0, sl
 8014e6a:	f7eb fa41 	bl	80002f0 <memchr>
 8014e6e:	b138      	cbz	r0, 8014e80 <_svfiprintf_r+0x150>
 8014e70:	9b04      	ldr	r3, [sp, #16]
 8014e72:	eba0 000a 	sub.w	r0, r0, sl
 8014e76:	2240      	movs	r2, #64	; 0x40
 8014e78:	4082      	lsls	r2, r0
 8014e7a:	4313      	orrs	r3, r2
 8014e7c:	3401      	adds	r4, #1
 8014e7e:	9304      	str	r3, [sp, #16]
 8014e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e84:	4825      	ldr	r0, [pc, #148]	; (8014f1c <_svfiprintf_r+0x1ec>)
 8014e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e8a:	2206      	movs	r2, #6
 8014e8c:	f7eb fa30 	bl	80002f0 <memchr>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d038      	beq.n	8014f06 <_svfiprintf_r+0x1d6>
 8014e94:	4b22      	ldr	r3, [pc, #136]	; (8014f20 <_svfiprintf_r+0x1f0>)
 8014e96:	bb1b      	cbnz	r3, 8014ee0 <_svfiprintf_r+0x1b0>
 8014e98:	9b03      	ldr	r3, [sp, #12]
 8014e9a:	3307      	adds	r3, #7
 8014e9c:	f023 0307 	bic.w	r3, r3, #7
 8014ea0:	3308      	adds	r3, #8
 8014ea2:	9303      	str	r3, [sp, #12]
 8014ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ea6:	4433      	add	r3, r6
 8014ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8014eaa:	e768      	b.n	8014d7e <_svfiprintf_r+0x4e>
 8014eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8014eb0:	460c      	mov	r4, r1
 8014eb2:	2001      	movs	r0, #1
 8014eb4:	e7a6      	b.n	8014e04 <_svfiprintf_r+0xd4>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	3401      	adds	r4, #1
 8014eba:	9305      	str	r3, [sp, #20]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	f04f 0c0a 	mov.w	ip, #10
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ec8:	3a30      	subs	r2, #48	; 0x30
 8014eca:	2a09      	cmp	r2, #9
 8014ecc:	d903      	bls.n	8014ed6 <_svfiprintf_r+0x1a6>
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d0c6      	beq.n	8014e60 <_svfiprintf_r+0x130>
 8014ed2:	9105      	str	r1, [sp, #20]
 8014ed4:	e7c4      	b.n	8014e60 <_svfiprintf_r+0x130>
 8014ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eda:	4604      	mov	r4, r0
 8014edc:	2301      	movs	r3, #1
 8014ede:	e7f0      	b.n	8014ec2 <_svfiprintf_r+0x192>
 8014ee0:	ab03      	add	r3, sp, #12
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	462a      	mov	r2, r5
 8014ee6:	4b0f      	ldr	r3, [pc, #60]	; (8014f24 <_svfiprintf_r+0x1f4>)
 8014ee8:	a904      	add	r1, sp, #16
 8014eea:	4638      	mov	r0, r7
 8014eec:	f3af 8000 	nop.w
 8014ef0:	1c42      	adds	r2, r0, #1
 8014ef2:	4606      	mov	r6, r0
 8014ef4:	d1d6      	bne.n	8014ea4 <_svfiprintf_r+0x174>
 8014ef6:	89ab      	ldrh	r3, [r5, #12]
 8014ef8:	065b      	lsls	r3, r3, #25
 8014efa:	f53f af2d 	bmi.w	8014d58 <_svfiprintf_r+0x28>
 8014efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f00:	b01d      	add	sp, #116	; 0x74
 8014f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f06:	ab03      	add	r3, sp, #12
 8014f08:	9300      	str	r3, [sp, #0]
 8014f0a:	462a      	mov	r2, r5
 8014f0c:	4b05      	ldr	r3, [pc, #20]	; (8014f24 <_svfiprintf_r+0x1f4>)
 8014f0e:	a904      	add	r1, sp, #16
 8014f10:	4638      	mov	r0, r7
 8014f12:	f000 f879 	bl	8015008 <_printf_i>
 8014f16:	e7eb      	b.n	8014ef0 <_svfiprintf_r+0x1c0>
 8014f18:	08015864 	.word	0x08015864
 8014f1c:	0801586e 	.word	0x0801586e
 8014f20:	00000000 	.word	0x00000000
 8014f24:	08014c7d 	.word	0x08014c7d
 8014f28:	0801586a 	.word	0x0801586a

08014f2c <_printf_common>:
 8014f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f30:	4616      	mov	r6, r2
 8014f32:	4699      	mov	r9, r3
 8014f34:	688a      	ldr	r2, [r1, #8]
 8014f36:	690b      	ldr	r3, [r1, #16]
 8014f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	bfb8      	it	lt
 8014f40:	4613      	movlt	r3, r2
 8014f42:	6033      	str	r3, [r6, #0]
 8014f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f48:	4607      	mov	r7, r0
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	b10a      	cbz	r2, 8014f52 <_printf_common+0x26>
 8014f4e:	3301      	adds	r3, #1
 8014f50:	6033      	str	r3, [r6, #0]
 8014f52:	6823      	ldr	r3, [r4, #0]
 8014f54:	0699      	lsls	r1, r3, #26
 8014f56:	bf42      	ittt	mi
 8014f58:	6833      	ldrmi	r3, [r6, #0]
 8014f5a:	3302      	addmi	r3, #2
 8014f5c:	6033      	strmi	r3, [r6, #0]
 8014f5e:	6825      	ldr	r5, [r4, #0]
 8014f60:	f015 0506 	ands.w	r5, r5, #6
 8014f64:	d106      	bne.n	8014f74 <_printf_common+0x48>
 8014f66:	f104 0a19 	add.w	sl, r4, #25
 8014f6a:	68e3      	ldr	r3, [r4, #12]
 8014f6c:	6832      	ldr	r2, [r6, #0]
 8014f6e:	1a9b      	subs	r3, r3, r2
 8014f70:	42ab      	cmp	r3, r5
 8014f72:	dc26      	bgt.n	8014fc2 <_printf_common+0x96>
 8014f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f78:	1e13      	subs	r3, r2, #0
 8014f7a:	6822      	ldr	r2, [r4, #0]
 8014f7c:	bf18      	it	ne
 8014f7e:	2301      	movne	r3, #1
 8014f80:	0692      	lsls	r2, r2, #26
 8014f82:	d42b      	bmi.n	8014fdc <_printf_common+0xb0>
 8014f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f88:	4649      	mov	r1, r9
 8014f8a:	4638      	mov	r0, r7
 8014f8c:	47c0      	blx	r8
 8014f8e:	3001      	adds	r0, #1
 8014f90:	d01e      	beq.n	8014fd0 <_printf_common+0xa4>
 8014f92:	6823      	ldr	r3, [r4, #0]
 8014f94:	6922      	ldr	r2, [r4, #16]
 8014f96:	f003 0306 	and.w	r3, r3, #6
 8014f9a:	2b04      	cmp	r3, #4
 8014f9c:	bf02      	ittt	eq
 8014f9e:	68e5      	ldreq	r5, [r4, #12]
 8014fa0:	6833      	ldreq	r3, [r6, #0]
 8014fa2:	1aed      	subeq	r5, r5, r3
 8014fa4:	68a3      	ldr	r3, [r4, #8]
 8014fa6:	bf0c      	ite	eq
 8014fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fac:	2500      	movne	r5, #0
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	bfc4      	itt	gt
 8014fb2:	1a9b      	subgt	r3, r3, r2
 8014fb4:	18ed      	addgt	r5, r5, r3
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	341a      	adds	r4, #26
 8014fba:	42b5      	cmp	r5, r6
 8014fbc:	d11a      	bne.n	8014ff4 <_printf_common+0xc8>
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	e008      	b.n	8014fd4 <_printf_common+0xa8>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	4652      	mov	r2, sl
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	4638      	mov	r0, r7
 8014fca:	47c0      	blx	r8
 8014fcc:	3001      	adds	r0, #1
 8014fce:	d103      	bne.n	8014fd8 <_printf_common+0xac>
 8014fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fd8:	3501      	adds	r5, #1
 8014fda:	e7c6      	b.n	8014f6a <_printf_common+0x3e>
 8014fdc:	18e1      	adds	r1, r4, r3
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	2030      	movs	r0, #48	; 0x30
 8014fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fe6:	4422      	add	r2, r4
 8014fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ff0:	3302      	adds	r3, #2
 8014ff2:	e7c7      	b.n	8014f84 <_printf_common+0x58>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	4622      	mov	r2, r4
 8014ff8:	4649      	mov	r1, r9
 8014ffa:	4638      	mov	r0, r7
 8014ffc:	47c0      	blx	r8
 8014ffe:	3001      	adds	r0, #1
 8015000:	d0e6      	beq.n	8014fd0 <_printf_common+0xa4>
 8015002:	3601      	adds	r6, #1
 8015004:	e7d9      	b.n	8014fba <_printf_common+0x8e>
	...

08015008 <_printf_i>:
 8015008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801500c:	7e0f      	ldrb	r7, [r1, #24]
 801500e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015010:	2f78      	cmp	r7, #120	; 0x78
 8015012:	4691      	mov	r9, r2
 8015014:	4680      	mov	r8, r0
 8015016:	460c      	mov	r4, r1
 8015018:	469a      	mov	sl, r3
 801501a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801501e:	d807      	bhi.n	8015030 <_printf_i+0x28>
 8015020:	2f62      	cmp	r7, #98	; 0x62
 8015022:	d80a      	bhi.n	801503a <_printf_i+0x32>
 8015024:	2f00      	cmp	r7, #0
 8015026:	f000 80d4 	beq.w	80151d2 <_printf_i+0x1ca>
 801502a:	2f58      	cmp	r7, #88	; 0x58
 801502c:	f000 80c0 	beq.w	80151b0 <_printf_i+0x1a8>
 8015030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015038:	e03a      	b.n	80150b0 <_printf_i+0xa8>
 801503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801503e:	2b15      	cmp	r3, #21
 8015040:	d8f6      	bhi.n	8015030 <_printf_i+0x28>
 8015042:	a101      	add	r1, pc, #4	; (adr r1, 8015048 <_printf_i+0x40>)
 8015044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015048:	080150a1 	.word	0x080150a1
 801504c:	080150b5 	.word	0x080150b5
 8015050:	08015031 	.word	0x08015031
 8015054:	08015031 	.word	0x08015031
 8015058:	08015031 	.word	0x08015031
 801505c:	08015031 	.word	0x08015031
 8015060:	080150b5 	.word	0x080150b5
 8015064:	08015031 	.word	0x08015031
 8015068:	08015031 	.word	0x08015031
 801506c:	08015031 	.word	0x08015031
 8015070:	08015031 	.word	0x08015031
 8015074:	080151b9 	.word	0x080151b9
 8015078:	080150e1 	.word	0x080150e1
 801507c:	08015173 	.word	0x08015173
 8015080:	08015031 	.word	0x08015031
 8015084:	08015031 	.word	0x08015031
 8015088:	080151db 	.word	0x080151db
 801508c:	08015031 	.word	0x08015031
 8015090:	080150e1 	.word	0x080150e1
 8015094:	08015031 	.word	0x08015031
 8015098:	08015031 	.word	0x08015031
 801509c:	0801517b 	.word	0x0801517b
 80150a0:	682b      	ldr	r3, [r5, #0]
 80150a2:	1d1a      	adds	r2, r3, #4
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	602a      	str	r2, [r5, #0]
 80150a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150b0:	2301      	movs	r3, #1
 80150b2:	e09f      	b.n	80151f4 <_printf_i+0x1ec>
 80150b4:	6820      	ldr	r0, [r4, #0]
 80150b6:	682b      	ldr	r3, [r5, #0]
 80150b8:	0607      	lsls	r7, r0, #24
 80150ba:	f103 0104 	add.w	r1, r3, #4
 80150be:	6029      	str	r1, [r5, #0]
 80150c0:	d501      	bpl.n	80150c6 <_printf_i+0xbe>
 80150c2:	681e      	ldr	r6, [r3, #0]
 80150c4:	e003      	b.n	80150ce <_printf_i+0xc6>
 80150c6:	0646      	lsls	r6, r0, #25
 80150c8:	d5fb      	bpl.n	80150c2 <_printf_i+0xba>
 80150ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80150ce:	2e00      	cmp	r6, #0
 80150d0:	da03      	bge.n	80150da <_printf_i+0xd2>
 80150d2:	232d      	movs	r3, #45	; 0x2d
 80150d4:	4276      	negs	r6, r6
 80150d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150da:	485a      	ldr	r0, [pc, #360]	; (8015244 <_printf_i+0x23c>)
 80150dc:	230a      	movs	r3, #10
 80150de:	e012      	b.n	8015106 <_printf_i+0xfe>
 80150e0:	682b      	ldr	r3, [r5, #0]
 80150e2:	6820      	ldr	r0, [r4, #0]
 80150e4:	1d19      	adds	r1, r3, #4
 80150e6:	6029      	str	r1, [r5, #0]
 80150e8:	0605      	lsls	r5, r0, #24
 80150ea:	d501      	bpl.n	80150f0 <_printf_i+0xe8>
 80150ec:	681e      	ldr	r6, [r3, #0]
 80150ee:	e002      	b.n	80150f6 <_printf_i+0xee>
 80150f0:	0641      	lsls	r1, r0, #25
 80150f2:	d5fb      	bpl.n	80150ec <_printf_i+0xe4>
 80150f4:	881e      	ldrh	r6, [r3, #0]
 80150f6:	4853      	ldr	r0, [pc, #332]	; (8015244 <_printf_i+0x23c>)
 80150f8:	2f6f      	cmp	r7, #111	; 0x6f
 80150fa:	bf0c      	ite	eq
 80150fc:	2308      	moveq	r3, #8
 80150fe:	230a      	movne	r3, #10
 8015100:	2100      	movs	r1, #0
 8015102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015106:	6865      	ldr	r5, [r4, #4]
 8015108:	60a5      	str	r5, [r4, #8]
 801510a:	2d00      	cmp	r5, #0
 801510c:	bfa2      	ittt	ge
 801510e:	6821      	ldrge	r1, [r4, #0]
 8015110:	f021 0104 	bicge.w	r1, r1, #4
 8015114:	6021      	strge	r1, [r4, #0]
 8015116:	b90e      	cbnz	r6, 801511c <_printf_i+0x114>
 8015118:	2d00      	cmp	r5, #0
 801511a:	d04b      	beq.n	80151b4 <_printf_i+0x1ac>
 801511c:	4615      	mov	r5, r2
 801511e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015122:	fb03 6711 	mls	r7, r3, r1, r6
 8015126:	5dc7      	ldrb	r7, [r0, r7]
 8015128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801512c:	4637      	mov	r7, r6
 801512e:	42bb      	cmp	r3, r7
 8015130:	460e      	mov	r6, r1
 8015132:	d9f4      	bls.n	801511e <_printf_i+0x116>
 8015134:	2b08      	cmp	r3, #8
 8015136:	d10b      	bne.n	8015150 <_printf_i+0x148>
 8015138:	6823      	ldr	r3, [r4, #0]
 801513a:	07de      	lsls	r6, r3, #31
 801513c:	d508      	bpl.n	8015150 <_printf_i+0x148>
 801513e:	6923      	ldr	r3, [r4, #16]
 8015140:	6861      	ldr	r1, [r4, #4]
 8015142:	4299      	cmp	r1, r3
 8015144:	bfde      	ittt	le
 8015146:	2330      	movle	r3, #48	; 0x30
 8015148:	f805 3c01 	strble.w	r3, [r5, #-1]
 801514c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015150:	1b52      	subs	r2, r2, r5
 8015152:	6122      	str	r2, [r4, #16]
 8015154:	f8cd a000 	str.w	sl, [sp]
 8015158:	464b      	mov	r3, r9
 801515a:	aa03      	add	r2, sp, #12
 801515c:	4621      	mov	r1, r4
 801515e:	4640      	mov	r0, r8
 8015160:	f7ff fee4 	bl	8014f2c <_printf_common>
 8015164:	3001      	adds	r0, #1
 8015166:	d14a      	bne.n	80151fe <_printf_i+0x1f6>
 8015168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801516c:	b004      	add	sp, #16
 801516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015172:	6823      	ldr	r3, [r4, #0]
 8015174:	f043 0320 	orr.w	r3, r3, #32
 8015178:	6023      	str	r3, [r4, #0]
 801517a:	4833      	ldr	r0, [pc, #204]	; (8015248 <_printf_i+0x240>)
 801517c:	2778      	movs	r7, #120	; 0x78
 801517e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015182:	6823      	ldr	r3, [r4, #0]
 8015184:	6829      	ldr	r1, [r5, #0]
 8015186:	061f      	lsls	r7, r3, #24
 8015188:	f851 6b04 	ldr.w	r6, [r1], #4
 801518c:	d402      	bmi.n	8015194 <_printf_i+0x18c>
 801518e:	065f      	lsls	r7, r3, #25
 8015190:	bf48      	it	mi
 8015192:	b2b6      	uxthmi	r6, r6
 8015194:	07df      	lsls	r7, r3, #31
 8015196:	bf48      	it	mi
 8015198:	f043 0320 	orrmi.w	r3, r3, #32
 801519c:	6029      	str	r1, [r5, #0]
 801519e:	bf48      	it	mi
 80151a0:	6023      	strmi	r3, [r4, #0]
 80151a2:	b91e      	cbnz	r6, 80151ac <_printf_i+0x1a4>
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	f023 0320 	bic.w	r3, r3, #32
 80151aa:	6023      	str	r3, [r4, #0]
 80151ac:	2310      	movs	r3, #16
 80151ae:	e7a7      	b.n	8015100 <_printf_i+0xf8>
 80151b0:	4824      	ldr	r0, [pc, #144]	; (8015244 <_printf_i+0x23c>)
 80151b2:	e7e4      	b.n	801517e <_printf_i+0x176>
 80151b4:	4615      	mov	r5, r2
 80151b6:	e7bd      	b.n	8015134 <_printf_i+0x12c>
 80151b8:	682b      	ldr	r3, [r5, #0]
 80151ba:	6826      	ldr	r6, [r4, #0]
 80151bc:	6961      	ldr	r1, [r4, #20]
 80151be:	1d18      	adds	r0, r3, #4
 80151c0:	6028      	str	r0, [r5, #0]
 80151c2:	0635      	lsls	r5, r6, #24
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	d501      	bpl.n	80151cc <_printf_i+0x1c4>
 80151c8:	6019      	str	r1, [r3, #0]
 80151ca:	e002      	b.n	80151d2 <_printf_i+0x1ca>
 80151cc:	0670      	lsls	r0, r6, #25
 80151ce:	d5fb      	bpl.n	80151c8 <_printf_i+0x1c0>
 80151d0:	8019      	strh	r1, [r3, #0]
 80151d2:	2300      	movs	r3, #0
 80151d4:	6123      	str	r3, [r4, #16]
 80151d6:	4615      	mov	r5, r2
 80151d8:	e7bc      	b.n	8015154 <_printf_i+0x14c>
 80151da:	682b      	ldr	r3, [r5, #0]
 80151dc:	1d1a      	adds	r2, r3, #4
 80151de:	602a      	str	r2, [r5, #0]
 80151e0:	681d      	ldr	r5, [r3, #0]
 80151e2:	6862      	ldr	r2, [r4, #4]
 80151e4:	2100      	movs	r1, #0
 80151e6:	4628      	mov	r0, r5
 80151e8:	f7eb f882 	bl	80002f0 <memchr>
 80151ec:	b108      	cbz	r0, 80151f2 <_printf_i+0x1ea>
 80151ee:	1b40      	subs	r0, r0, r5
 80151f0:	6060      	str	r0, [r4, #4]
 80151f2:	6863      	ldr	r3, [r4, #4]
 80151f4:	6123      	str	r3, [r4, #16]
 80151f6:	2300      	movs	r3, #0
 80151f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151fc:	e7aa      	b.n	8015154 <_printf_i+0x14c>
 80151fe:	6923      	ldr	r3, [r4, #16]
 8015200:	462a      	mov	r2, r5
 8015202:	4649      	mov	r1, r9
 8015204:	4640      	mov	r0, r8
 8015206:	47d0      	blx	sl
 8015208:	3001      	adds	r0, #1
 801520a:	d0ad      	beq.n	8015168 <_printf_i+0x160>
 801520c:	6823      	ldr	r3, [r4, #0]
 801520e:	079b      	lsls	r3, r3, #30
 8015210:	d413      	bmi.n	801523a <_printf_i+0x232>
 8015212:	68e0      	ldr	r0, [r4, #12]
 8015214:	9b03      	ldr	r3, [sp, #12]
 8015216:	4298      	cmp	r0, r3
 8015218:	bfb8      	it	lt
 801521a:	4618      	movlt	r0, r3
 801521c:	e7a6      	b.n	801516c <_printf_i+0x164>
 801521e:	2301      	movs	r3, #1
 8015220:	4632      	mov	r2, r6
 8015222:	4649      	mov	r1, r9
 8015224:	4640      	mov	r0, r8
 8015226:	47d0      	blx	sl
 8015228:	3001      	adds	r0, #1
 801522a:	d09d      	beq.n	8015168 <_printf_i+0x160>
 801522c:	3501      	adds	r5, #1
 801522e:	68e3      	ldr	r3, [r4, #12]
 8015230:	9903      	ldr	r1, [sp, #12]
 8015232:	1a5b      	subs	r3, r3, r1
 8015234:	42ab      	cmp	r3, r5
 8015236:	dcf2      	bgt.n	801521e <_printf_i+0x216>
 8015238:	e7eb      	b.n	8015212 <_printf_i+0x20a>
 801523a:	2500      	movs	r5, #0
 801523c:	f104 0619 	add.w	r6, r4, #25
 8015240:	e7f5      	b.n	801522e <_printf_i+0x226>
 8015242:	bf00      	nop
 8015244:	08015875 	.word	0x08015875
 8015248:	08015886 	.word	0x08015886

0801524c <memmove>:
 801524c:	4288      	cmp	r0, r1
 801524e:	b510      	push	{r4, lr}
 8015250:	eb01 0402 	add.w	r4, r1, r2
 8015254:	d902      	bls.n	801525c <memmove+0x10>
 8015256:	4284      	cmp	r4, r0
 8015258:	4623      	mov	r3, r4
 801525a:	d807      	bhi.n	801526c <memmove+0x20>
 801525c:	1e43      	subs	r3, r0, #1
 801525e:	42a1      	cmp	r1, r4
 8015260:	d008      	beq.n	8015274 <memmove+0x28>
 8015262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015266:	f803 2f01 	strb.w	r2, [r3, #1]!
 801526a:	e7f8      	b.n	801525e <memmove+0x12>
 801526c:	4402      	add	r2, r0
 801526e:	4601      	mov	r1, r0
 8015270:	428a      	cmp	r2, r1
 8015272:	d100      	bne.n	8015276 <memmove+0x2a>
 8015274:	bd10      	pop	{r4, pc}
 8015276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801527a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801527e:	e7f7      	b.n	8015270 <memmove+0x24>

08015280 <_init>:
 8015280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015282:	bf00      	nop
 8015284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015286:	bc08      	pop	{r3}
 8015288:	469e      	mov	lr, r3
 801528a:	4770      	bx	lr

0801528c <_fini>:
 801528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801528e:	bf00      	nop
 8015290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015292:	bc08      	pop	{r3}
 8015294:	469e      	mov	lr, r3
 8015296:	4770      	bx	lr
