
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139e4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08013c7c  08013c7c  00023c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140b0  080140b0  000240b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080140b8  080140b8  000240b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080140c0  080140c0  000240c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  080140c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a40  24000090  08014154  00030090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001ad0  08014154  00031ad0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   000327ba  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004eb5  00000000  00000000  000628bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002550  00000000  00000000  00067770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d4b  00000000  00000000  00069cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e4c4  00000000  00000000  0006ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002f308  00000000  00000000  000a9ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018d563  00000000  00000000  000d91d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a87c  00000000  00000000  0026673c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00270fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000090 	.word	0x24000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013c64 	.word	0x08013c64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000094 	.word	0x24000094
 80002d4:	08013c64 	.word	0x08013c64

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f005 f98c 	bl	8005904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f82c 	bl	8000648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f0:	f000 f8a4 	bl	800073c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fe90 	bl	8001318 <MX_GPIO_Init>
  MX_BDMA_Init();
 80005f8:	f000 fe3e 	bl	8001278 <MX_BDMA_Init>
  MX_DMA_Init();
 80005fc:	f000 fe5c 	bl	80012b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f8ce 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000604:	f000 f944 	bl	8000890 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000608:	f000 f982 	bl	8000910 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800060c:	f000 f9cc 	bl	80009a8 <MX_UART4_Init>
  MX_UART5_Init();
 8000610:	f000 fa16 	bl	8000a40 <MX_UART5_Init>
  MX_UART7_Init();
 8000614:	f000 fa60 	bl	8000ad8 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000618:	f000 faaa 	bl	8000b70 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800061c:	f000 faf4 	bl	8000c08 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000620:	f000 fb1e 	bl	8000c60 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000624:	f000 fb40 	bl	8000ca8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000628:	f000 fc7e 	bl	8000f28 <MX_TIM5_Init>
  MX_TIM2_Init();
 800062c:	f000 fb92 	bl	8000d54 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fdf0 	bl	8001214 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000634:	f000 fc12 	bl	8000e5c <MX_TIM3_Init>
  MX_TIM15_Init();
 8000638:	f000 fd68 	bl	800110c <MX_TIM15_Init>
  MX_TIM6_Init();
 800063c:	f000 fcf6 	bl	800102c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000640:	f000 fd2c 	bl	800109c <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x60>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	224c      	movs	r2, #76	; 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f013 fa5d 	bl	8013b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f013 fa57 	bl	8013b16 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f009 fe21 	bl	800a2b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <SystemClock_Config+0xec>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <SystemClock_Config+0xec>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <SystemClock_Config+0xec>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xf0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xf0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xf0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xf0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006ce:	2314      	movs	r3, #20
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fee6 	bl	800a4b8 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f2:	f000 feeb 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800070a:	2350      	movs	r3, #80	; 0x50
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800070e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fb25 	bl	800ad6c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000728:	f000 fed0 	bl	80014cc <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b0      	sub	sp, #192	; 0xc0
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	22c0      	movs	r2, #192	; 0xc0
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f013 f9e4 	bl	8013b16 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 800074e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 800075e:	233c      	movs	r3, #60	; 0x3c
 8000760:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000772:	2320      	movs	r3, #32
 8000774:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f00a fe7b 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000794:	f000 fe9a 	bl	80014cc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	37c0      	adds	r7, #192	; 0xc0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007c6:	4a30      	ldr	r2, [pc, #192]	; (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ADC1_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ADC1_Init+0xe4>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000822:	f005 fabd 	bl	8005da0 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fe4e 	bl	80014cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_ADC1_Init+0xe4>)
 800083c:	f006 f8d4 	bl	80069e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000846:	f000 fe41 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0xec>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_ADC1_Init+0xe4>)
 800086e:	f005 fc39 	bl	80060e4 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000878:	f000 fe28 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240000ac 	.word	0x240000ac
 8000888:	40022000 	.word	0x40022000
 800088c:	0c900008 	.word	0x0c900008

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f009 fa80 	bl	8009dd0 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fdf9 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f009 fb07 	bl	8009ef0 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fdf0 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f009 fb49 	bl	8009f86 <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fde7 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	24000110 	.word	0x24000110
 8000908:	40005400 	.word	0x40005400
 800090c:	00c0eaff 	.word	0x00c0eaff

08000910 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_LPUART1_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800095a:	f00f fff3 	bl	8010944 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 fdb2 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	f011 ff2e 	bl	80127cc <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 fda9 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	f011 ff63 	bl	8012848 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 fda0 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800098e:	f011 fee4 	bl	801275a <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 fd98 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000164 	.word	0x24000164
 80009a4:	58000c00 	.word	0x58000c00

080009a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_UART4_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_UART4_Init+0x90>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_UART4_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_UART4_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_UART4_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_UART4_Init+0x90>)
 80009f2:	f00f ffa7 	bl	8010944 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 fd66 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a04:	f011 fee2 	bl	80127cc <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 fd5d 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a16:	f011 ff17 	bl	8012848 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 fd54 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a26:	f011 fe98 	bl	801275a <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 fd4c 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	240001f8 	.word	0x240001f8
 8000a3c:	40004c00 	.word	0x40004c00

08000a40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_UART5_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a8a:	f00f ff5b 	bl	8010944 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 fd1a 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a9c:	f011 fe96 	bl	80127cc <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fd11 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000aae:	f011 fecb 	bl	8012848 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fd08 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000abe:	f011 fe4c 	bl	801275a <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fd00 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2400028c 	.word	0x2400028c
 8000ad4:	40005000 	.word	0x40005000

08000ad8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_UART7_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_UART7_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_UART7_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b22:	f00f ff0f 	bl	8010944 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 fcce 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b34:	f011 fe4a 	bl	80127cc <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 fcc5 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b46:	f011 fe7f 	bl	8012848 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 fcbc 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b56:	f011 fe00 	bl	801275a <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 fcb4 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000320 	.word	0x24000320
 8000b6c:	40007800 	.word	0x40007800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <MX_USART3_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bba:	f00f fec3 	bl	8010944 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fc82 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f011 fdfe 	bl	80127cc <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fc79 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bde:	f011 fe33 	bl	8012848 <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f000 fc70 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bee:	f011 fdb4 	bl	801275a <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f000 fc68 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	240003b4 	.word	0x240003b4
 8000c04:	40004800 	.word	0x40004800

08000c08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_QUADSPI_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c44:	f009 fb7e 	bl	800a344 <HAL_QSPI_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 fc3d 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000628 	.word	0x24000628
 8000c5c:	52005000 	.word	0x52005000

08000c60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <MX_SDMMC1_SD_Init+0x44>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c8c:	f00d f8f8 	bl	800de80 <HAL_SD_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c96:	f000 fc19 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000674 	.word	0x24000674
 8000ca4:	52007000 	.word	0x52007000

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MX_SPI1_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d38:	f00e f910 	bl	800ef5c <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fbc3 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240006f0 	.word	0x240006f0
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da0:	482d      	ldr	r0, [pc, #180]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000da2:	f00e fad2 	bl	800f34a <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fb8e 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000db0:	4829      	ldr	r0, [pc, #164]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000db2:	f00e fa69 	bl	800f288 <HAL_TIM_OC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000dbc:	f000 fb86 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000dd0:	f00f fd0c 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000dda:	f000 fb77 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000df6:	f00e fd8b 	bl	800f910 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e00:	f000 fb64 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2204      	movs	r2, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e0c:	f00e fd80 	bl	800f910 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000e16:	f000 fb59 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e22:	f00e fd75 	bl	800f910 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e2c:	f000 fb4e 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	220c      	movs	r2, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e3c:	f00e fc52 	bl	800f6e4 <HAL_TIM_OC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000e46:	f000 fb41 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e4c:	f004 faf4 	bl	8005438 <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000778 	.word	0x24000778

08000e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <MX_TIM3_Init+0xc8>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e88:	2263      	movs	r2, #99	; 0x63
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15503;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e94:	f643 428f 	movw	r2, #15503	; 0x3c8f
 8000e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ea6:	481e      	ldr	r0, [pc, #120]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ea8:	f00e fa4f 	bl	800f34a <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f000 fb0b 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ec6:	f00f fc91 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ed0:	f000 fafc 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	; 0x60
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000eec:	f00e fd10 	bl	800f910 <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ef6:	f000 fae9 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000f02:	f00e fd05 	bl	800f910 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f0c:	f000 fade 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000f12:	f004 fa91 	bl	8005438 <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240007c4 	.word	0x240007c4
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <MX_TIM5_Init+0x100>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7c:	4829      	ldr	r0, [pc, #164]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f7e:	f00e fa3b 	bl	800f3f8 <HAL_TIM_IC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f88:	f000 faa0 	bl	80014cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f90:	2350      	movs	r3, #80	; 0x50
 8000f92:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000fa8:	f00e fdc6 	bl	800fb38 <HAL_TIM_SlaveConfigSynchro>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 fa8b 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000fd0:	f00e fc02 	bl	800f7d8 <HAL_TIM_IC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8000fda:	f000 fa77 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2204      	movs	r2, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000ff0:	f00e fbf2 	bl	800f7d8 <HAL_TIM_IC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000ffa:	f000 fa67 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_TIM5_Init+0xfc>)
 800100c:	f00f fbee 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001016:	f000 fa59 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	; 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000810 	.word	0x24000810
 8001028:	40000c00 	.word	0x40000c00

0800102c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_TIM6_Init+0x68>)
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <MX_TIM6_Init+0x6c>)
 8001040:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_TIM6_Init+0x68>)
 8001044:	f242 720f 	movw	r2, #9999	; 0x270f
 8001048:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_TIM6_Init+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_TIM6_Init+0x68>)
 8001052:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001056:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_TIM6_Init+0x68>)
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM6_Init+0x68>)
 8001060:	f00e f8bb 	bl	800f1da <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800106a:	f000 fa2f 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM6_Init+0x68>)
 800107c:	f00f fbb6 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 fa21 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400085c 	.word	0x2400085c
 8001098:	40001000 	.word	0x40001000

0800109c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <MX_TIM7_Init+0x6c>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_TIM7_Init+0x68>)
 80010b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_TIM7_Init+0x68>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_TIM7_Init+0x68>)
 80010c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM7_Init+0x68>)
 80010d0:	f00e f883 	bl	800f1da <HAL_TIM_Base_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010da:	f000 f9f7 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ec:	f00f fb7e 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010f6:	f000 f9e9 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	240008a8 	.word	0x240008a8
 8001108:	40001400 	.word	0x40001400

0800110c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <MX_TIM15_Init+0x100>)
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <MX_TIM15_Init+0x104>)
 800113e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_TIM15_Init+0x100>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <MX_TIM15_Init+0x100>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <MX_TIM15_Init+0x100>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_TIM15_Init+0x100>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM15_Init+0x100>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_TIM15_Init+0x100>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001166:	4829      	ldr	r0, [pc, #164]	; (800120c <MX_TIM15_Init+0x100>)
 8001168:	f00e f946 	bl	800f3f8 <HAL_TIM_IC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 8001172:	f000 f9ab 	bl	80014cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001176:	2304      	movs	r3, #4
 8001178:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800117a:	2350      	movs	r3, #80	; 0x50
 800117c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <MX_TIM15_Init+0x100>)
 8001192:	f00e fcd1 	bl	800fb38 <HAL_TIM_SlaveConfigSynchro>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 f996 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM15_Init+0x100>)
 80011ba:	f00e fb0d 	bl	800f7d8 <HAL_TIM_IC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 80011c4:	f000 f982 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2204      	movs	r2, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM15_Init+0x100>)
 80011da:	f00e fafd 	bl	800f7d8 <HAL_TIM_IC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 80011e4:	f000 f972 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM15_Init+0x100>)
 80011f6:	f00f faf9 	bl	80107ec <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001200:	f000 f964 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	240008f4 	.word	0x240008f4
 8001210:	40014000 	.word	0x40014000

08001214 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800121c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001220:	2209      	movs	r2, #9
 8001222:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001226:	2202      	movs	r2, #2
 8001228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001232:	2202      	movs	r2, #2
 8001234:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125c:	f008 fedf 	bl	800a01e <HAL_PCD_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001266:	f000 f931 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24000940 	.word	0x24000940
 8001274:	40080000 	.word	0x40080000

08001278 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2081      	movs	r0, #129	; 0x81
 80012a2:	f005 fd5a 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80012a6:	2081      	movs	r0, #129	; 0x81
 80012a8:	f005 fd71 	bl	8006d8e <HAL_NVIC_EnableIRQ>

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	58024400 	.word	0x58024400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_DMA_Init+0x5c>)
 80012c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_DMA_Init+0x5c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_DMA_Init+0x5c>)
 80012d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	200b      	movs	r0, #11
 80012e2:	f005 fd3a 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e6:	200b      	movs	r0, #11
 80012e8:	f005 fd51 	bl	8006d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	200c      	movs	r0, #12
 80012f2:	f005 fd32 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012f6:	200c      	movs	r0, #12
 80012f8:	f005 fd49 	bl	8006d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	200d      	movs	r0, #13
 8001302:	f005 fd2a 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001306:	200d      	movs	r0, #13
 8001308:	f005 fd41 	bl	8006d8e <HAL_NVIC_EnableIRQ>

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58024400 	.word	0x58024400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001334:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133e:	4b5e      	ldr	r3, [pc, #376]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a59      	ldr	r2, [pc, #356]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f248 0108 	movw	r1, #32776	; 0x8008
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <MX_GPIO_Init+0x1a4>)
 80013ea:	f008 fcd7 	bl	8009d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f24c 0120 	movw	r1, #49184	; 0xc020
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 80013f6:	f008 fcd1 	bl	8009d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 8001400:	4830      	ldr	r0, [pc, #192]	; (80014c4 <MX_GPIO_Init+0x1ac>)
 8001402:	f008 fccb 	bl	8009d9c <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LED_RED_Pin;
 8001406:	f248 0308 	movw	r3, #32776	; 0x8008
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4827      	ldr	r0, [pc, #156]	; (80014bc <MX_GPIO_Init+0x1a4>)
 8001420:	f008 fb0c 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_GPIO_Init+0x1b0>)
 800143c:	f008 fafe 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4819      	ldr	r0, [pc, #100]	; (80014bc <MX_GPIO_Init+0x1a4>)
 8001456:	f008 faf1 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 800145a:	f24c 0320 	movw	r3, #49184	; 0xc020
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 8001474:	f008 fae2 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001478:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 800147c:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <MX_GPIO_Init+0x1ac>)
 8001492:	f008 fad3 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 80014aa:	f008 fac7 	bl	8009a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	58020800 	.word	0x58020800

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>

080014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80014d6:	b480      	push	{r7}
 80014d8:	b087      	sub	sp, #28
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	ed87 0a00 	vstr	s0, [r7]
 80014e2:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    std::memcpy(&val, &f, sizeof(val));
 80014e4:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	15db      	asrs	r3, r3, #23
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80014f6:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 80014f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014fc:	2bff      	cmp	r3, #255	; 0xff
 80014fe:	d103      	bne.n	8001508 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001500:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001504:	82fb      	strh	r3, [r7, #22]
 8001506:	e02a      	b.n	800155e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001510:	8afb      	ldrh	r3, [r7, #22]
 8001512:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001516:	b29b      	uxth	r3, r3
 8001518:	82fb      	strh	r3, [r7, #22]
 800151a:	e020      	b.n	800155e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001522:	2300      	movs	r3, #0
 8001524:	82fb      	strh	r3, [r7, #22]
 8001526:	e01a      	b.n	800155e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001528:	8afb      	ldrh	r3, [r7, #22]
 800152a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800152e:	b29b      	uxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001538:	e008      	b.n	800154c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]
          exp--;
 8001540:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f1      	beq.n	800153a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800155c:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	6079      	str	r1, [r7, #4]
 8001586:	0152      	lsls	r2, r2, #5
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	08d9      	lsrs	r1, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	0ad9      	lsrs	r1, r3, #11
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 80015a8:	8afb      	ldrh	r3, [r7, #22]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	0cdb      	lsrs	r3, r3, #19
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1c58      	adds	r0, r3, #1
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80015c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015cc:	111b      	asrs	r3, r3, #4
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	6079      	str	r1, [r7, #4]
 80015d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80015e0:	edd7 7a00 	vldr	s15, [r7]
 80015e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d508      	bpl.n	8001600 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001600:	2308      	movs	r3, #8
  }
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3303      	adds	r3, #3
 800161c:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	051b      	lsls	r3, r3, #20
 8001656:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b21b      	sxth	r3, r3
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	b29b      	uxth	r3, r3
 800167e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8001682:	b29a      	uxth	r2, r3
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	4313      	orrs	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 800168c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001690:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001694:	4293      	cmp	r3, r2
 8001696:	d102      	bne.n	800169e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 8001698:	23ff      	movs	r3, #255	; 0xff
 800169a:	82fb      	strh	r3, [r7, #22]
 800169c:	e02c      	b.n	80016f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 800169e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a2:	f240 427e 	movw	r2, #1150	; 0x47e
 80016a6:	4293      	cmp	r3, r2
 80016a8:	dd04      	ble.n	80016b4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 80016aa:	23ff      	movs	r3, #255	; 0xff
 80016ac:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e021      	b.n	80016f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80016b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80016bc:	dd05      	ble.n	80016ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80016be:	8afb      	ldrh	r3, [r7, #22]
 80016c0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	82fb      	strh	r3, [r7, #22]
 80016c8:	e016      	b.n	80016f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80016ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ce:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016d2:	dc02      	bgt.n	80016da <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]
 80016d8:	e00e      	b.n	80016f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e0:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80016e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016e6:	f240 3381 	movw	r3, #897	; 0x381
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	613b      	str	r3, [r7, #16]
      exp = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80016fe:	4293      	cmp	r3, r2
 8001700:	d002      	beq.n	8001708 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3301      	adds	r3, #1
 8001706:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8001712:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001716:	05da      	lsls	r2, r3, #23
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fa      	ldr	r2, [r7, #12]

    std::memcpy(f, &val, sizeof(val));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
    return 8;
 8001738:	2308      	movs	r3, #8
  }
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_ZN3ros3MsgC1Ev>:
class Msg
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <_ZN3ros3MsgC1Ev+0x1c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	08014060 	.word	0x08014060

08001788 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
      data()
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ffe8 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffcf 	bl	8001746 <_ZN3ros4TimeC1Ev>
    {
    }
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	08014048 	.word	0x08014048

080017b8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0a19      	lsrs	r1, r3, #8
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3301      	adds	r3, #1
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0c19      	lsrs	r1, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3302      	adds	r3, #2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0e19      	lsrs	r1, r3, #24
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3303      	adds	r3, #3
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a19      	lsrs	r1, r3, #8
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b2ca      	uxtb	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	0c19      	lsrs	r1, r3, #16
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3302      	adds	r3, #2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	4413      	add	r3, r2
 800183e:	b2ca      	uxtb	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0e19      	lsrs	r1, r3, #24
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3303      	adds	r3, #3
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3304      	adds	r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
      return offset;
 800185a:	68fb      	ldr	r3, [r7, #12]
    }
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	440b      	add	r3, r1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3302      	adds	r3, #2
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3303      	adds	r3, #3
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3304      	adds	r3, #4
 80018ca:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3302      	adds	r3, #2
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	440b      	add	r3, r1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3303      	adds	r3, #3
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	440b      	add	r3, r1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3304      	adds	r3, #4
 8001920:	60fb      	str	r3, [r7, #12]
     return offset;
 8001922:	68fb      	ldr	r3, [r7, #12]
    }
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	08013c7c 	.word	0x08013c7c

0800194c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08013c8c 	.word	0x08013c8c

08001968 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fef8 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001988:	609a      	str	r2, [r3, #8]
      message_type(""),
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800198e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001994:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    {
    }
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08014030 	.word	0x08014030
 80019ac:	08013cb0 	.word	0x08013cb0

080019b0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8899      	ldrh	r1, [r3, #4]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	889b      	ldrh	r3, [r3, #4]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b299      	uxth	r1, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	3301      	adds	r3, #1
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	3302      	adds	r3, #2
 80019e4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fc74 	bl	80002d8 <strlen>
 80019f0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 f8f6 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3304      	adds	r3, #4
 8001a04:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	18d0      	adds	r0, r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4619      	mov	r1, r3
 8001a14:	f012 f8c4 	bl	8013ba0 <memcpy>
      offset += length_topic_name;
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fc57 	bl	80002d8 <strlen>
 8001a2a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 f8d9 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	18d0      	adds	r0, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f012 f8a7 	bl	8013ba0 <memcpy>
      offset += length_message_type;
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4413      	add	r3, r2
 8001a58:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fc3a 	bl	80002d8 <strlen>
 8001a64:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 f8bc 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3304      	adds	r3, #4
 8001a78:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	18d0      	adds	r0, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f012 f88a 	bl	8013ba0 <memcpy>
      offset += length_md5sum;
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0a19      	lsrs	r1, r3, #8
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	0c19      	lsrs	r1, r3, #16
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3302      	adds	r3, #2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0e19      	lsrs	r1, r3, #24
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3303      	adds	r3, #3
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	61fb      	str	r3, [r7, #28]
      return offset;
 8001adc:	69fb      	ldr	r3, [r7, #28]
    }
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b08a      	sub	sp, #40	; 0x28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	440b      	add	r3, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	3302      	adds	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	441a      	add	r2, r3
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 f879 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	e00b      	b.n	8001b5c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	441a      	add	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	440b      	add	r3, r1
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	4413      	add	r3, r2
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3ed      	bcc.n	8001b44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	441a      	add	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	4413      	add	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	441a      	add	r2, r3
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f846 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	e00b      	b.n	8001bc2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	441a      	add	r2, r3
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3ed      	bcc.n	8001baa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	441a      	add	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 f813 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	3304      	adds	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e00b      	b.n	8001c28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	441a      	add	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3ed      	bcc.n	8001c10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	441a      	add	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	440a      	add	r2, r1
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	440b      	add	r3, r1
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	3302      	adds	r3, #2
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	440b      	add	r3, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	3303      	adds	r3, #3
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	440b      	add	r3, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	61bb      	str	r3, [r7, #24]
     return offset;
 8001cac:	69bb      	ldr	r3, [r7, #24]
    }
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	08013cb4 	.word	0x08013cb4

08001cd4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	08013cd0 	.word	0x08013cd0

08001cf0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fd34 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
      level(0),
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	711a      	strb	r2, [r3, #4]
      msg("")
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001d10:	609a      	str	r2, [r3, #8]
    {
    }
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	08014018 	.word	0x08014018
 8001d20:	08013cb0 	.word	0x08013cb0

08001d24 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	7912      	ldrb	r2, [r2, #4]
 8001d3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fac5 	bl	80002d8 <strlen>
 8001d4e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 ff47 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3304      	adds	r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	18d0      	adds	r0, r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f011 ff15 	bl	8013ba0 <memcpy>
      offset += length_msg;
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    }
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	441a      	add	r2, r3
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 ff38 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00b      	b.n	8001dde <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	441a      	add	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3ed      	bcc.n	8001dc6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	3b01      	subs	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
     return offset;
 8001e0e:	693b      	ldr	r3, [r7, #16]
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	08013cf4 	.word	0x08013cf4

08001e34 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08013d08 	.word	0x08013d08

08001e50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fc84 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	08014000 	.word	0x08014000

08001eac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0a19      	lsrs	r1, r3, #8
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0c19      	lsrs	r1, r3, #16
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0e19      	lsrs	r1, r3, #24
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	3303      	adds	r3, #3
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3304      	adds	r3, #4
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e02a      	b.n	8001f60 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f18:	6939      	ldr	r1, [r7, #16]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2ca      	uxtb	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	0a19      	lsrs	r1, r3, #8
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2ca      	uxtb	r2, r1
 8001f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	0c19      	lsrs	r1, r3, #16
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	0e19      	lsrs	r1, r3, #24
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	b2ca      	uxtb	r2, r1
 8001f52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3304      	adds	r3, #4
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3cf      	bcc.n	8001f0a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	0a19      	lsrs	r1, r3, #8
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	3301      	adds	r3, #1
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	b2ca      	uxtb	r2, r1
 8001f88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	0c19      	lsrs	r1, r3, #16
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	3302      	adds	r3, #2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	b2ca      	uxtb	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	0e19      	lsrs	r1, r3, #24
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e02a      	b.n	8002010 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2ca      	uxtb	r2, r1
 8001fd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	0a19      	lsrs	r1, r3, #8
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3301      	adds	r3, #1
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0c19      	lsrs	r1, r3, #16
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	3302      	adds	r3, #2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	0e19      	lsrs	r1, r3, #24
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	b2ca      	uxtb	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3304      	adds	r3, #4
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3cf      	bcc.n	8001fba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69d9      	ldr	r1, [r3, #28]
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	0a19      	lsrs	r1, r3, #8
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	0c19      	lsrs	r1, r3, #16
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	0e19      	lsrs	r1, r3, #24
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3304      	adds	r3, #4
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e027      	b.n	80020ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f92e 	bl	80002d8 <strlen>
 800207c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	6979      	ldr	r1, [r7, #20]
 8002086:	4618      	mov	r0, r3
 8002088:	f001 fdb0 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3304      	adds	r3, #4
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	18d0      	adds	r0, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4619      	mov	r1, r3
 80020a8:	f011 fd7a 	bl	8013ba0 <memcpy>
      offset += length_stringsi;
 80020ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3d2      	bcc.n	800206a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020c6:	4618      	mov	r0, r3
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b08e      	sub	sp, #56	; 0x38
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e8:	3301      	adds	r3, #1
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	6a3a      	ldr	r2, [r7, #32]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	3302      	adds	r3, #2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	4313      	orrs	r3, r2
 8002108:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	3303      	adds	r3, #3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	6a3a      	ldr	r2, [r7, #32]
 8002118:	4313      	orrs	r3, r2
 800211a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	3304      	adds	r3, #4
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	429a      	cmp	r2, r3
 800212a:	d90a      	bls.n	8002142 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f011 fcb6 	bl	8013aa8 <realloc>
 800213c:	4602      	mov	r2, r0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
 800214c:	e035      	b.n	80021ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	440a      	add	r2, r1
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	3301      	adds	r3, #1
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	440b      	add	r3, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	3302      	adds	r3, #2
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	440b      	add	r3, r1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	3303      	adds	r3, #3
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	440b      	add	r3, r1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	3304      	adds	r3, #4
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	3301      	adds	r3, #1
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3c4      	bcc.n	800214e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	3301      	adds	r3, #1
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	3302      	adds	r3, #2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	3303      	adds	r3, #3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	4313      	orrs	r3, r2
 8002202:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	3304      	adds	r3, #4
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	429a      	cmp	r2, r3
 8002212:	d90a      	bls.n	800222a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f011 fc42 	bl	8013aa8 <realloc>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002234:	e035      	b.n	80022a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	440a      	add	r2, r1
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	3301      	adds	r3, #1
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	440b      	add	r3, r1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	3302      	adds	r3, #2
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	440b      	add	r3, r1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	3303      	adds	r3, #3
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	440b      	add	r3, r1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	3304      	adds	r3, #4
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	3214      	adds	r2, #20
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	3301      	adds	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3c4      	bcc.n	8002236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b8:	3301      	adds	r3, #1
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	3302      	adds	r3, #2
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	3303      	adds	r3, #3
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	3304      	adds	r3, #4
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d90a      	bls.n	8002312 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f011 fbce 	bl	8013aa8 <realloc>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
 800231c:	e03e      	b.n	800239c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	441a      	add	r2, r3
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fc7d 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	3304      	adds	r3, #4
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e00b      	b.n	8002354 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	441a      	add	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	3b01      	subs	r3, #1
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	440b      	add	r3, r1
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	429a      	cmp	r2, r3
 800235e:	d3ed      	bcc.n	800233c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	3b01      	subs	r3, #1
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4413      	add	r3, r2
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	3b01      	subs	r3, #1
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800237c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	3220      	adds	r2, #32
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	3301      	adds	r3, #1
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3bb      	bcc.n	800231e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80023a8:	4618      	mov	r0, r3
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	08013f0c 	.word	0x08013f0c

080023cc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	08013d2c 	.word	0x08013d2c

080023e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68d8      	ldr	r0, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6891      	ldr	r1, [r2, #8]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
  };
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
  }
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d077      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a48      	ldr	r2, [pc, #288]	; (800259c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d06f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a45      	ldr	r2, [pc, #276]	; (80025a0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d067      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a42      	ldr	r2, [pc, #264]	; (80025a4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d05f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d057      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d047      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d037      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a30      	ldr	r2, [pc, #192]	; (80025bc <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d02f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d027      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d017      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00f      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10a      	bne.n	8002576 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	e009      	b.n	800258a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8

080025d8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <_ZN13STM32HardwareC1Ev+0x34>)
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	240001f8 	.word	0x240001f8

08002610 <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002624:	4619      	mov	r1, r3
 8002626:	f00e fa5d 	bl	8010ae4 <HAL_UART_Receive_DMA>
    }
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
      int c = -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263e:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff06 	bl	8002458 <_ZN13STM32Hardware10getRdmaIndEv>
 800264c:	4603      	mov	r3, r0
 800264e:	429c      	cmp	r4, r3
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	791b      	ldrb	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002682:	68fb      	ldr	r3, [r7, #12]
    }
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}

0800268c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	2b20      	cmp	r3, #32
 800269e:	d108      	bne.n	80026b2 <_ZN13STM32Hardware5flushEv+0x26>
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <_ZN13STM32Hardware5flushEv+0xb4>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <_ZN13STM32Hardware5flushEv+0x26>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <_ZN13STM32Hardware5flushEv+0x28>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03f      	beq.n	8002738 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <_ZN13STM32Hardware5flushEv+0xb4>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d031      	beq.n	8002732 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026da:	429a      	cmp	r2, r3
 80026dc:	d20a      	bcs.n	80026f4 <_ZN13STM32Hardware5flushEv+0x68>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	e006      	b.n	8002702 <_ZN13STM32Hardware5flushEv+0x76>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002700:	b29b      	uxth	r3, r3
 8002702:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800270e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	89fa      	ldrh	r2, [r7, #14]
 8002718:	4619      	mov	r1, r3
 800271a:	f00e f963 	bl	80109e4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	4413      	add	r3, r2
 8002728:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002732:	4b03      	ldr	r3, [pc, #12]	; (8002740 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
      }
    }
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	24000e4c 	.word	0x24000e4c

08002744 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275a:	bfa8      	it	ge
 800275c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002760:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002768:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4293      	cmp	r3, r2
 8002770:	bf28      	it	cs
 8002772:	4613      	movcs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800277c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f011 fa09 	bl	8013ba0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	4413      	add	r3, r2
 8002798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d00b      	beq.n	80027c2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	18d1      	adds	r1, r2, r3
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	f011 f9ef 	bl	8013ba0 <memcpy>
      }

      flush();
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff ff62 	bl	800268c <_ZN13STM32Hardware5flushEv>
    }
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	f003 f91a 	bl	8005a10 <HAL_GetTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe ffb8 	bl	8001768 <_ZN3ros3MsgC1Ev>
 80027f8:	4a08      	ldr	r2, [pc, #32]	; (800281c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
      label(""),
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002802:	605a      	str	r2, [r3, #4]
      size(0),
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
      stride(0)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
    {
    }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08013fbc 	.word	0x08013fbc
 8002820:	08013cb0 	.word	0x08013cb0

08002824 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fd4e 	bl	80002d8 <strlen>
 800283c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	4618      	mov	r0, r3
 8002848:	f001 f9d0 	bl	8003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	18d0      	adds	r0, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4619      	mov	r1, r3
 8002860:	f011 f99e 	bl	8013ba0 <memcpy>
      offset += length_label;
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6899      	ldr	r1, [r3, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	b2ca      	uxtb	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a19      	lsrs	r1, r3, #8
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	0c19      	lsrs	r1, r3, #16
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3302      	adds	r3, #2
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4413      	add	r3, r2
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0e19      	lsrs	r1, r3, #24
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3303      	adds	r3, #3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2ca      	uxtb	r2, r1
 80028ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3304      	adds	r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68d9      	ldr	r1, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a19      	lsrs	r1, r3, #8
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0c19      	lsrs	r1, r3, #16
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3302      	adds	r3, #2
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0e19      	lsrs	r1, r3, #24
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3303      	adds	r3, #3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	b2ca      	uxtb	r2, r1
 80028f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3304      	adds	r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
      return offset;
 8002900:	68fb      	ldr	r3, [r7, #12]
    }
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	441a      	add	r2, r3
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f980 	bl	8003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3304      	adds	r3, #4
 800292e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e00b      	b.n	800294e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	441a      	add	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3b01      	subs	r3, #1
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	440b      	add	r3, r1
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3ed      	bcc.n	8002936 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	3b01      	subs	r3, #1
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3b01      	subs	r3, #1
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	3301      	adds	r3, #1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	440b      	add	r3, r1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	3302      	adds	r3, #2
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440b      	add	r3, r1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	3303      	adds	r3, #3
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3304      	adds	r3, #4
 80029d2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3301      	adds	r3, #1
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	440b      	add	r3, r1
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	3302      	adds	r3, #2
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	440b      	add	r3, r1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3303      	adds	r3, #3
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	440b      	add	r3, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3304      	adds	r3, #4
 8002a28:	613b      	str	r3, [r7, #16]
     return offset;
 8002a2a:	693b      	ldr	r3, [r7, #16]
    }
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	08013d50 	.word	0x08013d50

08002a50 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	08013d70 	.word	0x08013d70

08002a6c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fe76 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff feab 	bl	80027e8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
    {
    }
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	08013fa4 	.word	0x08013fa4

08002aac <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b2ca      	uxtb	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0a19      	lsrs	r1, r3, #8
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2ca      	uxtb	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0c19      	lsrs	r1, r3, #16
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2ca      	uxtb	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0e19      	lsrs	r1, r3, #24
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3303      	adds	r3, #3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	e017      	b.n	8002b3a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	18d0      	adds	r0, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	440a      	add	r2, r1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3e2      	bcc.n	8002b0a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69d9      	ldr	r1, [r3, #28]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	0a19      	lsrs	r1, r3, #8
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	0c19      	lsrs	r1, r3, #16
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	b2ca      	uxtb	r2, r1
 8002b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	0e19      	lsrs	r1, r3, #24
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3303      	adds	r3, #3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3304      	adds	r3, #4
 8002bea:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90a      	bls.n	8002c0c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f010 ff51 	bl	8013aa8 <realloc>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	e01a      	b.n	8002c4e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f103 0008 	add.w	r0, r3, #8
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7ff fe70 	bl	800290a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4413      	add	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	18d0      	adds	r0, r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	2210      	movs	r2, #16
 8002c42:	4619      	mov	r1, r3
 8002c44:	f010 ffac 	bl	8013ba0 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3df      	bcc.n	8002c18 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	440b      	add	r3, r1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3302      	adds	r3, #2
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	440b      	add	r3, r1
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3303      	adds	r3, #3
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	440b      	add	r3, r1
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3304      	adds	r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
     return offset;
 8002cae:	697b      	ldr	r3, [r7, #20]
    }
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	08013d94 	.word	0x08013d94

08002cd4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	08013db0 	.word	0x08013db0

08002cf0 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fd34 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
      layout(),
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff feae 	bl	8002a6c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	08013f8c 	.word	0x08013f8c

08002d34 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1d18      	adds	r0, r3, #4
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7ff fead 	bl	8002aac <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002d52:	4602      	mov	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4413      	add	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	b2ca      	uxtb	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	0a19      	lsrs	r1, r3, #8
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	0c19      	lsrs	r1, r3, #16
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3302      	adds	r3, #2
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	0e19      	lsrs	r1, r3, #24
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3303      	adds	r3, #3
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b2ca      	uxtb	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e02a      	b.n	8002e00 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b2ca      	uxtb	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0a19      	lsrs	r1, r3, #8
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2ca      	uxtb	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	0c19      	lsrs	r1, r3, #16
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	0e19      	lsrs	r1, r3, #24
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3303      	adds	r3, #3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3304      	adds	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3cf      	bcc.n	8002daa <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002e0a:	697b      	ldr	r3, [r7, #20]
    }
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1d18      	adds	r0, r3, #4
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7ff feb3 	bl	8002b98 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3301      	adds	r3, #1
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3303      	adds	r3, #3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90a      	bls.n	8002ea0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f010 fe07 	bl	8013aa8 <realloc>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e035      	b.n	8002f18 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	440a      	add	r2, r1
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	440b      	add	r3, r1
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	440b      	add	r3, r1
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3303      	adds	r3, #3
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	440b      	add	r3, r1
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	3228      	adds	r2, #40	; 0x28
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	3301      	adds	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3c4      	bcc.n	8002eac <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8002f22:	697b      	ldr	r3, [r7, #20]
    }
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	08013dd4 	.word	0x08013dd4

08002f48 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	08013df0 	.word	0x08013df0

08002f64 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
      data(0)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fbfa 	bl	8001768 <_ZN3ros3MsgC1Ev>
 8002f74:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
    {
    }
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	08013f74 	.word	0x08013f74

08002f90 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	b2ca      	uxtb	r2, r1
 8002fae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0a19      	lsrs	r1, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b2ca      	uxtb	r2, r1
 8002fbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0c19      	lsrs	r1, r3, #16
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	b2ca      	uxtb	r2, r1
 8002fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0e19      	lsrs	r1, r3, #24
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3303      	adds	r3, #3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	440a      	add	r2, r1
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	440b      	add	r3, r1
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3302      	adds	r3, #2
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	440b      	add	r3, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	4313      	orrs	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3303      	adds	r3, #3
 800303e:	6839      	ldr	r1, [r7, #0]
 8003040:	440b      	add	r3, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	4313      	orrs	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3304      	adds	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
     return offset;
 8003056:	68fb      	ldr	r3, [r7, #12]
    }
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	08013e14 	.word	0x08013e14

08003080 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	08013e28 	.word	0x08013e28

0800309c <_ZN9vesc_msgs9VescStateC1Ev>:
      enum { FAULT_CODE_DRV8302 = 3 };
      enum { FAULT_CODE_ABS_OVER_CURRENT = 4 };
      enum { FAULT_CODE_OVER_TEMP_FET = 5 };
      enum { FAULT_CODE_OVER_TEMP_MOTOR = 6 };

    VescState():
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
      charge_regen(0),
      energy_drawn(0),
      energy_regen(0),
      displacement(0),
      distance_traveled(0),
      fault_code(0)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fb5e 	bl	8001768 <_ZN3ros3MsgC1Ev>
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <_ZN9vesc_msgs9VescStateC1Ev+0x88>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
      voltage_input(0),
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
      temperature_pcb(0),
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
      current_motor(0),
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
      current_input(0),
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
      speed(0),
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
      duty_cycle(0),
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
      charge_drawn(0),
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
      charge_regen(0),
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
      energy_drawn(0),
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
      energy_regen(0),
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
      displacement(0),
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
      distance_traveled(0),
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
      fault_code(0)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	08013f5c 	.word	0x08013f5c

08003128 <_ZNK9vesc_msgs9VescState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->voltage_input);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	441a      	add	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	4610      	mov	r0, r2
 8003148:	f7fe f9c5 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature_pcb);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	441a      	add	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	4610      	mov	r0, r2
 8003166:	f7fe f9b6 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_motor);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	441a      	add	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	edd3 7a03 	vldr	s15, [r3, #12]
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	4610      	mov	r0, r2
 8003184:	f7fe f9a7 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_input);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a04 	vldr	s15, [r3, #16]
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe f998 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	441a      	add	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe f989 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->duty_cycle);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80031d8:	eeb0 0a67 	vmov.f32	s0, s15
 80031dc:	4610      	mov	r0, r2
 80031de:	f7fe f97a 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_drawn);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	441a      	add	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7fe f96b 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_regen);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	441a      	add	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a08 	vldr	s15, [r3, #32]
 8003214:	eeb0 0a67 	vmov.f32	s0, s15
 8003218:	4610      	mov	r0, r2
 800321a:	f7fe f95c 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_drawn);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	441a      	add	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	4610      	mov	r0, r2
 8003238:	f7fe f94d 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_regen);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003250:	eeb0 0a67 	vmov.f32	s0, s15
 8003254:	4610      	mov	r0, r2
 8003256:	f7fe f93e 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->displacement);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	441a      	add	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800326e:	eeb0 0a67 	vmov.f32	s0, s15
 8003272:	4610      	mov	r0, r2
 8003274:	f7fe f92f 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->distance_traveled);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	4610      	mov	r0, r2
 8003292:	f7fe f920 	bl	80014d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.real = this->fault_code;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_fault_code.base >> (8 * 0)) & 0xFF;
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	b2ca      	uxtb	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_fault_code.base >> (8 * 1)) & 0xFF;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0a19      	lsrs	r1, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	b2ca      	uxtb	r2, r1
 80032be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_fault_code.base >> (8 * 2)) & 0xFF;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0c19      	lsrs	r1, r3, #16
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3302      	adds	r3, #2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	b2ca      	uxtb	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_fault_code.base >> (8 * 3)) & 0xFF;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	0e19      	lsrs	r1, r3, #24
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3303      	adds	r3, #3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	b2ca      	uxtb	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->fault_code);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80032e6:	68fb      	ldr	r3, [r7, #12]
    }
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN9vesc_msgs9VescState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->voltage_input));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	441a      	add	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fe f97f 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature_pcb));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3308      	adds	r3, #8
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fe f972 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_motor));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	330c      	adds	r3, #12
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fe f965 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_input));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3310      	adds	r3, #16
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7fe f958 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3314      	adds	r3, #20
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fe f94b 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->duty_cycle));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3318      	adds	r3, #24
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f7fe f93e 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_drawn));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	441a      	add	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	331c      	adds	r3, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fe f931 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_regen));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3320      	adds	r3, #32
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f7fe f924 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_drawn));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7fe f917 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_regen));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3328      	adds	r3, #40	; 0x28
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f7fe f90a 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->displacement));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	441a      	add	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	332c      	adds	r3, #44	; 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f7fe f8fd 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->distance_traveled));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3330      	adds	r3, #48	; 0x30
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7fe f8f0 	bl	800160e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.base = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	440a      	add	r2, r1
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	6839      	ldr	r1, [r7, #0]
 8003450:	440b      	add	r3, r1
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4313      	orrs	r3, r2
 8003458:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3302      	adds	r3, #2
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	440b      	add	r3, r1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	4313      	orrs	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3303      	adds	r3, #3
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	440b      	add	r3, r1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	4313      	orrs	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
      this->fault_code = u_fault_code.real;
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->fault_code);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3304      	adds	r3, #4
 8003488:	60fb      	str	r3, [r7, #12]
     return offset;
 800348a:	68fb      	ldr	r3, [r7, #12]
    }
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_ZN9vesc_msgs9VescState7getTypeEv>:

    const char * getType(){ return "vesc_msgs/VescState"; };
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <_ZN9vesc_msgs9VescState7getTypeEv+0x18>)
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	08013e4c 	.word	0x08013e4c

080034b0 <_ZN9vesc_msgs9VescState6getMD5Ev>:
    const char * getMD5(){ return "81214bb4c1945e7c159bd76ec397ac04"; };
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <_ZN9vesc_msgs9VescState6getMD5Ev+0x18>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	08013e60 	.word	0x08013e60

080034cc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	08013fec 	.word	0x08013fec

080034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ffe8 	bl	80034cc <_ZN3ros15NodeHandleBase_C1Ev>
 80034fc:	4a36      	ldr	r2, [pc, #216]	; (80035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f866 	bl	80025d8 <_ZN13STM32HardwareC1Ev>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f010 faec 	bl	8013b16 <memset>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f010 fae3 	bl	8013b16 <memset>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003556:	2264      	movs	r2, #100	; 0x64
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f010 fadb 	bl	8013b16 <memset>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8003566:	2264      	movs	r2, #100	; 0x64
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f010 fad3 	bl	8013b16 <memset>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fc42 	bl	8001e50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	08013f48 	.word	0x08013f48

080035dc <_Z13read_ble_dataPh>:


//char hello[] = "Hello world from STM32!";


HAL_StatusTypeDef read_ble_data(uint8_t* data){
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 80035e4:	4bac      	ldr	r3, [pc, #688]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e01e      	b.n	800362a <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2bfe      	cmp	r3, #254	; 0xfe
 80035f6:	d115      	bne.n	8003624 <_Z13read_ble_dataPh+0x48>
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3301      	adds	r3, #1
 80035fc:	425a      	negs	r2, r3
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	f002 021f 	and.w	r2, r2, #31
 8003606:	bf58      	it	pl
 8003608:	4253      	negpl	r3, r2
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b9e      	ldr	r3, [pc, #632]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003620:	701a      	strb	r2, [r3, #0]
			break;
 8003622:	e009      	b.n	8003638 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	3301      	adds	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	4b9b      	ldr	r3, [pc, #620]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	f103 021f 	add.w	r2, r3, #31
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	429a      	cmp	r2, r3
 8003636:	dad9      	bge.n	80035ec <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003638:	4b97      	ldr	r3, [pc, #604]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3302      	adds	r3, #2
 800363e:	425a      	negs	r2, r3
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	bf58      	it	pl
 800364a:	4253      	negpl	r3, r2
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <_Z13read_ble_dataPh+0x80>
 8003658:	2301      	movs	r3, #1
 800365a:	e116      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 800365c:	4b8e      	ldr	r3, [pc, #568]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3303      	adds	r3, #3
 8003662:	425a      	negs	r2, r3
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	bf58      	it	pl
 800366e:	4253      	negpl	r3, r2
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d001      	beq.n	8003680 <_Z13read_ble_dataPh+0xa4>
 800367c:	2301      	movs	r3, #1
 800367e:	e104      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3304      	adds	r3, #4
 8003686:	425a      	negs	r2, r3
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	f002 021f 	and.w	r2, r2, #31
 8003690:	bf58      	it	pl
 8003692:	4253      	negpl	r3, r2
 8003694:	461a      	mov	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d001      	beq.n	80036a4 <_Z13read_ble_dataPh+0xc8>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0f2      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 80036a4:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3305      	adds	r3, #5
 80036aa:	425a      	negs	r2, r3
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	bf58      	it	pl
 80036b6:	4253      	negpl	r3, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b5c      	cmp	r3, #92	; 0x5c
 80036c2:	d001      	beq.n	80036c8 <_Z13read_ble_dataPh+0xec>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0e0      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 80036c8:	4b73      	ldr	r3, [pc, #460]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3306      	adds	r3, #6
 80036ce:	425a      	negs	r2, r3
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	bf58      	it	pl
 80036da:	4253      	negpl	r3, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b17      	cmp	r3, #23
 80036e6:	d001      	beq.n	80036ec <_Z13read_ble_dataPh+0x110>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0ce      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3307      	adds	r3, #7
 80036f2:	425a      	negs	r2, r3
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	bf58      	it	pl
 80036fe:	4253      	negpl	r3, r2
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d001      	beq.n	8003710 <_Z13read_ble_dataPh+0x134>
 800370c:	2301      	movs	r3, #1
 800370e:	e0bc      	b.n	800388a <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	3309      	adds	r3, #9
 8003716:	425a      	negs	r2, r3
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	bf58      	it	pl
 8003722:	4253      	negpl	r3, r2
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b21a      	sxth	r2, r3
 800372e:	4b5b      	ldr	r3, [pc, #364]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 8003730:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	330b      	adds	r3, #11
 8003738:	425a      	negs	r2, r3
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	bf58      	it	pl
 8003744:	4253      	negpl	r3, r2
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d008      	beq.n	8003764 <_Z13read_ble_dataPh+0x188>
 8003752:	4b52      	ldr	r3, [pc, #328]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 8003754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003758:	b29b      	uxth	r3, r3
 800375a:	425b      	negs	r3, r3
 800375c:	b29b      	uxth	r3, r3
 800375e:	b21a      	sxth	r2, r3
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 8003762:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003764:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	330e      	adds	r3, #14
 800376a:	425a      	negs	r2, r3
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	f002 021f 	and.w	r2, r2, #31
 8003774:	bf58      	it	pl
 8003776:	4253      	negpl	r3, r2
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	4619      	mov	r1, r3
 8003784:	4b44      	ldr	r3, [pc, #272]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	330d      	adds	r3, #13
 800378a:	425a      	negs	r2, r3
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	f002 021f 	and.w	r2, r2, #31
 8003794:	bf58      	it	pl
 8003796:	4253      	negpl	r3, r2
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	ea41 0203 	orr.w	r2, r1, r3
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 80037b0:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	330f      	adds	r3, #15
 80037b8:	425a      	negs	r2, r3
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	bf58      	it	pl
 80037c4:	4253      	negpl	r3, r2
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80037da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 80037e0:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	3310      	adds	r3, #16
 80037ea:	425a      	negs	r2, r3
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	f002 021f 	and.w	r2, r2, #31
 80037f4:	bf58      	it	pl
 80037f6:	4253      	negpl	r3, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	3311      	adds	r3, #17
 800380e:	425a      	negs	r2, r3
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	f002 021f 	and.w	r2, r2, #31
 8003818:	bf58      	it	pl
 800381a:	4253      	negpl	r3, r2
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800382e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003832:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 800383c:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	3312      	adds	r3, #18
 8003846:	425a      	negs	r2, r3
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	f002 021f 	and.w	r2, r2, #31
 8003850:	bf58      	it	pl
 8003852:	4253      	negpl	r3, r2
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	b29a      	uxth	r2, r3
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <_Z13read_ble_dataPh+0x2bc>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	3313      	adds	r3, #19
 8003868:	4259      	negs	r1, r3
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	f001 011f 	and.w	r1, r1, #31
 8003872:	bf58      	it	pl
 8003874:	424b      	negpl	r3, r1
 8003876:	4619      	mov	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	440b      	add	r3, r1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <_Z13read_ble_dataPh+0x2c0>)
 8003886:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	24001928 	.word	0x24001928
 800389c:	24001860 	.word	0x24001860

080038a0 <_Z15read_speed_dataPm>:

HAL_StatusTypeDef read_speed_data(uint32_t* data){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e00a      	b.n	80038c4 <_Z15read_speed_dataPm+0x24>
		if(data[i]==acsr)break;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <_Z15read_speed_dataPm+0x7c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d006      	beq.n	80038cc <_Z15read_speed_dataPm+0x2c>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	3301      	adds	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d9f1      	bls.n	80038ae <_Z15read_speed_dataPm+0xe>
 80038ca:	e000      	b.n	80038ce <_Z15read_speed_dataPm+0x2e>
		if(data[i]==acsr)break;
 80038cc:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b11      	cmp	r3, #17
 80038d2:	d101      	bne.n	80038d8 <_Z15read_speed_dataPm+0x38>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e01c      	b.n	8003912 <_Z15read_speed_dataPm+0x72>

	memcpy(speed,&data[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	3301      	adds	r3, #1
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	18d1      	adds	r1, r2, r3
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	f1c3 0310 	rsb	r3, r3, #16
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	480c      	ldr	r0, [pc, #48]	; (8003920 <_Z15read_speed_dataPm+0x80>)
 80038ee:	f010 f957 	bl	8013ba0 <memcpy>
	if(i){
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <_Z15read_speed_dataPm+0x70>
		memcpy(&speed[SPEED_PIN_COUNT-i],data,i*sizeof(uint32_t));
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	f1c3 0310 	rsb	r3, r3, #16
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <_Z15read_speed_dataPm+0x80>)
 8003902:	1898      	adds	r0, r3, r2
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	461a      	mov	r2, r3
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f010 f948 	bl	8013ba0 <memcpy>
	}
	return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	41435352 	.word	0x41435352
 8003920:	240018d8 	.word	0x240018d8

08003924 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <HAL_UART_TxCpltCallback+0x28>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d106      	bne.n	8003942 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003934:	4806      	ldr	r0, [pc, #24]	; (8003950 <HAL_UART_TxCpltCallback+0x2c>)
 8003936:	f000 f99e 	bl	8003c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800393a:	4603      	mov	r3, r0
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe fea5 	bl	800268c <_ZN13STM32Hardware5flushEv>
	}

}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	240001f8 	.word	0x240001f8
 8003950:	24000e50 	.word	0x24000e50

08003954 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_UART_RxCpltCallback+0x48>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d107      	bne.n	8003974 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8003964:	480e      	ldr	r0, [pc, #56]	; (80039a0 <HAL_UART_RxCpltCallback+0x4c>)
 8003966:	f000 f986 	bl	8003c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800396a:	4603      	mov	r3, r0
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fe4f 	bl	8002610 <_ZN13STM32Hardware10reset_rbufEv>
		read_ble_data(esc_receive);
	}else if(huart==&huart_f103){
		read_speed_data(speed_receive);
	}

}
 8003972:	e00e      	b.n	8003992 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_esc){
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_UART_RxCpltCallback+0x50>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <HAL_UART_RxCpltCallback+0x30>
		read_ble_data(esc_receive);
 800397c:	480a      	ldr	r0, [pc, #40]	; (80039a8 <HAL_UART_RxCpltCallback+0x54>)
 800397e:	f7ff fe2d 	bl	80035dc <_Z13read_ble_dataPh>
}
 8003982:	e006      	b.n	8003992 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_f103){
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_UART_RxCpltCallback+0x58>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_UART_RxCpltCallback+0x3e>
		read_speed_data(speed_receive);
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <HAL_UART_RxCpltCallback+0x5c>)
 800398e:	f7ff ff87 	bl	80038a0 <_Z15read_speed_dataPm>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	240001f8 	.word	0x240001f8
 80039a0:	24000e50 	.word	0x24000e50
 80039a4:	24000164 	.word	0x24000164
 80039a8:	24001874 	.word	0x24001874
 80039ac:	2400028c 	.word	0x2400028c
 80039b0:	24001894 	.word	0x24001894

080039b4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==LPUART1) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_UART_ErrorCallback+0x3c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d105      	bne.n	80039d2 <HAL_UART_ErrorCallback+0x1e>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80039c6:	2220      	movs	r2, #32
 80039c8:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_UART_ErrorCallback+0x40>)
 80039ca:	480b      	ldr	r0, [pc, #44]	; (80039f8 <HAL_UART_ErrorCallback+0x44>)
 80039cc:	f00d f88a 	bl	8010ae4 <HAL_UART_Receive_DMA>
    }else if(UartHandle->Instance==UART5) {
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
    }
}
 80039d0:	e009      	b.n	80039e6 <HAL_UART_ErrorCallback+0x32>
    }else if(UartHandle->Instance==UART5) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_UART_ErrorCallback+0x48>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d104      	bne.n	80039e6 <HAL_UART_ErrorCallback+0x32>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 80039dc:	2244      	movs	r2, #68	; 0x44
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <HAL_UART_ErrorCallback+0x4c>)
 80039e0:	4808      	ldr	r0, [pc, #32]	; (8003a04 <HAL_UART_ErrorCallback+0x50>)
 80039e2:	f00d f87f 	bl	8010ae4 <HAL_UART_Receive_DMA>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	58000c00 	.word	0x58000c00
 80039f4:	24001874 	.word	0x24001874
 80039f8:	24000164 	.word	0x24000164
 80039fc:	40005000 	.word	0x40005000
 8003a00:	24001894 	.word	0x24001894
 8003a04:	2400028c 	.word	0x2400028c

08003a08 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
//		freq=temp_freq;
//		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
//	}


}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM3){
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
//
//	}
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d139      	bne.n	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x86>
		vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a50:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8003ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003a54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a5c:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a5e:	edc3 7a06 	vstr	s15, [r3, #24]
		vesc_state.voltage_input = esc_sensor.voltage;
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4a24      	ldr	r2, [pc, #144]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a68:	6053      	str	r3, [r2, #4]
		vesc_state.current_input = esc_sensor.current;
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a70:	6113      	str	r3, [r2, #16]
		vesc_state.temperature_pcb = esc_sensor.temperature;
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a74:	8a1b      	ldrh	r3, [r3, #16]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a80:	edc3 7a02 	vstr	s15, [r3, #8]
		vesc_state.speed = esc_sensor.rpm;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a92:	edc3 7a05 	vstr	s15, [r3, #20]

		vesc_pub.publish(&vesc_state);
 8003a96:	4918      	ldr	r1, [pc, #96]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a98:	4818      	ldr	r0, [pc, #96]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003a9a:	f7fe fcbc 	bl	8002416 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wheel_speed_pub.publish(&wheel_speed);
 8003a9e:	4918      	ldr	r1, [pc, #96]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003aa0:	4818      	ldr	r0, [pc, #96]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003aa2:	f7fe fcb8 	bl	8002416 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		force_pub.publish(&forces);
 8003aa6:	4918      	ldr	r1, [pc, #96]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003aa8:	4818      	ldr	r0, [pc, #96]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003aaa:	f7fe fcb4 	bl	8002416 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003aae:	4818      	ldr	r0, [pc, #96]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003ab0:	f000 f8ed 	bl	8003c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//	}
//	if(htim->Instance==TIM15){
//		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
//	}
}
 8003ab4:	e012      	b.n	8003adc <HAL_TIM_PeriodElapsedCallback+0xac>
	}else if(htim->Instance==TIM7){
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10d      	bne.n	8003adc <HAL_TIM_PeriodElapsedCallback+0xac>
		pid_its++;
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003aca:	701a      	strb	r2, [r3, #0]
		if(pid_its>10){
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b0a      	cmp	r3, #10
 8003ad2:	d903      	bls.n	8003adc <HAL_TIM_PeriodElapsedCallback+0xac>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	40590000 	.word	0x40590000
 8003af0:	40001000 	.word	0x40001000
 8003af4:	24001860 	.word	0x24001860
 8003af8:	2400178c 	.word	0x2400178c
 8003afc:	24001824 	.word	0x24001824
 8003b00:	240017f4 	.word	0x240017f4
 8003b04:	2400184c 	.word	0x2400184c
 8003b08:	240017c4 	.word	0x240017c4
 8003b0c:	24001838 	.word	0x24001838
 8003b10:	24000e50 	.word	0x24000e50
 8003b14:	40001400 	.word	0x40001400
 8003b18:	24001918 	.word	0x24001918
 8003b1c:	240007c4 	.word	0x240007c4

08003b20 <_Z14speed_callbackRKN8std_msgs7Float32E>:
	default:
		break;
	}
}

void speed_callback(const std_msgs::Float32& msg){
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	pid_mode = PID_Auto;
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <_Z14speed_callbackRKN8std_msgs7Float32E+0x2c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <_Z14speed_callbackRKN8std_msgs7Float32E+0x30>)
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	24000000 	.word	0x24000000
 8003b4c:	24001918 	.word	0x24001918
 8003b50:	24001920 	.word	0x24001920

08003b54 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

void duty_cycle_callback(const std_msgs::Float32& msg){
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	pid_mode=PID_Manual;
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x2c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
	esc_duty_cycle_set = msg.data;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x30>)
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	24000000 	.word	0x24000000
 8003b80:	24001918 	.word	0x24001918
 8003b84:	2400191c 	.word	0x2400191c

08003b88 <_Z17steering_callbackRKN8std_msgs7Float32E>:

void steering_callback(const std_msgs::Float32& msg){
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	uint32_t steering_pulse = paramters.steering_ratio*(msg.data-paramters.steering_offset);
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 8003b92:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 8003b9e:	8a9b      	ldrh	r3, [r3, #20]
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb4:	ee17 3a90 	vmov	r3, s15
 8003bb8:	60fb      	str	r3, [r7, #12]
	if(steering_pulse != pre_steering_pulse){
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d007      	beq.n	8003bd4 <_Z17steering_callbackRKN8std_msgs7Float32E+0x4c>
		pre_steering_pulse = steering_pulse;
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pre_steering_pulse);
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_Z17steering_callbackRKN8std_msgs7Float32E+0x60>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	24000004 	.word	0x24000004
 8003be4:	24001924 	.word	0x24001924
 8003be8:	240007c4 	.word	0x240007c4

08003bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e00c      	b.n	8003c16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	fa22 f103 	lsr.w	r1, r2, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b2ca      	uxtb	r2, r1
 8003c0e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d9ef      	bls.n	8003bfc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e010      	b.n	8003c62 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	00d2      	lsls	r2, r2, #3
 8003c52:	fa01 f202 	lsl.w	r2, r1, r2
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d9eb      	bls.n	8003c40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
  }
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fd98 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 8003ca0:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d903      	bls.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d903      	bls.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d014      	beq.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fd71 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	bf8c      	ite	hi
 8003cfe:	2301      	movhi	r3, #1
 8003d00:	2300      	movls	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8003d08:	f06f 0301 	mvn.w	r3, #1
 8003d0c:	e194      	b.n	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fc8d 	bl	8002632 <_ZN13STM32Hardware4readEv>
 8003d18:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f2c0 8174 	blt.w	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d38:	2b07      	cmp	r3, #7
 8003d3a:	d11e      	bne.n	8003d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003d42:	1c59      	adds	r1, r3, #1
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	b2d1      	uxtb	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	460a      	mov	r2, r1
 8003d54:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d5e:	1e5a      	subs	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1b4      	bne.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2208      	movs	r2, #8
 8003d74:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d78:	e7af      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d128      	bne.n	8003dd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2bff      	cmp	r3, #255	; 0xff
 8003d88:	d10d      	bne.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f103 0214 	add.w	r2, r3, #20
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003da4:	e799      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fd10 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bf8c      	ite	hi
 8003dbe:	2301      	movhi	r3, #1
 8003dc0:	2300      	movls	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d088      	beq.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003dd0:	f06f 0301 	mvn.w	r3, #1
 8003dd4:	e130      	b.n	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d118      	bne.n	8003e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2bfe      	cmp	r3, #254	; 0xfe
 8003de4:	d107      	bne.n	8003df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003df4:	e771      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f af68 	bne.w	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f94c 	bl	80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003e10:	e763      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d113      	bne.n	8003e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003e42:	e74a      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d110      	bne.n	8003e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e6e:	e734      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d116      	bne.n	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e80:	425a      	negs	r2, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	bf58      	it	pl
 8003e88:	4253      	negpl	r3, r2
 8003e8a:	2bff      	cmp	r3, #255	; 0xff
 8003e8c:	d107      	bne.n	8003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e9c:	e71d      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ea6:	e718      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d10f      	bne.n	8003ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003ed0:	e703      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d117      	bne.n	8003f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	441a      	add	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f aeec 	bne.w	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f0a:	e6e6      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	f47f aee1 	bne.w	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003f26:	425a      	negs	r2, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	bf58      	it	pl
 8003f2e:	4253      	negpl	r3, r2
 8003f30:	2bff      	cmp	r3, #255	; 0xff
 8003f32:	f47f aed2 	bne.w	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d110      	bne.n	8003f62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8b1 	bl	80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8cc 	bl	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f60:	e06a      	b.n	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f68:	2b0a      	cmp	r3, #10
 8003f6a:	d107      	bne.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f995 	bl	80042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003f7a:	e6ae      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d10e      	bne.n	8003fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe f89a 	bl	80020ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003fa2:	e69a      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003faa:	2b0b      	cmp	r3, #11
 8003fac:	d104      	bne.n	8003fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003fb6:	e690      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fbe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f43f ae84 	beq.w	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fd8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fe2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fec:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004004:	4611      	mov	r1, r2
 8004006:	4798      	blx	r3
    while (true)
 8004008:	e667      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800400a:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00f      	beq.n	8004036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f83d 	bl	80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8004036:	2300      	movs	r3, #0
  }
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	08013fd4 	.word	0x08013fd4

08004060 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ffe5 	bl	8004040 <_ZN3ros11Subscriber_C1Ev>
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	330c      	adds	r3, #12
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe ff6f 	bl	8002f64 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
  };
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	08013f30 	.word	0x08013f30

080040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fd fb67 	bl	8001788 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f107 020c 	add.w	r2, r7, #12
 80040c4:	210a      	movs	r1, #10
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
    rt_time = hardware_.time();
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fb7e 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 80040d4:	4602      	mov	r2, r0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b08b      	sub	sp, #44	; 0x2c
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fc39 	bl	8001968 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	e062      	b.n	80041c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d056      	beq.n	80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	b29b      	uxth	r3, r3
 8004120:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	4798      	blx	r3
 800415e:	4603      	mov	r3, r0
 8004160:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4608      	mov	r0, r1
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004194:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681c      	ldr	r4, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f947 	bl	800243e <_ZN3ros9Publisher15getEndpointTypeEv>
 80041b0:	4601      	mov	r1, r0
 80041b2:	f107 030c 	add.w	r3, r7, #12
 80041b6:	461a      	mov	r2, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	3301      	adds	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	2b18      	cmp	r3, #24
 80041c6:	dd99      	ble.n	80040fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	e05e      	b.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d053      	beq.n	8004286 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004210:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4608      	mov	r0, r1
 8004220:	4798      	blx	r3
 8004222:	4603      	mov	r3, r0
 8004224:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800422e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	f202 2222 	addw	r2, r2, #546	; 0x222
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4608      	mov	r0, r1
 8004246:	4798      	blx	r3
 8004248:	4603      	mov	r3, r0
 800424a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800424c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004250:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681c      	ldr	r4, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	f202 2222 	addw	r2, r2, #546	; 0x222
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3304      	adds	r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4608      	mov	r0, r1
 8004278:	4798      	blx	r3
 800427a:	4601      	mov	r1, r0
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	461a      	mov	r2, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	2b18      	cmp	r3, #24
 8004290:	dd9d      	ble.n	80041ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800429a:	bf00      	nop
 800429c:	372c      	adds	r7, #44	; 0x2c
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd90      	pop	{r4, r7, pc}
	...

080042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fa68 	bl	8001788 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fa87 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd fac7 	bl	8001868 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4915      	ldr	r1, [pc, #84]	; (8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80042e0:	fba1 1303 	umull	r1, r3, r1, r3
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80042ea:	6939      	ldr	r1, [r7, #16]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80042f0:	fba3 0302 	umull	r0, r3, r3, r2
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	440b      	add	r3, r1
 8004308:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8a6 	bl	8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fa57 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	10624dd3 	.word	0x10624dd3
 8004338:	000f4240 	.word	0x000f4240

0800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b63      	cmp	r3, #99	; 0x63
 800434c:	dd09      	ble.n	8004362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004354:	f083 0301 	eor.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800435e:	2300      	movs	r3, #0
 8004360:	e079      	b.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800436e:	3207      	adds	r2, #7
 8004370:	4611      	mov	r1, r2
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
 8004376:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	22ff      	movs	r2, #255	; 0xff
 800437c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	22fe      	movs	r2, #254	; 0xfe
 8004384:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	b29b      	uxth	r3, r3
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	b29b      	uxth	r3, r3
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80043ae:	4413      	add	r3, r2
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	121b      	asrs	r3, r3, #8
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043da:	2305      	movs	r3, #5
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	e00c      	b.n	80043fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	3301      	adds	r3, #1
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3306      	adds	r3, #6
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	429a      	cmp	r2, r3
 8004402:	dded      	ble.n	80043e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3307      	adds	r3, #7
 8004408:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	425a      	negs	r2, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	bf58      	it	pl
 8004414:	4253      	negpl	r3, r2
 8004416:	b2da      	uxtb	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	6179      	str	r1, [r7, #20]
 800441e:	43d2      	mvns	r2, r2
 8004420:	b2d1      	uxtb	r1, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	460a      	mov	r2, r1
 8004428:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004432:	dc0a      	bgt.n	800444a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4619      	mov	r1, r3
 8004442:	f7fe f97f 	bl	8002744 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e005      	b.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800444a:	4905      	ldr	r1, [pc, #20]	; (8004460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f849 	bl	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	08013e84 	.word	0x08013e84

08004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe f9ac 	bl	80027d0 <_ZN13STM32Hardware4timeEv>
 8004478:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4915      	ldr	r1, [pc, #84]	; (80044d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004482:	fba1 1303 	umull	r1, r3, r1, r3
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800449a:	fba3 0302 	umull	r0, r3, r3, r2
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044a4:	fb00 f303 	mul.w	r3, r0, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	1aca      	subs	r2, r1, r3
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80044b4:	4413      	add	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f001 f9c4 	bl	8005858 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	10624dd3 	.word	0x10624dd3
 80044dc:	000f4240 	.word	0x000f4240
 80044e0:	3b9aca00 	.word	0x3b9aca00

080044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	2103      	movs	r1, #3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f804 	bl	8004500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	460b      	mov	r3, r1
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd fbec 	bl	8001cf0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004518:	7afb      	ldrb	r3, [r7, #11]
 800451a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f107 0214 	add.w	r2, r7, #20
 800452a:	2107      	movs	r1, #7
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	4798      	blx	r3
  }
 8004530:	bf00      	nop
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_Z41__static_initialization_and_destruction_0ii>:
//  duty1=0;
//  freq2=1;
//  duty2=1;

  HAL_Delay(1000);
}
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d134      	bne.n	80045b2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454e:	4293      	cmp	r3, r2
 8004550:	d12f      	bne.n	80045b2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8004552:	481a      	ldr	r0, [pc, #104]	; (80045bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004554:	f7fe ffca 	bl	80034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
vesc_msgs::VescState vesc_state;
 8004558:	4819      	ldr	r0, [pc, #100]	; (80045c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800455a:	f7fe fd9f 	bl	800309c <_ZN9vesc_msgs9VescStateC1Ev>
std_msgs::Float32MultiArray forces;
 800455e:	4819      	ldr	r0, [pc, #100]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004560:	f7fe fbc6 	bl	8002cf0 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wheel_speed;
 8004564:	4818      	ldr	r0, [pc, #96]	; (80045c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004566:	f7fe fbc3 	bl	8002cf0 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher vesc_pub("vesc_sensor", &vesc_state);
 800456a:	2300      	movs	r3, #0
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800456e:	4917      	ldr	r1, [pc, #92]	; (80045cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004570:	4817      	ldr	r0, [pc, #92]	; (80045d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004572:	f7fd ff39 	bl	80023e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher force_pub("forces", &forces);
 8004576:	2300      	movs	r3, #0
 8004578:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800457c:	4816      	ldr	r0, [pc, #88]	; (80045d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800457e:	f7fd ff33 	bl	80023e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wheel_speed_pub("forces", &wheel_speed);
 8004582:	2300      	movs	r3, #0
 8004584:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004586:	4913      	ldr	r1, [pc, #76]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004588:	4814      	ldr	r0, [pc, #80]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800458a:	f7fd ff2d 	bl	80023e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 800458e:	2301      	movs	r3, #1
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004592:	4914      	ldr	r1, [pc, #80]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004594:	4814      	ldr	r0, [pc, #80]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004596:	f7ff fd63 	bl	8004060 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 800459a:	2301      	movs	r3, #1
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800459e:	4914      	ldr	r1, [pc, #80]	; (80045f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80045a0:	4814      	ldr	r0, [pc, #80]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80045a2:	f7ff fd5d 	bl	8004060 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 80045a6:	2301      	movs	r3, #1
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80045aa:	4914      	ldr	r1, [pc, #80]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80045ac:	4814      	ldr	r0, [pc, #80]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80045ae:	f7ff fd57 	bl	8004060 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	24000e50 	.word	0x24000e50
 80045c0:	2400178c 	.word	0x2400178c
 80045c4:	240017c4 	.word	0x240017c4
 80045c8:	240017f4 	.word	0x240017f4
 80045cc:	08013ec0 	.word	0x08013ec0
 80045d0:	24001824 	.word	0x24001824
 80045d4:	08013ecc 	.word	0x08013ecc
 80045d8:	24001838 	.word	0x24001838
 80045dc:	2400184c 	.word	0x2400184c
 80045e0:	08003b21 	.word	0x08003b21
 80045e4:	08013ed4 	.word	0x08013ed4
 80045e8:	2400192c 	.word	0x2400192c
 80045ec:	08003b55 	.word	0x08003b55
 80045f0:	08013ee4 	.word	0x08013ee4
 80045f4:	24001948 	.word	0x24001948
 80045f8:	08003b89 	.word	0x08003b89
 80045fc:	08013ef8 	.word	0x08013ef8
 8004600:	24001964 	.word	0x24001964

08004604 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	330c      	adds	r3, #12
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fced 	bl	8002ff4 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	320c      	adds	r2, #12
 8004622:	4610      	mov	r0, r2
 8004624:	4798      	blx	r3
  }
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
  }
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	330c      	adds	r3, #12
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fd06 	bl	8003064 <_ZN8std_msgs7Float327getTypeEv>
 8004658:	4603      	mov	r3, r0
  }
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	330c      	adds	r3, #12
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fd06 	bl	8003080 <_ZN8std_msgs7Float326getMD5Ev>
 8004674:	4603      	mov	r3, r0
  }
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
    return configured_;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_GLOBAL__sub_I_nh>:
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
 800469c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046a0:	2001      	movs	r0, #1
 80046a2:	f7ff ff49 	bl	8004538 <_Z41__static_initialization_and_destruction_0ii>
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <HAL_MspInit+0x30>)
 80046b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <HAL_MspInit+0x30>)
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_MspInit+0x30>)
 80046c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	58024400 	.word	0x58024400

080046dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	f107 031c 	add.w	r3, r7, #28
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a33      	ldr	r2, [pc, #204]	; (80047c8 <HAL_ADC_MspInit+0xec>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d15f      	bne.n	80047be <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046fe:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004704:	4a31      	ldr	r2, [pc, #196]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004706:	f043 0320 	orr.w	r3, r3, #32
 800470a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800470e:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800472c:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800472e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800473c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004740:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474a:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800474c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004758:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800475a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_ADC_MspInit+0xf0>)
 800476a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8004776:	2333      	movs	r3, #51	; 0x33
 8004778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800477a:	2303      	movs	r3, #3
 800477c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004782:	f107 031c 	add.w	r3, r7, #28
 8004786:	4619      	mov	r1, r3
 8004788:	4811      	ldr	r0, [pc, #68]	; (80047d0 <HAL_ADC_MspInit+0xf4>)
 800478a:	f005 f957 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 800478e:	2350      	movs	r3, #80	; 0x50
 8004790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004792:	2303      	movs	r3, #3
 8004794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479a:	f107 031c 	add.w	r3, r7, #28
 800479e:	4619      	mov	r1, r3
 80047a0:	480c      	ldr	r0, [pc, #48]	; (80047d4 <HAL_ADC_MspInit+0xf8>)
 80047a2:	f005 f94b 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 80047a6:	2303      	movs	r3, #3
 80047a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047aa:	2303      	movs	r3, #3
 80047ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b2:	f107 031c 	add.w	r3, r7, #28
 80047b6:	4619      	mov	r1, r3
 80047b8:	4807      	ldr	r0, [pc, #28]	; (80047d8 <HAL_ADC_MspInit+0xfc>)
 80047ba:	f005 f93f 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047be:	bf00      	nop
 80047c0:	3730      	adds	r7, #48	; 0x30
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40022000 	.word	0x40022000
 80047cc:	58024400 	.word	0x58024400
 80047d0:	58020800 	.word	0x58020800
 80047d4:	58020000 	.word	0x58020000
 80047d8:	58020400 	.word	0x58020400

080047dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b0ba      	sub	sp, #232	; 0xe8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	22c0      	movs	r2, #192	; 0xc0
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f00f f98a 	bl	8013b16 <memset>
  if(hi2c->Instance==I2C1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a27      	ldr	r2, [pc, #156]	; (80048a4 <HAL_I2C_MspInit+0xc8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d146      	bne.n	800489a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800480c:	f04f 0208 	mov.w	r2, #8
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	4618      	mov	r0, r3
 8004824:	f006 fe2e 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800482e:	f7fc fe4d 	bl	80014cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004832:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 8004834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004838:	4a1b      	ldr	r2, [pc, #108]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 800483a:	f043 0302 	orr.w	r3, r3, #2
 800483e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004842:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 8004844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004850:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004858:	2312      	movs	r3, #18
 800485a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800486a:	2304      	movs	r3, #4
 800486c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004874:	4619      	mov	r1, r3
 8004876:	480d      	ldr	r0, [pc, #52]	; (80048ac <HAL_I2C_MspInit+0xd0>)
 8004878:	f005 f8e0 	bl	8009a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 800487e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 8004884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004888:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_I2C_MspInit+0xcc>)
 800488e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800489a:	bf00      	nop
 800489c:	37e8      	adds	r7, #232	; 0xe8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40005400 	.word	0x40005400
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58020400 	.word	0x58020400

080048b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b0c4      	sub	sp, #272	; 0x110
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048d4:	22c0      	movs	r2, #192	; 0xc0
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f00f f91c 	bl	8013b16 <memset>
  if(huart->Instance==LPUART1)
 80048de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4aa6      	ldr	r2, [pc, #664]	; (8004b84 <HAL_UART_MspInit+0x2d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f040 8084 	bne.w	80049fa <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80048f2:	f04f 0204 	mov.w	r2, #4
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004908:	4618      	mov	r0, r3
 800490a:	f006 fdbb 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8004914:	f7fc fdda 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004918:	4b9b      	ldr	r3, [pc, #620]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 800491a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800491e:	4a9a      	ldr	r2, [pc, #616]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004928:	4b97      	ldr	r3, [pc, #604]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 800492a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004936:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800493c:	4a92      	ldr	r2, [pc, #584]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004946:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004954:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004958:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495c:	2302      	movs	r3, #2
 800495e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800496e:	2303      	movs	r3, #3
 8004970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004978:	4619      	mov	r1, r3
 800497a:	4884      	ldr	r0, [pc, #528]	; (8004b8c <HAL_UART_MspInit+0x2dc>)
 800497c:	f005 f85e 	bl	8009a3c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8004980:	4b83      	ldr	r3, [pc, #524]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 8004982:	4a84      	ldr	r2, [pc, #528]	; (8004b94 <HAL_UART_MspInit+0x2e4>)
 8004984:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 8004988:	2209      	movs	r2, #9
 800498a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800498c:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004992:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 8004994:	2200      	movs	r2, #0
 8004996:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004998:	4b7d      	ldr	r3, [pc, #500]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 800499a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800499e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049a0:	4b7b      	ldr	r3, [pc, #492]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80049ac:	4b78      	ldr	r3, [pc, #480]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049b4:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80049ba:	4875      	ldr	r0, [pc, #468]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049bc:	f002 fa02 	bl	8006dc4 <HAL_DMA_Init>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 80049c6:	f7fc fd81 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80049ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80049da:	4a6d      	ldr	r2, [pc, #436]	; (8004b90 <HAL_UART_MspInit+0x2e0>)
 80049dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	208e      	movs	r0, #142	; 0x8e
 80049ee:	f002 f9b4 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80049f2:	208e      	movs	r0, #142	; 0x8e
 80049f4:	f002 f9cb 	bl	8006d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049f8:	e241      	b.n	8004e7e <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART4)
 80049fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a64      	ldr	r2, [pc, #400]	; (8004b98 <HAL_UART_MspInit+0x2e8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 80d1 	bne.w	8004bb0 <HAL_UART_MspInit+0x300>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a0e:	f04f 0202 	mov.w	r2, #2
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f006 fd2d 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8004a30:	f7fc fd4c 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a34:	4b54      	ldr	r3, [pc, #336]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a3a:	4a53      	ldr	r2, [pc, #332]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a58:	4a4b      	ldr	r2, [pc, #300]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a5a:	f043 0308 	orr.w	r3, r3, #8
 8004a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a62:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_UART_MspInit+0x2d8>)
 8004a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a70:	2303      	movs	r3, #3
 8004a72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a76:	2302      	movs	r3, #2
 8004a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a8e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004a92:	4619      	mov	r1, r3
 8004a94:	4841      	ldr	r0, [pc, #260]	; (8004b9c <HAL_UART_MspInit+0x2ec>)
 8004a96:	f004 ffd1 	bl	8009a3c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004a9c:	4a41      	ldr	r2, [pc, #260]	; (8004ba4 <HAL_UART_MspInit+0x2f4>)
 8004a9e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004aa0:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004aa2:	223f      	movs	r2, #63	; 0x3f
 8004aa4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aac:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab2:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aba:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac0:	4b37      	ldr	r3, [pc, #220]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004acc:	4b34      	ldr	r3, [pc, #208]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ad2:	4b33      	ldr	r3, [pc, #204]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004ad8:	4831      	ldr	r0, [pc, #196]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004ada:	f002 f973 	bl	8006dc4 <HAL_DMA_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8004ae4:	f7fc fcf2 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004ae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004af8:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <HAL_UART_MspInit+0x2f0>)
 8004afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004afe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 8004b06:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_UART_MspInit+0x2fc>)
 8004b0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8004b0c:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b12:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b14:	2240      	movs	r2, #64	; 0x40
 8004b16:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b24:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b38:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004b44:	4818      	ldr	r0, [pc, #96]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b46:	f002 f93d 	bl	8006dc4 <HAL_DMA_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8004b50:	f7fc fcbc 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004b54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b62:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_UART_MspInit+0x2f8>)
 8004b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	2034      	movs	r0, #52	; 0x34
 8004b76:	f002 f8f0 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b7a:	2034      	movs	r0, #52	; 0x34
 8004b7c:	f002 f907 	bl	8006d8e <HAL_NVIC_EnableIRQ>
}
 8004b80:	e17d      	b.n	8004e7e <HAL_UART_MspInit+0x5ce>
 8004b82:	bf00      	nop
 8004b84:	58000c00 	.word	0x58000c00
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	58020000 	.word	0x58020000
 8004b90:	24000448 	.word	0x24000448
 8004b94:	58025408 	.word	0x58025408
 8004b98:	40004c00 	.word	0x40004c00
 8004b9c:	58020c00 	.word	0x58020c00
 8004ba0:	240004c0 	.word	0x240004c0
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	24000538 	.word	0x24000538
 8004bac:	40020028 	.word	0x40020028
  else if(huart->Instance==UART5)
 8004bb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4ab2      	ldr	r2, [pc, #712]	; (8004e88 <HAL_UART_MspInit+0x5d8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	f040 8087 	bne.w	8004cd2 <HAL_UART_MspInit+0x422>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004bc4:	f04f 0202 	mov.w	r2, #2
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f006 fc52 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8004be6:	f7fc fc71 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004bea:	4ba8      	ldr	r3, [pc, #672]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bf0:	4aa6      	ldr	r2, [pc, #664]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bfa:	4ba4      	ldr	r3, [pc, #656]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c08:	4ba0      	ldr	r3, [pc, #640]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c0e:	4a9f      	ldr	r2, [pc, #636]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c18:	4b9c      	ldr	r3, [pc, #624]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004c40:	230e      	movs	r3, #14
 8004c42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4890      	ldr	r0, [pc, #576]	; (8004e90 <HAL_UART_MspInit+0x5e0>)
 8004c4e:	f004 fef5 	bl	8009a3c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8004c52:	4b90      	ldr	r3, [pc, #576]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c54:	4a90      	ldr	r2, [pc, #576]	; (8004e98 <HAL_UART_MspInit+0x5e8>)
 8004c56:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004c58:	4b8e      	ldr	r3, [pc, #568]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c5a:	2241      	movs	r2, #65	; 0x41
 8004c5c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c64:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c6a:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c70:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c78:	4b86      	ldr	r3, [pc, #536]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c84:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c86:	4b83      	ldr	r3, [pc, #524]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004c92:	4880      	ldr	r0, [pc, #512]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004c94:	f002 f896 	bl	8006dc4 <HAL_DMA_Init>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8004c9e:	f7fc fc15 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a79      	ldr	r2, [pc, #484]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004cb2:	4a78      	ldr	r2, [pc, #480]	; (8004e94 <HAL_UART_MspInit+0x5e4>)
 8004cb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2035      	movs	r0, #53	; 0x35
 8004cc6:	f002 f848 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004cca:	2035      	movs	r0, #53	; 0x35
 8004ccc:	f002 f85f 	bl	8006d8e <HAL_NVIC_EnableIRQ>
}
 8004cd0:	e0d5      	b.n	8004e7e <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART7)
 8004cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6f      	ldr	r2, [pc, #444]	; (8004e9c <HAL_UART_MspInit+0x5ec>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d16c      	bne.n	8004dbe <HAL_UART_MspInit+0x50e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004ce4:	f04f 0202 	mov.w	r2, #2
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f006 fbc2 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_UART_MspInit+0x45a>
      Error_Handler();
 8004d06:	f7fc fbe1 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004d0a:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d10:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d1a:	4b5c      	ldr	r3, [pc, #368]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d28:	4b58      	ldr	r3, [pc, #352]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d2e:	4a57      	ldr	r2, [pc, #348]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d38:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d4c:	4a4f      	ldr	r2, [pc, #316]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004d7e:	2307      	movs	r3, #7
 8004d80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4845      	ldr	r0, [pc, #276]	; (8004ea0 <HAL_UART_MspInit+0x5f0>)
 8004d8c:	f004 fe56 	bl	8009a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8004daa:	230b      	movs	r3, #11
 8004dac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004db4:	4619      	mov	r1, r3
 8004db6:	483b      	ldr	r0, [pc, #236]	; (8004ea4 <HAL_UART_MspInit+0x5f4>)
 8004db8:	f004 fe40 	bl	8009a3c <HAL_GPIO_Init>
}
 8004dbc:	e05f      	b.n	8004e7e <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==USART3)
 8004dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a37      	ldr	r2, [pc, #220]	; (8004ea8 <HAL_UART_MspInit+0x5f8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d156      	bne.n	8004e7e <HAL_UART_MspInit+0x5ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004dd0:	f04f 0202 	mov.w	r2, #2
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004de6:	4618      	mov	r0, r3
 8004de8:	f006 fb4c 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_UART_MspInit+0x546>
      Error_Handler();
 8004df2:	f7fc fb6b 	bl	80014cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004df6:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dfc:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0c:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8004e10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e22:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_UART_MspInit+0x5dc>)
 8004e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e3a:	f003 0202 	and.w	r2, r3, #2
 8004e3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e50:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e6c:	2307      	movs	r3, #7
 8004e6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e72:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e76:	4619      	mov	r1, r3
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <HAL_UART_MspInit+0x5e0>)
 8004e7a:	f004 fddf 	bl	8009a3c <HAL_GPIO_Init>
}
 8004e7e:	bf00      	nop
 8004e80:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40005000 	.word	0x40005000
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	58020400 	.word	0x58020400
 8004e94:	240005b0 	.word	0x240005b0
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40007800 	.word	0x40007800
 8004ea0:	58021000 	.word	0x58021000
 8004ea4:	58020000 	.word	0x58020000
 8004ea8:	40004800 	.word	0x40004800

08004eac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0bc      	sub	sp, #240	; 0xf0
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ec4:	f107 0318 	add.w	r3, r7, #24
 8004ec8:	22c0      	movs	r2, #192	; 0xc0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f00e fe22 	bl	8013b16 <memset>
  if(hqspi->Instance==QUADSPI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a55      	ldr	r2, [pc, #340]	; (800502c <HAL_QSPI_MspInit+0x180>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	f040 80a3 	bne.w	8005024 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8004ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004eee:	f107 0318 	add.w	r3, r7, #24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f006 fac6 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8004efe:	f7fc fae5 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004f02:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004f08:	4a49      	ldr	r2, [pc, #292]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f0e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004f12:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f20:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f26:	4a42      	ldr	r2, [pc, #264]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f28:	f043 0310 	orr.w	r3, r3, #16
 8004f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3e:	4b3c      	ldr	r3, [pc, #240]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f44:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f46:	f043 0302 	orr.w	r3, r3, #2
 8004f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f4e:	4b38      	ldr	r3, [pc, #224]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f5c:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f62:	4a33      	ldr	r2, [pc, #204]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f6c:	4b30      	ldr	r3, [pc, #192]	; (8005030 <HAL_QSPI_MspInit+0x184>)
 8004f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004f92:	2309      	movs	r3, #9
 8004f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4825      	ldr	r0, [pc, #148]	; (8005034 <HAL_QSPI_MspInit+0x188>)
 8004fa0:	f004 fd4c 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	2302      	movs	r3, #2
 8004fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fbc:	2309      	movs	r3, #9
 8004fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	481b      	ldr	r0, [pc, #108]	; (8005038 <HAL_QSPI_MspInit+0x18c>)
 8004fca:	f004 fd37 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004fce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fe8:	2309      	movs	r3, #9
 8004fea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4811      	ldr	r0, [pc, #68]	; (800503c <HAL_QSPI_MspInit+0x190>)
 8004ff6:	f004 fd21 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ffa:	2340      	movs	r3, #64	; 0x40
 8004ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005000:	2302      	movs	r3, #2
 8005002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005012:	230a      	movs	r3, #10
 8005014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800501c:	4619      	mov	r1, r3
 800501e:	4806      	ldr	r0, [pc, #24]	; (8005038 <HAL_QSPI_MspInit+0x18c>)
 8005020:	f004 fd0c 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005024:	bf00      	nop
 8005026:	37f0      	adds	r7, #240	; 0xf0
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	52005000 	.word	0x52005000
 8005030:	58024400 	.word	0x58024400
 8005034:	58021000 	.word	0x58021000
 8005038:	58020400 	.word	0x58020400
 800503c:	58020c00 	.word	0x58020c00

08005040 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2a      	ldr	r2, [pc, #168]	; (8005108 <HAL_SD_MspInit+0xc8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d14d      	bne.n	80050fe <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005062:	4b2a      	ldr	r3, [pc, #168]	; (800510c <HAL_SD_MspInit+0xcc>)
 8005064:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_SD_MspInit+0xcc>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_SD_MspInit+0xcc>)
 8005074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005080:	4b22      	ldr	r3, [pc, #136]	; (800510c <HAL_SD_MspInit+0xcc>)
 8005082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005086:	4a21      	ldr	r2, [pc, #132]	; (800510c <HAL_SD_MspInit+0xcc>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005090:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_SD_MspInit+0xcc>)
 8005092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <HAL_SD_MspInit+0xcc>)
 80050a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <HAL_SD_MspInit+0xcc>)
 80050a6:	f043 0308 	orr.w	r3, r3, #8
 80050aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <HAL_SD_MspInit+0xcc>)
 80050b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80050bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80050c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ca:	2303      	movs	r3, #3
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80050ce:	230c      	movs	r3, #12
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	480d      	ldr	r0, [pc, #52]	; (8005110 <HAL_SD_MspInit+0xd0>)
 80050da:	f004 fcaf 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050de:	2304      	movs	r3, #4
 80050e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e2:	2302      	movs	r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ea:	2303      	movs	r3, #3
 80050ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80050ee:	230c      	movs	r3, #12
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	4619      	mov	r1, r3
 80050f8:	4806      	ldr	r0, [pc, #24]	; (8005114 <HAL_SD_MspInit+0xd4>)
 80050fa:	f004 fc9f 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80050fe:	bf00      	nop
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	52007000 	.word	0x52007000
 800510c:	58024400 	.word	0x58024400
 8005110:	58020800 	.word	0x58020800
 8005114:	58020c00 	.word	0x58020c00

08005118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b0bc      	sub	sp, #240	; 0xf0
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	22c0      	movs	r2, #192	; 0xc0
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f00e fcec 	bl	8013b16 <memset>
  if(hspi->Instance==SPI1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a38      	ldr	r2, [pc, #224]	; (8005224 <HAL_SPI_MspInit+0x10c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d168      	bne.n	800521a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005154:	2300      	movs	r3, #0
 8005156:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005158:	f107 0318 	add.w	r3, r7, #24
 800515c:	4618      	mov	r0, r3
 800515e:	f006 f991 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8005168:	f7fc f9b0 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800516c:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <HAL_SPI_MspInit+0x110>)
 800516e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005172:	4a2d      	ldr	r2, [pc, #180]	; (8005228 <HAL_SPI_MspInit+0x110>)
 8005174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800517c:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_SPI_MspInit+0x110>)
 800517e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800518a:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_SPI_MspInit+0x110>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <HAL_SPI_MspInit+0x110>)
 8005192:	f043 0308 	orr.w	r3, r3, #8
 8005196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800519a:	4b23      	ldr	r3, [pc, #140]	; (8005228 <HAL_SPI_MspInit+0x110>)
 800519c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a8:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <HAL_SPI_MspInit+0x110>)
 80051aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <HAL_SPI_MspInit+0x110>)
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_SPI_MspInit+0x110>)
 80051ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051de:	2305      	movs	r3, #5
 80051e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80051e8:	4619      	mov	r1, r3
 80051ea:	4810      	ldr	r0, [pc, #64]	; (800522c <HAL_SPI_MspInit+0x114>)
 80051ec:	f004 fc26 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80051f0:	2318      	movs	r3, #24
 80051f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f6:	2302      	movs	r3, #2
 80051f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005208:	2305      	movs	r3, #5
 800520a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800520e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005212:	4619      	mov	r1, r3
 8005214:	4806      	ldr	r0, [pc, #24]	; (8005230 <HAL_SPI_MspInit+0x118>)
 8005216:	f004 fc11 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800521a:	bf00      	nop
 800521c:	37f0      	adds	r7, #240	; 0xf0
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40013000 	.word	0x40013000
 8005228:	58024400 	.word	0x58024400
 800522c:	58020c00 	.word	0x58020c00
 8005230:	58020400 	.word	0x58020400

08005234 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d10f      	bne.n	8005266 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 8005248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 8005258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005264:	e013      	b.n	800528e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10e      	bne.n	800528e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 8005272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_TIM_PWM_MspInit+0x68>)
 8005282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
 80052a0:	40000400 	.word	0x40000400

080052a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	f107 031c 	add.w	r3, r7, #28
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a34      	ldr	r2, [pc, #208]	; (8005394 <HAL_TIM_IC_MspInit+0xf0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d12e      	bne.n	8005324 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052cc:	4a32      	ldr	r2, [pc, #200]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052ce:	f043 0308 	orr.w	r3, r3, #8
 80052d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e4:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ea:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f4:	4b28      	ldr	r3, [pc, #160]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 80052f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 8005302:	2301      	movs	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005306:	2302      	movs	r3, #2
 8005308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530e:	2300      	movs	r3, #0
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005312:	2302      	movs	r3, #2
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 8005316:	f107 031c 	add.w	r3, r7, #28
 800531a:	4619      	mov	r1, r3
 800531c:	481f      	ldr	r0, [pc, #124]	; (800539c <HAL_TIM_IC_MspInit+0xf8>)
 800531e:	f004 fb8d 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005322:	e032      	b.n	800538a <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_TIM_IC_MspInit+0xfc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d12d      	bne.n	800538a <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 8005330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 8005336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 8005340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 800534e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 8005354:	f043 0310 	orr.w	r3, r3, #16
 8005358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_TIM_IC_MspInit+0xf4>)
 800535e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 800536a:	2320      	movs	r3, #32
 800536c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536e:	2302      	movs	r3, #2
 8005370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005376:	2300      	movs	r3, #0
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800537a:	2304      	movs	r3, #4
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 800537e:	f107 031c 	add.w	r3, r7, #28
 8005382:	4619      	mov	r1, r3
 8005384:	4807      	ldr	r0, [pc, #28]	; (80053a4 <HAL_TIM_IC_MspInit+0x100>)
 8005386:	f004 fb59 	bl	8009a3c <HAL_GPIO_Init>
}
 800538a:	bf00      	nop
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40000c00 	.word	0x40000c00
 8005398:	58024400 	.word	0x58024400
 800539c:	58020000 	.word	0x58020000
 80053a0:	40014000 	.word	0x40014000
 80053a4:	58021000 	.word	0x58021000

080053a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_TIM_Base_MspInit+0x84>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d117      	bne.n	80053ea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80053ba:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 80053bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 80053c2:	f043 0310 	orr.w	r3, r3, #16
 80053c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 80053cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80053d8:	2200      	movs	r2, #0
 80053da:	2100      	movs	r1, #0
 80053dc:	2036      	movs	r0, #54	; 0x36
 80053de:	f001 fcbc 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053e2:	2036      	movs	r0, #54	; 0x36
 80053e4:	f001 fcd3 	bl	8006d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80053e8:	e01b      	b.n	8005422 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <HAL_TIM_Base_MspInit+0x8c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d116      	bne.n	8005422 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 80053f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_TIM_Base_MspInit+0x88>)
 8005406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005412:	2200      	movs	r2, #0
 8005414:	2100      	movs	r1, #0
 8005416:	2037      	movs	r0, #55	; 0x37
 8005418:	f001 fc9f 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800541c:	2037      	movs	r0, #55	; 0x37
 800541e:	f001 fcb6 	bl	8006d8e <HAL_NVIC_EnableIRQ>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40001000 	.word	0x40001000
 8005430:	58024400 	.word	0x58024400
 8005434:	40001400 	.word	0x40001400

08005438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 0314 	add.w	r3, r7, #20
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d120      	bne.n	800549c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 800545c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 800546c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 8005478:	f248 030e 	movw	r3, #32782	; 0x800e
 800547c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547e:	2302      	movs	r3, #2
 8005480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005486:	2300      	movs	r3, #0
 8005488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800548a:	2301      	movs	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800548e:	f107 0314 	add.w	r3, r7, #20
 8005492:	4619      	mov	r1, r3
 8005494:	4816      	ldr	r0, [pc, #88]	; (80054f0 <HAL_TIM_MspPostInit+0xb8>)
 8005496:	f004 fad1 	bl	8009a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800549a:	e023      	b.n	80054e4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIM_MspPostInit+0xbc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d11e      	bne.n	80054e4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a6:	4b11      	ldr	r3, [pc, #68]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 80054a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ac:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <HAL_TIM_MspPostInit+0xb4>)
 80054b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 80054c4:	23c0      	movs	r3, #192	; 0xc0
 80054c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054d4:	2302      	movs	r3, #2
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054d8:	f107 0314 	add.w	r3, r7, #20
 80054dc:	4619      	mov	r1, r3
 80054de:	4806      	ldr	r0, [pc, #24]	; (80054f8 <HAL_TIM_MspPostInit+0xc0>)
 80054e0:	f004 faac 	bl	8009a3c <HAL_GPIO_Init>
}
 80054e4:	bf00      	nop
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	58024400 	.word	0x58024400
 80054f0:	58020000 	.word	0x58020000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	58020800 	.word	0x58020800

080054fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b0ba      	sub	sp, #232	; 0xe8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	22c0      	movs	r2, #192	; 0xc0
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f00e fafa 	bl	8013b16 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <HAL_PCD_MspInit+0xcc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d149      	bne.n	80055c0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800552c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800553c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005540:	f107 0310 	add.w	r3, r7, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f005 ff9d 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8005550:	f7fb ffbc 	bl	80014cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8005554:	f004 fee6 	bl	800a324 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005558:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 800555a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800555e:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 800556a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800557a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557e:	2302      	movs	r3, #2
 8005580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005590:	230a      	movs	r3, #10
 8005592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005596:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800559a:	4619      	mov	r1, r3
 800559c:	480c      	ldr	r0, [pc, #48]	; (80055d0 <HAL_PCD_MspInit+0xd4>)
 800559e:	f004 fa4d 	bl	8009a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 80055a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 80055aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_PCD_MspInit+0xd0>)
 80055b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80055c0:	bf00      	nop
 80055c2:	37e8      	adds	r7, #232	; 0xe8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40080000 	.word	0x40080000
 80055cc:	58024400 	.word	0x58024400
 80055d0:	58020000 	.word	0x58020000

080055d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055d8:	e7fe      	b.n	80055d8 <NMI_Handler+0x4>

080055da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055de:	e7fe      	b.n	80055de <HardFault_Handler+0x4>

080055e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055e4:	e7fe      	b.n	80055e4 <MemManage_Handler+0x4>

080055e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ea:	e7fe      	b.n	80055ea <BusFault_Handler+0x4>

080055ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055f0:	e7fe      	b.n	80055f0 <UsageFault_Handler+0x4>

080055f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005620:	f000 f9e2 	bl	80059e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	bd80      	pop	{r7, pc}

08005628 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <DMA1_Stream0_IRQHandler+0x10>)
 800562e:	f002 fef3 	bl	8008418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	240004c0 	.word	0x240004c0

0800563c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <DMA1_Stream1_IRQHandler+0x10>)
 8005642:	f002 fee9 	bl	8008418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	24000538 	.word	0x24000538

08005650 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <DMA1_Stream2_IRQHandler+0x10>)
 8005656:	f002 fedf 	bl	8008418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	240005b0 	.word	0x240005b0

08005664 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <UART4_IRQHandler+0x10>)
 800566a:	f00b fa87 	bl	8010b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	240001f8 	.word	0x240001f8

08005678 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <UART5_IRQHandler+0x10>)
 800567e:	f00b fa7d 	bl	8010b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	2400028c 	.word	0x2400028c

0800568c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005690:	4802      	ldr	r0, [pc, #8]	; (800569c <TIM6_DAC_IRQHandler+0x10>)
 8005692:	f009 ff08 	bl	800f4a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2400085c 	.word	0x2400085c

080056a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <TIM7_IRQHandler+0x10>)
 80056a6:	f009 fefe 	bl	800f4a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	240008a8 	.word	0x240008a8

080056b4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80056b8:	4802      	ldr	r0, [pc, #8]	; (80056c4 <BDMA_Channel0_IRQHandler+0x10>)
 80056ba:	f002 fead 	bl	8008418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	24000448 	.word	0x24000448

080056c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <LPUART1_IRQHandler+0x10>)
 80056ce:	f00b fa55 	bl	8010b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	24000164 	.word	0x24000164

080056dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <_sbrk+0x5c>)
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <_sbrk+0x60>)
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <_sbrk+0x64>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056f8:	4b11      	ldr	r3, [pc, #68]	; (8005740 <_sbrk+0x64>)
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <_sbrk+0x68>)
 80056fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <_sbrk+0x64>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d207      	bcs.n	800571c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800570c:	f00e fa1c 	bl	8013b48 <__errno>
 8005710:	4603      	mov	r3, r0
 8005712:	220c      	movs	r2, #12
 8005714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800571a:	e009      	b.n	8005730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <_sbrk+0x64>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <_sbrk+0x64>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <_sbrk+0x64>)
 800572c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	24080000 	.word	0x24080000
 800573c:	00000400 	.word	0x00000400
 8005740:	24001980 	.word	0x24001980
 8005744:	24001ad0 	.word	0x24001ad0

08005748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800574c:	4b37      	ldr	r3, [pc, #220]	; (800582c <SystemInit+0xe4>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	4a36      	ldr	r2, [pc, #216]	; (800582c <SystemInit+0xe4>)
 8005754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800575c:	4b34      	ldr	r3, [pc, #208]	; (8005830 <SystemInit+0xe8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	2b06      	cmp	r3, #6
 8005766:	d807      	bhi.n	8005778 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <SystemInit+0xe8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 030f 	bic.w	r3, r3, #15
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <SystemInit+0xe8>)
 8005772:	f043 0307 	orr.w	r3, r3, #7
 8005776:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005778:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <SystemInit+0xec>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2d      	ldr	r2, [pc, #180]	; (8005834 <SystemInit+0xec>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <SystemInit+0xec>)
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <SystemInit+0xec>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4929      	ldr	r1, [pc, #164]	; (8005834 <SystemInit+0xec>)
 8005790:	4b29      	ldr	r3, [pc, #164]	; (8005838 <SystemInit+0xf0>)
 8005792:	4013      	ands	r3, r2
 8005794:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <SystemInit+0xe8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <SystemInit+0xe8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 030f 	bic.w	r3, r3, #15
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <SystemInit+0xe8>)
 80057ac:	f043 0307 	orr.w	r3, r3, #7
 80057b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80057b2:	4b20      	ldr	r3, [pc, #128]	; (8005834 <SystemInit+0xec>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <SystemInit+0xec>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <SystemInit+0xec>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <SystemInit+0xec>)
 80057c6:	4a1d      	ldr	r2, [pc, #116]	; (800583c <SystemInit+0xf4>)
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80057ca:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <SystemInit+0xec>)
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <SystemInit+0xf8>)
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <SystemInit+0xec>)
 80057d2:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <SystemInit+0xfc>)
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80057d6:	4b17      	ldr	r3, [pc, #92]	; (8005834 <SystemInit+0xec>)
 80057d8:	2200      	movs	r2, #0
 80057da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <SystemInit+0xec>)
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <SystemInit+0xfc>)
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80057e2:	4b14      	ldr	r3, [pc, #80]	; (8005834 <SystemInit+0xec>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <SystemInit+0xec>)
 80057ea:	4a16      	ldr	r2, [pc, #88]	; (8005844 <SystemInit+0xfc>)
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <SystemInit+0xec>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <SystemInit+0xec>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <SystemInit+0xec>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <SystemInit+0xec>)
 8005802:	2200      	movs	r2, #0
 8005804:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <SystemInit+0x100>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <SystemInit+0x104>)
 800580c:	4013      	ands	r3, r2
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005812:	d202      	bcs.n	800581a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <SystemInit+0x108>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <SystemInit+0x10c>)
 800581c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005820:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000ed00 	.word	0xe000ed00
 8005830:	52002000 	.word	0x52002000
 8005834:	58024400 	.word	0x58024400
 8005838:	eaf6ed7f 	.word	0xeaf6ed7f
 800583c:	02020200 	.word	0x02020200
 8005840:	01ff0000 	.word	0x01ff0000
 8005844:	01010280 	.word	0x01010280
 8005848:	5c001000 	.word	0x5c001000
 800584c:	ffff0000 	.word	0xffff0000
 8005850:	51008108 	.word	0x51008108
 8005854:	52004000 	.word	0x52004000

08005858 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	0a5a      	lsrs	r2, r3, #9
 8005868:	490f      	ldr	r1, [pc, #60]	; (80058a8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800586a:	fba1 1202 	umull	r1, r2, r1, r2
 800586e:	09d2      	lsrs	r2, r2, #7
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005872:	fb01 f202 	mul.w	r2, r1, r2
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0a5b      	lsrs	r3, r3, #9
 8005880:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	00044b83 	.word	0x00044b83
 80058ac:	3b9aca00 	.word	0x3b9aca00

080058b0 <Reset_Handler>:
 80058b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058e8 <LoopFillZerobss+0xe>
 80058b4:	f7ff ff48 	bl	8005748 <SystemInit>
 80058b8:	480c      	ldr	r0, [pc, #48]	; (80058ec <LoopFillZerobss+0x12>)
 80058ba:	490d      	ldr	r1, [pc, #52]	; (80058f0 <LoopFillZerobss+0x16>)
 80058bc:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <LoopFillZerobss+0x1a>)
 80058be:	2300      	movs	r3, #0
 80058c0:	e002      	b.n	80058c8 <LoopCopyDataInit>

080058c2 <CopyDataInit>:
 80058c2:	58d4      	ldr	r4, [r2, r3]
 80058c4:	50c4      	str	r4, [r0, r3]
 80058c6:	3304      	adds	r3, #4

080058c8 <LoopCopyDataInit>:
 80058c8:	18c4      	adds	r4, r0, r3
 80058ca:	428c      	cmp	r4, r1
 80058cc:	d3f9      	bcc.n	80058c2 <CopyDataInit>
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <LoopFillZerobss+0x1e>)
 80058d0:	4c0a      	ldr	r4, [pc, #40]	; (80058fc <LoopFillZerobss+0x22>)
 80058d2:	2300      	movs	r3, #0
 80058d4:	e001      	b.n	80058da <LoopFillZerobss>

080058d6 <FillZerobss>:
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	3204      	adds	r2, #4

080058da <LoopFillZerobss>:
 80058da:	42a2      	cmp	r2, r4
 80058dc:	d3fb      	bcc.n	80058d6 <FillZerobss>
 80058de:	f00e f939 	bl	8013b54 <__libc_init_array>
 80058e2:	f7fa fe7f 	bl	80005e4 <main>
 80058e6:	4770      	bx	lr
 80058e8:	24080000 	.word	0x24080000
 80058ec:	24000000 	.word	0x24000000
 80058f0:	24000090 	.word	0x24000090
 80058f4:	080140c4 	.word	0x080140c4
 80058f8:	24000090 	.word	0x24000090
 80058fc:	24001ad0 	.word	0x24001ad0

08005900 <ADC3_IRQHandler>:
 8005900:	e7fe      	b.n	8005900 <ADC3_IRQHandler>
	...

08005904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800590a:	2003      	movs	r0, #3
 800590c:	f001 fa1a 	bl	8006d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005910:	f005 fbe2 	bl	800b0d8 <HAL_RCC_GetSysClockFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_Init+0x68>)
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	4913      	ldr	r1, [pc, #76]	; (8005970 <HAL_Init+0x6c>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
 800592c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800592e:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_Init+0x68>)
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_Init+0x6c>)
 8005938:	5cd3      	ldrb	r3, [r2, r3]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
 8005944:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <HAL_Init+0x70>)
 8005946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005948:	4a0b      	ldr	r2, [pc, #44]	; (8005978 <HAL_Init+0x74>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800594e:	200f      	movs	r0, #15
 8005950:	f000 f814 	bl	800597c <HAL_InitTick>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e002      	b.n	8005964 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800595e:	f7fe fea3 	bl	80046a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	08014070 	.word	0x08014070
 8005974:	24000034 	.word	0x24000034
 8005978:	24000030 	.word	0x24000030

0800597c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_InitTick+0x60>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e021      	b.n	80059d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_InitTick+0x64>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_InitTick+0x60>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599e:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f9ff 	bl	8006daa <HAL_SYSTICK_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00e      	b.n	80059d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d80a      	bhi.n	80059d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059bc:	2200      	movs	r2, #0
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c4:	f001 f9c9 	bl	8006d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059c8:	4a06      	ldr	r2, [pc, #24]	; (80059e4 <HAL_InitTick+0x68>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	2400003c 	.word	0x2400003c
 80059e0:	24000030 	.word	0x24000030
 80059e4:	24000038 	.word	0x24000038

080059e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_IncTick+0x20>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_IncTick+0x24>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_IncTick+0x24>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2400003c 	.word	0x2400003c
 8005a0c:	24001984 	.word	0x24001984

08005a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return uwTick;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <HAL_GetTick+0x14>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	24001984 	.word	0x24001984

08005a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a30:	f7ff ffee 	bl	8005a10 <HAL_GetTick>
 8005a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a40:	d005      	beq.n	8005a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_Delay+0x44>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a4e:	bf00      	nop
 8005a50:	f7ff ffde 	bl	8005a10 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d8f7      	bhi.n	8005a50 <HAL_Delay+0x28>
  {
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	2400003c 	.word	0x2400003c

08005a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005a74:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <HAL_GetREVID+0x14>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	0c1b      	lsrs	r3, r3, #16
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	5c001000 	.word	0x5c001000

08005a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3360      	adds	r3, #96	; 0x60
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	611a      	str	r2, [r3, #16]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3360      	adds	r3, #96	; 0x60
 8005b72:	461a      	mov	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	601a      	str	r2, [r3, #0]
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3330      	adds	r3, #48	; 0x30
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	4413      	add	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	211f      	movs	r1, #31
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	0e9b      	lsrs	r3, r3, #26
 8005bd0:	f003 011f 	and.w	r1, r3, #31
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3314      	adds	r3, #20
 8005c00:	461a      	mov	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0e5b      	lsrs	r3, r3, #25
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	0d1b      	lsrs	r3, r3, #20
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2107      	movs	r1, #7
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	401a      	ands	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	0d1b      	lsrs	r3, r3, #20
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	431a      	orrs	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f003 0318 	and.w	r3, r3, #24
 8005c6a:	4908      	ldr	r1, [pc, #32]	; (8005c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005c6c:	40d9      	lsrs	r1, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	400b      	ands	r3, r1
 8005c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	000fffff 	.word	0x000fffff

08005c90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6093      	str	r3, [r2, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	5fffffc0 	.word	0x5fffffc0

08005cb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc8:	d101      	bne.n	8005cce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <LL_ADC_EnableInternalRegulator+0x24>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	6fffffc0 	.word	0x6fffffc0

08005d04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d18:	d101      	bne.n	8005d1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <LL_ADC_IsEnabled+0x18>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <LL_ADC_IsEnabled+0x1a>
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d101      	bne.n	8005d6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d101      	bne.n	8005d90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e18f      	b.n	80060da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fe fc87 	bl	80046dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff ff67 	bl	8005cb4 <LL_ADC_IsDeepPowerDownEnabled>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff4d 	bl	8005c90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff ff82 	bl	8005d04 <LL_ADC_IsInternalRegulatorEnabled>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d114      	bne.n	8005e30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ff66 	bl	8005cdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e10:	4b87      	ldr	r3, [pc, #540]	; (8006030 <HAL_ADC_Init+0x290>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	099b      	lsrs	r3, r3, #6
 8005e16:	4a87      	ldr	r2, [pc, #540]	; (8006034 <HAL_ADC_Init+0x294>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	099b      	lsrs	r3, r3, #6
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005e22:	e002      	b.n	8005e2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f9      	bne.n	8005e24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff65 	bl	8005d04 <LL_ADC_IsInternalRegulatorEnabled>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	f043 0210 	orr.w	r2, r3, #16
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	f043 0201 	orr.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff76 	bl	8005d52 <LL_ADC_REG_IsConversionOngoing>
 8005e66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8129 	bne.w	80060c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 8125 	bne.w	80060c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff ff4a 	bl	8005d2c <LL_ADC_IsEnabled>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d136      	bne.n	8005f0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a65      	ldr	r2, [pc, #404]	; (8006038 <HAL_ADC_Init+0x298>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_ADC_Init+0x112>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a63      	ldr	r2, [pc, #396]	; (800603c <HAL_ADC_Init+0x29c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_ADC_Init+0x130>
 8005eb2:	4861      	ldr	r0, [pc, #388]	; (8006038 <HAL_ADC_Init+0x298>)
 8005eb4:	f7ff ff3a 	bl	8005d2c <LL_ADC_IsEnabled>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4860      	ldr	r0, [pc, #384]	; (800603c <HAL_ADC_Init+0x29c>)
 8005ebc:	f7ff ff36 	bl	8005d2c <LL_ADC_IsEnabled>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4323      	orrs	r3, r4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e008      	b.n	8005ee2 <HAL_ADC_Init+0x142>
 8005ed0:	485b      	ldr	r0, [pc, #364]	; (8006040 <HAL_ADC_Init+0x2a0>)
 8005ed2:	f7ff ff2b 	bl	8005d2c <LL_ADC_IsEnabled>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a53      	ldr	r2, [pc, #332]	; (8006038 <HAL_ADC_Init+0x298>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_ADC_Init+0x15a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a51      	ldr	r2, [pc, #324]	; (800603c <HAL_ADC_Init+0x29c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_ADC_Init+0x15e>
 8005efa:	4a52      	ldr	r2, [pc, #328]	; (8006044 <HAL_ADC_Init+0x2a4>)
 8005efc:	e000      	b.n	8005f00 <HAL_ADC_Init+0x160>
 8005efe:	4a52      	ldr	r2, [pc, #328]	; (8006048 <HAL_ADC_Init+0x2a8>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f7ff fdbe 	bl	8005a88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005f0c:	f7ff fdb0 	bl	8005a70 <HAL_GetREVID>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d914      	bls.n	8005f44 <HAL_ADC_Init+0x1a4>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d110      	bne.n	8005f44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7d5b      	ldrb	r3, [r3, #21]
 8005f26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005f32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7f1b      	ldrb	r3, [r3, #28]
 8005f38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005f3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f3c:	f043 030c 	orr.w	r3, r3, #12
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e00d      	b.n	8005f60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	7d5b      	ldrb	r3, [r3, #21]
 8005f48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005f54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7f1b      	ldrb	r3, [r3, #28]
 8005f5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	7f1b      	ldrb	r3, [r3, #28]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d106      	bne.n	8005f76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	045b      	lsls	r3, r3, #17
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_ADC_Init+0x2ac>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fed1 	bl	8005d52 <LL_ADC_REG_IsConversionOngoing>
 8005fb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fede 	bl	8005d78 <LL_ADC_INJ_IsConversionOngoing>
 8005fbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d15f      	bne.n	8006084 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d15c      	bne.n	8006084 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	7d1b      	ldrb	r3, [r3, #20]
 8005fce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_ADC_Init+0x2b0>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	69b9      	ldr	r1, [r7, #24]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d130      	bne.n	8006058 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <HAL_ADC_Init+0x2b4>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800600a:	3a01      	subs	r2, #1
 800600c:	0411      	lsls	r1, r2, #16
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006012:	4311      	orrs	r1, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800601e:	430a      	orrs	r2, r1
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	611a      	str	r2, [r3, #16]
 800602c:	e01c      	b.n	8006068 <HAL_ADC_Init+0x2c8>
 800602e:	bf00      	nop
 8006030:	24000030 	.word	0x24000030
 8006034:	053e2d63 	.word	0x053e2d63
 8006038:	40022000 	.word	0x40022000
 800603c:	40022100 	.word	0x40022100
 8006040:	58026000 	.word	0x58026000
 8006044:	40022300 	.word	0x40022300
 8006048:	58026300 	.word	0x58026300
 800604c:	fff0c003 	.word	0xfff0c003
 8006050:	ffffbffc 	.word	0xffffbffc
 8006054:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fb80 	bl	8006784 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d10c      	bne.n	80060a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	f023 010f 	bic.w	r1, r3, #15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	1e5a      	subs	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
 80060a4:	e007      	b.n	80060b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 020f 	bic.w	r2, r2, #15
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	655a      	str	r2, [r3, #84]	; 0x54
 80060c6:	e007      	b.n	80060d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0210 	orr.w	r2, r3, #16
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80060d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3724      	adds	r7, #36	; 0x24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd90      	pop	{r4, r7, pc}
 80060e2:	bf00      	nop

080060e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b0a1      	sub	sp, #132	; 0x84
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a9d      	ldr	r2, [pc, #628]	; (8006374 <HAL_ADC_ConfigChannel+0x290>)
 80060fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_ADC_ConfigChannel+0x2a>
 800610a:	2302      	movs	r3, #2
 800610c:	e321      	b.n	8006752 <HAL_ADC_ConfigChannel+0x66e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fe19 	bl	8005d52 <LL_ADC_REG_IsConversionOngoing>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 8306 	bne.w	8006734 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x62>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0e9b      	lsrs	r3, r3, #26
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	2201      	movs	r2, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	e016      	b.n	8006174 <HAL_ADC_ConfigChannel+0x90>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006156:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800615e:	2320      	movs	r3, #32
 8006160:	e003      	b.n	800616a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8006162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2201      	movs	r2, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	69d1      	ldr	r1, [r2, #28]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	430b      	orrs	r3, r1
 8006180:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7ff fd02 	bl	8005b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fdda 	bl	8005d52 <LL_ADC_REG_IsConversionOngoing>
 800619e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fde7 	bl	8005d78 <LL_ADC_INJ_IsConversionOngoing>
 80061aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 80b3 	bne.w	800631a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 80af 	bne.w	800631a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	461a      	mov	r2, r3
 80061ca:	f7ff fd11 	bl	8005bf0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80061ce:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_ADC_ConfigChannel+0x294>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d10b      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x110>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	e01d      	b.n	8006230 <HAL_ADC_ConfigChannel+0x14c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <HAL_ADC_ConfigChannel+0x136>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	e00a      	b.n	8006230 <HAL_ADC_ConfigChannel+0x14c>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d027      	beq.n	800628a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6919      	ldr	r1, [r3, #16]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006248:	f7ff fc52 	bl	8005af0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6919      	ldr	r1, [r3, #16]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	7e5b      	ldrb	r3, [r3, #25]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d102      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x17e>
 800625c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006260:	e000      	b.n	8006264 <HAL_ADC_ConfigChannel+0x180>
 8006262:	2300      	movs	r3, #0
 8006264:	461a      	mov	r2, r3
 8006266:	f7ff fc7c 	bl	8005b62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6919      	ldr	r1, [r3, #16]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	7e1b      	ldrb	r3, [r3, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d102      	bne.n	8006280 <HAL_ADC_ConfigChannel+0x19c>
 800627a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800627e:	e000      	b.n	8006282 <HAL_ADC_ConfigChannel+0x19e>
 8006280:	2300      	movs	r3, #0
 8006282:	461a      	mov	r2, r3
 8006284:	f7ff fc54 	bl	8005b30 <LL_ADC_SetDataRightShift>
 8006288:	e047      	b.n	800631a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	069b      	lsls	r3, r3, #26
 800629a:	429a      	cmp	r2, r3
 800629c:	d107      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	069b      	lsls	r3, r3, #26
 80062be:	429a      	cmp	r2, r3
 80062c0:	d107      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	069b      	lsls	r3, r3, #26
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d107      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	069b      	lsls	r3, r3, #26
 8006306:	429a      	cmp	r2, r3
 8006308:	d107      	bne.n	800631a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006318:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fd04 	bl	8005d2c <LL_ADC_IsEnabled>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 820d 	bne.w	8006746 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	461a      	mov	r2, r3
 800633a:	f7ff fc85 	bl	8005c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	4a0c      	ldr	r2, [pc, #48]	; (8006374 <HAL_ADC_ConfigChannel+0x290>)
 8006344:	4293      	cmp	r3, r2
 8006346:	f040 8133 	bne.w	80065b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006356:	2b00      	cmp	r3, #0
 8006358:	d110      	bne.n	800637c <HAL_ADC_ConfigChannel+0x298>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	0e9b      	lsrs	r3, r3, #26
 8006360:	3301      	adds	r3, #1
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2b09      	cmp	r3, #9
 8006368:	bf94      	ite	ls
 800636a:	2301      	movls	r3, #1
 800636c:	2300      	movhi	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e01e      	b.n	80063b0 <HAL_ADC_ConfigChannel+0x2cc>
 8006372:	bf00      	nop
 8006374:	47ff0000 	.word	0x47ff0000
 8006378:	5c001000 	.word	0x5c001000
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006384:	fa93 f3a3 	rbit	r3, r3
 8006388:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800638a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800638e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006394:	2320      	movs	r3, #32
 8006396:	e003      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639a:	fab3 f383 	clz	r3, r3
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	3301      	adds	r3, #1
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	bf94      	ite	ls
 80063aa:	2301      	movls	r3, #1
 80063ac:	2300      	movhi	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d079      	beq.n	80064a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <HAL_ADC_ConfigChannel+0x2ec>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	0e9b      	lsrs	r3, r3, #26
 80063c6:	3301      	adds	r3, #1
 80063c8:	069b      	lsls	r3, r3, #26
 80063ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ce:	e015      	b.n	80063fc <HAL_ADC_ConfigChannel+0x318>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	fa93 f3a3 	rbit	r3, r3
 80063dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80063e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80063e8:	2320      	movs	r3, #32
 80063ea:	e003      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80063ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	069b      	lsls	r3, r3, #26
 80063f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_ADC_ConfigChannel+0x338>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	0e9b      	lsrs	r3, r3, #26
 800640e:	3301      	adds	r3, #1
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f303 	lsl.w	r3, r1, r3
 800641a:	e017      	b.n	800644c <HAL_ADC_ConfigChannel+0x368>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006424:	fa93 f3a3 	rbit	r3, r3
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006434:	2320      	movs	r3, #32
 8006436:	e003      	b.n	8006440 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643a:	fab3 f383 	clz	r3, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	3301      	adds	r3, #1
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	ea42 0103 	orr.w	r1, r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x38e>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0e9b      	lsrs	r3, r3, #26
 8006462:	3301      	adds	r3, #1
 8006464:	f003 021f 	and.w	r2, r3, #31
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	051b      	lsls	r3, r3, #20
 8006470:	e018      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x3c0>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800648a:	2320      	movs	r3, #32
 800648c:	e003      	b.n	8006496 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f003 021f 	and.w	r2, r3, #31
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064a4:	430b      	orrs	r3, r1
 80064a6:	e07e      	b.n	80065a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <HAL_ADC_ConfigChannel+0x3e0>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	0e9b      	lsrs	r3, r3, #26
 80064ba:	3301      	adds	r3, #1
 80064bc:	069b      	lsls	r3, r3, #26
 80064be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064c2:	e015      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x40c>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	fa93 f3a3 	rbit	r3, r3
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80064dc:	2320      	movs	r3, #32
 80064de:	e003      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	3301      	adds	r3, #1
 80064ea:	069b      	lsls	r3, r3, #26
 80064ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x42c>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	0e9b      	lsrs	r3, r3, #26
 8006502:	3301      	adds	r3, #1
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	e017      	b.n	8006540 <HAL_ADC_ConfigChannel+0x45c>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	fa93 f3a3 	rbit	r3, r3
 800651c:	61bb      	str	r3, [r7, #24]
  return result;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8006528:	2320      	movs	r3, #32
 800652a:	e003      	b.n	8006534 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	fab3 f383 	clz	r3, r3
 8006532:	b2db      	uxtb	r3, r3
 8006534:	3301      	adds	r3, #1
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	2101      	movs	r1, #1
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	ea42 0103 	orr.w	r1, r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <HAL_ADC_ConfigChannel+0x488>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	0e9b      	lsrs	r3, r3, #26
 8006556:	3301      	adds	r3, #1
 8006558:	f003 021f 	and.w	r2, r3, #31
 800655c:	4613      	mov	r3, r2
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	4413      	add	r3, r2
 8006562:	3b1e      	subs	r3, #30
 8006564:	051b      	lsls	r3, r3, #20
 8006566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800656a:	e01b      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x4c0>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	fa93 f3a3 	rbit	r3, r3
 8006578:	60fb      	str	r3, [r7, #12]
  return result;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006584:	2320      	movs	r3, #32
 8006586:	e003      	b.n	8006590 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fab3 f383 	clz	r3, r3
 800658e:	b2db      	uxtb	r3, r3
 8006590:	3301      	adds	r3, #1
 8006592:	f003 021f 	and.w	r2, r3, #31
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	3b1e      	subs	r3, #30
 800659e:	051b      	lsls	r3, r3, #20
 80065a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065a4:	430b      	orrs	r3, r1
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	6892      	ldr	r2, [r2, #8]
 80065aa:	4619      	mov	r1, r3
 80065ac:	f7ff fb20 	bl	8005bf0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f280 80c6 	bge.w	8006746 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a67      	ldr	r2, [pc, #412]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_ADC_ConfigChannel+0x4ea>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a65      	ldr	r2, [pc, #404]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <HAL_ADC_ConfigChannel+0x4ee>
 80065ce:	4b65      	ldr	r3, [pc, #404]	; (8006764 <HAL_ADC_ConfigChannel+0x680>)
 80065d0:	e000      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x4f0>
 80065d2:	4b65      	ldr	r3, [pc, #404]	; (8006768 <HAL_ADC_ConfigChannel+0x684>)
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fa7d 	bl	8005ad4 <LL_ADC_GetCommonPathInternalCh>
 80065da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a5e      	ldr	r2, [pc, #376]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_ADC_ConfigChannel+0x50c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5d      	ldr	r2, [pc, #372]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10e      	bne.n	800660e <HAL_ADC_ConfigChannel+0x52a>
 80065f0:	485a      	ldr	r0, [pc, #360]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 80065f2:	f7ff fb9b 	bl	8005d2c <LL_ADC_IsEnabled>
 80065f6:	4604      	mov	r4, r0
 80065f8:	4859      	ldr	r0, [pc, #356]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 80065fa:	f7ff fb97 	bl	8005d2c <LL_ADC_IsEnabled>
 80065fe:	4603      	mov	r3, r0
 8006600:	4323      	orrs	r3, r4
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e008      	b.n	8006620 <HAL_ADC_ConfigChannel+0x53c>
 800660e:	4857      	ldr	r0, [pc, #348]	; (800676c <HAL_ADC_ConfigChannel+0x688>)
 8006610:	f7ff fb8c 	bl	8005d2c <LL_ADC_IsEnabled>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d07d      	beq.n	8006720 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a51      	ldr	r2, [pc, #324]	; (8006770 <HAL_ADC_ConfigChannel+0x68c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x5ac>
 800662e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d12b      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a4b      	ldr	r2, [pc, #300]	; (800676c <HAL_ADC_ConfigChannel+0x688>)
 800663e:	4293      	cmp	r3, r2
 8006640:	f040 8081 	bne.w	8006746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a44      	ldr	r2, [pc, #272]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_ADC_ConfigChannel+0x574>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a43      	ldr	r2, [pc, #268]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d101      	bne.n	800665c <HAL_ADC_ConfigChannel+0x578>
 8006658:	4a42      	ldr	r2, [pc, #264]	; (8006764 <HAL_ADC_ConfigChannel+0x680>)
 800665a:	e000      	b.n	800665e <HAL_ADC_ConfigChannel+0x57a>
 800665c:	4a42      	ldr	r2, [pc, #264]	; (8006768 <HAL_ADC_ConfigChannel+0x684>)
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f7ff fa21 	bl	8005aae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800666c:	4b41      	ldr	r3, [pc, #260]	; (8006774 <HAL_ADC_ConfigChannel+0x690>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	099b      	lsrs	r3, r3, #6
 8006672:	4a41      	ldr	r2, [pc, #260]	; (8006778 <HAL_ADC_ConfigChannel+0x694>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	099b      	lsrs	r3, r3, #6
 800667a:	3301      	adds	r3, #1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006680:	e002      	b.n	8006688 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3b01      	subs	r3, #1
 8006686:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f9      	bne.n	8006682 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800668e:	e05a      	b.n	8006746 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a39      	ldr	r2, [pc, #228]	; (800677c <HAL_ADC_ConfigChannel+0x698>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d11e      	bne.n	80066d8 <HAL_ADC_ConfigChannel+0x5f4>
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d119      	bne.n	80066d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a30      	ldr	r2, [pc, #192]	; (800676c <HAL_ADC_ConfigChannel+0x688>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d14b      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2a      	ldr	r2, [pc, #168]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_ADC_ConfigChannel+0x5de>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a28      	ldr	r2, [pc, #160]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x5e2>
 80066c2:	4a28      	ldr	r2, [pc, #160]	; (8006764 <HAL_ADC_ConfigChannel+0x680>)
 80066c4:	e000      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x5e4>
 80066c6:	4a28      	ldr	r2, [pc, #160]	; (8006768 <HAL_ADC_ConfigChannel+0x684>)
 80066c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7ff f9ec 	bl	8005aae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066d6:	e036      	b.n	8006746 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a28      	ldr	r2, [pc, #160]	; (8006780 <HAL_ADC_ConfigChannel+0x69c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d131      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x662>
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d12c      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	; (800676c <HAL_ADC_ConfigChannel+0x688>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d127      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a18      	ldr	r2, [pc, #96]	; (800675c <HAL_ADC_ConfigChannel+0x678>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_ADC_ConfigChannel+0x626>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_ADC_ConfigChannel+0x67c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_ADC_ConfigChannel+0x62a>
 800670a:	4a16      	ldr	r2, [pc, #88]	; (8006764 <HAL_ADC_ConfigChannel+0x680>)
 800670c:	e000      	b.n	8006710 <HAL_ADC_ConfigChannel+0x62c>
 800670e:	4a16      	ldr	r2, [pc, #88]	; (8006768 <HAL_ADC_ConfigChannel+0x684>)
 8006710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7ff f9c8 	bl	8005aae <LL_ADC_SetCommonPathInternalCh>
 800671e:	e012      	b.n	8006746 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006732:	e008      	b.n	8006746 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800674e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006752:	4618      	mov	r0, r3
 8006754:	3784      	adds	r7, #132	; 0x84
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	40022000 	.word	0x40022000
 8006760:	40022100 	.word	0x40022100
 8006764:	40022300 	.word	0x40022300
 8006768:	58026300 	.word	0x58026300
 800676c:	58026000 	.word	0x58026000
 8006770:	cb840000 	.word	0xcb840000
 8006774:	24000030 	.word	0x24000030
 8006778:	053e2d63 	.word	0x053e2d63
 800677c:	c7520000 	.word	0xc7520000
 8006780:	cfb80000 	.word	0xcfb80000

08006784 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a7a      	ldr	r2, [pc, #488]	; (800697c <ADC_ConfigureBoostMode+0x1f8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <ADC_ConfigureBoostMode+0x1c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a79      	ldr	r2, [pc, #484]	; (8006980 <ADC_ConfigureBoostMode+0x1fc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d109      	bne.n	80067b4 <ADC_ConfigureBoostMode+0x30>
 80067a0:	4b78      	ldr	r3, [pc, #480]	; (8006984 <ADC_ConfigureBoostMode+0x200>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e008      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
 80067b4:	4b74      	ldr	r3, [pc, #464]	; (8006988 <ADC_ConfigureBoostMode+0x204>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01c      	beq.n	8006804 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80067ca:	f004 fdff 	bl	800b3cc <HAL_RCC_GetHCLKFreq>
 80067ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067d8:	d010      	beq.n	80067fc <ADC_ConfigureBoostMode+0x78>
 80067da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067de:	d873      	bhi.n	80068c8 <ADC_ConfigureBoostMode+0x144>
 80067e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e4:	d002      	beq.n	80067ec <ADC_ConfigureBoostMode+0x68>
 80067e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ea:	d16d      	bne.n	80068c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	60fb      	str	r3, [r7, #12]
        break;
 80067fa:	e068      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	60fb      	str	r3, [r7, #12]
        break;
 8006802:	e064      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006804:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	f006 f844 	bl	800c898 <HAL_RCCEx_GetPeriphCLKFreq>
 8006810:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800681a:	d051      	beq.n	80068c0 <ADC_ConfigureBoostMode+0x13c>
 800681c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006820:	d854      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 8006822:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006826:	d047      	beq.n	80068b8 <ADC_ConfigureBoostMode+0x134>
 8006828:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800682c:	d84e      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 800682e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006832:	d03d      	beq.n	80068b0 <ADC_ConfigureBoostMode+0x12c>
 8006834:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006838:	d848      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 800683a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683e:	d033      	beq.n	80068a8 <ADC_ConfigureBoostMode+0x124>
 8006840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006844:	d842      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 8006846:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800684a:	d029      	beq.n	80068a0 <ADC_ConfigureBoostMode+0x11c>
 800684c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006850:	d83c      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 8006852:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006856:	d01a      	beq.n	800688e <ADC_ConfigureBoostMode+0x10a>
 8006858:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800685c:	d836      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 800685e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006862:	d014      	beq.n	800688e <ADC_ConfigureBoostMode+0x10a>
 8006864:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006868:	d830      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686e:	d00e      	beq.n	800688e <ADC_ConfigureBoostMode+0x10a>
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006874:	d82a      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 8006876:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800687a:	d008      	beq.n	800688e <ADC_ConfigureBoostMode+0x10a>
 800687c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006880:	d824      	bhi.n	80068cc <ADC_ConfigureBoostMode+0x148>
 8006882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006886:	d002      	beq.n	800688e <ADC_ConfigureBoostMode+0x10a>
 8006888:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800688c:	d11e      	bne.n	80068cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	0c9b      	lsrs	r3, r3, #18
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	60fb      	str	r3, [r7, #12]
        break;
 800689e:	e016      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	60fb      	str	r3, [r7, #12]
        break;
 80068a6:	e012      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	60fb      	str	r3, [r7, #12]
        break;
 80068ae:	e00e      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	099b      	lsrs	r3, r3, #6
 80068b4:	60fb      	str	r3, [r7, #12]
        break;
 80068b6:	e00a      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
        break;
 80068be:	e006      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	60fb      	str	r3, [r7, #12]
        break;
 80068c6:	e002      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80068c8:	bf00      	nop
 80068ca:	e000      	b.n	80068ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80068cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80068ce:	f7ff f8cf 	bl	8005a70 <HAL_GetREVID>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068d8:	4293      	cmp	r3, r2
 80068da:	d815      	bhi.n	8006908 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a2b      	ldr	r2, [pc, #172]	; (800698c <ADC_ConfigureBoostMode+0x208>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d908      	bls.n	80068f6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80068f4:	e03e      	b.n	8006974 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006904:	609a      	str	r2, [r3, #8]
}
 8006906:	e035      	b.n	8006974 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <ADC_ConfigureBoostMode+0x20c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d808      	bhi.n	8006928 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006924:	609a      	str	r2, [r3, #8]
}
 8006926:	e025      	b.n	8006974 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <ADC_ConfigureBoostMode+0x210>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d80a      	bhi.n	8006946 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006942:	609a      	str	r2, [r3, #8]
}
 8006944:	e016      	b.n	8006974 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <ADC_ConfigureBoostMode+0x214>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d80a      	bhi.n	8006964 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006960:	609a      	str	r2, [r3, #8]
}
 8006962:	e007      	b.n	8006974 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40022000 	.word	0x40022000
 8006980:	40022100 	.word	0x40022100
 8006984:	40022300 	.word	0x40022300
 8006988:	58026300 	.word	0x58026300
 800698c:	01312d00 	.word	0x01312d00
 8006990:	005f5e10 	.word	0x005f5e10
 8006994:	00bebc20 	.word	0x00bebc20
 8006998:	017d7840 	.word	0x017d7840

0800699c <LL_ADC_IsEnabled>:
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <LL_ADC_IsEnabled+0x18>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_ADC_IsEnabled+0x1a>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d101      	bne.n	80069da <LL_ADC_REG_IsConversionOngoing+0x18>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b09f      	sub	sp, #124	; 0x7c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0be      	b.n	8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a5c      	ldr	r2, [pc, #368]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d102      	bne.n	8006a26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a20:	4b5b      	ldr	r3, [pc, #364]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a22:	60bb      	str	r3, [r7, #8]
 8006a24:	e001      	b.n	8006a2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006a26:	2300      	movs	r3, #0
 8006a28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e09d      	b.n	8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff ffb9 	bl	80069c2 <LL_ADC_REG_IsConversionOngoing>
 8006a50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff ffb3 	bl	80069c2 <LL_ADC_REG_IsConversionOngoing>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d17f      	bne.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d17c      	bne.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a47      	ldr	r2, [pc, #284]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a46      	ldr	r2, [pc, #280]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006a7c:	4b45      	ldr	r3, [pc, #276]	; (8006b94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006a7e:	e000      	b.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006a80:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006a82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d039      	beq.n	8006b00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3a      	ldr	r2, [pc, #232]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a38      	ldr	r2, [pc, #224]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006ab2:	4836      	ldr	r0, [pc, #216]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ab4:	f7ff ff72 	bl	800699c <LL_ADC_IsEnabled>
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4835      	ldr	r0, [pc, #212]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006abc:	f7ff ff6e 	bl	800699c <LL_ADC_IsEnabled>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4323      	orrs	r3, r4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	e008      	b.n	8006ae2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006ad0:	4832      	ldr	r0, [pc, #200]	; (8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ad2:	f7ff ff63 	bl	800699c <LL_ADC_IsEnabled>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d047      	beq.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	6811      	ldr	r1, [r2, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	6892      	ldr	r2, [r2, #8]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	431a      	orrs	r2, r3
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006afe:	e03a      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10e      	bne.n	8006b3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006b20:	481a      	ldr	r0, [pc, #104]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b22:	f7ff ff3b 	bl	800699c <LL_ADC_IsEnabled>
 8006b26:	4604      	mov	r4, r0
 8006b28:	4819      	ldr	r0, [pc, #100]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b2a:	f7ff ff37 	bl	800699c <LL_ADC_IsEnabled>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4323      	orrs	r3, r4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bf0c      	ite	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	2300      	movne	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	e008      	b.n	8006b50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006b3e:	4817      	ldr	r0, [pc, #92]	; (8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006b40:	f7ff ff2c 	bl	800699c <LL_ADC_IsEnabled>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d010      	beq.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b60:	e009      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f043 0220 	orr.w	r2, r3, #32
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006b74:	e000      	b.n	8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	377c      	adds	r7, #124	; 0x7c
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd90      	pop	{r4, r7, pc}
 8006b8c:	40022000 	.word	0x40022000
 8006b90:	40022100 	.word	0x40022100
 8006b94:	40022300 	.word	0x40022300
 8006b98:	58026300 	.word	0x58026300
 8006b9c:	58026000 	.word	0x58026000
 8006ba0:	fffff0e0 	.word	0xfffff0e0

08006ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <__NVIC_SetPriorityGrouping+0x40>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <__NVIC_SetPriorityGrouping+0x44>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bd2:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <__NVIC_SetPriorityGrouping+0x40>)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	60d3      	str	r3, [r2, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	e000ed00 	.word	0xe000ed00
 8006be8:	05fa0000 	.word	0x05fa0000

08006bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <__NVIC_GetPriorityGrouping+0x18>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	f003 0307 	and.w	r3, r3, #7
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	e000ed00 	.word	0xe000ed00

08006c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	db0b      	blt.n	8006c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	f003 021f 	and.w	r2, r3, #31
 8006c20:	4907      	ldr	r1, [pc, #28]	; (8006c40 <__NVIC_EnableIRQ+0x38>)
 8006c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	2001      	movs	r0, #1
 8006c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	e000e100 	.word	0xe000e100

08006c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	db0a      	blt.n	8006c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	490c      	ldr	r1, [pc, #48]	; (8006c90 <__NVIC_SetPriority+0x4c>)
 8006c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c62:	0112      	lsls	r2, r2, #4
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	440b      	add	r3, r1
 8006c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c6c:	e00a      	b.n	8006c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	4908      	ldr	r1, [pc, #32]	; (8006c94 <__NVIC_SetPriority+0x50>)
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	3b04      	subs	r3, #4
 8006c7c:	0112      	lsls	r2, r2, #4
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	440b      	add	r3, r1
 8006c82:	761a      	strb	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	e000e100 	.word	0xe000e100
 8006c94:	e000ed00 	.word	0xe000ed00

08006c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f1c3 0307 	rsb	r3, r3, #7
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	bf28      	it	cs
 8006cb6:	2304      	movcs	r3, #4
 8006cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d902      	bls.n	8006cc8 <NVIC_EncodePriority+0x30>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3b03      	subs	r3, #3
 8006cc6:	e000      	b.n	8006cca <NVIC_EncodePriority+0x32>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43da      	mvns	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	401a      	ands	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	43d9      	mvns	r1, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf0:	4313      	orrs	r3, r2
         );
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	; 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d10:	d301      	bcc.n	8006d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d12:	2301      	movs	r3, #1
 8006d14:	e00f      	b.n	8006d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d16:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <SysTick_Config+0x40>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d1e:	210f      	movs	r1, #15
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d24:	f7ff ff8e 	bl	8006c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <SysTick_Config+0x40>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <SysTick_Config+0x40>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000e010 	.word	0xe000e010

08006d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff29 	bl	8006ba4 <__NVIC_SetPriorityGrouping>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	4603      	mov	r3, r0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d68:	f7ff ff40 	bl	8006bec <__NVIC_GetPriorityGrouping>
 8006d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	6978      	ldr	r0, [r7, #20]
 8006d74:	f7ff ff90 	bl	8006c98 <NVIC_EncodePriority>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ff5f 	bl	8006c44 <__NVIC_SetPriority>
}
 8006d86:	bf00      	nop
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	4603      	mov	r3, r0
 8006d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ff33 	bl	8006c08 <__NVIC_EnableIRQ>
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff ffa4 	bl	8006d00 <SysTick_Config>
 8006db8:	4603      	mov	r3, r0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006dcc:	f7fe fe20 	bl	8005a10 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e316      	b.n	800740a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a66      	ldr	r2, [pc, #408]	; (8006f7c <HAL_DMA_Init+0x1b8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04a      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a65      	ldr	r2, [pc, #404]	; (8006f80 <HAL_DMA_Init+0x1bc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d045      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a63      	ldr	r2, [pc, #396]	; (8006f84 <HAL_DMA_Init+0x1c0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d040      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a62      	ldr	r2, [pc, #392]	; (8006f88 <HAL_DMA_Init+0x1c4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d03b      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a60      	ldr	r2, [pc, #384]	; (8006f8c <HAL_DMA_Init+0x1c8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d036      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a5f      	ldr	r2, [pc, #380]	; (8006f90 <HAL_DMA_Init+0x1cc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d031      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a5d      	ldr	r2, [pc, #372]	; (8006f94 <HAL_DMA_Init+0x1d0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02c      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a5c      	ldr	r2, [pc, #368]	; (8006f98 <HAL_DMA_Init+0x1d4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d027      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a5a      	ldr	r2, [pc, #360]	; (8006f9c <HAL_DMA_Init+0x1d8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a59      	ldr	r2, [pc, #356]	; (8006fa0 <HAL_DMA_Init+0x1dc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a57      	ldr	r2, [pc, #348]	; (8006fa4 <HAL_DMA_Init+0x1e0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a56      	ldr	r2, [pc, #344]	; (8006fa8 <HAL_DMA_Init+0x1e4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a54      	ldr	r2, [pc, #336]	; (8006fac <HAL_DMA_Init+0x1e8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a53      	ldr	r2, [pc, #332]	; (8006fb0 <HAL_DMA_Init+0x1ec>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a51      	ldr	r2, [pc, #324]	; (8006fb4 <HAL_DMA_Init+0x1f0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <HAL_DMA_Init+0xb8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a50      	ldr	r2, [pc, #320]	; (8006fb8 <HAL_DMA_Init+0x1f4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <HAL_DMA_Init+0xbc>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <HAL_DMA_Init+0xbe>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 813b 	beq.w	80070fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a37      	ldr	r2, [pc, #220]	; (8006f7c <HAL_DMA_Init+0x1b8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d04a      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a36      	ldr	r2, [pc, #216]	; (8006f80 <HAL_DMA_Init+0x1bc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d045      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a34      	ldr	r2, [pc, #208]	; (8006f84 <HAL_DMA_Init+0x1c0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a33      	ldr	r2, [pc, #204]	; (8006f88 <HAL_DMA_Init+0x1c4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d03b      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a31      	ldr	r2, [pc, #196]	; (8006f8c <HAL_DMA_Init+0x1c8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_DMA_Init+0x1cc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2e      	ldr	r2, [pc, #184]	; (8006f94 <HAL_DMA_Init+0x1d0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02c      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2d      	ldr	r2, [pc, #180]	; (8006f98 <HAL_DMA_Init+0x1d4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d027      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <HAL_DMA_Init+0x1d8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d022      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <HAL_DMA_Init+0x1dc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a28      	ldr	r2, [pc, #160]	; (8006fa4 <HAL_DMA_Init+0x1e0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <HAL_DMA_Init+0x1e4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <HAL_DMA_Init+0x1e8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_DMA_Init+0x1ec>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <HAL_DMA_Init+0x1f0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_DMA_Init+0x174>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_DMA_Init+0x1f4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d108      	bne.n	8006f4a <HAL_DMA_Init+0x186>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e007      	b.n	8006f5a <HAL_DMA_Init+0x196>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f5a:	e02f      	b.n	8006fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f5c:	f7fe fd58 	bl	8005a10 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	d928      	bls.n	8006fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2203      	movs	r2, #3
 8006f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e246      	b.n	800740a <HAL_DMA_Init+0x646>
 8006f7c:	40020010 	.word	0x40020010
 8006f80:	40020028 	.word	0x40020028
 8006f84:	40020040 	.word	0x40020040
 8006f88:	40020058 	.word	0x40020058
 8006f8c:	40020070 	.word	0x40020070
 8006f90:	40020088 	.word	0x40020088
 8006f94:	400200a0 	.word	0x400200a0
 8006f98:	400200b8 	.word	0x400200b8
 8006f9c:	40020410 	.word	0x40020410
 8006fa0:	40020428 	.word	0x40020428
 8006fa4:	40020440 	.word	0x40020440
 8006fa8:	40020458 	.word	0x40020458
 8006fac:	40020470 	.word	0x40020470
 8006fb0:	40020488 	.word	0x40020488
 8006fb4:	400204a0 	.word	0x400204a0
 8006fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1c8      	bne.n	8006f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4b83      	ldr	r3, [pc, #524]	; (80071e4 <HAL_DMA_Init+0x420>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b04      	cmp	r3, #4
 800700e:	d107      	bne.n	8007020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	4313      	orrs	r3, r2
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007020:	4b71      	ldr	r3, [pc, #452]	; (80071e8 <HAL_DMA_Init+0x424>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b71      	ldr	r3, [pc, #452]	; (80071ec <HAL_DMA_Init+0x428>)
 8007026:	4013      	ands	r3, r2
 8007028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702c:	d328      	bcc.n	8007080 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b28      	cmp	r3, #40	; 0x28
 8007034:	d903      	bls.n	800703e <HAL_DMA_Init+0x27a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b2e      	cmp	r3, #46	; 0x2e
 800703c:	d917      	bls.n	800706e <HAL_DMA_Init+0x2aa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b3e      	cmp	r3, #62	; 0x3e
 8007044:	d903      	bls.n	800704e <HAL_DMA_Init+0x28a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b42      	cmp	r3, #66	; 0x42
 800704c:	d90f      	bls.n	800706e <HAL_DMA_Init+0x2aa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b46      	cmp	r3, #70	; 0x46
 8007054:	d903      	bls.n	800705e <HAL_DMA_Init+0x29a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b48      	cmp	r3, #72	; 0x48
 800705c:	d907      	bls.n	800706e <HAL_DMA_Init+0x2aa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b4e      	cmp	r3, #78	; 0x4e
 8007064:	d905      	bls.n	8007072 <HAL_DMA_Init+0x2ae>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b52      	cmp	r3, #82	; 0x52
 800706c:	d801      	bhi.n	8007072 <HAL_DMA_Init+0x2ae>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <HAL_DMA_Init+0x2b0>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0307 	bic.w	r3, r3, #7
 8007096:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d117      	bne.n	80070da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f002 fb33 	bl	8009728 <DMA_CheckFifoParam>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e197      	b.n	800740a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f002 fa6e 	bl	80095c4 <DMA_CalcBaseAndBitshift>
 80070e8:	4603      	mov	r3, r0
 80070ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	223f      	movs	r2, #63	; 0x3f
 80070f6:	409a      	lsls	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	e0cd      	b.n	800729a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3b      	ldr	r2, [pc, #236]	; (80071f0 <HAL_DMA_Init+0x42c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_DMA_Init+0x38a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a39      	ldr	r2, [pc, #228]	; (80071f4 <HAL_DMA_Init+0x430>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d01d      	beq.n	800714e <HAL_DMA_Init+0x38a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a38      	ldr	r2, [pc, #224]	; (80071f8 <HAL_DMA_Init+0x434>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_DMA_Init+0x38a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a36      	ldr	r2, [pc, #216]	; (80071fc <HAL_DMA_Init+0x438>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_DMA_Init+0x38a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a35      	ldr	r2, [pc, #212]	; (8007200 <HAL_DMA_Init+0x43c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_DMA_Init+0x38a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a33      	ldr	r2, [pc, #204]	; (8007204 <HAL_DMA_Init+0x440>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_DMA_Init+0x38a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a32      	ldr	r2, [pc, #200]	; (8007208 <HAL_DMA_Init+0x444>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_DMA_Init+0x38a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <HAL_DMA_Init+0x448>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d101      	bne.n	8007152 <HAL_DMA_Init+0x38e>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <HAL_DMA_Init+0x390>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8097 	beq.w	8007288 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <HAL_DMA_Init+0x42c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d021      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a22      	ldr	r2, [pc, #136]	; (80071f4 <HAL_DMA_Init+0x430>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01c      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a21      	ldr	r2, [pc, #132]	; (80071f8 <HAL_DMA_Init+0x434>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d017      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <HAL_DMA_Init+0x438>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d012      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1e      	ldr	r2, [pc, #120]	; (8007200 <HAL_DMA_Init+0x43c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00d      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <HAL_DMA_Init+0x440>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d008      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1b      	ldr	r2, [pc, #108]	; (8007208 <HAL_DMA_Init+0x444>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <HAL_DMA_Init+0x3e4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a19      	ldr	r2, [pc, #100]	; (800720c <HAL_DMA_Init+0x448>)
 80071a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <HAL_DMA_Init+0x44c>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	d021      	beq.n	8007214 <HAL_DMA_Init+0x450>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d102      	bne.n	80071de <HAL_DMA_Init+0x41a>
 80071d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071dc:	e01b      	b.n	8007216 <HAL_DMA_Init+0x452>
 80071de:	2300      	movs	r3, #0
 80071e0:	e019      	b.n	8007216 <HAL_DMA_Init+0x452>
 80071e2:	bf00      	nop
 80071e4:	fe10803f 	.word	0xfe10803f
 80071e8:	5c001000 	.word	0x5c001000
 80071ec:	ffff0000 	.word	0xffff0000
 80071f0:	58025408 	.word	0x58025408
 80071f4:	5802541c 	.word	0x5802541c
 80071f8:	58025430 	.word	0x58025430
 80071fc:	58025444 	.word	0x58025444
 8007200:	58025458 	.word	0x58025458
 8007204:	5802546c 	.word	0x5802546c
 8007208:	58025480 	.word	0x58025480
 800720c:	58025494 	.word	0x58025494
 8007210:	fffe000f 	.word	0xfffe000f
 8007214:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68d2      	ldr	r2, [r2, #12]
 800721a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800721c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800722c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800723c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007244:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	4b6e      	ldr	r3, [pc, #440]	; (8007414 <HAL_DMA_Init+0x650>)
 800725c:	4413      	add	r3, r2
 800725e:	4a6e      	ldr	r2, [pc, #440]	; (8007418 <HAL_DMA_Init+0x654>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	009a      	lsls	r2, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 f9a9 	bl	80095c4 <DMA_CalcBaseAndBitshift>
 8007272:	4603      	mov	r3, r0
 8007274:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	2201      	movs	r2, #1
 8007280:	409a      	lsls	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	e008      	b.n	800729a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2240      	movs	r2, #64	; 0x40
 800728c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2203      	movs	r2, #3
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0b7      	b.n	800740a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5f      	ldr	r2, [pc, #380]	; (800741c <HAL_DMA_Init+0x658>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d072      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5d      	ldr	r2, [pc, #372]	; (8007420 <HAL_DMA_Init+0x65c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d06d      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a5c      	ldr	r2, [pc, #368]	; (8007424 <HAL_DMA_Init+0x660>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d068      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a5a      	ldr	r2, [pc, #360]	; (8007428 <HAL_DMA_Init+0x664>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d063      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a59      	ldr	r2, [pc, #356]	; (800742c <HAL_DMA_Init+0x668>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d05e      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a57      	ldr	r2, [pc, #348]	; (8007430 <HAL_DMA_Init+0x66c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d059      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a56      	ldr	r2, [pc, #344]	; (8007434 <HAL_DMA_Init+0x670>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d054      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a54      	ldr	r2, [pc, #336]	; (8007438 <HAL_DMA_Init+0x674>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d04f      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a53      	ldr	r2, [pc, #332]	; (800743c <HAL_DMA_Init+0x678>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a51      	ldr	r2, [pc, #324]	; (8007440 <HAL_DMA_Init+0x67c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a50      	ldr	r2, [pc, #320]	; (8007444 <HAL_DMA_Init+0x680>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a4e      	ldr	r2, [pc, #312]	; (8007448 <HAL_DMA_Init+0x684>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4d      	ldr	r2, [pc, #308]	; (800744c <HAL_DMA_Init+0x688>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a4b      	ldr	r2, [pc, #300]	; (8007450 <HAL_DMA_Init+0x68c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a4a      	ldr	r2, [pc, #296]	; (8007454 <HAL_DMA_Init+0x690>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a48      	ldr	r2, [pc, #288]	; (8007458 <HAL_DMA_Init+0x694>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a47      	ldr	r2, [pc, #284]	; (800745c <HAL_DMA_Init+0x698>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a45      	ldr	r2, [pc, #276]	; (8007460 <HAL_DMA_Init+0x69c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a44      	ldr	r2, [pc, #272]	; (8007464 <HAL_DMA_Init+0x6a0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a42      	ldr	r2, [pc, #264]	; (8007468 <HAL_DMA_Init+0x6a4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a41      	ldr	r2, [pc, #260]	; (800746c <HAL_DMA_Init+0x6a8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a3f      	ldr	r2, [pc, #252]	; (8007470 <HAL_DMA_Init+0x6ac>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a3e      	ldr	r2, [pc, #248]	; (8007474 <HAL_DMA_Init+0x6b0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Init+0x5c6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a3c      	ldr	r2, [pc, #240]	; (8007478 <HAL_DMA_Init+0x6b4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_DMA_Init+0x5ca>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_DMA_Init+0x5cc>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d032      	beq.n	80073fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 fa43 	bl	8009820 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d102      	bne.n	80073a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d010      	beq.n	80073e8 <HAL_DMA_Init+0x624>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d80c      	bhi.n	80073e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f002 fac0 	bl	8009954 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e008      	b.n	80073fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	a7fdabf8 	.word	0xa7fdabf8
 8007418:	cccccccd 	.word	0xcccccccd
 800741c:	40020010 	.word	0x40020010
 8007420:	40020028 	.word	0x40020028
 8007424:	40020040 	.word	0x40020040
 8007428:	40020058 	.word	0x40020058
 800742c:	40020070 	.word	0x40020070
 8007430:	40020088 	.word	0x40020088
 8007434:	400200a0 	.word	0x400200a0
 8007438:	400200b8 	.word	0x400200b8
 800743c:	40020410 	.word	0x40020410
 8007440:	40020428 	.word	0x40020428
 8007444:	40020440 	.word	0x40020440
 8007448:	40020458 	.word	0x40020458
 800744c:	40020470 	.word	0x40020470
 8007450:	40020488 	.word	0x40020488
 8007454:	400204a0 	.word	0x400204a0
 8007458:	400204b8 	.word	0x400204b8
 800745c:	58025408 	.word	0x58025408
 8007460:	5802541c 	.word	0x5802541c
 8007464:	58025430 	.word	0x58025430
 8007468:	58025444 	.word	0x58025444
 800746c:	58025458 	.word	0x58025458
 8007470:	5802546c 	.word	0x5802546c
 8007474:	58025480 	.word	0x58025480
 8007478:	58025494 	.word	0x58025494

0800747c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e226      	b.n	80078e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_DMA_Start_IT+0x2a>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e21f      	b.n	80078e6 <HAL_DMA_Start_IT+0x46a>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	f040 820a 	bne.w	80078d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a68      	ldr	r2, [pc, #416]	; (8007670 <HAL_DMA_Start_IT+0x1f4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d04a      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a66      	ldr	r2, [pc, #408]	; (8007674 <HAL_DMA_Start_IT+0x1f8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d045      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_DMA_Start_IT+0x1fc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d040      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a63      	ldr	r2, [pc, #396]	; (800767c <HAL_DMA_Start_IT+0x200>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d03b      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a62      	ldr	r2, [pc, #392]	; (8007680 <HAL_DMA_Start_IT+0x204>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d036      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a60      	ldr	r2, [pc, #384]	; (8007684 <HAL_DMA_Start_IT+0x208>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d031      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a5f      	ldr	r2, [pc, #380]	; (8007688 <HAL_DMA_Start_IT+0x20c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d02c      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5d      	ldr	r2, [pc, #372]	; (800768c <HAL_DMA_Start_IT+0x210>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d027      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a5c      	ldr	r2, [pc, #368]	; (8007690 <HAL_DMA_Start_IT+0x214>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d022      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5a      	ldr	r2, [pc, #360]	; (8007694 <HAL_DMA_Start_IT+0x218>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01d      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a59      	ldr	r2, [pc, #356]	; (8007698 <HAL_DMA_Start_IT+0x21c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d018      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a57      	ldr	r2, [pc, #348]	; (800769c <HAL_DMA_Start_IT+0x220>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a56      	ldr	r2, [pc, #344]	; (80076a0 <HAL_DMA_Start_IT+0x224>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00e      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a54      	ldr	r2, [pc, #336]	; (80076a4 <HAL_DMA_Start_IT+0x228>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a53      	ldr	r2, [pc, #332]	; (80076a8 <HAL_DMA_Start_IT+0x22c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_DMA_Start_IT+0xee>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a51      	ldr	r2, [pc, #324]	; (80076ac <HAL_DMA_Start_IT+0x230>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d108      	bne.n	800757c <HAL_DMA_Start_IT+0x100>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e007      	b.n	800758c <HAL_DMA_Start_IT+0x110>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f001 fe6a 	bl	800926c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a34      	ldr	r2, [pc, #208]	; (8007670 <HAL_DMA_Start_IT+0x1f4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d04a      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a33      	ldr	r2, [pc, #204]	; (8007674 <HAL_DMA_Start_IT+0x1f8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d045      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a31      	ldr	r2, [pc, #196]	; (8007678 <HAL_DMA_Start_IT+0x1fc>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d040      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a30      	ldr	r2, [pc, #192]	; (800767c <HAL_DMA_Start_IT+0x200>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d03b      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2e      	ldr	r2, [pc, #184]	; (8007680 <HAL_DMA_Start_IT+0x204>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d036      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <HAL_DMA_Start_IT+0x208>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d031      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <HAL_DMA_Start_IT+0x20c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02c      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a2a      	ldr	r2, [pc, #168]	; (800768c <HAL_DMA_Start_IT+0x210>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d027      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a28      	ldr	r2, [pc, #160]	; (8007690 <HAL_DMA_Start_IT+0x214>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a27      	ldr	r2, [pc, #156]	; (8007694 <HAL_DMA_Start_IT+0x218>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d01d      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a25      	ldr	r2, [pc, #148]	; (8007698 <HAL_DMA_Start_IT+0x21c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a24      	ldr	r2, [pc, #144]	; (800769c <HAL_DMA_Start_IT+0x220>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <HAL_DMA_Start_IT+0x224>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a21      	ldr	r2, [pc, #132]	; (80076a4 <HAL_DMA_Start_IT+0x228>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_DMA_Start_IT+0x22c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_DMA_Start_IT+0x1bc>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_DMA_Start_IT+0x230>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <HAL_DMA_Start_IT+0x1c0>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <HAL_DMA_Start_IT+0x1c2>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d036      	beq.n	80076b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f023 021e 	bic.w	r2, r3, #30
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0216 	orr.w	r2, r2, #22
 8007654:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03e      	beq.n	80076dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0208 	orr.w	r2, r2, #8
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e035      	b.n	80076dc <HAL_DMA_Start_IT+0x260>
 8007670:	40020010 	.word	0x40020010
 8007674:	40020028 	.word	0x40020028
 8007678:	40020040 	.word	0x40020040
 800767c:	40020058 	.word	0x40020058
 8007680:	40020070 	.word	0x40020070
 8007684:	40020088 	.word	0x40020088
 8007688:	400200a0 	.word	0x400200a0
 800768c:	400200b8 	.word	0x400200b8
 8007690:	40020410 	.word	0x40020410
 8007694:	40020428 	.word	0x40020428
 8007698:	40020440 	.word	0x40020440
 800769c:	40020458 	.word	0x40020458
 80076a0:	40020470 	.word	0x40020470
 80076a4:	40020488 	.word	0x40020488
 80076a8:	400204a0 	.word	0x400204a0
 80076ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f023 020e 	bic.w	r2, r3, #14
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 020a 	orr.w	r2, r2, #10
 80076c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0204 	orr.w	r2, r2, #4
 80076da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a83      	ldr	r2, [pc, #524]	; (80078f0 <HAL_DMA_Start_IT+0x474>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d072      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a82      	ldr	r2, [pc, #520]	; (80078f4 <HAL_DMA_Start_IT+0x478>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d06d      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a80      	ldr	r2, [pc, #512]	; (80078f8 <HAL_DMA_Start_IT+0x47c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d068      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a7f      	ldr	r2, [pc, #508]	; (80078fc <HAL_DMA_Start_IT+0x480>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d063      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a7d      	ldr	r2, [pc, #500]	; (8007900 <HAL_DMA_Start_IT+0x484>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d05e      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a7c      	ldr	r2, [pc, #496]	; (8007904 <HAL_DMA_Start_IT+0x488>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d059      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a7a      	ldr	r2, [pc, #488]	; (8007908 <HAL_DMA_Start_IT+0x48c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d054      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a79      	ldr	r2, [pc, #484]	; (800790c <HAL_DMA_Start_IT+0x490>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d04f      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a77      	ldr	r2, [pc, #476]	; (8007910 <HAL_DMA_Start_IT+0x494>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d04a      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a76      	ldr	r2, [pc, #472]	; (8007914 <HAL_DMA_Start_IT+0x498>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d045      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a74      	ldr	r2, [pc, #464]	; (8007918 <HAL_DMA_Start_IT+0x49c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d040      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a73      	ldr	r2, [pc, #460]	; (800791c <HAL_DMA_Start_IT+0x4a0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d03b      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a71      	ldr	r2, [pc, #452]	; (8007920 <HAL_DMA_Start_IT+0x4a4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d036      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a70      	ldr	r2, [pc, #448]	; (8007924 <HAL_DMA_Start_IT+0x4a8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d031      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a6e      	ldr	r2, [pc, #440]	; (8007928 <HAL_DMA_Start_IT+0x4ac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d02c      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6d      	ldr	r2, [pc, #436]	; (800792c <HAL_DMA_Start_IT+0x4b0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d027      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a6b      	ldr	r2, [pc, #428]	; (8007930 <HAL_DMA_Start_IT+0x4b4>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d022      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a6a      	ldr	r2, [pc, #424]	; (8007934 <HAL_DMA_Start_IT+0x4b8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01d      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a68      	ldr	r2, [pc, #416]	; (8007938 <HAL_DMA_Start_IT+0x4bc>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d018      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a67      	ldr	r2, [pc, #412]	; (800793c <HAL_DMA_Start_IT+0x4c0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d013      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a65      	ldr	r2, [pc, #404]	; (8007940 <HAL_DMA_Start_IT+0x4c4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00e      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a64      	ldr	r2, [pc, #400]	; (8007944 <HAL_DMA_Start_IT+0x4c8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a62      	ldr	r2, [pc, #392]	; (8007948 <HAL_DMA_Start_IT+0x4cc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_DMA_Start_IT+0x350>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a61      	ldr	r2, [pc, #388]	; (800794c <HAL_DMA_Start_IT+0x4d0>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d101      	bne.n	80077d0 <HAL_DMA_Start_IT+0x354>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <HAL_DMA_Start_IT+0x356>
 80077d0:	2300      	movs	r3, #0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01a      	beq.n	800780c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800780a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a37      	ldr	r2, [pc, #220]	; (80078f0 <HAL_DMA_Start_IT+0x474>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04a      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a36      	ldr	r2, [pc, #216]	; (80078f4 <HAL_DMA_Start_IT+0x478>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d045      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a34      	ldr	r2, [pc, #208]	; (80078f8 <HAL_DMA_Start_IT+0x47c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d040      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a33      	ldr	r2, [pc, #204]	; (80078fc <HAL_DMA_Start_IT+0x480>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d03b      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a31      	ldr	r2, [pc, #196]	; (8007900 <HAL_DMA_Start_IT+0x484>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d036      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a30      	ldr	r2, [pc, #192]	; (8007904 <HAL_DMA_Start_IT+0x488>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d031      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2e      	ldr	r2, [pc, #184]	; (8007908 <HAL_DMA_Start_IT+0x48c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02c      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2d      	ldr	r2, [pc, #180]	; (800790c <HAL_DMA_Start_IT+0x490>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d027      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2b      	ldr	r2, [pc, #172]	; (8007910 <HAL_DMA_Start_IT+0x494>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <HAL_DMA_Start_IT+0x498>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a28      	ldr	r2, [pc, #160]	; (8007918 <HAL_DMA_Start_IT+0x49c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a27      	ldr	r2, [pc, #156]	; (800791c <HAL_DMA_Start_IT+0x4a0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a25      	ldr	r2, [pc, #148]	; (8007920 <HAL_DMA_Start_IT+0x4a4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a24      	ldr	r2, [pc, #144]	; (8007924 <HAL_DMA_Start_IT+0x4a8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a22      	ldr	r2, [pc, #136]	; (8007928 <HAL_DMA_Start_IT+0x4ac>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <HAL_DMA_Start_IT+0x430>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a21      	ldr	r2, [pc, #132]	; (800792c <HAL_DMA_Start_IT+0x4b0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d108      	bne.n	80078be <HAL_DMA_Start_IT+0x442>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e012      	b.n	80078e4 <HAL_DMA_Start_IT+0x468>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0201 	orr.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e009      	b.n	80078e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40020010 	.word	0x40020010
 80078f4:	40020028 	.word	0x40020028
 80078f8:	40020040 	.word	0x40020040
 80078fc:	40020058 	.word	0x40020058
 8007900:	40020070 	.word	0x40020070
 8007904:	40020088 	.word	0x40020088
 8007908:	400200a0 	.word	0x400200a0
 800790c:	400200b8 	.word	0x400200b8
 8007910:	40020410 	.word	0x40020410
 8007914:	40020428 	.word	0x40020428
 8007918:	40020440 	.word	0x40020440
 800791c:	40020458 	.word	0x40020458
 8007920:	40020470 	.word	0x40020470
 8007924:	40020488 	.word	0x40020488
 8007928:	400204a0 	.word	0x400204a0
 800792c:	400204b8 	.word	0x400204b8
 8007930:	58025408 	.word	0x58025408
 8007934:	5802541c 	.word	0x5802541c
 8007938:	58025430 	.word	0x58025430
 800793c:	58025444 	.word	0x58025444
 8007940:	58025458 	.word	0x58025458
 8007944:	5802546c 	.word	0x5802546c
 8007948:	58025480 	.word	0x58025480
 800794c:	58025494 	.word	0x58025494

08007950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007958:	f7fe f85a 	bl	8005a10 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e2dc      	b.n	8007f22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d008      	beq.n	8007986 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2280      	movs	r2, #128	; 0x80
 8007978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e2cd      	b.n	8007f22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a76      	ldr	r2, [pc, #472]	; (8007b64 <HAL_DMA_Abort+0x214>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d04a      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a74      	ldr	r2, [pc, #464]	; (8007b68 <HAL_DMA_Abort+0x218>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d045      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a73      	ldr	r2, [pc, #460]	; (8007b6c <HAL_DMA_Abort+0x21c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d040      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a71      	ldr	r2, [pc, #452]	; (8007b70 <HAL_DMA_Abort+0x220>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a70      	ldr	r2, [pc, #448]	; (8007b74 <HAL_DMA_Abort+0x224>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d036      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6e      	ldr	r2, [pc, #440]	; (8007b78 <HAL_DMA_Abort+0x228>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d031      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a6d      	ldr	r2, [pc, #436]	; (8007b7c <HAL_DMA_Abort+0x22c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d02c      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a6b      	ldr	r2, [pc, #428]	; (8007b80 <HAL_DMA_Abort+0x230>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d027      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a6a      	ldr	r2, [pc, #424]	; (8007b84 <HAL_DMA_Abort+0x234>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a68      	ldr	r2, [pc, #416]	; (8007b88 <HAL_DMA_Abort+0x238>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a67      	ldr	r2, [pc, #412]	; (8007b8c <HAL_DMA_Abort+0x23c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a65      	ldr	r2, [pc, #404]	; (8007b90 <HAL_DMA_Abort+0x240>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a64      	ldr	r2, [pc, #400]	; (8007b94 <HAL_DMA_Abort+0x244>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a62      	ldr	r2, [pc, #392]	; (8007b98 <HAL_DMA_Abort+0x248>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a61      	ldr	r2, [pc, #388]	; (8007b9c <HAL_DMA_Abort+0x24c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_DMA_Abort+0xd6>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a5f      	ldr	r2, [pc, #380]	; (8007ba0 <HAL_DMA_Abort+0x250>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <HAL_DMA_Abort+0xda>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <HAL_DMA_Abort+0xdc>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d013      	beq.n	8007a58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 021e 	bic.w	r2, r2, #30
 8007a3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695a      	ldr	r2, [r3, #20]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e00a      	b.n	8007a6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 020e 	bic.w	r2, r2, #14
 8007a66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3c      	ldr	r2, [pc, #240]	; (8007b64 <HAL_DMA_Abort+0x214>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d072      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3a      	ldr	r2, [pc, #232]	; (8007b68 <HAL_DMA_Abort+0x218>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d06d      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a39      	ldr	r2, [pc, #228]	; (8007b6c <HAL_DMA_Abort+0x21c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d068      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <HAL_DMA_Abort+0x220>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d063      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a36      	ldr	r2, [pc, #216]	; (8007b74 <HAL_DMA_Abort+0x224>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d05e      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a34      	ldr	r2, [pc, #208]	; (8007b78 <HAL_DMA_Abort+0x228>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d059      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a33      	ldr	r2, [pc, #204]	; (8007b7c <HAL_DMA_Abort+0x22c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d054      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <HAL_DMA_Abort+0x230>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d04f      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <HAL_DMA_Abort+0x234>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d04a      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2e      	ldr	r2, [pc, #184]	; (8007b88 <HAL_DMA_Abort+0x238>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d045      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2d      	ldr	r2, [pc, #180]	; (8007b8c <HAL_DMA_Abort+0x23c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d040      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a2b      	ldr	r2, [pc, #172]	; (8007b90 <HAL_DMA_Abort+0x240>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d03b      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2a      	ldr	r2, [pc, #168]	; (8007b94 <HAL_DMA_Abort+0x244>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a28      	ldr	r2, [pc, #160]	; (8007b98 <HAL_DMA_Abort+0x248>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d031      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a27      	ldr	r2, [pc, #156]	; (8007b9c <HAL_DMA_Abort+0x24c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d02c      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a25      	ldr	r2, [pc, #148]	; (8007ba0 <HAL_DMA_Abort+0x250>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d027      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <HAL_DMA_Abort+0x254>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <HAL_DMA_Abort+0x258>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01d      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a21      	ldr	r2, [pc, #132]	; (8007bac <HAL_DMA_Abort+0x25c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <HAL_DMA_Abort+0x260>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1e      	ldr	r2, [pc, #120]	; (8007bb4 <HAL_DMA_Abort+0x264>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <HAL_DMA_Abort+0x268>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <HAL_DMA_Abort+0x26c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_DMA_Abort+0x20e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a19      	ldr	r2, [pc, #100]	; (8007bc0 <HAL_DMA_Abort+0x270>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d132      	bne.n	8007bc4 <HAL_DMA_Abort+0x274>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e031      	b.n	8007bc6 <HAL_DMA_Abort+0x276>
 8007b62:	bf00      	nop
 8007b64:	40020010 	.word	0x40020010
 8007b68:	40020028 	.word	0x40020028
 8007b6c:	40020040 	.word	0x40020040
 8007b70:	40020058 	.word	0x40020058
 8007b74:	40020070 	.word	0x40020070
 8007b78:	40020088 	.word	0x40020088
 8007b7c:	400200a0 	.word	0x400200a0
 8007b80:	400200b8 	.word	0x400200b8
 8007b84:	40020410 	.word	0x40020410
 8007b88:	40020428 	.word	0x40020428
 8007b8c:	40020440 	.word	0x40020440
 8007b90:	40020458 	.word	0x40020458
 8007b94:	40020470 	.word	0x40020470
 8007b98:	40020488 	.word	0x40020488
 8007b9c:	400204a0 	.word	0x400204a0
 8007ba0:	400204b8 	.word	0x400204b8
 8007ba4:	58025408 	.word	0x58025408
 8007ba8:	5802541c 	.word	0x5802541c
 8007bac:	58025430 	.word	0x58025430
 8007bb0:	58025444 	.word	0x58025444
 8007bb4:	58025458 	.word	0x58025458
 8007bb8:	5802546c 	.word	0x5802546c
 8007bbc:	58025480 	.word	0x58025480
 8007bc0:	58025494 	.word	0x58025494
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6d      	ldr	r2, [pc, #436]	; (8007d94 <HAL_DMA_Abort+0x444>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d04a      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a6b      	ldr	r2, [pc, #428]	; (8007d98 <HAL_DMA_Abort+0x448>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d045      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a6a      	ldr	r2, [pc, #424]	; (8007d9c <HAL_DMA_Abort+0x44c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d040      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a68      	ldr	r2, [pc, #416]	; (8007da0 <HAL_DMA_Abort+0x450>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d03b      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a67      	ldr	r2, [pc, #412]	; (8007da4 <HAL_DMA_Abort+0x454>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d036      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a65      	ldr	r2, [pc, #404]	; (8007da8 <HAL_DMA_Abort+0x458>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d031      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a64      	ldr	r2, [pc, #400]	; (8007dac <HAL_DMA_Abort+0x45c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d02c      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a62      	ldr	r2, [pc, #392]	; (8007db0 <HAL_DMA_Abort+0x460>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d027      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a61      	ldr	r2, [pc, #388]	; (8007db4 <HAL_DMA_Abort+0x464>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d022      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a5f      	ldr	r2, [pc, #380]	; (8007db8 <HAL_DMA_Abort+0x468>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01d      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a5e      	ldr	r2, [pc, #376]	; (8007dbc <HAL_DMA_Abort+0x46c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d018      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a5c      	ldr	r2, [pc, #368]	; (8007dc0 <HAL_DMA_Abort+0x470>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a5b      	ldr	r2, [pc, #364]	; (8007dc4 <HAL_DMA_Abort+0x474>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00e      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a59      	ldr	r2, [pc, #356]	; (8007dc8 <HAL_DMA_Abort+0x478>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d009      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a58      	ldr	r2, [pc, #352]	; (8007dcc <HAL_DMA_Abort+0x47c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_DMA_Abort+0x32a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a56      	ldr	r2, [pc, #344]	; (8007dd0 <HAL_DMA_Abort+0x480>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d108      	bne.n	8007c8c <HAL_DMA_Abort+0x33c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0201 	bic.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	e007      	b.n	8007c9c <HAL_DMA_Abort+0x34c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007c9c:	e013      	b.n	8007cc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c9e:	f7fd feb7 	bl	8005a10 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	d90c      	bls.n	8007cc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e12d      	b.n	8007f22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e5      	bne.n	8007c9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a2f      	ldr	r2, [pc, #188]	; (8007d94 <HAL_DMA_Abort+0x444>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d04a      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	; (8007d98 <HAL_DMA_Abort+0x448>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d045      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2c      	ldr	r2, [pc, #176]	; (8007d9c <HAL_DMA_Abort+0x44c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d040      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <HAL_DMA_Abort+0x450>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d03b      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <HAL_DMA_Abort+0x454>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d036      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <HAL_DMA_Abort+0x458>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d031      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <HAL_DMA_Abort+0x45c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d02c      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <HAL_DMA_Abort+0x460>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <HAL_DMA_Abort+0x464>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <HAL_DMA_Abort+0x468>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d01d      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a20      	ldr	r2, [pc, #128]	; (8007dbc <HAL_DMA_Abort+0x46c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <HAL_DMA_Abort+0x470>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <HAL_DMA_Abort+0x474>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1b      	ldr	r2, [pc, #108]	; (8007dc8 <HAL_DMA_Abort+0x478>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <HAL_DMA_Abort+0x47c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_DMA_Abort+0x422>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a18      	ldr	r2, [pc, #96]	; (8007dd0 <HAL_DMA_Abort+0x480>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <HAL_DMA_Abort+0x426>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <HAL_DMA_Abort+0x428>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d02b      	beq.n	8007dd4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	223f      	movs	r2, #63	; 0x3f
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	e02a      	b.n	8007dea <HAL_DMA_Abort+0x49a>
 8007d94:	40020010 	.word	0x40020010
 8007d98:	40020028 	.word	0x40020028
 8007d9c:	40020040 	.word	0x40020040
 8007da0:	40020058 	.word	0x40020058
 8007da4:	40020070 	.word	0x40020070
 8007da8:	40020088 	.word	0x40020088
 8007dac:	400200a0 	.word	0x400200a0
 8007db0:	400200b8 	.word	0x400200b8
 8007db4:	40020410 	.word	0x40020410
 8007db8:	40020428 	.word	0x40020428
 8007dbc:	40020440 	.word	0x40020440
 8007dc0:	40020458 	.word	0x40020458
 8007dc4:	40020470 	.word	0x40020470
 8007dc8:	40020488 	.word	0x40020488
 8007dcc:	400204a0 	.word	0x400204a0
 8007dd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2201      	movs	r2, #1
 8007de4:	409a      	lsls	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a4f      	ldr	r2, [pc, #316]	; (8007f2c <HAL_DMA_Abort+0x5dc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d072      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a4d      	ldr	r2, [pc, #308]	; (8007f30 <HAL_DMA_Abort+0x5e0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d06d      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a4c      	ldr	r2, [pc, #304]	; (8007f34 <HAL_DMA_Abort+0x5e4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d068      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a4a      	ldr	r2, [pc, #296]	; (8007f38 <HAL_DMA_Abort+0x5e8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d063      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a49      	ldr	r2, [pc, #292]	; (8007f3c <HAL_DMA_Abort+0x5ec>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d05e      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a47      	ldr	r2, [pc, #284]	; (8007f40 <HAL_DMA_Abort+0x5f0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d059      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a46      	ldr	r2, [pc, #280]	; (8007f44 <HAL_DMA_Abort+0x5f4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d054      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a44      	ldr	r2, [pc, #272]	; (8007f48 <HAL_DMA_Abort+0x5f8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d04f      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a43      	ldr	r2, [pc, #268]	; (8007f4c <HAL_DMA_Abort+0x5fc>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d04a      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a41      	ldr	r2, [pc, #260]	; (8007f50 <HAL_DMA_Abort+0x600>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d045      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a40      	ldr	r2, [pc, #256]	; (8007f54 <HAL_DMA_Abort+0x604>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d040      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a3e      	ldr	r2, [pc, #248]	; (8007f58 <HAL_DMA_Abort+0x608>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d03b      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a3d      	ldr	r2, [pc, #244]	; (8007f5c <HAL_DMA_Abort+0x60c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d036      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a3b      	ldr	r2, [pc, #236]	; (8007f60 <HAL_DMA_Abort+0x610>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d031      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a3a      	ldr	r2, [pc, #232]	; (8007f64 <HAL_DMA_Abort+0x614>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d02c      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a38      	ldr	r2, [pc, #224]	; (8007f68 <HAL_DMA_Abort+0x618>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d027      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a37      	ldr	r2, [pc, #220]	; (8007f6c <HAL_DMA_Abort+0x61c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d022      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a35      	ldr	r2, [pc, #212]	; (8007f70 <HAL_DMA_Abort+0x620>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01d      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a34      	ldr	r2, [pc, #208]	; (8007f74 <HAL_DMA_Abort+0x624>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d018      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a32      	ldr	r2, [pc, #200]	; (8007f78 <HAL_DMA_Abort+0x628>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a31      	ldr	r2, [pc, #196]	; (8007f7c <HAL_DMA_Abort+0x62c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00e      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2f      	ldr	r2, [pc, #188]	; (8007f80 <HAL_DMA_Abort+0x630>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a2e      	ldr	r2, [pc, #184]	; (8007f84 <HAL_DMA_Abort+0x634>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <HAL_DMA_Abort+0x58a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a2c      	ldr	r2, [pc, #176]	; (8007f88 <HAL_DMA_Abort+0x638>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d101      	bne.n	8007ede <HAL_DMA_Abort+0x58e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <HAL_DMA_Abort+0x590>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d015      	beq.n	8007f10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007eec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40020010 	.word	0x40020010
 8007f30:	40020028 	.word	0x40020028
 8007f34:	40020040 	.word	0x40020040
 8007f38:	40020058 	.word	0x40020058
 8007f3c:	40020070 	.word	0x40020070
 8007f40:	40020088 	.word	0x40020088
 8007f44:	400200a0 	.word	0x400200a0
 8007f48:	400200b8 	.word	0x400200b8
 8007f4c:	40020410 	.word	0x40020410
 8007f50:	40020428 	.word	0x40020428
 8007f54:	40020440 	.word	0x40020440
 8007f58:	40020458 	.word	0x40020458
 8007f5c:	40020470 	.word	0x40020470
 8007f60:	40020488 	.word	0x40020488
 8007f64:	400204a0 	.word	0x400204a0
 8007f68:	400204b8 	.word	0x400204b8
 8007f6c:	58025408 	.word	0x58025408
 8007f70:	5802541c 	.word	0x5802541c
 8007f74:	58025430 	.word	0x58025430
 8007f78:	58025444 	.word	0x58025444
 8007f7c:	58025458 	.word	0x58025458
 8007f80:	5802546c 	.word	0x5802546c
 8007f84:	58025480 	.word	0x58025480
 8007f88:	58025494 	.word	0x58025494

08007f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e237      	b.n	800840e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e22c      	b.n	800840e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a5c      	ldr	r2, [pc, #368]	; (800812c <HAL_DMA_Abort_IT+0x1a0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d04a      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a5b      	ldr	r2, [pc, #364]	; (8008130 <HAL_DMA_Abort_IT+0x1a4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d045      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a59      	ldr	r2, [pc, #356]	; (8008134 <HAL_DMA_Abort_IT+0x1a8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d040      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a58      	ldr	r2, [pc, #352]	; (8008138 <HAL_DMA_Abort_IT+0x1ac>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d03b      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a56      	ldr	r2, [pc, #344]	; (800813c <HAL_DMA_Abort_IT+0x1b0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d036      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a55      	ldr	r2, [pc, #340]	; (8008140 <HAL_DMA_Abort_IT+0x1b4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d031      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a53      	ldr	r2, [pc, #332]	; (8008144 <HAL_DMA_Abort_IT+0x1b8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d02c      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a52      	ldr	r2, [pc, #328]	; (8008148 <HAL_DMA_Abort_IT+0x1bc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d027      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a50      	ldr	r2, [pc, #320]	; (800814c <HAL_DMA_Abort_IT+0x1c0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d022      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a4f      	ldr	r2, [pc, #316]	; (8008150 <HAL_DMA_Abort_IT+0x1c4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d01d      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a4d      	ldr	r2, [pc, #308]	; (8008154 <HAL_DMA_Abort_IT+0x1c8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d018      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a4c      	ldr	r2, [pc, #304]	; (8008158 <HAL_DMA_Abort_IT+0x1cc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a4a      	ldr	r2, [pc, #296]	; (800815c <HAL_DMA_Abort_IT+0x1d0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a49      	ldr	r2, [pc, #292]	; (8008160 <HAL_DMA_Abort_IT+0x1d4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a47      	ldr	r2, [pc, #284]	; (8008164 <HAL_DMA_Abort_IT+0x1d8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_DMA_Abort_IT+0xc8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a46      	ldr	r2, [pc, #280]	; (8008168 <HAL_DMA_Abort_IT+0x1dc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d101      	bne.n	8008058 <HAL_DMA_Abort_IT+0xcc>
 8008054:	2301      	movs	r3, #1
 8008056:	e000      	b.n	800805a <HAL_DMA_Abort_IT+0xce>
 8008058:	2300      	movs	r3, #0
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8086 	beq.w	800816c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2204      	movs	r2, #4
 8008064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2f      	ldr	r2, [pc, #188]	; (800812c <HAL_DMA_Abort_IT+0x1a0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d04a      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a2e      	ldr	r2, [pc, #184]	; (8008130 <HAL_DMA_Abort_IT+0x1a4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d045      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a2c      	ldr	r2, [pc, #176]	; (8008134 <HAL_DMA_Abort_IT+0x1a8>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d040      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a2b      	ldr	r2, [pc, #172]	; (8008138 <HAL_DMA_Abort_IT+0x1ac>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d03b      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a29      	ldr	r2, [pc, #164]	; (800813c <HAL_DMA_Abort_IT+0x1b0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d036      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a28      	ldr	r2, [pc, #160]	; (8008140 <HAL_DMA_Abort_IT+0x1b4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d031      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a26      	ldr	r2, [pc, #152]	; (8008144 <HAL_DMA_Abort_IT+0x1b8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d02c      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a25      	ldr	r2, [pc, #148]	; (8008148 <HAL_DMA_Abort_IT+0x1bc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d027      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a23      	ldr	r2, [pc, #140]	; (800814c <HAL_DMA_Abort_IT+0x1c0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_DMA_Abort_IT+0x1c4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d01d      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a20      	ldr	r2, [pc, #128]	; (8008154 <HAL_DMA_Abort_IT+0x1c8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1f      	ldr	r2, [pc, #124]	; (8008158 <HAL_DMA_Abort_IT+0x1cc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1d      	ldr	r2, [pc, #116]	; (800815c <HAL_DMA_Abort_IT+0x1d0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <HAL_DMA_Abort_IT+0x1d4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1a      	ldr	r2, [pc, #104]	; (8008164 <HAL_DMA_Abort_IT+0x1d8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_DMA_Abort_IT+0x17c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a19      	ldr	r2, [pc, #100]	; (8008168 <HAL_DMA_Abort_IT+0x1dc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d108      	bne.n	800811a <HAL_DMA_Abort_IT+0x18e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e178      	b.n	800840c <HAL_DMA_Abort_IT+0x480>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	e16f      	b.n	800840c <HAL_DMA_Abort_IT+0x480>
 800812c:	40020010 	.word	0x40020010
 8008130:	40020028 	.word	0x40020028
 8008134:	40020040 	.word	0x40020040
 8008138:	40020058 	.word	0x40020058
 800813c:	40020070 	.word	0x40020070
 8008140:	40020088 	.word	0x40020088
 8008144:	400200a0 	.word	0x400200a0
 8008148:	400200b8 	.word	0x400200b8
 800814c:	40020410 	.word	0x40020410
 8008150:	40020428 	.word	0x40020428
 8008154:	40020440 	.word	0x40020440
 8008158:	40020458 	.word	0x40020458
 800815c:	40020470 	.word	0x40020470
 8008160:	40020488 	.word	0x40020488
 8008164:	400204a0 	.word	0x400204a0
 8008168:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 020e 	bic.w	r2, r2, #14
 800817a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a6c      	ldr	r2, [pc, #432]	; (8008334 <HAL_DMA_Abort_IT+0x3a8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d04a      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a6b      	ldr	r2, [pc, #428]	; (8008338 <HAL_DMA_Abort_IT+0x3ac>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d045      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a69      	ldr	r2, [pc, #420]	; (800833c <HAL_DMA_Abort_IT+0x3b0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d040      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a68      	ldr	r2, [pc, #416]	; (8008340 <HAL_DMA_Abort_IT+0x3b4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d03b      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a66      	ldr	r2, [pc, #408]	; (8008344 <HAL_DMA_Abort_IT+0x3b8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d036      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a65      	ldr	r2, [pc, #404]	; (8008348 <HAL_DMA_Abort_IT+0x3bc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d031      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a63      	ldr	r2, [pc, #396]	; (800834c <HAL_DMA_Abort_IT+0x3c0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d02c      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a62      	ldr	r2, [pc, #392]	; (8008350 <HAL_DMA_Abort_IT+0x3c4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d027      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a60      	ldr	r2, [pc, #384]	; (8008354 <HAL_DMA_Abort_IT+0x3c8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d022      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a5f      	ldr	r2, [pc, #380]	; (8008358 <HAL_DMA_Abort_IT+0x3cc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01d      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a5d      	ldr	r2, [pc, #372]	; (800835c <HAL_DMA_Abort_IT+0x3d0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d018      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a5c      	ldr	r2, [pc, #368]	; (8008360 <HAL_DMA_Abort_IT+0x3d4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d013      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a5a      	ldr	r2, [pc, #360]	; (8008364 <HAL_DMA_Abort_IT+0x3d8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00e      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a59      	ldr	r2, [pc, #356]	; (8008368 <HAL_DMA_Abort_IT+0x3dc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d009      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a57      	ldr	r2, [pc, #348]	; (800836c <HAL_DMA_Abort_IT+0x3e0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_DMA_Abort_IT+0x290>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a56      	ldr	r2, [pc, #344]	; (8008370 <HAL_DMA_Abort_IT+0x3e4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d108      	bne.n	800822e <HAL_DMA_Abort_IT+0x2a2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e007      	b.n	800823e <HAL_DMA_Abort_IT+0x2b2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0201 	bic.w	r2, r2, #1
 800823c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a3c      	ldr	r2, [pc, #240]	; (8008334 <HAL_DMA_Abort_IT+0x3a8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d072      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a3a      	ldr	r2, [pc, #232]	; (8008338 <HAL_DMA_Abort_IT+0x3ac>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d06d      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a39      	ldr	r2, [pc, #228]	; (800833c <HAL_DMA_Abort_IT+0x3b0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d068      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a37      	ldr	r2, [pc, #220]	; (8008340 <HAL_DMA_Abort_IT+0x3b4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d063      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a36      	ldr	r2, [pc, #216]	; (8008344 <HAL_DMA_Abort_IT+0x3b8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d05e      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a34      	ldr	r2, [pc, #208]	; (8008348 <HAL_DMA_Abort_IT+0x3bc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d059      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a33      	ldr	r2, [pc, #204]	; (800834c <HAL_DMA_Abort_IT+0x3c0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d054      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a31      	ldr	r2, [pc, #196]	; (8008350 <HAL_DMA_Abort_IT+0x3c4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d04f      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a30      	ldr	r2, [pc, #192]	; (8008354 <HAL_DMA_Abort_IT+0x3c8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d04a      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2e      	ldr	r2, [pc, #184]	; (8008358 <HAL_DMA_Abort_IT+0x3cc>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d045      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2d      	ldr	r2, [pc, #180]	; (800835c <HAL_DMA_Abort_IT+0x3d0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d040      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2b      	ldr	r2, [pc, #172]	; (8008360 <HAL_DMA_Abort_IT+0x3d4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d03b      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <HAL_DMA_Abort_IT+0x3d8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d036      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a28      	ldr	r2, [pc, #160]	; (8008368 <HAL_DMA_Abort_IT+0x3dc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d031      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a27      	ldr	r2, [pc, #156]	; (800836c <HAL_DMA_Abort_IT+0x3e0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d02c      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a25      	ldr	r2, [pc, #148]	; (8008370 <HAL_DMA_Abort_IT+0x3e4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d027      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a24      	ldr	r2, [pc, #144]	; (8008374 <HAL_DMA_Abort_IT+0x3e8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d022      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a22      	ldr	r2, [pc, #136]	; (8008378 <HAL_DMA_Abort_IT+0x3ec>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d01d      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_DMA_Abort_IT+0x3f0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d018      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <HAL_DMA_Abort_IT+0x3f4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <HAL_DMA_Abort_IT+0x3f8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1c      	ldr	r2, [pc, #112]	; (8008388 <HAL_DMA_Abort_IT+0x3fc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_DMA_Abort_IT+0x400>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <HAL_DMA_Abort_IT+0x3a2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a19      	ldr	r2, [pc, #100]	; (8008390 <HAL_DMA_Abort_IT+0x404>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d132      	bne.n	8008394 <HAL_DMA_Abort_IT+0x408>
 800832e:	2301      	movs	r3, #1
 8008330:	e031      	b.n	8008396 <HAL_DMA_Abort_IT+0x40a>
 8008332:	bf00      	nop
 8008334:	40020010 	.word	0x40020010
 8008338:	40020028 	.word	0x40020028
 800833c:	40020040 	.word	0x40020040
 8008340:	40020058 	.word	0x40020058
 8008344:	40020070 	.word	0x40020070
 8008348:	40020088 	.word	0x40020088
 800834c:	400200a0 	.word	0x400200a0
 8008350:	400200b8 	.word	0x400200b8
 8008354:	40020410 	.word	0x40020410
 8008358:	40020428 	.word	0x40020428
 800835c:	40020440 	.word	0x40020440
 8008360:	40020458 	.word	0x40020458
 8008364:	40020470 	.word	0x40020470
 8008368:	40020488 	.word	0x40020488
 800836c:	400204a0 	.word	0x400204a0
 8008370:	400204b8 	.word	0x400204b8
 8008374:	58025408 	.word	0x58025408
 8008378:	5802541c 	.word	0x5802541c
 800837c:	58025430 	.word	0x58025430
 8008380:	58025444 	.word	0x58025444
 8008384:	58025458 	.word	0x58025458
 8008388:	5802546c 	.word	0x5802546c
 800838c:	58025480 	.word	0x58025480
 8008390:	58025494 	.word	0x58025494
 8008394:	2300      	movs	r3, #0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d028      	beq.n	80083ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	2201      	movs	r2, #1
 80083ba:	409a      	lsls	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80083c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80083ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop

08008418 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008424:	4b67      	ldr	r3, [pc, #412]	; (80085c4 <HAL_DMA_IRQHandler+0x1ac>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a67      	ldr	r2, [pc, #412]	; (80085c8 <HAL_DMA_IRQHandler+0x1b0>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	0a9b      	lsrs	r3, r3, #10
 8008430:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a5f      	ldr	r2, [pc, #380]	; (80085cc <HAL_DMA_IRQHandler+0x1b4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d04a      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5d      	ldr	r2, [pc, #372]	; (80085d0 <HAL_DMA_IRQHandler+0x1b8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d045      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a5c      	ldr	r2, [pc, #368]	; (80085d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d040      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a5a      	ldr	r2, [pc, #360]	; (80085d8 <HAL_DMA_IRQHandler+0x1c0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d03b      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a59      	ldr	r2, [pc, #356]	; (80085dc <HAL_DMA_IRQHandler+0x1c4>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d036      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a57      	ldr	r2, [pc, #348]	; (80085e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d031      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a56      	ldr	r2, [pc, #344]	; (80085e4 <HAL_DMA_IRQHandler+0x1cc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d02c      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a54      	ldr	r2, [pc, #336]	; (80085e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d027      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a53      	ldr	r2, [pc, #332]	; (80085ec <HAL_DMA_IRQHandler+0x1d4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d022      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a51      	ldr	r2, [pc, #324]	; (80085f0 <HAL_DMA_IRQHandler+0x1d8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a50      	ldr	r2, [pc, #320]	; (80085f4 <HAL_DMA_IRQHandler+0x1dc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d018      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a4e      	ldr	r2, [pc, #312]	; (80085f8 <HAL_DMA_IRQHandler+0x1e0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a4d      	ldr	r2, [pc, #308]	; (80085fc <HAL_DMA_IRQHandler+0x1e4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a4b      	ldr	r2, [pc, #300]	; (8008600 <HAL_DMA_IRQHandler+0x1e8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a4a      	ldr	r2, [pc, #296]	; (8008604 <HAL_DMA_IRQHandler+0x1ec>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a48      	ldr	r2, [pc, #288]	; (8008608 <HAL_DMA_IRQHandler+0x1f0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d101      	bne.n	80084ee <HAL_DMA_IRQHandler+0xd6>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <HAL_DMA_IRQHandler+0xd8>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 842b 	beq.w	8008d4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2208      	movs	r2, #8
 8008500:	409a      	lsls	r2, r3
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	4013      	ands	r3, r2
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80a2 	beq.w	8008650 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a2e      	ldr	r2, [pc, #184]	; (80085cc <HAL_DMA_IRQHandler+0x1b4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d04a      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2d      	ldr	r2, [pc, #180]	; (80085d0 <HAL_DMA_IRQHandler+0x1b8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d045      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2b      	ldr	r2, [pc, #172]	; (80085d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d040      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2a      	ldr	r2, [pc, #168]	; (80085d8 <HAL_DMA_IRQHandler+0x1c0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d03b      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a28      	ldr	r2, [pc, #160]	; (80085dc <HAL_DMA_IRQHandler+0x1c4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d036      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a27      	ldr	r2, [pc, #156]	; (80085e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d031      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a25      	ldr	r2, [pc, #148]	; (80085e4 <HAL_DMA_IRQHandler+0x1cc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d02c      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a24      	ldr	r2, [pc, #144]	; (80085e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d027      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a22      	ldr	r2, [pc, #136]	; (80085ec <HAL_DMA_IRQHandler+0x1d4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d022      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a21      	ldr	r2, [pc, #132]	; (80085f0 <HAL_DMA_IRQHandler+0x1d8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d01d      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <HAL_DMA_IRQHandler+0x1dc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <HAL_DMA_IRQHandler+0x1e0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1c      	ldr	r2, [pc, #112]	; (80085fc <HAL_DMA_IRQHandler+0x1e4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00e      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <HAL_DMA_IRQHandler+0x1e8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d009      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a19      	ldr	r2, [pc, #100]	; (8008604 <HAL_DMA_IRQHandler+0x1ec>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_DMA_IRQHandler+0x194>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a18      	ldr	r2, [pc, #96]	; (8008608 <HAL_DMA_IRQHandler+0x1f0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d12f      	bne.n	800860c <HAL_DMA_IRQHandler+0x1f4>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bf14      	ite	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	2300      	moveq	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	e02e      	b.n	8008620 <HAL_DMA_IRQHandler+0x208>
 80085c2:	bf00      	nop
 80085c4:	24000030 	.word	0x24000030
 80085c8:	1b4e81b5 	.word	0x1b4e81b5
 80085cc:	40020010 	.word	0x40020010
 80085d0:	40020028 	.word	0x40020028
 80085d4:	40020040 	.word	0x40020040
 80085d8:	40020058 	.word	0x40020058
 80085dc:	40020070 	.word	0x40020070
 80085e0:	40020088 	.word	0x40020088
 80085e4:	400200a0 	.word	0x400200a0
 80085e8:	400200b8 	.word	0x400200b8
 80085ec:	40020410 	.word	0x40020410
 80085f0:	40020428 	.word	0x40020428
 80085f4:	40020440 	.word	0x40020440
 80085f8:	40020458 	.word	0x40020458
 80085fc:	40020470 	.word	0x40020470
 8008600:	40020488 	.word	0x40020488
 8008604:	400204a0 	.word	0x400204a0
 8008608:	400204b8 	.word	0x400204b8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d015      	beq.n	8008650 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0204 	bic.w	r2, r2, #4
 8008632:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2208      	movs	r2, #8
 800863e:	409a      	lsls	r2, r3
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008648:	f043 0201 	orr.w	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d06e      	beq.n	8008744 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a69      	ldr	r2, [pc, #420]	; (8008810 <HAL_DMA_IRQHandler+0x3f8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d04a      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a67      	ldr	r2, [pc, #412]	; (8008814 <HAL_DMA_IRQHandler+0x3fc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d045      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a66      	ldr	r2, [pc, #408]	; (8008818 <HAL_DMA_IRQHandler+0x400>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d040      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a64      	ldr	r2, [pc, #400]	; (800881c <HAL_DMA_IRQHandler+0x404>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d03b      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a63      	ldr	r2, [pc, #396]	; (8008820 <HAL_DMA_IRQHandler+0x408>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d036      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a61      	ldr	r2, [pc, #388]	; (8008824 <HAL_DMA_IRQHandler+0x40c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d031      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a60      	ldr	r2, [pc, #384]	; (8008828 <HAL_DMA_IRQHandler+0x410>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d02c      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a5e      	ldr	r2, [pc, #376]	; (800882c <HAL_DMA_IRQHandler+0x414>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d027      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a5d      	ldr	r2, [pc, #372]	; (8008830 <HAL_DMA_IRQHandler+0x418>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d022      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a5b      	ldr	r2, [pc, #364]	; (8008834 <HAL_DMA_IRQHandler+0x41c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01d      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a5a      	ldr	r2, [pc, #360]	; (8008838 <HAL_DMA_IRQHandler+0x420>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d018      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a58      	ldr	r2, [pc, #352]	; (800883c <HAL_DMA_IRQHandler+0x424>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d013      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a57      	ldr	r2, [pc, #348]	; (8008840 <HAL_DMA_IRQHandler+0x428>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00e      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a55      	ldr	r2, [pc, #340]	; (8008844 <HAL_DMA_IRQHandler+0x42c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d009      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a54      	ldr	r2, [pc, #336]	; (8008848 <HAL_DMA_IRQHandler+0x430>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d004      	beq.n	8008706 <HAL_DMA_IRQHandler+0x2ee>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a52      	ldr	r2, [pc, #328]	; (800884c <HAL_DMA_IRQHandler+0x434>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d10a      	bne.n	800871c <HAL_DMA_IRQHandler+0x304>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf14      	ite	ne
 8008714:	2301      	movne	r3, #1
 8008716:	2300      	moveq	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	e003      	b.n	8008724 <HAL_DMA_IRQHandler+0x30c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872c:	f003 031f 	and.w	r3, r3, #31
 8008730:	2201      	movs	r2, #1
 8008732:	409a      	lsls	r2, r3
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873c:	f043 0202 	orr.w	r2, r3, #2
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2204      	movs	r2, #4
 800874e:	409a      	lsls	r2, r3
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 808f 	beq.w	8008878 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2c      	ldr	r2, [pc, #176]	; (8008810 <HAL_DMA_IRQHandler+0x3f8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d04a      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2a      	ldr	r2, [pc, #168]	; (8008814 <HAL_DMA_IRQHandler+0x3fc>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d045      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a29      	ldr	r2, [pc, #164]	; (8008818 <HAL_DMA_IRQHandler+0x400>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d040      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a27      	ldr	r2, [pc, #156]	; (800881c <HAL_DMA_IRQHandler+0x404>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d03b      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a26      	ldr	r2, [pc, #152]	; (8008820 <HAL_DMA_IRQHandler+0x408>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d036      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a24      	ldr	r2, [pc, #144]	; (8008824 <HAL_DMA_IRQHandler+0x40c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d031      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a23      	ldr	r2, [pc, #140]	; (8008828 <HAL_DMA_IRQHandler+0x410>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d02c      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a21      	ldr	r2, [pc, #132]	; (800882c <HAL_DMA_IRQHandler+0x414>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d027      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a20      	ldr	r2, [pc, #128]	; (8008830 <HAL_DMA_IRQHandler+0x418>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d022      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <HAL_DMA_IRQHandler+0x41c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01d      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1d      	ldr	r2, [pc, #116]	; (8008838 <HAL_DMA_IRQHandler+0x420>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d018      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1b      	ldr	r2, [pc, #108]	; (800883c <HAL_DMA_IRQHandler+0x424>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <HAL_DMA_IRQHandler+0x428>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a18      	ldr	r2, [pc, #96]	; (8008844 <HAL_DMA_IRQHandler+0x42c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a17      	ldr	r2, [pc, #92]	; (8008848 <HAL_DMA_IRQHandler+0x430>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_DMA_IRQHandler+0x3e2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <HAL_DMA_IRQHandler+0x434>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d12a      	bne.n	8008850 <HAL_DMA_IRQHandler+0x438>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	e023      	b.n	8008858 <HAL_DMA_IRQHandler+0x440>
 8008810:	40020010 	.word	0x40020010
 8008814:	40020028 	.word	0x40020028
 8008818:	40020040 	.word	0x40020040
 800881c:	40020058 	.word	0x40020058
 8008820:	40020070 	.word	0x40020070
 8008824:	40020088 	.word	0x40020088
 8008828:	400200a0 	.word	0x400200a0
 800882c:	400200b8 	.word	0x400200b8
 8008830:	40020410 	.word	0x40020410
 8008834:	40020428 	.word	0x40020428
 8008838:	40020440 	.word	0x40020440
 800883c:	40020458 	.word	0x40020458
 8008840:	40020470 	.word	0x40020470
 8008844:	40020488 	.word	0x40020488
 8008848:	400204a0 	.word	0x400204a0
 800884c:	400204b8 	.word	0x400204b8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00d      	beq.n	8008878 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	2204      	movs	r2, #4
 8008866:	409a      	lsls	r2, r3
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008870:	f043 0204 	orr.w	r2, r3, #4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	2210      	movs	r2, #16
 8008882:	409a      	lsls	r2, r3
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 80a6 	beq.w	80089da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a85      	ldr	r2, [pc, #532]	; (8008aa8 <HAL_DMA_IRQHandler+0x690>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d04a      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a83      	ldr	r2, [pc, #524]	; (8008aac <HAL_DMA_IRQHandler+0x694>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d045      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a82      	ldr	r2, [pc, #520]	; (8008ab0 <HAL_DMA_IRQHandler+0x698>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d040      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a80      	ldr	r2, [pc, #512]	; (8008ab4 <HAL_DMA_IRQHandler+0x69c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d03b      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a7f      	ldr	r2, [pc, #508]	; (8008ab8 <HAL_DMA_IRQHandler+0x6a0>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d036      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a7d      	ldr	r2, [pc, #500]	; (8008abc <HAL_DMA_IRQHandler+0x6a4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d031      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a7c      	ldr	r2, [pc, #496]	; (8008ac0 <HAL_DMA_IRQHandler+0x6a8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d02c      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a7a      	ldr	r2, [pc, #488]	; (8008ac4 <HAL_DMA_IRQHandler+0x6ac>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d027      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a79      	ldr	r2, [pc, #484]	; (8008ac8 <HAL_DMA_IRQHandler+0x6b0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a77      	ldr	r2, [pc, #476]	; (8008acc <HAL_DMA_IRQHandler+0x6b4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01d      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a76      	ldr	r2, [pc, #472]	; (8008ad0 <HAL_DMA_IRQHandler+0x6b8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a74      	ldr	r2, [pc, #464]	; (8008ad4 <HAL_DMA_IRQHandler+0x6bc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a73      	ldr	r2, [pc, #460]	; (8008ad8 <HAL_DMA_IRQHandler+0x6c0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a71      	ldr	r2, [pc, #452]	; (8008adc <HAL_DMA_IRQHandler+0x6c4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a70      	ldr	r2, [pc, #448]	; (8008ae0 <HAL_DMA_IRQHandler+0x6c8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_DMA_IRQHandler+0x516>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a6e      	ldr	r2, [pc, #440]	; (8008ae4 <HAL_DMA_IRQHandler+0x6cc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10a      	bne.n	8008944 <HAL_DMA_IRQHandler+0x52c>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e009      	b.n	8008958 <HAL_DMA_IRQHandler+0x540>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2301      	movne	r3, #1
 8008954:	2300      	moveq	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d03e      	beq.n	80089da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2210      	movs	r2, #16
 8008966:	409a      	lsls	r2, r3
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d108      	bne.n	800899a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d024      	beq.n	80089da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
 8008998:	e01f      	b.n	80089da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01b      	beq.n	80089da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
 80089aa:	e016      	b.n	80089da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d107      	bne.n	80089ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0208 	bic.w	r2, r2, #8
 80089c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2220      	movs	r2, #32
 80089e4:	409a      	lsls	r2, r3
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4013      	ands	r3, r2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 8110 	beq.w	8008c10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2c      	ldr	r2, [pc, #176]	; (8008aa8 <HAL_DMA_IRQHandler+0x690>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d04a      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2b      	ldr	r2, [pc, #172]	; (8008aac <HAL_DMA_IRQHandler+0x694>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d045      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a29      	ldr	r2, [pc, #164]	; (8008ab0 <HAL_DMA_IRQHandler+0x698>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d040      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a28      	ldr	r2, [pc, #160]	; (8008ab4 <HAL_DMA_IRQHandler+0x69c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d03b      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a26      	ldr	r2, [pc, #152]	; (8008ab8 <HAL_DMA_IRQHandler+0x6a0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d036      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a25      	ldr	r2, [pc, #148]	; (8008abc <HAL_DMA_IRQHandler+0x6a4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d031      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a23      	ldr	r2, [pc, #140]	; (8008ac0 <HAL_DMA_IRQHandler+0x6a8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d02c      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a22      	ldr	r2, [pc, #136]	; (8008ac4 <HAL_DMA_IRQHandler+0x6ac>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d027      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <HAL_DMA_IRQHandler+0x6b0>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d022      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	; (8008acc <HAL_DMA_IRQHandler+0x6b4>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d01d      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <HAL_DMA_IRQHandler+0x6b8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d018      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <HAL_DMA_IRQHandler+0x6bc>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1a      	ldr	r2, [pc, #104]	; (8008ad8 <HAL_DMA_IRQHandler+0x6c0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00e      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a19      	ldr	r2, [pc, #100]	; (8008adc <HAL_DMA_IRQHandler+0x6c4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d009      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <HAL_DMA_IRQHandler+0x6c8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d004      	beq.n	8008a90 <HAL_DMA_IRQHandler+0x678>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <HAL_DMA_IRQHandler+0x6cc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d12b      	bne.n	8008ae8 <HAL_DMA_IRQHandler+0x6d0>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf14      	ite	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	2300      	moveq	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	e02a      	b.n	8008afc <HAL_DMA_IRQHandler+0x6e4>
 8008aa6:	bf00      	nop
 8008aa8:	40020010 	.word	0x40020010
 8008aac:	40020028 	.word	0x40020028
 8008ab0:	40020040 	.word	0x40020040
 8008ab4:	40020058 	.word	0x40020058
 8008ab8:	40020070 	.word	0x40020070
 8008abc:	40020088 	.word	0x40020088
 8008ac0:	400200a0 	.word	0x400200a0
 8008ac4:	400200b8 	.word	0x400200b8
 8008ac8:	40020410 	.word	0x40020410
 8008acc:	40020428 	.word	0x40020428
 8008ad0:	40020440 	.word	0x40020440
 8008ad4:	40020458 	.word	0x40020458
 8008ad8:	40020470 	.word	0x40020470
 8008adc:	40020488 	.word	0x40020488
 8008ae0:	400204a0 	.word	0x400204a0
 8008ae4:	400204b8 	.word	0x400204b8
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bf14      	ite	ne
 8008af6:	2301      	movne	r3, #1
 8008af8:	2300      	moveq	r3, #0
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8087 	beq.w	8008c10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	409a      	lsls	r2, r3
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d139      	bne.n	8008b92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0216 	bic.w	r2, r2, #22
 8008b2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695a      	ldr	r2, [r3, #20]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d103      	bne.n	8008b4e <HAL_DMA_IRQHandler+0x736>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0208 	bic.w	r2, r2, #8
 8008b5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	223f      	movs	r2, #63	; 0x3f
 8008b68:	409a      	lsls	r2, r3
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 834a 	beq.w	800921c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
          }
          return;
 8008b90:	e344      	b.n	800921c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d018      	beq.n	8008bd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02c      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
 8008bbe:	e027      	b.n	8008c10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d023      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
 8008bd0:	e01e      	b.n	8008c10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10f      	bne.n	8008c00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0210 	bic.w	r2, r2, #16
 8008bee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8306 	beq.w	8009226 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8088 	beq.w	8008d38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a7a      	ldr	r2, [pc, #488]	; (8008e20 <HAL_DMA_IRQHandler+0xa08>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d04a      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a79      	ldr	r2, [pc, #484]	; (8008e24 <HAL_DMA_IRQHandler+0xa0c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d045      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a77      	ldr	r2, [pc, #476]	; (8008e28 <HAL_DMA_IRQHandler+0xa10>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d040      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a76      	ldr	r2, [pc, #472]	; (8008e2c <HAL_DMA_IRQHandler+0xa14>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d03b      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a74      	ldr	r2, [pc, #464]	; (8008e30 <HAL_DMA_IRQHandler+0xa18>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d036      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a73      	ldr	r2, [pc, #460]	; (8008e34 <HAL_DMA_IRQHandler+0xa1c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d031      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a71      	ldr	r2, [pc, #452]	; (8008e38 <HAL_DMA_IRQHandler+0xa20>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d02c      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a70      	ldr	r2, [pc, #448]	; (8008e3c <HAL_DMA_IRQHandler+0xa24>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d027      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a6e      	ldr	r2, [pc, #440]	; (8008e40 <HAL_DMA_IRQHandler+0xa28>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d022      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a6d      	ldr	r2, [pc, #436]	; (8008e44 <HAL_DMA_IRQHandler+0xa2c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d01d      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a6b      	ldr	r2, [pc, #428]	; (8008e48 <HAL_DMA_IRQHandler+0xa30>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d018      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a6a      	ldr	r2, [pc, #424]	; (8008e4c <HAL_DMA_IRQHandler+0xa34>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a68      	ldr	r2, [pc, #416]	; (8008e50 <HAL_DMA_IRQHandler+0xa38>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00e      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a67      	ldr	r2, [pc, #412]	; (8008e54 <HAL_DMA_IRQHandler+0xa3c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d009      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a65      	ldr	r2, [pc, #404]	; (8008e58 <HAL_DMA_IRQHandler+0xa40>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <HAL_DMA_IRQHandler+0x8b8>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a64      	ldr	r2, [pc, #400]	; (8008e5c <HAL_DMA_IRQHandler+0xa44>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d108      	bne.n	8008ce2 <HAL_DMA_IRQHandler+0x8ca>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e007      	b.n	8008cf2 <HAL_DMA_IRQHandler+0x8da>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d307      	bcc.n	8008d0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f2      	bne.n	8008cf2 <HAL_DMA_IRQHandler+0x8da>
 8008d0c:	e000      	b.n	8008d10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008d0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2203      	movs	r2, #3
 8008d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008d26:	e003      	b.n	8008d30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8272 	beq.w	8009226 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
 8008d4a:	e26c      	b.n	8009226 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a43      	ldr	r2, [pc, #268]	; (8008e60 <HAL_DMA_IRQHandler+0xa48>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d022      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a42      	ldr	r2, [pc, #264]	; (8008e64 <HAL_DMA_IRQHandler+0xa4c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d01d      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a40      	ldr	r2, [pc, #256]	; (8008e68 <HAL_DMA_IRQHandler+0xa50>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d018      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a3f      	ldr	r2, [pc, #252]	; (8008e6c <HAL_DMA_IRQHandler+0xa54>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d013      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a3d      	ldr	r2, [pc, #244]	; (8008e70 <HAL_DMA_IRQHandler+0xa58>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00e      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a3c      	ldr	r2, [pc, #240]	; (8008e74 <HAL_DMA_IRQHandler+0xa5c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d009      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a3a      	ldr	r2, [pc, #232]	; (8008e78 <HAL_DMA_IRQHandler+0xa60>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x984>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a39      	ldr	r2, [pc, #228]	; (8008e7c <HAL_DMA_IRQHandler+0xa64>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d101      	bne.n	8008da0 <HAL_DMA_IRQHandler+0x988>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <HAL_DMA_IRQHandler+0x98a>
 8008da0:	2300      	movs	r3, #0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 823f 	beq.w	8009226 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	2204      	movs	r2, #4
 8008dba:	409a      	lsls	r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80cd 	beq.w	8008f60 <HAL_DMA_IRQHandler+0xb48>
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80c7 	beq.w	8008f60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2204      	movs	r2, #4
 8008ddc:	409a      	lsls	r2, r3
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d049      	beq.n	8008e80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 8210 	beq.w	8009220 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e08:	e20a      	b.n	8009220 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 8206 	beq.w	8009220 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e1c:	e200      	b.n	8009220 <HAL_DMA_IRQHandler+0xe08>
 8008e1e:	bf00      	nop
 8008e20:	40020010 	.word	0x40020010
 8008e24:	40020028 	.word	0x40020028
 8008e28:	40020040 	.word	0x40020040
 8008e2c:	40020058 	.word	0x40020058
 8008e30:	40020070 	.word	0x40020070
 8008e34:	40020088 	.word	0x40020088
 8008e38:	400200a0 	.word	0x400200a0
 8008e3c:	400200b8 	.word	0x400200b8
 8008e40:	40020410 	.word	0x40020410
 8008e44:	40020428 	.word	0x40020428
 8008e48:	40020440 	.word	0x40020440
 8008e4c:	40020458 	.word	0x40020458
 8008e50:	40020470 	.word	0x40020470
 8008e54:	40020488 	.word	0x40020488
 8008e58:	400204a0 	.word	0x400204a0
 8008e5c:	400204b8 	.word	0x400204b8
 8008e60:	58025408 	.word	0x58025408
 8008e64:	5802541c 	.word	0x5802541c
 8008e68:	58025430 	.word	0x58025430
 8008e6c:	58025444 	.word	0x58025444
 8008e70:	58025458 	.word	0x58025458
 8008e74:	5802546c 	.word	0x5802546c
 8008e78:	58025480 	.word	0x58025480
 8008e7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d160      	bne.n	8008f4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a7f      	ldr	r2, [pc, #508]	; (800908c <HAL_DMA_IRQHandler+0xc74>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d04a      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a7d      	ldr	r2, [pc, #500]	; (8009090 <HAL_DMA_IRQHandler+0xc78>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d045      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a7c      	ldr	r2, [pc, #496]	; (8009094 <HAL_DMA_IRQHandler+0xc7c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d040      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a7a      	ldr	r2, [pc, #488]	; (8009098 <HAL_DMA_IRQHandler+0xc80>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d03b      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a79      	ldr	r2, [pc, #484]	; (800909c <HAL_DMA_IRQHandler+0xc84>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d036      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a77      	ldr	r2, [pc, #476]	; (80090a0 <HAL_DMA_IRQHandler+0xc88>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d031      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <HAL_DMA_IRQHandler+0xc8c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d02c      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a74      	ldr	r2, [pc, #464]	; (80090a8 <HAL_DMA_IRQHandler+0xc90>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d027      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a73      	ldr	r2, [pc, #460]	; (80090ac <HAL_DMA_IRQHandler+0xc94>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d022      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a71      	ldr	r2, [pc, #452]	; (80090b0 <HAL_DMA_IRQHandler+0xc98>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d01d      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a70      	ldr	r2, [pc, #448]	; (80090b4 <HAL_DMA_IRQHandler+0xc9c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d018      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a6e      	ldr	r2, [pc, #440]	; (80090b8 <HAL_DMA_IRQHandler+0xca0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d013      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a6d      	ldr	r2, [pc, #436]	; (80090bc <HAL_DMA_IRQHandler+0xca4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00e      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a6b      	ldr	r2, [pc, #428]	; (80090c0 <HAL_DMA_IRQHandler+0xca8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d009      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a6a      	ldr	r2, [pc, #424]	; (80090c4 <HAL_DMA_IRQHandler+0xcac>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d004      	beq.n	8008f2a <HAL_DMA_IRQHandler+0xb12>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a68      	ldr	r2, [pc, #416]	; (80090c8 <HAL_DMA_IRQHandler+0xcb0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d108      	bne.n	8008f3c <HAL_DMA_IRQHandler+0xb24>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0208 	bic.w	r2, r2, #8
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e007      	b.n	8008f4c <HAL_DMA_IRQHandler+0xb34>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0204 	bic.w	r2, r2, #4
 8008f4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 8165 	beq.w	8009220 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f5e:	e15f      	b.n	8009220 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	2202      	movs	r2, #2
 8008f6a:	409a      	lsls	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80c5 	beq.w	8009100 <HAL_DMA_IRQHandler+0xce8>
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80bf 	beq.w	8009100 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	409a      	lsls	r2, r3
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d018      	beq.n	8008fce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 813a 	beq.w	8009224 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fb8:	e134      	b.n	8009224 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8130 	beq.w	8009224 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fcc:	e12a      	b.n	8009224 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8089 	bne.w	80090ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a2b      	ldr	r2, [pc, #172]	; (800908c <HAL_DMA_IRQHandler+0xc74>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d04a      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a29      	ldr	r2, [pc, #164]	; (8009090 <HAL_DMA_IRQHandler+0xc78>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d045      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a28      	ldr	r2, [pc, #160]	; (8009094 <HAL_DMA_IRQHandler+0xc7c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d040      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a26      	ldr	r2, [pc, #152]	; (8009098 <HAL_DMA_IRQHandler+0xc80>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d03b      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a25      	ldr	r2, [pc, #148]	; (800909c <HAL_DMA_IRQHandler+0xc84>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d036      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a23      	ldr	r2, [pc, #140]	; (80090a0 <HAL_DMA_IRQHandler+0xc88>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d031      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <HAL_DMA_IRQHandler+0xc8c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d02c      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <HAL_DMA_IRQHandler+0xc90>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d027      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <HAL_DMA_IRQHandler+0xc94>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d022      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <HAL_DMA_IRQHandler+0xc98>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d01d      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <HAL_DMA_IRQHandler+0xc9c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d018      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <HAL_DMA_IRQHandler+0xca0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d013      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a19      	ldr	r2, [pc, #100]	; (80090bc <HAL_DMA_IRQHandler+0xca4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00e      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <HAL_DMA_IRQHandler+0xca8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d009      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <HAL_DMA_IRQHandler+0xcac>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <HAL_DMA_IRQHandler+0xc62>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a14      	ldr	r2, [pc, #80]	; (80090c8 <HAL_DMA_IRQHandler+0xcb0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d128      	bne.n	80090cc <HAL_DMA_IRQHandler+0xcb4>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0214 	bic.w	r2, r2, #20
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e027      	b.n	80090dc <HAL_DMA_IRQHandler+0xcc4>
 800908c:	40020010 	.word	0x40020010
 8009090:	40020028 	.word	0x40020028
 8009094:	40020040 	.word	0x40020040
 8009098:	40020058 	.word	0x40020058
 800909c:	40020070 	.word	0x40020070
 80090a0:	40020088 	.word	0x40020088
 80090a4:	400200a0 	.word	0x400200a0
 80090a8:	400200b8 	.word	0x400200b8
 80090ac:	40020410 	.word	0x40020410
 80090b0:	40020428 	.word	0x40020428
 80090b4:	40020440 	.word	0x40020440
 80090b8:	40020458 	.word	0x40020458
 80090bc:	40020470 	.word	0x40020470
 80090c0:	40020488 	.word	0x40020488
 80090c4:	400204a0 	.word	0x400204a0
 80090c8:	400204b8 	.word	0x400204b8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 020a 	bic.w	r2, r2, #10
 80090da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8097 	beq.w	8009224 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090fe:	e091      	b.n	8009224 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2208      	movs	r2, #8
 800910a:	409a      	lsls	r2, r3
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	4013      	ands	r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 8088 	beq.w	8009226 <HAL_DMA_IRQHandler+0xe0e>
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 8082 	beq.w	8009226 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a41      	ldr	r2, [pc, #260]	; (800922c <HAL_DMA_IRQHandler+0xe14>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d04a      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a3f      	ldr	r2, [pc, #252]	; (8009230 <HAL_DMA_IRQHandler+0xe18>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d045      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a3e      	ldr	r2, [pc, #248]	; (8009234 <HAL_DMA_IRQHandler+0xe1c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d040      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a3c      	ldr	r2, [pc, #240]	; (8009238 <HAL_DMA_IRQHandler+0xe20>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d03b      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a3b      	ldr	r2, [pc, #236]	; (800923c <HAL_DMA_IRQHandler+0xe24>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d036      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a39      	ldr	r2, [pc, #228]	; (8009240 <HAL_DMA_IRQHandler+0xe28>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d031      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a38      	ldr	r2, [pc, #224]	; (8009244 <HAL_DMA_IRQHandler+0xe2c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d02c      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a36      	ldr	r2, [pc, #216]	; (8009248 <HAL_DMA_IRQHandler+0xe30>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d027      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a35      	ldr	r2, [pc, #212]	; (800924c <HAL_DMA_IRQHandler+0xe34>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d022      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a33      	ldr	r2, [pc, #204]	; (8009250 <HAL_DMA_IRQHandler+0xe38>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01d      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a32      	ldr	r2, [pc, #200]	; (8009254 <HAL_DMA_IRQHandler+0xe3c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d018      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a30      	ldr	r2, [pc, #192]	; (8009258 <HAL_DMA_IRQHandler+0xe40>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d013      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a2f      	ldr	r2, [pc, #188]	; (800925c <HAL_DMA_IRQHandler+0xe44>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00e      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a2d      	ldr	r2, [pc, #180]	; (8009260 <HAL_DMA_IRQHandler+0xe48>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d009      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a2c      	ldr	r2, [pc, #176]	; (8009264 <HAL_DMA_IRQHandler+0xe4c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d004      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xdaa>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a2a      	ldr	r2, [pc, #168]	; (8009268 <HAL_DMA_IRQHandler+0xe50>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d108      	bne.n	80091d4 <HAL_DMA_IRQHandler+0xdbc>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 021c 	bic.w	r2, r2, #28
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e007      	b.n	80091e4 <HAL_DMA_IRQHandler+0xdcc>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 020e 	bic.w	r2, r2, #14
 80091e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e8:	f003 031f 	and.w	r3, r3, #31
 80091ec:	2201      	movs	r2, #1
 80091ee:	409a      	lsls	r2, r3
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
 800921a:	e004      	b.n	8009226 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800921c:	bf00      	nop
 800921e:	e002      	b.n	8009226 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009220:	bf00      	nop
 8009222:	e000      	b.n	8009226 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009224:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009226:	3728      	adds	r7, #40	; 0x28
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	40020010 	.word	0x40020010
 8009230:	40020028 	.word	0x40020028
 8009234:	40020040 	.word	0x40020040
 8009238:	40020058 	.word	0x40020058
 800923c:	40020070 	.word	0x40020070
 8009240:	40020088 	.word	0x40020088
 8009244:	400200a0 	.word	0x400200a0
 8009248:	400200b8 	.word	0x400200b8
 800924c:	40020410 	.word	0x40020410
 8009250:	40020428 	.word	0x40020428
 8009254:	40020440 	.word	0x40020440
 8009258:	40020458 	.word	0x40020458
 800925c:	40020470 	.word	0x40020470
 8009260:	40020488 	.word	0x40020488
 8009264:	400204a0 	.word	0x400204a0
 8009268:	400204b8 	.word	0x400204b8

0800926c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a7f      	ldr	r2, [pc, #508]	; (8009488 <DMA_SetConfig+0x21c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d072      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a7d      	ldr	r2, [pc, #500]	; (800948c <DMA_SetConfig+0x220>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d06d      	beq.n	8009376 <DMA_SetConfig+0x10a>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a7c      	ldr	r2, [pc, #496]	; (8009490 <DMA_SetConfig+0x224>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d068      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a7a      	ldr	r2, [pc, #488]	; (8009494 <DMA_SetConfig+0x228>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d063      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a79      	ldr	r2, [pc, #484]	; (8009498 <DMA_SetConfig+0x22c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d05e      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a77      	ldr	r2, [pc, #476]	; (800949c <DMA_SetConfig+0x230>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d059      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a76      	ldr	r2, [pc, #472]	; (80094a0 <DMA_SetConfig+0x234>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d054      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a74      	ldr	r2, [pc, #464]	; (80094a4 <DMA_SetConfig+0x238>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d04f      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a73      	ldr	r2, [pc, #460]	; (80094a8 <DMA_SetConfig+0x23c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d04a      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a71      	ldr	r2, [pc, #452]	; (80094ac <DMA_SetConfig+0x240>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d045      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a70      	ldr	r2, [pc, #448]	; (80094b0 <DMA_SetConfig+0x244>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d040      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a6e      	ldr	r2, [pc, #440]	; (80094b4 <DMA_SetConfig+0x248>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d03b      	beq.n	8009376 <DMA_SetConfig+0x10a>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a6d      	ldr	r2, [pc, #436]	; (80094b8 <DMA_SetConfig+0x24c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d036      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a6b      	ldr	r2, [pc, #428]	; (80094bc <DMA_SetConfig+0x250>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d031      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a6a      	ldr	r2, [pc, #424]	; (80094c0 <DMA_SetConfig+0x254>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d02c      	beq.n	8009376 <DMA_SetConfig+0x10a>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a68      	ldr	r2, [pc, #416]	; (80094c4 <DMA_SetConfig+0x258>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d027      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a67      	ldr	r2, [pc, #412]	; (80094c8 <DMA_SetConfig+0x25c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d022      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a65      	ldr	r2, [pc, #404]	; (80094cc <DMA_SetConfig+0x260>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d01d      	beq.n	8009376 <DMA_SetConfig+0x10a>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a64      	ldr	r2, [pc, #400]	; (80094d0 <DMA_SetConfig+0x264>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d018      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a62      	ldr	r2, [pc, #392]	; (80094d4 <DMA_SetConfig+0x268>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d013      	beq.n	8009376 <DMA_SetConfig+0x10a>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a61      	ldr	r2, [pc, #388]	; (80094d8 <DMA_SetConfig+0x26c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00e      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a5f      	ldr	r2, [pc, #380]	; (80094dc <DMA_SetConfig+0x270>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d009      	beq.n	8009376 <DMA_SetConfig+0x10a>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a5e      	ldr	r2, [pc, #376]	; (80094e0 <DMA_SetConfig+0x274>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d004      	beq.n	8009376 <DMA_SetConfig+0x10a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a5c      	ldr	r2, [pc, #368]	; (80094e4 <DMA_SetConfig+0x278>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d101      	bne.n	800937a <DMA_SetConfig+0x10e>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <DMA_SetConfig+0x110>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00d      	beq.n	800939c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009388:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800939a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a39      	ldr	r2, [pc, #228]	; (8009488 <DMA_SetConfig+0x21c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d04a      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a38      	ldr	r2, [pc, #224]	; (800948c <DMA_SetConfig+0x220>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d045      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a36      	ldr	r2, [pc, #216]	; (8009490 <DMA_SetConfig+0x224>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d040      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a35      	ldr	r2, [pc, #212]	; (8009494 <DMA_SetConfig+0x228>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d03b      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a33      	ldr	r2, [pc, #204]	; (8009498 <DMA_SetConfig+0x22c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d036      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a32      	ldr	r2, [pc, #200]	; (800949c <DMA_SetConfig+0x230>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d031      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a30      	ldr	r2, [pc, #192]	; (80094a0 <DMA_SetConfig+0x234>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d02c      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a2f      	ldr	r2, [pc, #188]	; (80094a4 <DMA_SetConfig+0x238>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d027      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a2d      	ldr	r2, [pc, #180]	; (80094a8 <DMA_SetConfig+0x23c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d022      	beq.n	800943c <DMA_SetConfig+0x1d0>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <DMA_SetConfig+0x240>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d01d      	beq.n	800943c <DMA_SetConfig+0x1d0>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a2a      	ldr	r2, [pc, #168]	; (80094b0 <DMA_SetConfig+0x244>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d018      	beq.n	800943c <DMA_SetConfig+0x1d0>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a29      	ldr	r2, [pc, #164]	; (80094b4 <DMA_SetConfig+0x248>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <DMA_SetConfig+0x1d0>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a27      	ldr	r2, [pc, #156]	; (80094b8 <DMA_SetConfig+0x24c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00e      	beq.n	800943c <DMA_SetConfig+0x1d0>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a26      	ldr	r2, [pc, #152]	; (80094bc <DMA_SetConfig+0x250>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d009      	beq.n	800943c <DMA_SetConfig+0x1d0>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a24      	ldr	r2, [pc, #144]	; (80094c0 <DMA_SetConfig+0x254>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <DMA_SetConfig+0x1d0>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a23      	ldr	r2, [pc, #140]	; (80094c4 <DMA_SetConfig+0x258>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d101      	bne.n	8009440 <DMA_SetConfig+0x1d4>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <DMA_SetConfig+0x1d6>
 8009440:	2300      	movs	r3, #0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d059      	beq.n	80094fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	223f      	movs	r2, #63	; 0x3f
 8009450:	409a      	lsls	r2, r3
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009464:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d138      	bne.n	80094e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009486:	e086      	b.n	8009596 <DMA_SetConfig+0x32a>
 8009488:	40020010 	.word	0x40020010
 800948c:	40020028 	.word	0x40020028
 8009490:	40020040 	.word	0x40020040
 8009494:	40020058 	.word	0x40020058
 8009498:	40020070 	.word	0x40020070
 800949c:	40020088 	.word	0x40020088
 80094a0:	400200a0 	.word	0x400200a0
 80094a4:	400200b8 	.word	0x400200b8
 80094a8:	40020410 	.word	0x40020410
 80094ac:	40020428 	.word	0x40020428
 80094b0:	40020440 	.word	0x40020440
 80094b4:	40020458 	.word	0x40020458
 80094b8:	40020470 	.word	0x40020470
 80094bc:	40020488 	.word	0x40020488
 80094c0:	400204a0 	.word	0x400204a0
 80094c4:	400204b8 	.word	0x400204b8
 80094c8:	58025408 	.word	0x58025408
 80094cc:	5802541c 	.word	0x5802541c
 80094d0:	58025430 	.word	0x58025430
 80094d4:	58025444 	.word	0x58025444
 80094d8:	58025458 	.word	0x58025458
 80094dc:	5802546c 	.word	0x5802546c
 80094e0:	58025480 	.word	0x58025480
 80094e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	60da      	str	r2, [r3, #12]
}
 80094f8:	e04d      	b.n	8009596 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a29      	ldr	r2, [pc, #164]	; (80095a4 <DMA_SetConfig+0x338>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d022      	beq.n	800954a <DMA_SetConfig+0x2de>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a27      	ldr	r2, [pc, #156]	; (80095a8 <DMA_SetConfig+0x33c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01d      	beq.n	800954a <DMA_SetConfig+0x2de>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a26      	ldr	r2, [pc, #152]	; (80095ac <DMA_SetConfig+0x340>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d018      	beq.n	800954a <DMA_SetConfig+0x2de>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a24      	ldr	r2, [pc, #144]	; (80095b0 <DMA_SetConfig+0x344>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d013      	beq.n	800954a <DMA_SetConfig+0x2de>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a23      	ldr	r2, [pc, #140]	; (80095b4 <DMA_SetConfig+0x348>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d00e      	beq.n	800954a <DMA_SetConfig+0x2de>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a21      	ldr	r2, [pc, #132]	; (80095b8 <DMA_SetConfig+0x34c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d009      	beq.n	800954a <DMA_SetConfig+0x2de>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a20      	ldr	r2, [pc, #128]	; (80095bc <DMA_SetConfig+0x350>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d004      	beq.n	800954a <DMA_SetConfig+0x2de>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <DMA_SetConfig+0x354>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d101      	bne.n	800954e <DMA_SetConfig+0x2e2>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <DMA_SetConfig+0x2e4>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d020      	beq.n	8009596 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2201      	movs	r2, #1
 800955e:	409a      	lsls	r2, r3
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d108      	bne.n	8009586 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	60da      	str	r2, [r3, #12]
}
 8009584:	e007      	b.n	8009596 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
}
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	58025408 	.word	0x58025408
 80095a8:	5802541c 	.word	0x5802541c
 80095ac:	58025430 	.word	0x58025430
 80095b0:	58025444 	.word	0x58025444
 80095b4:	58025458 	.word	0x58025458
 80095b8:	5802546c 	.word	0x5802546c
 80095bc:	58025480 	.word	0x58025480
 80095c0:	58025494 	.word	0x58025494

080095c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a42      	ldr	r2, [pc, #264]	; (80096dc <DMA_CalcBaseAndBitshift+0x118>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d04a      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a41      	ldr	r2, [pc, #260]	; (80096e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d045      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a3f      	ldr	r2, [pc, #252]	; (80096e4 <DMA_CalcBaseAndBitshift+0x120>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d040      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a3e      	ldr	r2, [pc, #248]	; (80096e8 <DMA_CalcBaseAndBitshift+0x124>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d03b      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a3c      	ldr	r2, [pc, #240]	; (80096ec <DMA_CalcBaseAndBitshift+0x128>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d036      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a3b      	ldr	r2, [pc, #236]	; (80096f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d031      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a39      	ldr	r2, [pc, #228]	; (80096f4 <DMA_CalcBaseAndBitshift+0x130>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d02c      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a38      	ldr	r2, [pc, #224]	; (80096f8 <DMA_CalcBaseAndBitshift+0x134>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d027      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a36      	ldr	r2, [pc, #216]	; (80096fc <DMA_CalcBaseAndBitshift+0x138>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d022      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a35      	ldr	r2, [pc, #212]	; (8009700 <DMA_CalcBaseAndBitshift+0x13c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d01d      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a33      	ldr	r2, [pc, #204]	; (8009704 <DMA_CalcBaseAndBitshift+0x140>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d018      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a32      	ldr	r2, [pc, #200]	; (8009708 <DMA_CalcBaseAndBitshift+0x144>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a30      	ldr	r2, [pc, #192]	; (800970c <DMA_CalcBaseAndBitshift+0x148>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00e      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <DMA_CalcBaseAndBitshift+0x14c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d009      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a2d      	ldr	r2, [pc, #180]	; (8009714 <DMA_CalcBaseAndBitshift+0x150>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d004      	beq.n	800966c <DMA_CalcBaseAndBitshift+0xa8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a2c      	ldr	r2, [pc, #176]	; (8009718 <DMA_CalcBaseAndBitshift+0x154>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d101      	bne.n	8009670 <DMA_CalcBaseAndBitshift+0xac>
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <DMA_CalcBaseAndBitshift+0xae>
 8009670:	2300      	movs	r3, #0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d024      	beq.n	80096c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	3b10      	subs	r3, #16
 800967e:	4a27      	ldr	r2, [pc, #156]	; (800971c <DMA_CalcBaseAndBitshift+0x158>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	091b      	lsrs	r3, r3, #4
 8009686:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	4a24      	ldr	r2, [pc, #144]	; (8009720 <DMA_CalcBaseAndBitshift+0x15c>)
 8009690:	5cd3      	ldrb	r3, [r2, r3]
 8009692:	461a      	mov	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b03      	cmp	r3, #3
 800969c:	d908      	bls.n	80096b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	4b1f      	ldr	r3, [pc, #124]	; (8009724 <DMA_CalcBaseAndBitshift+0x160>)
 80096a6:	4013      	ands	r3, r2
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	659a      	str	r2, [r3, #88]	; 0x58
 80096ae:	e00d      	b.n	80096cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <DMA_CalcBaseAndBitshift+0x160>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6593      	str	r3, [r2, #88]	; 0x58
 80096be:	e005      	b.n	80096cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	40020010 	.word	0x40020010
 80096e0:	40020028 	.word	0x40020028
 80096e4:	40020040 	.word	0x40020040
 80096e8:	40020058 	.word	0x40020058
 80096ec:	40020070 	.word	0x40020070
 80096f0:	40020088 	.word	0x40020088
 80096f4:	400200a0 	.word	0x400200a0
 80096f8:	400200b8 	.word	0x400200b8
 80096fc:	40020410 	.word	0x40020410
 8009700:	40020428 	.word	0x40020428
 8009704:	40020440 	.word	0x40020440
 8009708:	40020458 	.word	0x40020458
 800970c:	40020470 	.word	0x40020470
 8009710:	40020488 	.word	0x40020488
 8009714:	400204a0 	.word	0x400204a0
 8009718:	400204b8 	.word	0x400204b8
 800971c:	aaaaaaab 	.word	0xaaaaaaab
 8009720:	08014080 	.word	0x08014080
 8009724:	fffffc00 	.word	0xfffffc00

08009728 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d120      	bne.n	800977e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	2b03      	cmp	r3, #3
 8009742:	d858      	bhi.n	80097f6 <DMA_CheckFifoParam+0xce>
 8009744:	a201      	add	r2, pc, #4	; (adr r2, 800974c <DMA_CheckFifoParam+0x24>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	0800975d 	.word	0x0800975d
 8009750:	0800976f 	.word	0x0800976f
 8009754:	0800975d 	.word	0x0800975d
 8009758:	080097f7 	.word	0x080097f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d048      	beq.n	80097fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800976c:	e045      	b.n	80097fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009776:	d142      	bne.n	80097fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800977c:	e03f      	b.n	80097fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009786:	d123      	bne.n	80097d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	2b03      	cmp	r3, #3
 800978e:	d838      	bhi.n	8009802 <DMA_CheckFifoParam+0xda>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <DMA_CheckFifoParam+0x70>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097af 	.word	0x080097af
 80097a0:	080097a9 	.word	0x080097a9
 80097a4:	080097c1 	.word	0x080097c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
        break;
 80097ac:	e030      	b.n	8009810 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d025      	beq.n	8009806 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097be:	e022      	b.n	8009806 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097c8:	d11f      	bne.n	800980a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097ce:	e01c      	b.n	800980a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d902      	bls.n	80097de <DMA_CheckFifoParam+0xb6>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d003      	beq.n	80097e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80097dc:	e018      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]
        break;
 80097e2:	e015      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
    break;
 80097f4:	e00b      	b.n	800980e <DMA_CheckFifoParam+0xe6>
        break;
 80097f6:	bf00      	nop
 80097f8:	e00a      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        break;
 80097fa:	bf00      	nop
 80097fc:	e008      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        break;
 80097fe:	bf00      	nop
 8009800:	e006      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        break;
 8009802:	bf00      	nop
 8009804:	e004      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        break;
 8009806:	bf00      	nop
 8009808:	e002      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
        break;
 800980a:	bf00      	nop
 800980c:	e000      	b.n	8009810 <DMA_CheckFifoParam+0xe8>
    break;
 800980e:	bf00      	nop
    }
  }

  return status;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop

08009820 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a38      	ldr	r2, [pc, #224]	; (8009914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d022      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a36      	ldr	r2, [pc, #216]	; (8009918 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d01d      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a35      	ldr	r2, [pc, #212]	; (800991c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d018      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a33      	ldr	r2, [pc, #204]	; (8009920 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a32      	ldr	r2, [pc, #200]	; (8009924 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00e      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a30      	ldr	r2, [pc, #192]	; (8009928 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d009      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a2f      	ldr	r2, [pc, #188]	; (800992c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d004      	beq.n	800987e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2d      	ldr	r2, [pc, #180]	; (8009930 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d101      	bne.n	8009882 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009882:	2300      	movs	r3, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	3b08      	subs	r3, #8
 8009890:	4a28      	ldr	r2, [pc, #160]	; (8009934 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009892:	fba2 2303 	umull	r2, r3, r2, r3
 8009896:	091b      	lsrs	r3, r3, #4
 8009898:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4b26      	ldr	r3, [pc, #152]	; (8009938 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a24      	ldr	r2, [pc, #144]	; (800993c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80098ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80098bc:	e024      	b.n	8009908 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	3b10      	subs	r3, #16
 80098c6:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80098c8:	fba2 2303 	umull	r2, r3, r2, r3
 80098cc:	091b      	lsrs	r3, r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d806      	bhi.n	80098e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d902      	bls.n	80098e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3308      	adds	r3, #8
 80098e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4b18      	ldr	r3, [pc, #96]	; (800994c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a16      	ldr	r2, [pc, #88]	; (8009950 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80098f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f003 031f 	and.w	r3, r3, #31
 8009900:	2201      	movs	r2, #1
 8009902:	409a      	lsls	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009908:	bf00      	nop
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	58025408 	.word	0x58025408
 8009918:	5802541c 	.word	0x5802541c
 800991c:	58025430 	.word	0x58025430
 8009920:	58025444 	.word	0x58025444
 8009924:	58025458 	.word	0x58025458
 8009928:	5802546c 	.word	0x5802546c
 800992c:	58025480 	.word	0x58025480
 8009930:	58025494 	.word	0x58025494
 8009934:	cccccccd 	.word	0xcccccccd
 8009938:	16009600 	.word	0x16009600
 800993c:	58025880 	.word	0x58025880
 8009940:	aaaaaaab 	.word	0xaaaaaaab
 8009944:	400204b8 	.word	0x400204b8
 8009948:	4002040f 	.word	0x4002040f
 800994c:	10008200 	.word	0x10008200
 8009950:	40020880 	.word	0x40020880

08009954 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d04a      	beq.n	8009a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d847      	bhi.n	8009a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a25      	ldr	r2, [pc, #148]	; (8009a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d022      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a24      	ldr	r2, [pc, #144]	; (8009a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d01d      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a22      	ldr	r2, [pc, #136]	; (8009a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d018      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a21      	ldr	r2, [pc, #132]	; (8009a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d013      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a1f      	ldr	r2, [pc, #124]	; (8009a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00e      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a1e      	ldr	r2, [pc, #120]	; (8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d009      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d004      	beq.n	80099c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d101      	bne.n	80099c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80099c4:	2300      	movs	r3, #0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4b17      	ldr	r3, [pc, #92]	; (8009a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80099dc:	671a      	str	r2, [r3, #112]	; 0x70
 80099de:	e009      	b.n	80099f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	461a      	mov	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a11      	ldr	r2, [pc, #68]	; (8009a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80099f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2201      	movs	r2, #1
 80099fa:	409a      	lsls	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	58025408 	.word	0x58025408
 8009a10:	5802541c 	.word	0x5802541c
 8009a14:	58025430 	.word	0x58025430
 8009a18:	58025444 	.word	0x58025444
 8009a1c:	58025458 	.word	0x58025458
 8009a20:	5802546c 	.word	0x5802546c
 8009a24:	58025480 	.word	0x58025480
 8009a28:	58025494 	.word	0x58025494
 8009a2c:	1600963f 	.word	0x1600963f
 8009a30:	58025940 	.word	0x58025940
 8009a34:	1000823f 	.word	0x1000823f
 8009a38:	40020940 	.word	0x40020940

08009a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b089      	sub	sp, #36	; 0x24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009a4a:	4b89      	ldr	r3, [pc, #548]	; (8009c70 <HAL_GPIO_Init+0x234>)
 8009a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a4e:	e194      	b.n	8009d7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	2101      	movs	r1, #1
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 8186 	beq.w	8009d74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d005      	beq.n	8009a80 <HAL_GPIO_Init+0x44>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d130      	bne.n	8009ae2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	43db      	mvns	r3, r3
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	4013      	ands	r3, r2
 8009a96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	091b      	lsrs	r3, r3, #4
 8009acc:	f003 0201 	and.w	r2, r3, #1
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d017      	beq.n	8009b1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	2203      	movs	r2, #3
 8009afa:	fa02 f303 	lsl.w	r3, r2, r3
 8009afe:	43db      	mvns	r3, r3
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	4013      	ands	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d123      	bne.n	8009b72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	08da      	lsrs	r2, r3, #3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3208      	adds	r2, #8
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	220f      	movs	r2, #15
 8009b42:	fa02 f303 	lsl.w	r3, r2, r3
 8009b46:	43db      	mvns	r3, r3
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	08da      	lsrs	r2, r3, #3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3208      	adds	r2, #8
 8009b6c:	69b9      	ldr	r1, [r7, #24]
 8009b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	43db      	mvns	r3, r3
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	4013      	ands	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f003 0203 	and.w	r2, r3, #3
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80e0 	beq.w	8009d74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bb4:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <HAL_GPIO_Init+0x238>)
 8009bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bba:	4a2e      	ldr	r2, [pc, #184]	; (8009c74 <HAL_GPIO_Init+0x238>)
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009bc4:	4b2b      	ldr	r3, [pc, #172]	; (8009c74 <HAL_GPIO_Init+0x238>)
 8009bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009bd2:	4a29      	ldr	r2, [pc, #164]	; (8009c78 <HAL_GPIO_Init+0x23c>)
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	089b      	lsrs	r3, r3, #2
 8009bd8:	3302      	adds	r3, #2
 8009bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f003 0303 	and.w	r3, r3, #3
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	220f      	movs	r2, #15
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a20      	ldr	r2, [pc, #128]	; (8009c7c <HAL_GPIO_Init+0x240>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d052      	beq.n	8009ca4 <HAL_GPIO_Init+0x268>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1f      	ldr	r2, [pc, #124]	; (8009c80 <HAL_GPIO_Init+0x244>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d031      	beq.n	8009c6a <HAL_GPIO_Init+0x22e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a1e      	ldr	r2, [pc, #120]	; (8009c84 <HAL_GPIO_Init+0x248>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d02b      	beq.n	8009c66 <HAL_GPIO_Init+0x22a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a1d      	ldr	r2, [pc, #116]	; (8009c88 <HAL_GPIO_Init+0x24c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d025      	beq.n	8009c62 <HAL_GPIO_Init+0x226>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a1c      	ldr	r2, [pc, #112]	; (8009c8c <HAL_GPIO_Init+0x250>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d01f      	beq.n	8009c5e <HAL_GPIO_Init+0x222>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a1b      	ldr	r2, [pc, #108]	; (8009c90 <HAL_GPIO_Init+0x254>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d019      	beq.n	8009c5a <HAL_GPIO_Init+0x21e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a1a      	ldr	r2, [pc, #104]	; (8009c94 <HAL_GPIO_Init+0x258>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d013      	beq.n	8009c56 <HAL_GPIO_Init+0x21a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <HAL_GPIO_Init+0x25c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00d      	beq.n	8009c52 <HAL_GPIO_Init+0x216>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <HAL_GPIO_Init+0x260>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d007      	beq.n	8009c4e <HAL_GPIO_Init+0x212>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a17      	ldr	r2, [pc, #92]	; (8009ca0 <HAL_GPIO_Init+0x264>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d101      	bne.n	8009c4a <HAL_GPIO_Init+0x20e>
 8009c46:	2309      	movs	r3, #9
 8009c48:	e02d      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	e02b      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c4e:	2308      	movs	r3, #8
 8009c50:	e029      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c52:	2307      	movs	r3, #7
 8009c54:	e027      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c56:	2306      	movs	r3, #6
 8009c58:	e025      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c5a:	2305      	movs	r3, #5
 8009c5c:	e023      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c5e:	2304      	movs	r3, #4
 8009c60:	e021      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c62:	2303      	movs	r3, #3
 8009c64:	e01f      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e01d      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e01b      	b.n	8009ca6 <HAL_GPIO_Init+0x26a>
 8009c6e:	bf00      	nop
 8009c70:	58000080 	.word	0x58000080
 8009c74:	58024400 	.word	0x58024400
 8009c78:	58000400 	.word	0x58000400
 8009c7c:	58020000 	.word	0x58020000
 8009c80:	58020400 	.word	0x58020400
 8009c84:	58020800 	.word	0x58020800
 8009c88:	58020c00 	.word	0x58020c00
 8009c8c:	58021000 	.word	0x58021000
 8009c90:	58021400 	.word	0x58021400
 8009c94:	58021800 	.word	0x58021800
 8009c98:	58021c00 	.word	0x58021c00
 8009c9c:	58022000 	.word	0x58022000
 8009ca0:	58022400 	.word	0x58022400
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	f002 0203 	and.w	r2, r2, #3
 8009cac:	0092      	lsls	r2, r2, #2
 8009cae:	4093      	lsls	r3, r2
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cb6:	4938      	ldr	r1, [pc, #224]	; (8009d98 <HAL_GPIO_Init+0x35c>)
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	089b      	lsrs	r3, r3, #2
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	43db      	mvns	r3, r3
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	4013      	ands	r3, r2
 8009d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009d3c:	69ba      	ldr	r2, [r7, #24]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	4013      	ands	r3, r2
 8009d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f ae63 	bne.w	8009a50 <HAL_GPIO_Init+0x14>
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	3724      	adds	r7, #36	; 0x24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	58000400 	.word	0x58000400

08009d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
 8009da8:	4613      	mov	r3, r2
 8009daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dac:	787b      	ldrb	r3, [r7, #1]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009db2:	887a      	ldrh	r2, [r7, #2]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009db8:	e003      	b.n	8009dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009dba:	887b      	ldrh	r3, [r7, #2]
 8009dbc:	041a      	lsls	r2, r3, #16
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	619a      	str	r2, [r3, #24]
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e07f      	b.n	8009ee2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7fa fcf0 	bl	80047dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2224      	movs	r2, #36	; 0x24
 8009e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 0201 	bic.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d107      	bne.n	8009e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e46:	609a      	str	r2, [r3, #8]
 8009e48:	e006      	b.n	8009e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d104      	bne.n	8009e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b1d      	ldr	r3, [pc, #116]	; (8009eec <HAL_I2C_Init+0x11c>)
 8009e76:	430b      	orrs	r3, r1
 8009e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691a      	ldr	r2, [r3, #16]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	69d9      	ldr	r1, [r3, #28]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1a      	ldr	r2, [r3, #32]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	02008000 	.word	0x02008000

08009ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d138      	bne.n	8009f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e032      	b.n	8009f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2224      	movs	r2, #36	; 0x24
 8009f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6819      	ldr	r1, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	e000      	b.n	8009f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f78:	2302      	movs	r3, #2
  }
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d139      	bne.n	800a010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e033      	b.n	800a012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	; 0x24
 8009fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f042 0201 	orr.w	r2, r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2220      	movs	r2, #32
 800a000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a010:	2302      	movs	r3, #2
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a020:	b08f      	sub	sp, #60	; 0x3c
 800a022:	af0a      	add	r7, sp, #40	; 0x28
 800a024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e116      	b.n	800a25e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fb fa56 	bl	80054fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2203      	movs	r2, #3
 800a054:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f009 f9d2 	bl	8013418 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	603b      	str	r3, [r7, #0]
 800a07a:	687e      	ldr	r6, [r7, #4]
 800a07c:	466d      	mov	r5, sp
 800a07e:	f106 0410 	add.w	r4, r6, #16
 800a082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a08a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a08e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a092:	1d33      	adds	r3, r6, #4
 800a094:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a096:	6838      	ldr	r0, [r7, #0]
 800a098:	f009 f950 	bl	801333c <USB_CoreInit>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e0d7      	b.n	800a25e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f009 f9c0 	bl	801343a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
 800a0be:	e04a      	b.n	800a156 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a0c0:	7bfa      	ldrb	r2, [r7, #15]
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	440b      	add	r3, r1
 800a0ce:	333d      	adds	r3, #61	; 0x3d
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a0d4:	7bfa      	ldrb	r2, [r7, #15]
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	440b      	add	r3, r1
 800a0e2:	333c      	adds	r3, #60	; 0x3c
 800a0e4:	7bfa      	ldrb	r2, [r7, #15]
 800a0e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a0e8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	b298      	uxth	r0, r3
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	3356      	adds	r3, #86	; 0x56
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a100:	7bfa      	ldrb	r2, [r7, #15]
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	4613      	mov	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	440b      	add	r3, r1
 800a10e:	3340      	adds	r3, #64	; 0x40
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a114:	7bfa      	ldrb	r2, [r7, #15]
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	440b      	add	r3, r1
 800a122:	3344      	adds	r3, #68	; 0x44
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a128:	7bfa      	ldrb	r2, [r7, #15]
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	3348      	adds	r3, #72	; 0x48
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a13c:	7bfa      	ldrb	r2, [r7, #15]
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	4613      	mov	r3, r2
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	440b      	add	r3, r1
 800a14a:	334c      	adds	r3, #76	; 0x4c
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	3301      	adds	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d3af      	bcc.n	800a0c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
 800a164:	e044      	b.n	800a1f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a166:	7bfa      	ldrb	r2, [r7, #15]
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	440b      	add	r3, r1
 800a174:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a17c:	7bfa      	ldrb	r2, [r7, #15]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a18e:	7bfa      	ldrb	r2, [r7, #15]
 800a190:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a192:	7bfa      	ldrb	r2, [r7, #15]
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a1a8:	7bfa      	ldrb	r2, [r7, #15]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a1d4:	7bfa      	ldrb	r2, [r7, #15]
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	73fb      	strb	r3, [r7, #15]
 800a1f0:	7bfa      	ldrb	r2, [r7, #15]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d3b5      	bcc.n	800a166 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	687e      	ldr	r6, [r7, #4]
 800a202:	466d      	mov	r5, sp
 800a204:	f106 0410 	add.w	r4, r6, #16
 800a208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a20a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a20c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a20e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a210:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a214:	e885 0003 	stmia.w	r5, {r0, r1}
 800a218:	1d33      	adds	r3, r6, #4
 800a21a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a21c:	6838      	ldr	r0, [r7, #0]
 800a21e:	f009 f959 	bl	80134d4 <USB_DevInit>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d005      	beq.n	800a234 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e014      	b.n	800a25e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d102      	bne.n	800a252 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f80b 	bl	800a268 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f009 fb17 	bl	801388a <USB_DevDisconnect>

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a268 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a296:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <HAL_PCDEx_ActivateLPM+0x44>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	10000003 	.word	0x10000003

0800a2b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a2b8:	4b19      	ldr	r3, [pc, #100]	; (800a320 <HAL_PWREx_ConfigSupply+0x70>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d00a      	beq.n	800a2da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a2c4:	4b16      	ldr	r3, [pc, #88]	; (800a320 <HAL_PWREx_ConfigSupply+0x70>)
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d001      	beq.n	800a2d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e01f      	b.n	800a316 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e01d      	b.n	800a316 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a2da:	4b11      	ldr	r3, [pc, #68]	; (800a320 <HAL_PWREx_ConfigSupply+0x70>)
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f023 0207 	bic.w	r2, r3, #7
 800a2e2:	490f      	ldr	r1, [pc, #60]	; (800a320 <HAL_PWREx_ConfigSupply+0x70>)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a2ea:	f7fb fb91 	bl	8005a10 <HAL_GetTick>
 800a2ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2f0:	e009      	b.n	800a306 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2f2:	f7fb fb8d 	bl	8005a10 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a300:	d901      	bls.n	800a306 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e007      	b.n	800a316 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a306:	4b06      	ldr	r3, [pc, #24]	; (800a320 <HAL_PWREx_ConfigSupply+0x70>)
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a312:	d1ee      	bne.n	800a2f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	58024800 	.word	0x58024800

0800a324 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4a04      	ldr	r2, [pc, #16]	; (800a340 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a32e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a332:	60d3      	str	r3, [r2, #12]
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	58024800 	.word	0x58024800

0800a344 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af02      	add	r7, sp, #8
 800a34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a34c:	f7fb fb60 	bl	8005a10 <HAL_GetTick>
 800a350:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e05f      	b.n	800a41c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7fa fd9f 	bl	8004eac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a36e:	f241 3188 	movw	r1, #5000	; 0x1388
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f85a 	bl	800a42c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	021a      	lsls	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	2120      	movs	r1, #32
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f852 	bl	800a448 <QSPI_WaitFlagStateUntilTimeout>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d135      	bne.n	800a41a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b1b      	ldr	r3, [pc, #108]	; (800a424 <HAL_QSPI_Init+0xe0>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6852      	ldr	r2, [r2, #4]
 800a3bc:	0611      	lsls	r1, r2, #24
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	68d2      	ldr	r2, [r2, #12]
 800a3c2:	4311      	orrs	r1, r2
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	69d2      	ldr	r2, [r2, #28]
 800a3c8:	4311      	orrs	r1, r2
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	6a12      	ldr	r2, [r2, #32]
 800a3ce:	4311      	orrs	r1, r2
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	4b12      	ldr	r3, [pc, #72]	; (800a428 <HAL_QSPI_Init+0xe4>)
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6912      	ldr	r2, [r2, #16]
 800a3e6:	0411      	lsls	r1, r2, #16
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	6952      	ldr	r2, [r2, #20]
 800a3ec:	4311      	orrs	r1, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6992      	ldr	r2, [r2, #24]
 800a3f2:	4311      	orrs	r1, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0201 	orr.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a41a:	7afb      	ldrb	r3, [r7, #11]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	00ffff2f 	.word	0x00ffff2f
 800a428:	ffe0f8fe 	.word	0xffe0f8fe

0800a42c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	4613      	mov	r3, r2
 800a456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a458:	e01a      	b.n	800a490 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a460:	d016      	beq.n	800a490 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a462:	f7fb fad5 	bl	8005a10 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d302      	bcc.n	800a478 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10b      	bne.n	800a490 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2204      	movs	r2, #4
 800a47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a484:	f043 0201 	orr.w	r2, r3, #1
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e00e      	b.n	800a4ae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	4013      	ands	r3, r2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bf14      	ite	ne
 800a49e:	2301      	movne	r3, #1
 800a4a0:	2300      	moveq	r3, #0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d1d6      	bne.n	800a45a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08c      	sub	sp, #48	; 0x30
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f000 bc48 	b.w	800ad5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8088 	beq.w	800a5ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4da:	4b99      	ldr	r3, [pc, #612]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4e4:	4b96      	ldr	r3, [pc, #600]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	2b10      	cmp	r3, #16
 800a4ee:	d007      	beq.n	800a500 <HAL_RCC_OscConfig+0x48>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	2b18      	cmp	r3, #24
 800a4f4:	d111      	bne.n	800a51a <HAL_RCC_OscConfig+0x62>
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d10c      	bne.n	800a51a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a500:	4b8f      	ldr	r3, [pc, #572]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d06d      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x130>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d169      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f000 bc21 	b.w	800ad5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a522:	d106      	bne.n	800a532 <HAL_RCC_OscConfig+0x7a>
 800a524:	4b86      	ldr	r3, [pc, #536]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a85      	ldr	r2, [pc, #532]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a52a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e02e      	b.n	800a590 <HAL_RCC_OscConfig+0xd8>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10c      	bne.n	800a554 <HAL_RCC_OscConfig+0x9c>
 800a53a:	4b81      	ldr	r3, [pc, #516]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a80      	ldr	r2, [pc, #512]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	4b7e      	ldr	r3, [pc, #504]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a7d      	ldr	r2, [pc, #500]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a54c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	e01d      	b.n	800a590 <HAL_RCC_OscConfig+0xd8>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a55c:	d10c      	bne.n	800a578 <HAL_RCC_OscConfig+0xc0>
 800a55e:	4b78      	ldr	r3, [pc, #480]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a77      	ldr	r2, [pc, #476]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	4b75      	ldr	r3, [pc, #468]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a74      	ldr	r2, [pc, #464]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	e00b      	b.n	800a590 <HAL_RCC_OscConfig+0xd8>
 800a578:	4b71      	ldr	r3, [pc, #452]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a70      	ldr	r2, [pc, #448]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a57e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	4b6e      	ldr	r3, [pc, #440]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a6d      	ldr	r2, [pc, #436]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a58a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a58e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d013      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a598:	f7fb fa3a 	bl	8005a10 <HAL_GetTick>
 800a59c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5a0:	f7fb fa36 	bl	8005a10 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b64      	cmp	r3, #100	; 0x64
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e3d4      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5b2:	4b63      	ldr	r3, [pc, #396]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0f0      	beq.n	800a5a0 <HAL_RCC_OscConfig+0xe8>
 800a5be:	e014      	b.n	800a5ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c0:	f7fb fa26 	bl	8005a10 <HAL_GetTick>
 800a5c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5c6:	e008      	b.n	800a5da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5c8:	f7fb fa22 	bl	8005a10 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b64      	cmp	r3, #100	; 0x64
 800a5d4:	d901      	bls.n	800a5da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e3c0      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5da:	4b59      	ldr	r3, [pc, #356]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1f0      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x110>
 800a5e6:	e000      	b.n	800a5ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0302 	and.w	r3, r3, #2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80ca 	beq.w	800a78c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5f8:	4b51      	ldr	r3, [pc, #324]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a602:	4b4f      	ldr	r3, [pc, #316]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d007      	beq.n	800a61e <HAL_RCC_OscConfig+0x166>
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	2b18      	cmp	r3, #24
 800a612:	d156      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x20a>
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d151      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a61e:	4b48      	ldr	r3, [pc, #288]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <HAL_RCC_OscConfig+0x17e>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e392      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a636:	4b42      	ldr	r3, [pc, #264]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f023 0219 	bic.w	r2, r3, #25
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	493f      	ldr	r1, [pc, #252]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a644:	4313      	orrs	r3, r2
 800a646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a648:	f7fb f9e2 	bl	8005a10 <HAL_GetTick>
 800a64c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a650:	f7fb f9de 	bl	8005a10 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e37c      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a662:	4b37      	ldr	r3, [pc, #220]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0f0      	beq.n	800a650 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a66e:	f7fb f9ff 	bl	8005a70 <HAL_GetREVID>
 800a672:	4603      	mov	r3, r0
 800a674:	f241 0203 	movw	r2, #4099	; 0x1003
 800a678:	4293      	cmp	r3, r2
 800a67a:	d817      	bhi.n	800a6ac <HAL_RCC_OscConfig+0x1f4>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	2b40      	cmp	r3, #64	; 0x40
 800a682:	d108      	bne.n	800a696 <HAL_RCC_OscConfig+0x1de>
 800a684:	4b2e      	ldr	r3, [pc, #184]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a68c:	4a2c      	ldr	r2, [pc, #176]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a68e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a692:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a694:	e07a      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a696:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	031b      	lsls	r3, r3, #12
 800a6a4:	4926      	ldr	r1, [pc, #152]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6aa:	e06f      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ac:	4b24      	ldr	r3, [pc, #144]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	061b      	lsls	r3, r3, #24
 800a6ba:	4921      	ldr	r1, [pc, #132]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6c0:	e064      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d047      	beq.n	800a75a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a6ca:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f023 0219 	bic.w	r2, r3, #25
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	491a      	ldr	r1, [pc, #104]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6dc:	f7fb f998 	bl	8005a10 <HAL_GetTick>
 800a6e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6e2:	e008      	b.n	800a6f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6e4:	f7fb f994 	bl	8005a10 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d901      	bls.n	800a6f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e332      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6f6:	4b12      	ldr	r3, [pc, #72]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0f0      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a702:	f7fb f9b5 	bl	8005a70 <HAL_GetREVID>
 800a706:	4603      	mov	r3, r0
 800a708:	f241 0203 	movw	r2, #4099	; 0x1003
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d819      	bhi.n	800a744 <HAL_RCC_OscConfig+0x28c>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	2b40      	cmp	r3, #64	; 0x40
 800a716:	d108      	bne.n	800a72a <HAL_RCC_OscConfig+0x272>
 800a718:	4b09      	ldr	r3, [pc, #36]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a720:	4a07      	ldr	r2, [pc, #28]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a726:	6053      	str	r3, [r2, #4]
 800a728:	e030      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	031b      	lsls	r3, r3, #12
 800a738:	4901      	ldr	r1, [pc, #4]	; (800a740 <HAL_RCC_OscConfig+0x288>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	604b      	str	r3, [r1, #4]
 800a73e:	e025      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
 800a740:	58024400 	.word	0x58024400
 800a744:	4b9a      	ldr	r3, [pc, #616]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	061b      	lsls	r3, r3, #24
 800a752:	4997      	ldr	r1, [pc, #604]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a754:	4313      	orrs	r3, r2
 800a756:	604b      	str	r3, [r1, #4]
 800a758:	e018      	b.n	800a78c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a75a:	4b95      	ldr	r3, [pc, #596]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a94      	ldr	r2, [pc, #592]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a760:	f023 0301 	bic.w	r3, r3, #1
 800a764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a766:	f7fb f953 	bl	8005a10 <HAL_GetTick>
 800a76a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a76c:	e008      	b.n	800a780 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a76e:	f7fb f94f 	bl	8005a10 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d901      	bls.n	800a780 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e2ed      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a780:	4b8b      	ldr	r3, [pc, #556]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f0      	bne.n	800a76e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80a9 	beq.w	800a8ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a79a:	4b85      	ldr	r3, [pc, #532]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7a4:	4b82      	ldr	r3, [pc, #520]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d007      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x308>
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b18      	cmp	r3, #24
 800a7b4:	d13a      	bne.n	800a82c <HAL_RCC_OscConfig+0x374>
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f003 0303 	and.w	r3, r3, #3
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d135      	bne.n	800a82c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a7c0:	4b7b      	ldr	r3, [pc, #492]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x320>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b80      	cmp	r3, #128	; 0x80
 800a7d2:	d001      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e2c1      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a7d8:	f7fb f94a 	bl	8005a70 <HAL_GetREVID>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	f241 0203 	movw	r2, #4099	; 0x1003
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d817      	bhi.n	800a816 <HAL_RCC_OscConfig+0x35e>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d108      	bne.n	800a800 <HAL_RCC_OscConfig+0x348>
 800a7ee:	4b70      	ldr	r3, [pc, #448]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a7f6:	4a6e      	ldr	r2, [pc, #440]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a7f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a7fe:	e075      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a800:	4b6b      	ldr	r3, [pc, #428]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	069b      	lsls	r3, r3, #26
 800a80e:	4968      	ldr	r1, [pc, #416]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a810:	4313      	orrs	r3, r2
 800a812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a814:	e06a      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a816:	4b66      	ldr	r3, [pc, #408]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	061b      	lsls	r3, r3, #24
 800a824:	4962      	ldr	r1, [pc, #392]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a826:	4313      	orrs	r3, r2
 800a828:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a82a:	e05f      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d042      	beq.n	800a8ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a834:	4b5e      	ldr	r3, [pc, #376]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a5d      	ldr	r2, [pc, #372]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a840:	f7fb f8e6 	bl	8005a10 <HAL_GetTick>
 800a844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a846:	e008      	b.n	800a85a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a848:	f7fb f8e2 	bl	8005a10 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	2b02      	cmp	r3, #2
 800a854:	d901      	bls.n	800a85a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e280      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a85a:	4b55      	ldr	r3, [pc, #340]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0f0      	beq.n	800a848 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a866:	f7fb f903 	bl	8005a70 <HAL_GetREVID>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a870:	4293      	cmp	r3, r2
 800a872:	d817      	bhi.n	800a8a4 <HAL_RCC_OscConfig+0x3ec>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	2b20      	cmp	r3, #32
 800a87a:	d108      	bne.n	800a88e <HAL_RCC_OscConfig+0x3d6>
 800a87c:	4b4c      	ldr	r3, [pc, #304]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a884:	4a4a      	ldr	r2, [pc, #296]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a88a:	6053      	str	r3, [r2, #4]
 800a88c:	e02e      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
 800a88e:	4b48      	ldr	r3, [pc, #288]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	069b      	lsls	r3, r3, #26
 800a89c:	4944      	ldr	r1, [pc, #272]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	604b      	str	r3, [r1, #4]
 800a8a2:	e023      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
 800a8a4:	4b42      	ldr	r3, [pc, #264]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	061b      	lsls	r3, r3, #24
 800a8b2:	493f      	ldr	r1, [pc, #252]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60cb      	str	r3, [r1, #12]
 800a8b8:	e018      	b.n	800a8ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a8ba:	4b3d      	ldr	r3, [pc, #244]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a3c      	ldr	r2, [pc, #240]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a8c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c6:	f7fb f8a3 	bl	8005a10 <HAL_GetTick>
 800a8ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8ce:	f7fb f89f 	bl	8005a10 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e23d      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8e0:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f0      	bne.n	800a8ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d036      	beq.n	800a966 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d019      	beq.n	800a934 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a900:	4b2b      	ldr	r3, [pc, #172]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a904:	4a2a      	ldr	r2, [pc, #168]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a906:	f043 0301 	orr.w	r3, r3, #1
 800a90a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a90c:	f7fb f880 	bl	8005a10 <HAL_GetTick>
 800a910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a912:	e008      	b.n	800a926 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a914:	f7fb f87c 	bl	8005a10 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e21a      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0f0      	beq.n	800a914 <HAL_RCC_OscConfig+0x45c>
 800a932:	e018      	b.n	800a966 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a938:	4a1d      	ldr	r2, [pc, #116]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a93a:	f023 0301 	bic.w	r3, r3, #1
 800a93e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a940:	f7fb f866 	bl	8005a10 <HAL_GetTick>
 800a944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a948:	f7fb f862 	bl	8005a10 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e200      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f0      	bne.n	800a948 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d039      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d01c      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a97a:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a986:	f7fb f843 	bl	8005a10 <HAL_GetTick>
 800a98a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a98c:	e008      	b.n	800a9a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a98e:	f7fb f83f 	bl	8005a10 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d901      	bls.n	800a9a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e1dd      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9a0:	4b03      	ldr	r3, [pc, #12]	; (800a9b0 <HAL_RCC_OscConfig+0x4f8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0f0      	beq.n	800a98e <HAL_RCC_OscConfig+0x4d6>
 800a9ac:	e01b      	b.n	800a9e6 <HAL_RCC_OscConfig+0x52e>
 800a9ae:	bf00      	nop
 800a9b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9b4:	4b9b      	ldr	r3, [pc, #620]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a9a      	ldr	r2, [pc, #616]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800a9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9c0:	f7fb f826 	bl	8005a10 <HAL_GetTick>
 800a9c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9c8:	f7fb f822 	bl	8005a10 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e1c0      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9da:	4b92      	ldr	r3, [pc, #584]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 8081 	beq.w	800aaf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a9f4:	4b8c      	ldr	r3, [pc, #560]	; (800ac28 <HAL_RCC_OscConfig+0x770>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a8b      	ldr	r2, [pc, #556]	; (800ac28 <HAL_RCC_OscConfig+0x770>)
 800a9fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa00:	f7fb f806 	bl	8005a10 <HAL_GetTick>
 800aa04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa06:	e008      	b.n	800aa1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa08:	f7fb f802 	bl	8005a10 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b64      	cmp	r3, #100	; 0x64
 800aa14:	d901      	bls.n	800aa1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e1a0      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa1a:	4b83      	ldr	r3, [pc, #524]	; (800ac28 <HAL_RCC_OscConfig+0x770>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0f0      	beq.n	800aa08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d106      	bne.n	800aa3c <HAL_RCC_OscConfig+0x584>
 800aa2e:	4b7d      	ldr	r3, [pc, #500]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa32:	4a7c      	ldr	r2, [pc, #496]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	6713      	str	r3, [r2, #112]	; 0x70
 800aa3a:	e02d      	b.n	800aa98 <HAL_RCC_OscConfig+0x5e0>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10c      	bne.n	800aa5e <HAL_RCC_OscConfig+0x5a6>
 800aa44:	4b77      	ldr	r3, [pc, #476]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	4a76      	ldr	r2, [pc, #472]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa4a:	f023 0301 	bic.w	r3, r3, #1
 800aa4e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa50:	4b74      	ldr	r3, [pc, #464]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa54:	4a73      	ldr	r2, [pc, #460]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa56:	f023 0304 	bic.w	r3, r3, #4
 800aa5a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa5c:	e01c      	b.n	800aa98 <HAL_RCC_OscConfig+0x5e0>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d10c      	bne.n	800aa80 <HAL_RCC_OscConfig+0x5c8>
 800aa66:	4b6f      	ldr	r3, [pc, #444]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6a:	4a6e      	ldr	r2, [pc, #440]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa6c:	f043 0304 	orr.w	r3, r3, #4
 800aa70:	6713      	str	r3, [r2, #112]	; 0x70
 800aa72:	4b6c      	ldr	r3, [pc, #432]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	4a6b      	ldr	r2, [pc, #428]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa78:	f043 0301 	orr.w	r3, r3, #1
 800aa7c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa7e:	e00b      	b.n	800aa98 <HAL_RCC_OscConfig+0x5e0>
 800aa80:	4b68      	ldr	r3, [pc, #416]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	4a67      	ldr	r2, [pc, #412]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa8c:	4b65      	ldr	r3, [pc, #404]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa90:	4a64      	ldr	r2, [pc, #400]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aa92:	f023 0304 	bic.w	r3, r3, #4
 800aa96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d015      	beq.n	800aacc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa0:	f7fa ffb6 	bl	8005a10 <HAL_GetTick>
 800aaa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaa6:	e00a      	b.n	800aabe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa8:	f7fa ffb2 	bl	8005a10 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e14e      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aabe:	4b59      	ldr	r3, [pc, #356]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0ee      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x5f0>
 800aaca:	e014      	b.n	800aaf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aacc:	f7fa ffa0 	bl	8005a10 <HAL_GetTick>
 800aad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aad2:	e00a      	b.n	800aaea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad4:	f7fa ff9c 	bl	8005a10 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e138      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aaea:	4b4e      	ldr	r3, [pc, #312]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1ee      	bne.n	800aad4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 812d 	beq.w	800ad5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab00:	4b48      	ldr	r3, [pc, #288]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab08:	2b18      	cmp	r3, #24
 800ab0a:	f000 80bd 	beq.w	800ac88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	f040 809e 	bne.w	800ac54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab18:	4b42      	ldr	r3, [pc, #264]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a41      	ldr	r2, [pc, #260]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab24:	f7fa ff74 	bl	8005a10 <HAL_GetTick>
 800ab28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab2a:	e008      	b.n	800ab3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab2c:	f7fa ff70 	bl	8005a10 <HAL_GetTick>
 800ab30:	4602      	mov	r2, r0
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e10e      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab3e:	4b39      	ldr	r3, [pc, #228]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f0      	bne.n	800ab2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab4a:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab4e:	4b37      	ldr	r3, [pc, #220]	; (800ac2c <HAL_RCC_OscConfig+0x774>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab5a:	0112      	lsls	r2, r2, #4
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	4931      	ldr	r1, [pc, #196]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	628b      	str	r3, [r1, #40]	; 0x28
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab72:	3b01      	subs	r3, #1
 800ab74:	025b      	lsls	r3, r3, #9
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	041b      	lsls	r3, r3, #16
 800ab82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	061b      	lsls	r3, r3, #24
 800ab90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab94:	4923      	ldr	r1, [pc, #140]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ab9a:	4b22      	ldr	r3, [pc, #136]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aba0:	f023 0301 	bic.w	r3, r3, #1
 800aba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aba6:	4b1f      	ldr	r3, [pc, #124]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800aba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abaa:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <HAL_RCC_OscConfig+0x778>)
 800abac:	4013      	ands	r3, r2
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800abb2:	00d2      	lsls	r2, r2, #3
 800abb4:	491b      	ldr	r1, [pc, #108]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abb6:	4313      	orrs	r3, r2
 800abb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800abba:	4b1a      	ldr	r3, [pc, #104]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbe:	f023 020c 	bic.w	r2, r3, #12
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	4917      	ldr	r1, [pc, #92]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800abcc:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	f023 0202 	bic.w	r2, r3, #2
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd8:	4912      	ldr	r1, [pc, #72]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800abde:	4b11      	ldr	r3, [pc, #68]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	4a10      	ldr	r2, [pc, #64]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abea:	4b0e      	ldr	r3, [pc, #56]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	4a0d      	ldr	r2, [pc, #52]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800abf6:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	4a0a      	ldr	r2, [pc, #40]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800abfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac02:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a07      	ldr	r2, [pc, #28]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ac08:	f043 0301 	orr.w	r3, r3, #1
 800ac0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac0e:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <HAL_RCC_OscConfig+0x76c>)
 800ac14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac1a:	f7fa fef9 	bl	8005a10 <HAL_GetTick>
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac20:	e011      	b.n	800ac46 <HAL_RCC_OscConfig+0x78e>
 800ac22:	bf00      	nop
 800ac24:	58024400 	.word	0x58024400
 800ac28:	58024800 	.word	0x58024800
 800ac2c:	fffffc0c 	.word	0xfffffc0c
 800ac30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac34:	f7fa feec 	bl	8005a10 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e08a      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac46:	4b47      	ldr	r3, [pc, #284]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f0      	beq.n	800ac34 <HAL_RCC_OscConfig+0x77c>
 800ac52:	e082      	b.n	800ad5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac54:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a42      	ldr	r2, [pc, #264]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac60:	f7fa fed6 	bl	8005a10 <HAL_GetTick>
 800ac64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac66:	e008      	b.n	800ac7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac68:	f7fa fed2 	bl	8005a10 <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e070      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac7a:	4b3a      	ldr	r3, [pc, #232]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1f0      	bne.n	800ac68 <HAL_RCC_OscConfig+0x7b0>
 800ac86:	e068      	b.n	800ad5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ac88:	4b36      	ldr	r3, [pc, #216]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac8e:	4b35      	ldr	r3, [pc, #212]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d031      	beq.n	800ad00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f003 0203 	and.w	r2, r3, #3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d12a      	bne.n	800ad00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	091b      	lsrs	r3, r3, #4
 800acae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d122      	bne.n	800ad00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d11a      	bne.n	800ad00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	0a5b      	lsrs	r3, r3, #9
 800acce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800acd8:	429a      	cmp	r2, r3
 800acda:	d111      	bne.n	800ad00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	0c1b      	lsrs	r3, r3, #16
 800ace0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acea:	429a      	cmp	r2, r3
 800acec:	d108      	bne.n	800ad00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	0e1b      	lsrs	r3, r3, #24
 800acf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d001      	beq.n	800ad04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e02b      	b.n	800ad5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad08:	08db      	lsrs	r3, r3, #3
 800ad0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d01f      	beq.n	800ad5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad1a:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4a11      	ldr	r2, [pc, #68]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad26:	f7fa fe73 	bl	8005a10 <HAL_GetTick>
 800ad2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad2c:	bf00      	nop
 800ad2e:	f7fa fe6f 	bl	8005a10 <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d0f9      	beq.n	800ad2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad3e:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <HAL_RCC_OscConfig+0x8b0>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad46:	00d2      	lsls	r2, r2, #3
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad52:	4a04      	ldr	r2, [pc, #16]	; (800ad64 <HAL_RCC_OscConfig+0x8ac>)
 800ad54:	f043 0301 	orr.w	r3, r3, #1
 800ad58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3730      	adds	r7, #48	; 0x30
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	58024400 	.word	0x58024400
 800ad68:	ffff0007 	.word	0xffff0007

0800ad6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e19c      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad80:	4b8a      	ldr	r3, [pc, #552]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d910      	bls.n	800adb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad8e:	4b87      	ldr	r3, [pc, #540]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f023 020f 	bic.w	r2, r3, #15
 800ad96:	4985      	ldr	r1, [pc, #532]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad9e:	4b83      	ldr	r3, [pc, #524]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 030f 	and.w	r3, r3, #15
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d001      	beq.n	800adb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e184      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d010      	beq.n	800adde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	4b7b      	ldr	r3, [pc, #492]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adc8:	429a      	cmp	r2, r3
 800adca:	d908      	bls.n	800adde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adcc:	4b78      	ldr	r3, [pc, #480]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	4975      	ldr	r1, [pc, #468]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800adda:	4313      	orrs	r3, r2
 800addc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d010      	beq.n	800ae0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695a      	ldr	r2, [r3, #20]
 800adee:	4b70      	ldr	r3, [pc, #448]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d908      	bls.n	800ae0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adfa:	4b6d      	ldr	r3, [pc, #436]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	496a      	ldr	r1, [pc, #424]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d010      	beq.n	800ae3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699a      	ldr	r2, [r3, #24]
 800ae1c:	4b64      	ldr	r3, [pc, #400]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d908      	bls.n	800ae3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae28:	4b61      	ldr	r3, [pc, #388]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	495e      	ldr	r1, [pc, #376]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d010      	beq.n	800ae68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69da      	ldr	r2, [r3, #28]
 800ae4a:	4b59      	ldr	r3, [pc, #356]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d908      	bls.n	800ae68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae56:	4b56      	ldr	r3, [pc, #344]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	4953      	ldr	r1, [pc, #332]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d010      	beq.n	800ae96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	4b4d      	ldr	r3, [pc, #308]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d908      	bls.n	800ae96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae84:	4b4a      	ldr	r3, [pc, #296]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	f023 020f 	bic.w	r2, r3, #15
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4947      	ldr	r1, [pc, #284]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d055      	beq.n	800af4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aea2:	4b43      	ldr	r3, [pc, #268]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	4940      	ldr	r1, [pc, #256]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d107      	bne.n	800aecc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aebc:	4b3c      	ldr	r3, [pc, #240]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d121      	bne.n	800af0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e0f6      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d107      	bne.n	800aee4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aed4:	4b36      	ldr	r3, [pc, #216]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d115      	bne.n	800af0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e0ea      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d107      	bne.n	800aefc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeec:	4b30      	ldr	r3, [pc, #192]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e0de      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aefc:	4b2c      	ldr	r3, [pc, #176]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e0d6      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af0c:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	f023 0207 	bic.w	r2, r3, #7
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	4925      	ldr	r1, [pc, #148]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af1e:	f7fa fd77 	bl	8005a10 <HAL_GetTick>
 800af22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af24:	e00a      	b.n	800af3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af26:	f7fa fd73 	bl	8005a10 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	f241 3288 	movw	r2, #5000	; 0x1388
 800af34:	4293      	cmp	r3, r2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e0be      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af3c:	4b1c      	ldr	r3, [pc, #112]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d1eb      	bne.n	800af26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	429a      	cmp	r2, r3
 800af68:	d208      	bcs.n	800af7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af6a:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	f023 020f 	bic.w	r2, r3, #15
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	490e      	ldr	r1, [pc, #56]	; (800afb0 <HAL_RCC_ClockConfig+0x244>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d214      	bcs.n	800afb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af8a:	4b08      	ldr	r3, [pc, #32]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f023 020f 	bic.w	r2, r3, #15
 800af92:	4906      	ldr	r1, [pc, #24]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	4313      	orrs	r3, r2
 800af98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <HAL_RCC_ClockConfig+0x240>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d005      	beq.n	800afb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e086      	b.n	800b0ba <HAL_RCC_ClockConfig+0x34e>
 800afac:	52002000 	.word	0x52002000
 800afb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d010      	beq.n	800afe2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691a      	ldr	r2, [r3, #16]
 800afc4:	4b3f      	ldr	r3, [pc, #252]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afcc:	429a      	cmp	r2, r3
 800afce:	d208      	bcs.n	800afe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afd0:	4b3c      	ldr	r3, [pc, #240]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	4939      	ldr	r1, [pc, #228]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0308 	and.w	r3, r3, #8
 800afea:	2b00      	cmp	r3, #0
 800afec:	d010      	beq.n	800b010 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695a      	ldr	r2, [r3, #20]
 800aff2:	4b34      	ldr	r3, [pc, #208]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800affa:	429a      	cmp	r2, r3
 800affc:	d208      	bcs.n	800b010 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800affe:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	492e      	ldr	r1, [pc, #184]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d010      	beq.n	800b03e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b028:	429a      	cmp	r2, r3
 800b02a:	d208      	bcs.n	800b03e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b02c:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	4922      	ldr	r1, [pc, #136]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0320 	and.w	r3, r3, #32
 800b046:	2b00      	cmp	r3, #0
 800b048:	d010      	beq.n	800b06c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	69da      	ldr	r2, [r3, #28]
 800b04e:	4b1d      	ldr	r3, [pc, #116]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b056:	429a      	cmp	r2, r3
 800b058:	d208      	bcs.n	800b06c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b05a:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	4917      	ldr	r1, [pc, #92]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b06c:	f000 f834 	bl	800b0d8 <HAL_RCC_GetSysClockFreq>
 800b070:	4602      	mov	r2, r0
 800b072:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	0a1b      	lsrs	r3, r3, #8
 800b078:	f003 030f 	and.w	r3, r3, #15
 800b07c:	4912      	ldr	r1, [pc, #72]	; (800b0c8 <HAL_RCC_ClockConfig+0x35c>)
 800b07e:	5ccb      	ldrb	r3, [r1, r3]
 800b080:	f003 031f 	and.w	r3, r3, #31
 800b084:	fa22 f303 	lsr.w	r3, r2, r3
 800b088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <HAL_RCC_ClockConfig+0x358>)
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	f003 030f 	and.w	r3, r3, #15
 800b092:	4a0d      	ldr	r2, [pc, #52]	; (800b0c8 <HAL_RCC_ClockConfig+0x35c>)
 800b094:	5cd3      	ldrb	r3, [r2, r3]
 800b096:	f003 031f 	and.w	r3, r3, #31
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a0:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <HAL_RCC_ClockConfig+0x360>)
 800b0a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0a4:	4a0a      	ldr	r2, [pc, #40]	; (800b0d0 <HAL_RCC_ClockConfig+0x364>)
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b0aa:	4b0a      	ldr	r3, [pc, #40]	; (800b0d4 <HAL_RCC_ClockConfig+0x368>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fa fc64 	bl	800597c <HAL_InitTick>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	58024400 	.word	0x58024400
 800b0c8:	08014070 	.word	0x08014070
 800b0cc:	24000034 	.word	0x24000034
 800b0d0:	24000030 	.word	0x24000030
 800b0d4:	24000038 	.word	0x24000038

0800b0d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b089      	sub	sp, #36	; 0x24
 800b0dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0de:	4bb3      	ldr	r3, [pc, #716]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0e6:	2b18      	cmp	r3, #24
 800b0e8:	f200 8155 	bhi.w	800b396 <HAL_RCC_GetSysClockFreq+0x2be>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b159 	.word	0x0800b159
 800b0f8:	0800b397 	.word	0x0800b397
 800b0fc:	0800b397 	.word	0x0800b397
 800b100:	0800b397 	.word	0x0800b397
 800b104:	0800b397 	.word	0x0800b397
 800b108:	0800b397 	.word	0x0800b397
 800b10c:	0800b397 	.word	0x0800b397
 800b110:	0800b397 	.word	0x0800b397
 800b114:	0800b17f 	.word	0x0800b17f
 800b118:	0800b397 	.word	0x0800b397
 800b11c:	0800b397 	.word	0x0800b397
 800b120:	0800b397 	.word	0x0800b397
 800b124:	0800b397 	.word	0x0800b397
 800b128:	0800b397 	.word	0x0800b397
 800b12c:	0800b397 	.word	0x0800b397
 800b130:	0800b397 	.word	0x0800b397
 800b134:	0800b185 	.word	0x0800b185
 800b138:	0800b397 	.word	0x0800b397
 800b13c:	0800b397 	.word	0x0800b397
 800b140:	0800b397 	.word	0x0800b397
 800b144:	0800b397 	.word	0x0800b397
 800b148:	0800b397 	.word	0x0800b397
 800b14c:	0800b397 	.word	0x0800b397
 800b150:	0800b397 	.word	0x0800b397
 800b154:	0800b18b 	.word	0x0800b18b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b158:	4b94      	ldr	r3, [pc, #592]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d009      	beq.n	800b178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b164:	4b91      	ldr	r3, [pc, #580]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a90      	ldr	r2, [pc, #576]	; (800b3b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b176:	e111      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b178:	4b8d      	ldr	r3, [pc, #564]	; (800b3b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b17a:	61bb      	str	r3, [r7, #24]
      break;
 800b17c:	e10e      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b17e:	4b8d      	ldr	r3, [pc, #564]	; (800b3b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b180:	61bb      	str	r3, [r7, #24]
      break;
 800b182:	e10b      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b184:	4b8c      	ldr	r3, [pc, #560]	; (800b3b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b186:	61bb      	str	r3, [r7, #24]
      break;
 800b188:	e108      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b18a:	4b88      	ldr	r3, [pc, #544]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b194:	4b85      	ldr	r3, [pc, #532]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	091b      	lsrs	r3, r3, #4
 800b19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b19e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1a0:	4b82      	ldr	r3, [pc, #520]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1aa:	4b80      	ldr	r3, [pc, #512]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 80e1 	beq.w	800b390 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	f000 8083 	beq.w	800b2dc <HAL_RCC_GetSysClockFreq+0x204>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	f200 80a1 	bhi.w	800b320 <HAL_RCC_GetSysClockFreq+0x248>
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <HAL_RCC_GetSysClockFreq+0x114>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d056      	beq.n	800b298 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b1ea:	e099      	b.n	800b320 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ec:	4b6f      	ldr	r3, [pc, #444]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02d      	beq.n	800b254 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f8:	4b6c      	ldr	r3, [pc, #432]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	08db      	lsrs	r3, r3, #3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	4a6b      	ldr	r2, [pc, #428]	; (800b3b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b204:	fa22 f303 	lsr.w	r3, r2, r3
 800b208:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b222:	4b62      	ldr	r3, [pc, #392]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b232:	ed97 6a02 	vldr	s12, [r7, #8]
 800b236:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b3bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b252:	e087      	b.n	800b364 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b3c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b266:	4b51      	ldr	r3, [pc, #324]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b276:	ed97 6a02 	vldr	s12, [r7, #8]
 800b27a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b3bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b296:	e065      	b.n	800b364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b3c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2aa:	4b40      	ldr	r3, [pc, #256]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b3bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2da:	e043      	b.n	800b364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b3c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ee:	4b2f      	ldr	r3, [pc, #188]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b31e:	e021      	b.n	800b364 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b3c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b332:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b342:	ed97 6a02 	vldr	s12, [r7, #8]
 800b346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b3bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b362:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b364:	4b11      	ldr	r3, [pc, #68]	; (800b3ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b368:	0a5b      	lsrs	r3, r3, #9
 800b36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b36e:	3301      	adds	r3, #1
 800b370:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	ee07 3a90 	vmov	s15, r3
 800b378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b37c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b388:	ee17 3a90 	vmov	r3, s15
 800b38c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b38e:	e005      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	61bb      	str	r3, [r7, #24]
      break;
 800b394:	e002      	b.n	800b39c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b396:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b398:	61bb      	str	r3, [r7, #24]
      break;
 800b39a:	bf00      	nop
  }

  return sysclockfreq;
 800b39c:	69bb      	ldr	r3, [r7, #24]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3724      	adds	r7, #36	; 0x24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	58024400 	.word	0x58024400
 800b3b0:	03d09000 	.word	0x03d09000
 800b3b4:	003d0900 	.word	0x003d0900
 800b3b8:	017d7840 	.word	0x017d7840
 800b3bc:	46000000 	.word	0x46000000
 800b3c0:	4c742400 	.word	0x4c742400
 800b3c4:	4a742400 	.word	0x4a742400
 800b3c8:	4bbebc20 	.word	0x4bbebc20

0800b3cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3d2:	f7ff fe81 	bl	800b0d8 <HAL_RCC_GetSysClockFreq>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	4b10      	ldr	r3, [pc, #64]	; (800b41c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	0a1b      	lsrs	r3, r3, #8
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	490f      	ldr	r1, [pc, #60]	; (800b420 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3e4:	5ccb      	ldrb	r3, [r1, r3]
 800b3e6:	f003 031f 	and.w	r3, r3, #31
 800b3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	4a09      	ldr	r2, [pc, #36]	; (800b420 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3fa:	5cd3      	ldrb	r3, [r2, r3]
 800b3fc:	f003 031f 	and.w	r3, r3, #31
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	fa22 f303 	lsr.w	r3, r2, r3
 800b406:	4a07      	ldr	r2, [pc, #28]	; (800b424 <HAL_RCC_GetHCLKFreq+0x58>)
 800b408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b40a:	4a07      	ldr	r2, [pc, #28]	; (800b428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b410:	4b04      	ldr	r3, [pc, #16]	; (800b424 <HAL_RCC_GetHCLKFreq+0x58>)
 800b412:	681b      	ldr	r3, [r3, #0]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	58024400 	.word	0x58024400
 800b420:	08014070 	.word	0x08014070
 800b424:	24000034 	.word	0x24000034
 800b428:	24000030 	.word	0x24000030

0800b42c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b430:	f7ff ffcc 	bl	800b3cc <HAL_RCC_GetHCLKFreq>
 800b434:	4602      	mov	r2, r0
 800b436:	4b06      	ldr	r3, [pc, #24]	; (800b450 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	091b      	lsrs	r3, r3, #4
 800b43c:	f003 0307 	and.w	r3, r3, #7
 800b440:	4904      	ldr	r1, [pc, #16]	; (800b454 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b442:	5ccb      	ldrb	r3, [r1, r3]
 800b444:	f003 031f 	and.w	r3, r3, #31
 800b448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	58024400 	.word	0x58024400
 800b454:	08014070 	.word	0x08014070

0800b458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b45c:	f7ff ffb6 	bl	800b3cc <HAL_RCC_GetHCLKFreq>
 800b460:	4602      	mov	r2, r0
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	0a1b      	lsrs	r3, r3, #8
 800b468:	f003 0307 	and.w	r3, r3, #7
 800b46c:	4904      	ldr	r1, [pc, #16]	; (800b480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b46e:	5ccb      	ldrb	r3, [r1, r3]
 800b470:	f003 031f 	and.w	r3, r3, #31
 800b474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b478:	4618      	mov	r0, r3
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	58024400 	.word	0x58024400
 800b480:	08014070 	.word	0x08014070

0800b484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b488:	b0ca      	sub	sp, #296	; 0x128
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b496:	2300      	movs	r3, #0
 800b498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b4a8:	2500      	movs	r5, #0
 800b4aa:	ea54 0305 	orrs.w	r3, r4, r5
 800b4ae:	d049      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4ba:	d02f      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b4bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4c0:	d828      	bhi.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4c6:	d01a      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4cc:	d822      	bhi.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d003      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4d6:	d007      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b4d8:	e01c      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4da:	4bb8      	ldr	r3, [pc, #736]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4de:	4ab7      	ldr	r2, [pc, #732]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4e6:	e01a      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f002 fb61 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4fc:	e00f      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b502:	3328      	adds	r3, #40	; 0x28
 800b504:	2102      	movs	r1, #2
 800b506:	4618      	mov	r0, r3
 800b508:	f002 fc08 	bl	800dd1c <RCCEx_PLL3_Config>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b512:	e004      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b51a:	e000      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b51c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10a      	bne.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b526:	4ba5      	ldr	r3, [pc, #660]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b534:	4aa1      	ldr	r2, [pc, #644]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b536:	430b      	orrs	r3, r1
 800b538:	6513      	str	r3, [r2, #80]	; 0x50
 800b53a:	e003      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b550:	f04f 0900 	mov.w	r9, #0
 800b554:	ea58 0309 	orrs.w	r3, r8, r9
 800b558:	d047      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b560:	2b04      	cmp	r3, #4
 800b562:	d82a      	bhi.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b581 	.word	0x0800b581
 800b570:	0800b58f 	.word	0x0800b58f
 800b574:	0800b5a5 	.word	0x0800b5a5
 800b578:	0800b5c3 	.word	0x0800b5c3
 800b57c:	0800b5c3 	.word	0x0800b5c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b580:	4b8e      	ldr	r3, [pc, #568]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	4a8d      	ldr	r2, [pc, #564]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b58c:	e01a      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b592:	3308      	adds	r3, #8
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f002 fb0e 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5a2:	e00f      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a8:	3328      	adds	r3, #40	; 0x28
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 fbb5 	bl	800dd1c <RCCEx_PLL3_Config>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5b8:	e004      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5c0:	e000      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5cc:	4b7b      	ldr	r3, [pc, #492]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d0:	f023 0107 	bic.w	r1, r3, #7
 800b5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5da:	4a78      	ldr	r2, [pc, #480]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	6513      	str	r3, [r2, #80]	; 0x50
 800b5e0:	e003      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b5f6:	f04f 0b00 	mov.w	fp, #0
 800b5fa:	ea5a 030b 	orrs.w	r3, sl, fp
 800b5fe:	d04c      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60a:	d030      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b610:	d829      	bhi.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b612:	2bc0      	cmp	r3, #192	; 0xc0
 800b614:	d02d      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b616:	2bc0      	cmp	r3, #192	; 0xc0
 800b618:	d825      	bhi.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b61a:	2b80      	cmp	r3, #128	; 0x80
 800b61c:	d018      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b61e:	2b80      	cmp	r3, #128	; 0x80
 800b620:	d821      	bhi.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b626:	2b40      	cmp	r3, #64	; 0x40
 800b628:	d007      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b62a:	e01c      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b62c:	4b63      	ldr	r3, [pc, #396]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	4a62      	ldr	r2, [pc, #392]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b638:	e01c      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	3308      	adds	r3, #8
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f002 fab8 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b648:	4603      	mov	r3, r0
 800b64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b64e:	e011      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b654:	3328      	adds	r3, #40	; 0x28
 800b656:	2100      	movs	r1, #0
 800b658:	4618      	mov	r0, r3
 800b65a:	f002 fb5f 	bl	800dd1c <RCCEx_PLL3_Config>
 800b65e:	4603      	mov	r3, r0
 800b660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b664:	e006      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b66c:	e002      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b66e:	bf00      	nop
 800b670:	e000      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b67c:	4b4f      	ldr	r3, [pc, #316]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b680:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b68a:	4a4c      	ldr	r2, [pc, #304]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b68c:	430b      	orrs	r3, r1
 800b68e:	6513      	str	r3, [r2, #80]	; 0x50
 800b690:	e003      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b6a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b6b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	d053      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b6c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6c6:	d035      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b6c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6cc:	d82e      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b6ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6d2:	d031      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b6d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6d8:	d828      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b6da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6de:	d01a      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b6e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6e4:	d822      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b6ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ee:	d007      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b6f0:	e01c      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6f2:	4b32      	ldr	r3, [pc, #200]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	4a31      	ldr	r2, [pc, #196]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6fe:	e01c      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b704:	3308      	adds	r3, #8
 800b706:	2100      	movs	r1, #0
 800b708:	4618      	mov	r0, r3
 800b70a:	f002 fa55 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b70e:	4603      	mov	r3, r0
 800b710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b714:	e011      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71a:	3328      	adds	r3, #40	; 0x28
 800b71c:	2100      	movs	r1, #0
 800b71e:	4618      	mov	r0, r3
 800b720:	f002 fafc 	bl	800dd1c <RCCEx_PLL3_Config>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b72a:	e006      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b732:	e002      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10b      	bne.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b742:	4b1e      	ldr	r3, [pc, #120]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b746:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b752:	4a1a      	ldr	r2, [pc, #104]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b754:	430b      	orrs	r3, r1
 800b756:	6593      	str	r3, [r2, #88]	; 0x58
 800b758:	e003      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b75e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b76e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b772:	2300      	movs	r3, #0
 800b774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b778:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b77c:	460b      	mov	r3, r1
 800b77e:	4313      	orrs	r3, r2
 800b780:	d056      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b78a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b78e:	d038      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b794:	d831      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b79a:	d034      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b79c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7a0:	d82b      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b7a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7a6:	d01d      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b7a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ac:	d825      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d006      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b7b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b7b6:	d00a      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b7b8:	e01f      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b7ba:	bf00      	nop
 800b7bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c0:	4ba2      	ldr	r3, [pc, #648]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	4aa1      	ldr	r2, [pc, #644]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7cc:	e01c      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f002 f9ee 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b7e2:	e011      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e8:	3328      	adds	r3, #40	; 0x28
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f002 fa95 	bl	800dd1c <RCCEx_PLL3_Config>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7f8:	e006      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b800:	e002      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b802:	bf00      	nop
 800b804:	e000      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b810:	4b8e      	ldr	r3, [pc, #568]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b814:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b820:	4a8a      	ldr	r2, [pc, #552]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b822:	430b      	orrs	r3, r1
 800b824:	6593      	str	r3, [r2, #88]	; 0x58
 800b826:	e003      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b82c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b83c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b846:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d03a      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b856:	2b30      	cmp	r3, #48	; 0x30
 800b858:	d01f      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b85a:	2b30      	cmp	r3, #48	; 0x30
 800b85c:	d819      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d00c      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b862:	2b20      	cmp	r3, #32
 800b864:	d815      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d019      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b86a:	2b10      	cmp	r3, #16
 800b86c:	d111      	bne.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b86e:	4b77      	ldr	r3, [pc, #476]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b872:	4a76      	ldr	r2, [pc, #472]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b87a:	e011      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b880:	3308      	adds	r3, #8
 800b882:	2102      	movs	r1, #2
 800b884:	4618      	mov	r0, r3
 800b886:	f002 f997 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b890:	e006      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b898:	e002      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10a      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b8a8:	4b68      	ldr	r3, [pc, #416]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b6:	4a65      	ldr	r2, [pc, #404]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8bc:	e003      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b8d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	d051      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f0:	d035      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b8f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f6:	d82e      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b8f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8fc:	d031      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b8fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b902:	d828      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b908:	d01a      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b90a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b90e:	d822      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b918:	d007      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b91a:	e01c      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b91c:	4b4b      	ldr	r3, [pc, #300]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	4a4a      	ldr	r2, [pc, #296]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b928:	e01c      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	3308      	adds	r3, #8
 800b930:	2100      	movs	r1, #0
 800b932:	4618      	mov	r0, r3
 800b934:	f002 f940 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b938:	4603      	mov	r3, r0
 800b93a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b93e:	e011      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b944:	3328      	adds	r3, #40	; 0x28
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f002 f9e7 	bl	800dd1c <RCCEx_PLL3_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b954:	e006      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b95c:	e002      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b95e:	bf00      	nop
 800b960:	e000      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b962:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b96c:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b970:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b97a:	4a34      	ldr	r2, [pc, #208]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b97c:	430b      	orrs	r3, r1
 800b97e:	6513      	str	r3, [r2, #80]	; 0x50
 800b980:	e003      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b99a:	2300      	movs	r3, #0
 800b99c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d056      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9b4:	d033      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b9b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9ba:	d82c      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9c0:	d02f      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b9c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9c6:	d826      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9cc:	d02b      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b9ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9d2:	d820      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9d8:	d012      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b9da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9de:	d81a      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d022      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e8:	d115      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f002 f8e0 	bl	800dbb8 <RCCEx_PLL2_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b9fe:	e015      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba04:	3328      	adds	r3, #40	; 0x28
 800ba06:	2101      	movs	r1, #1
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f002 f987 	bl	800dd1c <RCCEx_PLL3_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba14:	e00a      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba1c:	e006      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ba1e:	bf00      	nop
 800ba20:	e004      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ba22:	bf00      	nop
 800ba24:	e002      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ba26:	bf00      	nop
 800ba28:	e000      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ba2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10d      	bne.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ba3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba42:	4a02      	ldr	r2, [pc, #8]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba44:	430b      	orrs	r3, r1
 800ba46:	6513      	str	r3, [r2, #80]	; 0x50
 800ba48:	e006      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ba4a:	bf00      	nop
 800ba4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ba64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4313      	orrs	r3, r2
 800ba76:	d055      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ba78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba84:	d033      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ba86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba8a:	d82c      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba90:	d02f      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ba92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba96:	d826      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba9c:	d02b      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ba9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baa2:	d820      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800baa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa8:	d012      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800baaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baae:	d81a      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d022      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab8:	d115      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800babe:	3308      	adds	r3, #8
 800bac0:	2101      	movs	r1, #1
 800bac2:	4618      	mov	r0, r3
 800bac4:	f002 f878 	bl	800dbb8 <RCCEx_PLL2_Config>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bace:	e015      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad4:	3328      	adds	r3, #40	; 0x28
 800bad6:	2101      	movs	r1, #1
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 f91f 	bl	800dd1c <RCCEx_PLL3_Config>
 800bade:	4603      	mov	r3, r0
 800bae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bae4:	e00a      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baec:	e006      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800baee:	bf00      	nop
 800baf0:	e004      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800baf2:	bf00      	nop
 800baf4:	e002      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800baf6:	bf00      	nop
 800baf8:	e000      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bafa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10b      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb04:	4ba3      	ldr	r3, [pc, #652]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb08:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb14:	4a9f      	ldr	r2, [pc, #636]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6593      	str	r3, [r2, #88]	; 0x58
 800bb1a:	e003      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bb30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	d037      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4e:	d00e      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bb50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb54:	d816      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d018      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800bb5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb5e:	d111      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb60:	4b8c      	ldr	r3, [pc, #560]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb64:	4a8b      	ldr	r2, [pc, #556]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb6c:	e00f      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	3308      	adds	r3, #8
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f002 f81e 	bl	800dbb8 <RCCEx_PLL2_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb82:	e004      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800bb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb96:	4b7f      	ldr	r3, [pc, #508]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	4a7b      	ldr	r2, [pc, #492]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bba6:	430b      	orrs	r3, r1
 800bba8:	6513      	str	r3, [r2, #80]	; 0x50
 800bbaa:	e003      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bbc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d039      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d81c      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800bbde:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc21 	.word	0x0800bc21
 800bbe8:	0800bbf5 	.word	0x0800bbf5
 800bbec:	0800bc03 	.word	0x0800bc03
 800bbf0:	0800bc21 	.word	0x0800bc21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf4:	4b67      	ldr	r3, [pc, #412]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	4a66      	ldr	r2, [pc, #408]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3308      	adds	r3, #8
 800bc08:	2102      	movs	r1, #2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 ffd4 	bl	800dbb8 <RCCEx_PLL2_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc2a:	4b5a      	ldr	r3, [pc, #360]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc2e:	f023 0103 	bic.w	r1, r3, #3
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc38:	4a56      	ldr	r2, [pc, #344]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc3e:	e003      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bc54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc62:	460b      	mov	r3, r1
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f000 809f 	beq.w	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc6a:	4b4b      	ldr	r3, [pc, #300]	; (800bd98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a4a      	ldr	r2, [pc, #296]	; (800bd98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc76:	f7f9 fecb 	bl	8005a10 <HAL_GetTick>
 800bc7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc7e:	e00b      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc80:	f7f9 fec6 	bl	8005a10 <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	2b64      	cmp	r3, #100	; 0x64
 800bc8e:	d903      	bls.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc96:	e005      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc98:	4b3f      	ldr	r3, [pc, #252]	; (800bd98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0ed      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d179      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bcac:	4b39      	ldr	r3, [pc, #228]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcb8:	4053      	eors	r3, r2
 800bcba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d015      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bcc2:	4b34      	ldr	r3, [pc, #208]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bcce:	4b31      	ldr	r3, [pc, #196]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd2:	4a30      	ldr	r2, [pc, #192]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bcda:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	4a2d      	ldr	r2, [pc, #180]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bce4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bce6:	4a2b      	ldr	r2, [pc, #172]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bcec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcfa:	d118      	bne.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcfc:	f7f9 fe88 	bl	8005a10 <HAL_GetTick>
 800bd00:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd04:	e00d      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd06:	f7f9 fe83 	bl	8005a10 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bd10:	1ad2      	subs	r2, r2, r3
 800bd12:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d903      	bls.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bd20:	e005      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd22:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd26:	f003 0302 	and.w	r3, r3, #2
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d0eb      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bd2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d129      	bne.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd46:	d10e      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bd48:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd58:	091a      	lsrs	r2, r3, #4
 800bd5a:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	4a0d      	ldr	r2, [pc, #52]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6113      	str	r3, [r2, #16]
 800bd64:	e005      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	4a0a      	ldr	r2, [pc, #40]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd70:	6113      	str	r3, [r2, #16]
 800bd72:	4b08      	ldr	r3, [pc, #32]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd82:	4a04      	ldr	r2, [pc, #16]	; (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd84:	430b      	orrs	r3, r1
 800bd86:	6713      	str	r3, [r2, #112]	; 0x70
 800bd88:	e00e      	b.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bd92:	e009      	b.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bd94:	58024400 	.word	0x58024400
 800bd98:	58024800 	.word	0x58024800
 800bd9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bda4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f002 0301 	and.w	r3, r2, #1
 800bdb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	f000 8089 	beq.w	800bedc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd0:	2b28      	cmp	r3, #40	; 0x28
 800bdd2:	d86b      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bdd4:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdda:	bf00      	nop
 800bddc:	0800beb5 	.word	0x0800beb5
 800bde0:	0800bead 	.word	0x0800bead
 800bde4:	0800bead 	.word	0x0800bead
 800bde8:	0800bead 	.word	0x0800bead
 800bdec:	0800bead 	.word	0x0800bead
 800bdf0:	0800bead 	.word	0x0800bead
 800bdf4:	0800bead 	.word	0x0800bead
 800bdf8:	0800bead 	.word	0x0800bead
 800bdfc:	0800be81 	.word	0x0800be81
 800be00:	0800bead 	.word	0x0800bead
 800be04:	0800bead 	.word	0x0800bead
 800be08:	0800bead 	.word	0x0800bead
 800be0c:	0800bead 	.word	0x0800bead
 800be10:	0800bead 	.word	0x0800bead
 800be14:	0800bead 	.word	0x0800bead
 800be18:	0800bead 	.word	0x0800bead
 800be1c:	0800be97 	.word	0x0800be97
 800be20:	0800bead 	.word	0x0800bead
 800be24:	0800bead 	.word	0x0800bead
 800be28:	0800bead 	.word	0x0800bead
 800be2c:	0800bead 	.word	0x0800bead
 800be30:	0800bead 	.word	0x0800bead
 800be34:	0800bead 	.word	0x0800bead
 800be38:	0800bead 	.word	0x0800bead
 800be3c:	0800beb5 	.word	0x0800beb5
 800be40:	0800bead 	.word	0x0800bead
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800bead 	.word	0x0800bead
 800be4c:	0800bead 	.word	0x0800bead
 800be50:	0800bead 	.word	0x0800bead
 800be54:	0800bead 	.word	0x0800bead
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800beb5 	.word	0x0800beb5
 800be60:	0800bead 	.word	0x0800bead
 800be64:	0800bead 	.word	0x0800bead
 800be68:	0800bead 	.word	0x0800bead
 800be6c:	0800bead 	.word	0x0800bead
 800be70:	0800bead 	.word	0x0800bead
 800be74:	0800bead 	.word	0x0800bead
 800be78:	0800bead 	.word	0x0800bead
 800be7c:	0800beb5 	.word	0x0800beb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	3308      	adds	r3, #8
 800be86:	2101      	movs	r1, #1
 800be88:	4618      	mov	r0, r3
 800be8a:	f001 fe95 	bl	800dbb8 <RCCEx_PLL2_Config>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be94:	e00f      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9a:	3328      	adds	r3, #40	; 0x28
 800be9c:	2101      	movs	r1, #1
 800be9e:	4618      	mov	r0, r3
 800bea0:	f001 ff3c 	bl	800dd1c <RCCEx_PLL3_Config>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800beaa:	e004      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beb2:	e000      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800beb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bebe:	4bbf      	ldr	r3, [pc, #764]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800becc:	4abb      	ldr	r2, [pc, #748]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bece:	430b      	orrs	r3, r1
 800bed0:	6553      	str	r3, [r2, #84]	; 0x54
 800bed2:	e003      	b.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bed8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f002 0302 	and.w	r3, r2, #2
 800bee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800beec:	2300      	movs	r3, #0
 800beee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bef2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bef6:	460b      	mov	r3, r1
 800bef8:	4313      	orrs	r3, r2
 800befa:	d041      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800befc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d824      	bhi.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf25 	.word	0x0800bf25
 800bf14:	0800bf3b 	.word	0x0800bf3b
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf59 	.word	0x0800bf59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf28:	3308      	adds	r3, #8
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 fe43 	bl	800dbb8 <RCCEx_PLL2_Config>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf38:	e00f      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	3328      	adds	r3, #40	; 0x28
 800bf40:	2101      	movs	r1, #1
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 feea 	bl	800dd1c <RCCEx_PLL3_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf4e:	e004      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf56:	e000      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bf58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bf62:	4b96      	ldr	r3, [pc, #600]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf66:	f023 0107 	bic.w	r1, r3, #7
 800bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf70:	4a92      	ldr	r2, [pc, #584]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf72:	430b      	orrs	r3, r1
 800bf74:	6553      	str	r3, [r2, #84]	; 0x54
 800bf76:	e003      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f002 0304 	and.w	r3, r2, #4
 800bf8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	d044      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bfa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfa8:	2b05      	cmp	r3, #5
 800bfaa:	d825      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bfac:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb2:	bf00      	nop
 800bfb4:	0800c001 	.word	0x0800c001
 800bfb8:	0800bfcd 	.word	0x0800bfcd
 800bfbc:	0800bfe3 	.word	0x0800bfe3
 800bfc0:	0800c001 	.word	0x0800c001
 800bfc4:	0800c001 	.word	0x0800c001
 800bfc8:	0800c001 	.word	0x0800c001
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 fdef 	bl	800dbb8 <RCCEx_PLL2_Config>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bfe0:	e00f      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	3328      	adds	r3, #40	; 0x28
 800bfe8:	2101      	movs	r1, #1
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fe96 	bl	800dd1c <RCCEx_PLL3_Config>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bff6:	e004      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bffe:	e000      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c000:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c00a:	4b6c      	ldr	r3, [pc, #432]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00e:	f023 0107 	bic.w	r1, r3, #7
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c01a:	4a68      	ldr	r2, [pc, #416]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c01c:	430b      	orrs	r3, r1
 800c01e:	6593      	str	r3, [r2, #88]	; 0x58
 800c020:	e003      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f002 0320 	and.w	r3, r2, #32
 800c036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c03a:	2300      	movs	r3, #0
 800c03c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c044:	460b      	mov	r3, r1
 800c046:	4313      	orrs	r3, r2
 800c048:	d055      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c056:	d033      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c05c:	d82c      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c062:	d02f      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c068:	d826      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c06a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c06e:	d02b      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c074:	d820      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c07a:	d012      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c080:	d81a      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c082:	2b00      	cmp	r3, #0
 800c084:	d022      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c08a:	d115      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c090:	3308      	adds	r3, #8
 800c092:	2100      	movs	r1, #0
 800c094:	4618      	mov	r0, r3
 800c096:	f001 fd8f 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0a0:	e015      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	3328      	adds	r3, #40	; 0x28
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 fe36 	bl	800dd1c <RCCEx_PLL3_Config>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0b6:	e00a      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0be:	e006      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c0c0:	bf00      	nop
 800c0c2:	e004      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c0c4:	bf00      	nop
 800c0c6:	e002      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c0c8:	bf00      	nop
 800c0ca:	e000      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c0cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10b      	bne.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e6:	4a35      	ldr	r2, [pc, #212]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	6553      	str	r3, [r2, #84]	; 0x54
 800c0ec:	e003      	b.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c106:	2300      	movs	r3, #0
 800c108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c10c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c110:	460b      	mov	r3, r1
 800c112:	4313      	orrs	r3, r2
 800c114:	d058      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c11e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c122:	d033      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c124:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c128:	d82c      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c12e:	d02f      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c134:	d826      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c13a:	d02b      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c13c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c140:	d820      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c146:	d012      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c14c:	d81a      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d022      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c156:	d115      	bne.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	3308      	adds	r3, #8
 800c15e:	2100      	movs	r1, #0
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fd29 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c16c:	e015      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c172:	3328      	adds	r3, #40	; 0x28
 800c174:	2102      	movs	r1, #2
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fdd0 	bl	800dd1c <RCCEx_PLL3_Config>
 800c17c:	4603      	mov	r3, r0
 800c17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c182:	e00a      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c18a:	e006      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c18c:	bf00      	nop
 800c18e:	e004      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c190:	bf00      	nop
 800c192:	e002      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c194:	bf00      	nop
 800c196:	e000      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c19a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10e      	bne.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1a2:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1b2:	4a02      	ldr	r2, [pc, #8]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	6593      	str	r3, [r2, #88]	; 0x58
 800c1b8:	e006      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c1ba:	bf00      	nop
 800c1bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c1d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	d055      	beq.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1f4:	d033      	beq.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c1f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1fa:	d82c      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c200:	d02f      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c206:	d826      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c208:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c20c:	d02b      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c20e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c212:	d820      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c218:	d012      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c21a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c21e:	d81a      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c220:	2b00      	cmp	r3, #0
 800c222:	d022      	beq.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c228:	d115      	bne.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22e:	3308      	adds	r3, #8
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f001 fcc0 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c238:	4603      	mov	r3, r0
 800c23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c23e:	e015      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c244:	3328      	adds	r3, #40	; 0x28
 800c246:	2102      	movs	r1, #2
 800c248:	4618      	mov	r0, r3
 800c24a:	f001 fd67 	bl	800dd1c <RCCEx_PLL3_Config>
 800c24e:	4603      	mov	r3, r0
 800c250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c254:	e00a      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c25c:	e006      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c25e:	bf00      	nop
 800c260:	e004      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c262:	bf00      	nop
 800c264:	e002      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c266:	bf00      	nop
 800c268:	e000      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c26a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c26c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10b      	bne.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c274:	4ba1      	ldr	r3, [pc, #644]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c278:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c284:	4a9d      	ldr	r2, [pc, #628]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c286:	430b      	orrs	r3, r1
 800c288:	6593      	str	r3, [r2, #88]	; 0x58
 800c28a:	e003      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c28c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	f002 0308 	and.w	r3, r2, #8
 800c2a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	d01e      	beq.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c0:	d10c      	bne.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c6:	3328      	adds	r3, #40	; 0x28
 800c2c8:	2102      	movs	r1, #2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 fd26 	bl	800dd1c <RCCEx_PLL3_Config>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2dc:	4b87      	ldr	r3, [pc, #540]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ec:	4a83      	ldr	r2, [pc, #524]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2ee:	430b      	orrs	r3, r1
 800c2f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	f002 0310 	and.w	r3, r2, #16
 800c2fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c302:	2300      	movs	r3, #0
 800c304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c308:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c30c:	460b      	mov	r3, r1
 800c30e:	4313      	orrs	r3, r2
 800c310:	d01e      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c31a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c31e:	d10c      	bne.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c324:	3328      	adds	r3, #40	; 0x28
 800c326:	2102      	movs	r1, #2
 800c328:	4618      	mov	r0, r3
 800c32a:	f001 fcf7 	bl	800dd1c <RCCEx_PLL3_Config>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c33a:	4b70      	ldr	r3, [pc, #448]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c34a:	4a6c      	ldr	r2, [pc, #432]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c34c:	430b      	orrs	r3, r1
 800c34e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c35c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c360:	2300      	movs	r3, #0
 800c362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c366:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c36a:	460b      	mov	r3, r1
 800c36c:	4313      	orrs	r3, r2
 800c36e:	d03e      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c37c:	d022      	beq.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c37e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c382:	d81b      	bhi.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d003      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38c:	d00b      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c38e:	e015      	b.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c394:	3308      	adds	r3, #8
 800c396:	2100      	movs	r1, #0
 800c398:	4618      	mov	r0, r3
 800c39a:	f001 fc0d 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3a4:	e00f      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3aa:	3328      	adds	r3, #40	; 0x28
 800c3ac:	2102      	movs	r1, #2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 fcb4 	bl	800dd1c <RCCEx_PLL3_Config>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3ba:	e004      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c3c2:	e000      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c3c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10b      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3ce:	4b4b      	ldr	r3, [pc, #300]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3de:	4a47      	ldr	r2, [pc, #284]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3e0:	430b      	orrs	r3, r1
 800c3e2:	6593      	str	r3, [r2, #88]	; 0x58
 800c3e4:	e003      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c3fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c400:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d03b      	beq.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c416:	d01f      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c41c:	d818      	bhi.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c41e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c422:	d003      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c428:	d007      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c42a:	e011      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c42c:	4b33      	ldr	r3, [pc, #204]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	4a32      	ldr	r2, [pc, #200]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c438:	e00f      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43e:	3328      	adds	r3, #40	; 0x28
 800c440:	2101      	movs	r1, #1
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fc6a 	bl	800dd1c <RCCEx_PLL3_Config>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c44e:	e004      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c456:	e000      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10b      	bne.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c462:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c466:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c472:	4a22      	ldr	r2, [pc, #136]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c474:	430b      	orrs	r3, r1
 800c476:	6553      	str	r3, [r2, #84]	; 0x54
 800c478:	e003      	b.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c47e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c48e:	673b      	str	r3, [r7, #112]	; 0x70
 800c490:	2300      	movs	r3, #0
 800c492:	677b      	str	r3, [r7, #116]	; 0x74
 800c494:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c498:	460b      	mov	r3, r1
 800c49a:	4313      	orrs	r3, r2
 800c49c:	d034      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ac:	d007      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c4ae:	e011      	b.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4b0:	4b12      	ldr	r3, [pc, #72]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	4a11      	ldr	r2, [pc, #68]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4bc:	e00e      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fb76 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4d2:	e003      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10d      	bne.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f2:	4a02      	ldr	r2, [pc, #8]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4f8:	e006      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c4fa:	bf00      	nop
 800c4fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c514:	66bb      	str	r3, [r7, #104]	; 0x68
 800c516:	2300      	movs	r3, #0
 800c518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c51a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c51e:	460b      	mov	r3, r1
 800c520:	4313      	orrs	r3, r2
 800c522:	d00c      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c528:	3328      	adds	r3, #40	; 0x28
 800c52a:	2102      	movs	r1, #2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f001 fbf5 	bl	800dd1c <RCCEx_PLL3_Config>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c54a:	663b      	str	r3, [r7, #96]	; 0x60
 800c54c:	2300      	movs	r3, #0
 800c54e:	667b      	str	r3, [r7, #100]	; 0x64
 800c550:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c554:	460b      	mov	r3, r1
 800c556:	4313      	orrs	r3, r2
 800c558:	d038      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c566:	d018      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c56c:	d811      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c572:	d014      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c578:	d80b      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d011      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	d106      	bne.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c584:	4bc3      	ldr	r3, [pc, #780]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c588:	4ac2      	ldr	r2, [pc, #776]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c58a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c58e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c590:	e008      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c598:	e004      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c59a:	bf00      	nop
 800c59c:	e002      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c59e:	bf00      	nop
 800c5a0:	e000      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5ac:	4bb9      	ldr	r3, [pc, #740]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5bc:	4ab5      	ldr	r2, [pc, #724]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	6553      	str	r3, [r2, #84]	; 0x54
 800c5c2:	e003      	b.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c5d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5da:	2300      	movs	r3, #0
 800c5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	d009      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c5e8:	4baa      	ldr	r3, [pc, #680]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f6:	4aa7      	ldr	r2, [pc, #668]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5f8:	430b      	orrs	r3, r1
 800c5fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c608:	653b      	str	r3, [r7, #80]	; 0x50
 800c60a:	2300      	movs	r3, #0
 800c60c:	657b      	str	r3, [r7, #84]	; 0x54
 800c60e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c612:	460b      	mov	r3, r1
 800c614:	4313      	orrs	r3, r2
 800c616:	d00a      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c618:	4b9e      	ldr	r3, [pc, #632]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c624:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c628:	4a9a      	ldr	r2, [pc, #616]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c62a:	430b      	orrs	r3, r1
 800c62c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c63a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c63c:	2300      	movs	r3, #0
 800c63e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c640:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c644:	460b      	mov	r3, r1
 800c646:	4313      	orrs	r3, r2
 800c648:	d009      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c64a:	4b92      	ldr	r3, [pc, #584]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c658:	4a8e      	ldr	r2, [pc, #568]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c65a:	430b      	orrs	r3, r1
 800c65c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c66a:	643b      	str	r3, [r7, #64]	; 0x40
 800c66c:	2300      	movs	r3, #0
 800c66e:	647b      	str	r3, [r7, #68]	; 0x44
 800c670:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c674:	460b      	mov	r3, r1
 800c676:	4313      	orrs	r3, r2
 800c678:	d00e      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c67a:	4b86      	ldr	r3, [pc, #536]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	4a85      	ldr	r2, [pc, #532]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c684:	6113      	str	r3, [r2, #16]
 800c686:	4b83      	ldr	r3, [pc, #524]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c688:	6919      	ldr	r1, [r3, #16]
 800c68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c692:	4a80      	ldr	r2, [pc, #512]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c694:	430b      	orrs	r3, r1
 800c696:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c6a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	d009      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c6b4:	4b77      	ldr	r3, [pc, #476]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c2:	4a74      	ldr	r2, [pc, #464]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6c4:	430b      	orrs	r3, r1
 800c6c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	d00a      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c6e4:	4b6b      	ldr	r3, [pc, #428]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f4:	4a67      	ldr	r2, [pc, #412]	; (800c894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6f6:	430b      	orrs	r3, r1
 800c6f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	2100      	movs	r1, #0
 800c704:	62b9      	str	r1, [r7, #40]	; 0x28
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c70c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c710:	460b      	mov	r3, r1
 800c712:	4313      	orrs	r3, r2
 800c714:	d011      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c71a:	3308      	adds	r3, #8
 800c71c:	2100      	movs	r1, #0
 800c71e:	4618      	mov	r0, r3
 800c720:	f001 fa4a 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	2100      	movs	r1, #0
 800c744:	6239      	str	r1, [r7, #32]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	627b      	str	r3, [r7, #36]	; 0x24
 800c74c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c750:	460b      	mov	r3, r1
 800c752:	4313      	orrs	r3, r2
 800c754:	d011      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c75a:	3308      	adds	r3, #8
 800c75c:	2101      	movs	r1, #1
 800c75e:	4618      	mov	r0, r3
 800c760:	f001 fa2a 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c764:	4603      	mov	r3, r0
 800c766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c76a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	2100      	movs	r1, #0
 800c784:	61b9      	str	r1, [r7, #24]
 800c786:	f003 0304 	and.w	r3, r3, #4
 800c78a:	61fb      	str	r3, [r7, #28]
 800c78c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c790:	460b      	mov	r3, r1
 800c792:	4313      	orrs	r3, r2
 800c794:	d011      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c79a:	3308      	adds	r3, #8
 800c79c:	2102      	movs	r1, #2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f001 fa0a 	bl	800dbb8 <RCCEx_PLL2_Config>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	6139      	str	r1, [r7, #16]
 800c7c6:	f003 0308 	and.w	r3, r3, #8
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	d011      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7da:	3328      	adds	r3, #40	; 0x28
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f001 fa9c 	bl	800dd1c <RCCEx_PLL3_Config>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c802:	2100      	movs	r1, #0
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	f003 0310 	and.w	r3, r3, #16
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c810:	460b      	mov	r3, r1
 800c812:	4313      	orrs	r3, r2
 800c814:	d011      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c81a:	3328      	adds	r3, #40	; 0x28
 800c81c:	2101      	movs	r1, #1
 800c81e:	4618      	mov	r0, r3
 800c820:	f001 fa7c 	bl	800dd1c <RCCEx_PLL3_Config>
 800c824:	4603      	mov	r3, r0
 800c826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	2100      	movs	r1, #0
 800c844:	6039      	str	r1, [r7, #0]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	607b      	str	r3, [r7, #4]
 800c84c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c850:	460b      	mov	r3, r1
 800c852:	4313      	orrs	r3, r2
 800c854:	d011      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c85a:	3328      	adds	r3, #40	; 0x28
 800c85c:	2102      	movs	r1, #2
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 fa5c 	bl	800dd1c <RCCEx_PLL3_Config>
 800c864:	4603      	mov	r3, r0
 800c866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c86a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c87a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	e000      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
}
 800c888:	4618      	mov	r0, r3
 800c88a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c88e:	46bd      	mov	sp, r7
 800c890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c894:	58024400 	.word	0x58024400

0800c898 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b090      	sub	sp, #64	; 0x40
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	f040 8094 	bne.w	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c8b0:	4b9e      	ldr	r3, [pc, #632]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b4:	f003 0307 	and.w	r3, r3, #7
 800c8b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	f200 8087 	bhi.w	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c8c2:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c8dd 	.word	0x0800c8dd
 800c8cc:	0800c905 	.word	0x0800c905
 800c8d0:	0800c92d 	.word	0x0800c92d
 800c8d4:	0800c9c9 	.word	0x0800c9c9
 800c8d8:	0800c955 	.word	0x0800c955
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8dc:	4b93      	ldr	r3, [pc, #588]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e8:	d108      	bne.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f001 f810 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f8:	f000 bd45 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c900:	f000 bd41 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c904:	4b89      	ldr	r3, [pc, #548]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c90c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c910:	d108      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c912:	f107 0318 	add.w	r3, r7, #24
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fd54 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c920:	f000 bd31 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	f000 bd2d 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c92c:	4b7f      	ldr	r3, [pc, #508]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c938:	d108      	bne.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c93a:	f107 030c 	add.w	r3, r7, #12
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fe94 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c948:	f000 bd1d 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c950:	f000 bd19 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c954:	4b75      	ldr	r3, [pc, #468]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c95c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c95e:	4b73      	ldr	r3, [pc, #460]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0304 	and.w	r3, r3, #4
 800c966:	2b04      	cmp	r3, #4
 800c968:	d10c      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c970:	4b6e      	ldr	r3, [pc, #440]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	08db      	lsrs	r3, r3, #3
 800c976:	f003 0303 	and.w	r3, r3, #3
 800c97a:	4a6d      	ldr	r2, [pc, #436]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c97c:	fa22 f303 	lsr.w	r3, r2, r3
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c982:	e01f      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c984:	4b69      	ldr	r3, [pc, #420]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c990:	d106      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c998:	d102      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c99a:	4b66      	ldr	r3, [pc, #408]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c99e:	e011      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9a0:	4b62      	ldr	r3, [pc, #392]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ac:	d106      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9b4:	d102      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9b6:	4b60      	ldr	r3, [pc, #384]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ba:	e003      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9c0:	f000 bce1 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9c4:	f000 bcdf 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9c8:	4b5c      	ldr	r3, [pc, #368]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9cc:	f000 bcdb 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d4:	f000 bcd7 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9dc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c9e0:	430b      	orrs	r3, r1
 800c9e2:	f040 80ad 	bne.w	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c9e6:	4b51      	ldr	r3, [pc, #324]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c9ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f6:	d056      	beq.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9fe:	f200 8090 	bhi.w	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	2bc0      	cmp	r3, #192	; 0xc0
 800ca06:	f000 8088 	beq.w	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	2bc0      	cmp	r3, #192	; 0xc0
 800ca0e:	f200 8088 	bhi.w	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	2b80      	cmp	r3, #128	; 0x80
 800ca16:	d032      	beq.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ca18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1a:	2b80      	cmp	r3, #128	; 0x80
 800ca1c:	f200 8081 	bhi.w	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	2b40      	cmp	r3, #64	; 0x40
 800ca2a:	d014      	beq.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ca2c:	e079      	b.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca2e:	4b3f      	ldr	r3, [pc, #252]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca3a:	d108      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 ff67 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca4a:	f000 bc9c 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca52:	f000 bc98 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca56:	4b35      	ldr	r3, [pc, #212]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca62:	d108      	bne.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca64:	f107 0318 	add.w	r3, r7, #24
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 fcab 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca72:	f000 bc88 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7a:	f000 bc84 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca7e:	4b2b      	ldr	r3, [pc, #172]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca8a:	d108      	bne.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca8c:	f107 030c 	add.w	r3, r7, #12
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fdeb 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca9a:	f000 bc74 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa2:	f000 bc70 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caa6:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800caa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cab0:	4b1e      	ldr	r3, [pc, #120]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 0304 	and.w	r3, r3, #4
 800cab8:	2b04      	cmp	r3, #4
 800caba:	d10c      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800cabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cac2:	4b1a      	ldr	r3, [pc, #104]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	08db      	lsrs	r3, r3, #3
 800cac8:	f003 0303 	and.w	r3, r3, #3
 800cacc:	4a18      	ldr	r2, [pc, #96]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cace:	fa22 f303 	lsr.w	r3, r2, r3
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad4:	e01f      	b.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cad6:	4b15      	ldr	r3, [pc, #84]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cae2:	d106      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800cae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caea:	d102      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caec:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf0:	e011      	b.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800caf2:	4b0e      	ldr	r3, [pc, #56]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cafa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cafe:	d106      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800cb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb06:	d102      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb08:	4b0b      	ldr	r3, [pc, #44]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb0c:	e003      	b.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb12:	f000 bc38 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb16:	f000 bc36 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb1a:	4b08      	ldr	r3, [pc, #32]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1e:	f000 bc32 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb26:	f000 bc2e 	b.w	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb2a:	bf00      	nop
 800cb2c:	58024400 	.word	0x58024400
 800cb30:	03d09000 	.word	0x03d09000
 800cb34:	003d0900 	.word	0x003d0900
 800cb38:	017d7840 	.word	0x017d7840
 800cb3c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	f040 809c 	bne.w	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cb4e:	4b9e      	ldr	r3, [pc, #632]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cb56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb5e:	d054      	beq.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb66:	f200 808b 	bhi.w	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb70:	f000 8083 	beq.w	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb7a:	f200 8081 	bhi.w	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb84:	d02f      	beq.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800cb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb8c:	d878      	bhi.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb9a:	d012      	beq.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cb9c:	e070      	b.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb9e:	4b8a      	ldr	r3, [pc, #552]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 feaf 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbba:	e3e4      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc0:	e3e1      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc2:	4b81      	ldr	r3, [pc, #516]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbce:	d107      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbd0:	f107 0318 	add.w	r3, r7, #24
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fbf5 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbde:	e3d2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe4:	e3cf      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe6:	4b78      	ldr	r3, [pc, #480]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf2:	d107      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf4:	f107 030c 	add.w	r3, r7, #12
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 fd37 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc02:	e3c0      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc08:	e3bd      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc0a:	4b6f      	ldr	r3, [pc, #444]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc14:	4b6c      	ldr	r3, [pc, #432]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d10c      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d109      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc26:	4b68      	ldr	r3, [pc, #416]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	08db      	lsrs	r3, r3, #3
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	4a66      	ldr	r2, [pc, #408]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cc32:	fa22 f303 	lsr.w	r3, r2, r3
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc38:	e01e      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc3a:	4b63      	ldr	r3, [pc, #396]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc46:	d106      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc4e:	d102      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc50:	4b5f      	ldr	r3, [pc, #380]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc54:	e010      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc56:	4b5c      	ldr	r3, [pc, #368]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc62:	d106      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc6a:	d102      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc6c:	4b59      	ldr	r3, [pc, #356]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc70:	e002      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc76:	e386      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc78:	e385      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc7a:	4b57      	ldr	r3, [pc, #348]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc7e:	e382      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc84:	e37f      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cc8e:	430b      	orrs	r3, r1
 800cc90:	f040 80a7 	bne.w	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc94:	4b4c      	ldr	r3, [pc, #304]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc98:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cca4:	d055      	beq.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccac:	f200 8096 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccb6:	f000 8084 	beq.w	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccc0:	f200 808c 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccca:	d030      	beq.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccd2:	f200 8083 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cce2:	d012      	beq.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800cce4:	e07a      	b.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cce6:	4b38      	ldr	r3, [pc, #224]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccf2:	d107      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fe0b 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd02:	e340      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd08:	e33d      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd0a:	4b2f      	ldr	r3, [pc, #188]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd16:	d107      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd18:	f107 0318 	add.w	r3, r7, #24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fb51 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd26:	e32e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e32b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd2e:	4b26      	ldr	r3, [pc, #152]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd3a:	d107      	bne.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd3c:	f107 030c 	add.w	r3, r7, #12
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 fc93 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd4a:	e31c      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd50:	e319      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd52:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd5c:	4b1a      	ldr	r3, [pc, #104]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0304 	and.w	r3, r3, #4
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d10c      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d109      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd6e:	4b16      	ldr	r3, [pc, #88]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	08db      	lsrs	r3, r3, #3
 800cd74:	f003 0303 	and.w	r3, r3, #3
 800cd78:	4a14      	ldr	r2, [pc, #80]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd80:	e01e      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd82:	4b11      	ldr	r3, [pc, #68]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd8e:	d106      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd96:	d102      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd98:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd9c:	e010      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd9e:	4b0a      	ldr	r3, [pc, #40]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cda6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdaa:	d106      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdb2:	d102      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdb4:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb8:	e002      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cdbe:	e2e2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdc0:	e2e1      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdc2:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc6:	e2de      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdc8:	58024400 	.word	0x58024400
 800cdcc:	03d09000 	.word	0x03d09000
 800cdd0:	003d0900 	.word	0x003d0900
 800cdd4:	017d7840 	.word	0x017d7840
 800cdd8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde0:	e2d1      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cdea:	430b      	orrs	r3, r1
 800cdec:	f040 809c 	bne.w	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cdf0:	4b93      	ldr	r3, [pc, #588]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cdf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce00:	d054      	beq.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce08:	f200 808b 	bhi.w	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce12:	f000 8083 	beq.w	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce1c:	f200 8081 	bhi.w	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce26:	d02f      	beq.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce2e:	d878      	bhi.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d004      	beq.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3c:	d012      	beq.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ce3e:	e070      	b.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce40:	4b7f      	ldr	r3, [pc, #508]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce4c:	d107      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 fd5e 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce5c:	e293      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce62:	e290      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce64:	4b76      	ldr	r3, [pc, #472]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce70:	d107      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce72:	f107 0318 	add.w	r3, r7, #24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 faa4 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce80:	e281      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce86:	e27e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce88:	4b6d      	ldr	r3, [pc, #436]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce94:	d107      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce96:	f107 030c 	add.w	r3, r7, #12
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fbe6 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea4:	e26f      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceaa:	e26c      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ceac:	4b64      	ldr	r3, [pc, #400]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ceae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ceb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ceb6:	4b62      	ldr	r3, [pc, #392]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d10c      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d109      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cec8:	4b5d      	ldr	r3, [pc, #372]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	08db      	lsrs	r3, r3, #3
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	4a5c      	ldr	r2, [pc, #368]	; (800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ced4:	fa22 f303 	lsr.w	r3, r2, r3
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceda:	e01e      	b.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cedc:	4b58      	ldr	r3, [pc, #352]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee8:	d106      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ceea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cef0:	d102      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cef2:	4b55      	ldr	r3, [pc, #340]	; (800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cef6:	e010      	b.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cef8:	4b51      	ldr	r3, [pc, #324]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf04:	d106      	bne.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf0c:	d102      	bne.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf0e:	4b4f      	ldr	r3, [pc, #316]	; (800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cf10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf12:	e002      	b.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf18:	e235      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf1a:	e234      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf1c:	4b4c      	ldr	r3, [pc, #304]	; (800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf20:	e231      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf26:	e22e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cf28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf2c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cf30:	430b      	orrs	r3, r1
 800cf32:	f040 808f 	bne.w	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf36:	4b42      	ldr	r3, [pc, #264]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cf3e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf46:	d06b      	beq.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf4e:	d874      	bhi.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf56:	d056      	beq.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf5e:	d86c      	bhi.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf66:	d03b      	beq.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf6e:	d864      	bhi.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf76:	d021      	beq.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf7e:	d85c      	bhi.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf8c:	d004      	beq.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cf8e:	e054      	b.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf90:	f7fe fa4c 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
 800cf94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf96:	e1f6      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf98:	4b29      	ldr	r3, [pc, #164]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfa4:	d107      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa6:	f107 0318 	add.w	r3, r7, #24
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fa0a 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb4:	e1e7      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfba:	e1e4      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfbc:	4b20      	ldr	r3, [pc, #128]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfc8:	d107      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fb4c 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd8:	e1d5      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfde:	e1d2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfe0:	4b17      	ldr	r3, [pc, #92]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b04      	cmp	r3, #4
 800cfea:	d109      	bne.n	800d000 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfec:	4b14      	ldr	r3, [pc, #80]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	08db      	lsrs	r3, r3, #3
 800cff2:	f003 0303 	and.w	r3, r3, #3
 800cff6:	4a13      	ldr	r2, [pc, #76]	; (800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cff8:	fa22 f303 	lsr.w	r3, r2, r3
 800cffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cffe:	e1c2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d004:	e1bf      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d006:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d012:	d102      	bne.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800d014:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d018:	e1b5      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01e:	e1b2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d02c:	d102      	bne.n	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800d02e:	4b07      	ldr	r3, [pc, #28]	; (800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d032:	e1a8      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d038:	e1a5      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03e:	e1a2      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d040:	58024400 	.word	0x58024400
 800d044:	03d09000 	.word	0x03d09000
 800d048:	003d0900 	.word	0x003d0900
 800d04c:	017d7840 	.word	0x017d7840
 800d050:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d058:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d05c:	430b      	orrs	r3, r1
 800d05e:	d173      	bne.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d060:	4b9c      	ldr	r3, [pc, #624]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d068:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d070:	d02f      	beq.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d078:	d863      	bhi.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800d07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800d080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d086:	d012      	beq.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800d088:	e05b      	b.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d08a:	4b92      	ldr	r3, [pc, #584]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d096:	d107      	bne.n	800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d098:	f107 0318 	add.w	r3, r7, #24
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 f991 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0a6:	e16e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ac:	e16b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0ae:	4b89      	ldr	r3, [pc, #548]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0ba:	d107      	bne.n	800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0bc:	f107 030c 	add.w	r3, r7, #12
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 fad3 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ca:	e15c      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d0:	e159      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d0d2:	4b80      	ldr	r3, [pc, #512]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0dc:	4b7d      	ldr	r3, [pc, #500]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0304 	and.w	r3, r3, #4
 800d0e4:	2b04      	cmp	r3, #4
 800d0e6:	d10c      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800d0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d109      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0ee:	4b79      	ldr	r3, [pc, #484]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	08db      	lsrs	r3, r3, #3
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	4a77      	ldr	r2, [pc, #476]	; (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d100:	e01e      	b.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d102:	4b74      	ldr	r3, [pc, #464]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d10e:	d106      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800d110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d116:	d102      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d118:	4b70      	ldr	r3, [pc, #448]	; (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d11c:	e010      	b.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d11e:	4b6d      	ldr	r3, [pc, #436]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d12a:	d106      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d132:	d102      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d134:	4b6a      	ldr	r3, [pc, #424]	; (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d138:	e002      	b.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d13e:	e122      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d140:	e121      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d146:	e11e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d14c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d150:	430b      	orrs	r3, r1
 800d152:	d133      	bne.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d154:	4b5f      	ldr	r3, [pc, #380]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d15c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d16a:	d012      	beq.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800d16c:	e023      	b.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d16e:	4b59      	ldr	r3, [pc, #356]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d17a:	d107      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d17c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fbc7 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d18a:	e0fc      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d190:	e0f9      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d192:	4b50      	ldr	r3, [pc, #320]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d19a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d19e:	d107      	bne.n	800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1a0:	f107 0318 	add.w	r3, r7, #24
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 f90d 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ae:	e0ea      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b4:	e0e7      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ba:	e0e4      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d1c4:	430b      	orrs	r3, r1
 800d1c6:	f040 808d 	bne.w	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d1ca:	4b42      	ldr	r3, [pc, #264]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d1d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1da:	d06b      	beq.n	800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1e2:	d874      	bhi.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ea:	d056      	beq.n	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f2:	d86c      	bhi.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1fa:	d03b      	beq.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d202:	d864      	bhi.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d20a:	d021      	beq.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d212:	d85c      	bhi.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d216:	2b00      	cmp	r3, #0
 800d218:	d004      	beq.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d220:	d004      	beq.n	800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d222:	e054      	b.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d224:	f000 f8b8 	bl	800d398 <HAL_RCCEx_GetD3PCLK1Freq>
 800d228:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d22a:	e0ac      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d22c:	4b29      	ldr	r3, [pc, #164]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d238:	d107      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d23a:	f107 0318 	add.w	r3, r7, #24
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f8c0 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d248:	e09d      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24e:	e09a      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d250:	4b20      	ldr	r3, [pc, #128]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d25c:	d107      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fa02 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d26c:	e08b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d272:	e088      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d274:	4b17      	ldr	r3, [pc, #92]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f003 0304 	and.w	r3, r3, #4
 800d27c:	2b04      	cmp	r3, #4
 800d27e:	d109      	bne.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d280:	4b14      	ldr	r3, [pc, #80]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	08db      	lsrs	r3, r3, #3
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	4a13      	ldr	r2, [pc, #76]	; (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d28c:	fa22 f303 	lsr.w	r3, r2, r3
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d292:	e078      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d298:	e075      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d29a:	4b0e      	ldr	r3, [pc, #56]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2a6:	d102      	bne.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d2a8:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ac:	e06b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2b2:	e068      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2b4:	4b07      	ldr	r3, [pc, #28]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2c0:	d102      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d2c2:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2c6:	e05e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2cc:	e05b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2d2:	e058      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d2d4:	58024400 	.word	0x58024400
 800d2d8:	03d09000 	.word	0x03d09000
 800d2dc:	003d0900 	.word	0x003d0900
 800d2e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d2e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	d148      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d2f0:	4b27      	ldr	r3, [pc, #156]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d2f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d300:	d02a      	beq.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d308:	d838      	bhi.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d004      	beq.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d316:	d00d      	beq.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d318:	e030      	b.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d31a:	4b1d      	ldr	r3, [pc, #116]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d326:	d102      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d328:	4b1a      	ldr	r3, [pc, #104]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d32c:	e02b      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d332:	e028      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d334:	4b16      	ldr	r3, [pc, #88]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d33c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d340:	d107      	bne.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fae4 	bl	800d914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d350:	e019      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d356:	e016      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d358:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d364:	d107      	bne.n	800d376 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d366:	f107 0318 	add.w	r3, r7, #24
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f82a 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d374:	e007      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d37a:	e004      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d380:	e001      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3740      	adds	r7, #64	; 0x40
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	58024400 	.word	0x58024400
 800d394:	017d7840 	.word	0x017d7840

0800d398 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d39c:	f7fe f816 	bl	800b3cc <HAL_RCC_GetHCLKFreq>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	091b      	lsrs	r3, r3, #4
 800d3a8:	f003 0307 	and.w	r3, r3, #7
 800d3ac:	4904      	ldr	r1, [pc, #16]	; (800d3c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d3ae:	5ccb      	ldrb	r3, [r1, r3]
 800d3b0:	f003 031f 	and.w	r3, r3, #31
 800d3b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	58024400 	.word	0x58024400
 800d3c0:	08014070 	.word	0x08014070

0800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b089      	sub	sp, #36	; 0x24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3cc:	4ba1      	ldr	r3, [pc, #644]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d0:	f003 0303 	and.w	r3, r3, #3
 800d3d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d3d6:	4b9f      	ldr	r3, [pc, #636]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	0b1b      	lsrs	r3, r3, #12
 800d3dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d3e2:	4b9c      	ldr	r3, [pc, #624]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e6:	091b      	lsrs	r3, r3, #4
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d3ee:	4b99      	ldr	r3, [pc, #612]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f2:	08db      	lsrs	r3, r3, #3
 800d3f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	fb02 f303 	mul.w	r3, r2, r3
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 8111 	beq.w	800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	2b02      	cmp	r3, #2
 800d416:	f000 8083 	beq.w	800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	f200 80a1 	bhi.w	800d564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d056      	beq.n	800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d42e:	e099      	b.n	800d564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d430:	4b88      	ldr	r3, [pc, #544]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d02d      	beq.n	800d498 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d43c:	4b85      	ldr	r3, [pc, #532]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	08db      	lsrs	r3, r3, #3
 800d442:	f003 0303 	and.w	r3, r3, #3
 800d446:	4a84      	ldr	r2, [pc, #528]	; (800d658 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d448:	fa22 f303 	lsr.w	r3, r2, r3
 800d44c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	ee07 3a90 	vmov	s15, r3
 800d454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d466:	4b7b      	ldr	r3, [pc, #492]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d476:	ed97 6a03 	vldr	s12, [r7, #12]
 800d47a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d496:	e087      	b.n	800d5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4aa:	4b6a      	ldr	r3, [pc, #424]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4da:	e065      	b.n	800d5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ee:	4b59      	ldr	r3, [pc, #356]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d502:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d51e:	e043      	b.n	800d5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d532:	4b48      	ldr	r3, [pc, #288]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53a:	ee07 3a90 	vmov	s15, r3
 800d53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d542:	ed97 6a03 	vldr	s12, [r7, #12]
 800d546:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d562:	e021      	b.n	800d5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	ee07 3a90 	vmov	s15, r3
 800d56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d576:	4b37      	ldr	r3, [pc, #220]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d586:	ed97 6a03 	vldr	s12, [r7, #12]
 800d58a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d65c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d5a8:	4b2a      	ldr	r3, [pc, #168]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	0a5b      	lsrs	r3, r3, #9
 800d5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ce:	ee17 2a90 	vmov	r2, s15
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d5d6:	4b1f      	ldr	r3, [pc, #124]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	0c1b      	lsrs	r3, r3, #16
 800d5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5e0:	ee07 3a90 	vmov	s15, r3
 800d5e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5fc:	ee17 2a90 	vmov	r2, s15
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d604:	4b13      	ldr	r3, [pc, #76]	; (800d654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d608:	0e1b      	lsrs	r3, r3, #24
 800d60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60e:	ee07 3a90 	vmov	s15, r3
 800d612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d61a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d61e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d62a:	ee17 2a90 	vmov	r2, s15
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d632:	e008      	b.n	800d646 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	609a      	str	r2, [r3, #8]
}
 800d646:	bf00      	nop
 800d648:	3724      	adds	r7, #36	; 0x24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	58024400 	.word	0x58024400
 800d658:	03d09000 	.word	0x03d09000
 800d65c:	46000000 	.word	0x46000000
 800d660:	4c742400 	.word	0x4c742400
 800d664:	4a742400 	.word	0x4a742400
 800d668:	4bbebc20 	.word	0x4bbebc20

0800d66c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b089      	sub	sp, #36	; 0x24
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d674:	4ba1      	ldr	r3, [pc, #644]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d67e:	4b9f      	ldr	r3, [pc, #636]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d682:	0d1b      	lsrs	r3, r3, #20
 800d684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d688:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d68a:	4b9c      	ldr	r3, [pc, #624]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	0a1b      	lsrs	r3, r3, #8
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d696:	4b99      	ldr	r3, [pc, #612]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d69a:	08db      	lsrs	r3, r3, #3
 800d69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	fb02 f303 	mul.w	r3, r2, r3
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 8111 	beq.w	800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	f000 8083 	beq.w	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	f200 80a1 	bhi.w	800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d056      	beq.n	800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d6d6:	e099      	b.n	800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6d8:	4b88      	ldr	r3, [pc, #544]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d02d      	beq.n	800d740 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6e4:	4b85      	ldr	r3, [pc, #532]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	08db      	lsrs	r3, r3, #3
 800d6ea:	f003 0303 	and.w	r3, r3, #3
 800d6ee:	4a84      	ldr	r2, [pc, #528]	; (800d900 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	ee07 3a90 	vmov	s15, r3
 800d6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	ee07 3a90 	vmov	s15, r3
 800d706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d70e:	4b7b      	ldr	r3, [pc, #492]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d722:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d73e:	e087      	b.n	800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d908 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d752:	4b6a      	ldr	r3, [pc, #424]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d762:	ed97 6a03 	vldr	s12, [r7, #12]
 800d766:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d782:	e065      	b.n	800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d78e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d796:	4b59      	ldr	r3, [pc, #356]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d79e:	ee07 3a90 	vmov	s15, r3
 800d7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7c6:	e043      	b.n	800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7da:	4b48      	ldr	r3, [pc, #288]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d80a:	e021      	b.n	800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d81e:	4b37      	ldr	r3, [pc, #220]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d826:	ee07 3a90 	vmov	s15, r3
 800d82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d832:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d84e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d850:	4b2a      	ldr	r3, [pc, #168]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d854:	0a5b      	lsrs	r3, r3, #9
 800d856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d86a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d86e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d876:	ee17 2a90 	vmov	r2, s15
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d87e:	4b1f      	ldr	r3, [pc, #124]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	0c1b      	lsrs	r3, r3, #16
 800d884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d888:	ee07 3a90 	vmov	s15, r3
 800d88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d894:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d898:	edd7 6a07 	vldr	s13, [r7, #28]
 800d89c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a4:	ee17 2a90 	vmov	r2, s15
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d8ac:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b0:	0e1b      	lsrs	r3, r3, #24
 800d8b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b6:	ee07 3a90 	vmov	s15, r3
 800d8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d2:	ee17 2a90 	vmov	r2, s15
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d8da:	e008      	b.n	800d8ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	609a      	str	r2, [r3, #8]
}
 800d8ee:	bf00      	nop
 800d8f0:	3724      	adds	r7, #36	; 0x24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	58024400 	.word	0x58024400
 800d900:	03d09000 	.word	0x03d09000
 800d904:	46000000 	.word	0x46000000
 800d908:	4c742400 	.word	0x4c742400
 800d90c:	4a742400 	.word	0x4a742400
 800d910:	4bbebc20 	.word	0x4bbebc20

0800d914 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d914:	b480      	push	{r7}
 800d916:	b089      	sub	sp, #36	; 0x24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d91c:	4ba0      	ldr	r3, [pc, #640]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d920:	f003 0303 	and.w	r3, r3, #3
 800d924:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d926:	4b9e      	ldr	r3, [pc, #632]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92a:	091b      	lsrs	r3, r3, #4
 800d92c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d930:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d932:	4b9b      	ldr	r3, [pc, #620]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d93c:	4b98      	ldr	r3, [pc, #608]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d940:	08db      	lsrs	r3, r3, #3
 800d942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	fb02 f303 	mul.w	r3, r2, r3
 800d94c:	ee07 3a90 	vmov	s15, r3
 800d950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d954:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f000 8111 	beq.w	800db82 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	2b02      	cmp	r3, #2
 800d964:	f000 8083 	beq.w	800da6e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	f200 80a1 	bhi.w	800dab2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d056      	beq.n	800da2a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d97c:	e099      	b.n	800dab2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d97e:	4b88      	ldr	r3, [pc, #544]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0320 	and.w	r3, r3, #32
 800d986:	2b00      	cmp	r3, #0
 800d988:	d02d      	beq.n	800d9e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d98a:	4b85      	ldr	r3, [pc, #532]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	08db      	lsrs	r3, r3, #3
 800d990:	f003 0303 	and.w	r3, r3, #3
 800d994:	4a83      	ldr	r2, [pc, #524]	; (800dba4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d996:	fa22 f303 	lsr.w	r3, r2, r3
 800d99a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	ee07 3a90 	vmov	s15, r3
 800d9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	ee07 3a90 	vmov	s15, r3
 800d9ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b4:	4b7a      	ldr	r3, [pc, #488]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9e4:	e087      	b.n	800daf6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	ee07 3a90 	vmov	s15, r3
 800d9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dbac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f8:	4b69      	ldr	r3, [pc, #420]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da00:	ee07 3a90 	vmov	s15, r3
 800da04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da08:	ed97 6a03 	vldr	s12, [r7, #12]
 800da0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da28:	e065      	b.n	800daf6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dbb0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800da38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da3c:	4b58      	ldr	r3, [pc, #352]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da44:	ee07 3a90 	vmov	s15, r3
 800da48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da50:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da6c:	e043      	b.n	800daf6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	ee07 3a90 	vmov	s15, r3
 800da74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dbb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800da7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da80:	4b47      	ldr	r3, [pc, #284]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da88:	ee07 3a90 	vmov	s15, r3
 800da8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da90:	ed97 6a03 	vldr	s12, [r7, #12]
 800da94:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dab0:	e021      	b.n	800daf6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	ee07 3a90 	vmov	s15, r3
 800dab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dabc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dbac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac4:	4b36      	ldr	r3, [pc, #216]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dacc:	ee07 3a90 	vmov	s15, r3
 800dad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dad8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dadc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daf4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800daf6:	4b2a      	ldr	r3, [pc, #168]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafa:	0a5b      	lsrs	r3, r3, #9
 800dafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db00:	ee07 3a90 	vmov	s15, r3
 800db04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db10:	edd7 6a07 	vldr	s13, [r7, #28]
 800db14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1c:	ee17 2a90 	vmov	r2, s15
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800db24:	4b1e      	ldr	r3, [pc, #120]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db28:	0c1b      	lsrs	r3, r3, #16
 800db2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2e:	ee07 3a90 	vmov	s15, r3
 800db32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4a:	ee17 2a90 	vmov	r2, s15
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800db52:	4b13      	ldr	r3, [pc, #76]	; (800dba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db56:	0e1b      	lsrs	r3, r3, #24
 800db58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db5c:	ee07 3a90 	vmov	s15, r3
 800db60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db78:	ee17 2a90 	vmov	r2, s15
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800db80:	e008      	b.n	800db94 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	609a      	str	r2, [r3, #8]
}
 800db94:	bf00      	nop
 800db96:	3724      	adds	r7, #36	; 0x24
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	58024400 	.word	0x58024400
 800dba4:	03d09000 	.word	0x03d09000
 800dba8:	46000000 	.word	0x46000000
 800dbac:	4c742400 	.word	0x4c742400
 800dbb0:	4a742400 	.word	0x4a742400
 800dbb4:	4bbebc20 	.word	0x4bbebc20

0800dbb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dbc6:	4b53      	ldr	r3, [pc, #332]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d101      	bne.n	800dbd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e099      	b.n	800dd0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dbd6:	4b4f      	ldr	r3, [pc, #316]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a4e      	ldr	r2, [pc, #312]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dbdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbe2:	f7f7 ff15 	bl	8005a10 <HAL_GetTick>
 800dbe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbe8:	e008      	b.n	800dbfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbea:	f7f7 ff11 	bl	8005a10 <HAL_GetTick>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d901      	bls.n	800dbfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	e086      	b.n	800dd0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbfc:	4b45      	ldr	r3, [pc, #276]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1f0      	bne.n	800dbea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dc08:	4b42      	ldr	r3, [pc, #264]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	031b      	lsls	r3, r3, #12
 800dc16:	493f      	ldr	r1, [pc, #252]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	628b      	str	r3, [r1, #40]	; 0x28
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	025b      	lsls	r3, r3, #9
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	431a      	orrs	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	041b      	lsls	r3, r3, #16
 800dc3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	061b      	lsls	r3, r3, #24
 800dc48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc4c:	4931      	ldr	r1, [pc, #196]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dc52:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	492d      	ldr	r1, [pc, #180]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	f023 0220 	bic.w	r2, r3, #32
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	4928      	ldr	r1, [pc, #160]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc72:	4313      	orrs	r3, r2
 800dc74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dc76:	4b27      	ldr	r3, [pc, #156]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	4a26      	ldr	r2, [pc, #152]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc7c:	f023 0310 	bic.w	r3, r3, #16
 800dc80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dc82:	4b24      	ldr	r3, [pc, #144]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc86:	4b24      	ldr	r3, [pc, #144]	; (800dd18 <RCCEx_PLL2_Config+0x160>)
 800dc88:	4013      	ands	r3, r2
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	69d2      	ldr	r2, [r2, #28]
 800dc8e:	00d2      	lsls	r2, r2, #3
 800dc90:	4920      	ldr	r1, [pc, #128]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc96:	4b1f      	ldr	r3, [pc, #124]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	4a1e      	ldr	r2, [pc, #120]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dc9c:	f043 0310 	orr.w	r3, r3, #16
 800dca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d106      	bne.n	800dcb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dca8:	4b1a      	ldr	r3, [pc, #104]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	4a19      	ldr	r2, [pc, #100]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dcb4:	e00f      	b.n	800dcd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d106      	bne.n	800dcca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dcbc:	4b15      	ldr	r3, [pc, #84]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc0:	4a14      	ldr	r2, [pc, #80]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dcc8:	e005      	b.n	800dcd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dcca:	4b12      	ldr	r3, [pc, #72]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	4a11      	ldr	r2, [pc, #68]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dcd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dcd6:	4b0f      	ldr	r3, [pc, #60]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a0e      	ldr	r2, [pc, #56]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dce2:	f7f7 fe95 	bl	8005a10 <HAL_GetTick>
 800dce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dce8:	e008      	b.n	800dcfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcea:	f7f7 fe91 	bl	8005a10 <HAL_GetTick>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d901      	bls.n	800dcfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e006      	b.n	800dd0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcfc:	4b05      	ldr	r3, [pc, #20]	; (800dd14 <RCCEx_PLL2_Config+0x15c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0f0      	beq.n	800dcea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	58024400 	.word	0x58024400
 800dd18:	ffff0007 	.word	0xffff0007

0800dd1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd2a:	4b53      	ldr	r3, [pc, #332]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2e:	f003 0303 	and.w	r3, r3, #3
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d101      	bne.n	800dd3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e099      	b.n	800de6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd3a:	4b4f      	ldr	r3, [pc, #316]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a4e      	ldr	r2, [pc, #312]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd46:	f7f7 fe63 	bl	8005a10 <HAL_GetTick>
 800dd4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd4c:	e008      	b.n	800dd60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd4e:	f7f7 fe5f 	bl	8005a10 <HAL_GetTick>
 800dd52:	4602      	mov	r2, r0
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d901      	bls.n	800dd60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	e086      	b.n	800de6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd60:	4b45      	ldr	r3, [pc, #276]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1f0      	bne.n	800dd4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dd6c:	4b42      	ldr	r3, [pc, #264]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	051b      	lsls	r3, r3, #20
 800dd7a:	493f      	ldr	r1, [pc, #252]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	628b      	str	r3, [r1, #40]	; 0x28
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	3b01      	subs	r3, #1
 800dd86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	025b      	lsls	r3, r3, #9
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	431a      	orrs	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	041b      	lsls	r3, r3, #16
 800dd9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dda2:	431a      	orrs	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	061b      	lsls	r3, r3, #24
 800ddac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ddb0:	4931      	ldr	r1, [pc, #196]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ddb6:	4b30      	ldr	r3, [pc, #192]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	492d      	ldr	r1, [pc, #180]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ddc8:	4b2b      	ldr	r3, [pc, #172]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	4928      	ldr	r1, [pc, #160]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ddda:	4b27      	ldr	r3, [pc, #156]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddde:	4a26      	ldr	r2, [pc, #152]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dde0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dde4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dde6:	4b24      	ldr	r3, [pc, #144]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800dde8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddea:	4b24      	ldr	r3, [pc, #144]	; (800de7c <RCCEx_PLL3_Config+0x160>)
 800ddec:	4013      	ands	r3, r2
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	69d2      	ldr	r2, [r2, #28]
 800ddf2:	00d2      	lsls	r2, r2, #3
 800ddf4:	4920      	ldr	r1, [pc, #128]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ddfa:	4b1f      	ldr	r3, [pc, #124]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	4a1e      	ldr	r2, [pc, #120]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800de0c:	4b1a      	ldr	r3, [pc, #104]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de10:	4a19      	ldr	r2, [pc, #100]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800de16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de18:	e00f      	b.n	800de3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d106      	bne.n	800de2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800de20:	4b15      	ldr	r3, [pc, #84]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de24:	4a14      	ldr	r2, [pc, #80]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de2c:	e005      	b.n	800de3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800de2e:	4b12      	ldr	r3, [pc, #72]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de32:	4a11      	ldr	r2, [pc, #68]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800de3a:	4b0f      	ldr	r3, [pc, #60]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a0e      	ldr	r2, [pc, #56]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de46:	f7f7 fde3 	bl	8005a10 <HAL_GetTick>
 800de4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de4c:	e008      	b.n	800de60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de4e:	f7f7 fddf 	bl	8005a10 <HAL_GetTick>
 800de52:	4602      	mov	r2, r0
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	2b02      	cmp	r3, #2
 800de5a:	d901      	bls.n	800de60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800de5c:	2303      	movs	r3, #3
 800de5e:	e006      	b.n	800de6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de60:	4b05      	ldr	r3, [pc, #20]	; (800de78 <RCCEx_PLL3_Config+0x15c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0f0      	beq.n	800de4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	58024400 	.word	0x58024400
 800de7c:	ffff0007 	.word	0xffff0007

0800de80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08a      	sub	sp, #40	; 0x28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d101      	bne.n	800de92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e075      	b.n	800df7e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7f7 f8cb 	bl	8005040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2204      	movs	r2, #4
 800deae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f868 	bl	800df88 <HAL_SD_InitCard>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	e05d      	b.n	800df7e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800dec2:	f107 0308 	add.w	r3, r7, #8
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 fa9d 	bl	800e408 <HAL_SD_GetCardStatus>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e052      	b.n	800df7e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ded8:	7e3b      	ldrb	r3, [r7, #24]
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dede:	7e7b      	ldrb	r3, [r7, #25]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d10a      	bne.n	800df02 <HAL_SD_Init+0x82>
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	2b00      	cmp	r3, #0
 800def0:	d102      	bne.n	800def8 <HAL_SD_Init+0x78>
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800defe:	659a      	str	r2, [r3, #88]	; 0x58
 800df00:	e00b      	b.n	800df1a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df06:	2b01      	cmp	r3, #1
 800df08:	d104      	bne.n	800df14 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df10:	659a      	str	r2, [r3, #88]	; 0x58
 800df12:	e002      	b.n	800df1a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fb2f 	bl	800e584 <HAL_SD_ConfigWideBusOperation>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	e026      	b.n	800df7e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800df30:	f7f7 fd6e 	bl	8005a10 <HAL_GetTick>
 800df34:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df36:	e011      	b.n	800df5c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df38:	f7f7 fd6a 	bl	8005a10 <HAL_GetTick>
 800df3c:	4602      	mov	r2, r0
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df46:	d109      	bne.n	800df5c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df4e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	e010      	b.n	800df7e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fc23 	bl	800e7a8 <HAL_SD_GetCardState>
 800df62:	4603      	mov	r3, r0
 800df64:	2b04      	cmp	r3, #4
 800df66:	d1e7      	bne.n	800df38 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3728      	adds	r7, #40	; 0x28
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
	...

0800df88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df88:	b590      	push	{r4, r7, lr}
 800df8a:	b08d      	sub	sp, #52	; 0x34
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df90:	2300      	movs	r3, #0
 800df92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df94:	2300      	movs	r3, #0
 800df96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dfa0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dfa4:	f04f 0100 	mov.w	r1, #0
 800dfa8:	f7fe fc76 	bl	800c898 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfac:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d109      	bne.n	800dfc8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dfc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e070      	b.n	800e0aa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	0a1b      	lsrs	r3, r3, #8
 800dfcc:	4a39      	ldr	r2, [pc, #228]	; (800e0b4 <HAL_SD_InitCard+0x12c>)
 800dfce:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd2:	091b      	lsrs	r3, r3, #4
 800dfd4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681c      	ldr	r4, [r3, #0]
 800dfda:	466a      	mov	r2, sp
 800dfdc:	f107 0318 	add.w	r3, r7, #24
 800dfe0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfe4:	e882 0003 	stmia.w	r2, {r0, r1}
 800dfe8:	f107 030c 	add.w	r3, r7, #12
 800dfec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfee:	4620      	mov	r0, r4
 800dff0:	f004 fcb6 	bl	8012960 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f004 fce8 	bl	80129ce <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	d007      	beq.n	800e026 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e016:	4a28      	ldr	r2, [pc, #160]	; (800e0b8 <HAL_SD_InitCard+0x130>)
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01e:	3301      	adds	r3, #1
 800e020:	4618      	mov	r0, r3
 800e022:	f7f7 fd01 	bl	8005a28 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fcac 	bl	800e984 <SD_PowerON>
 800e02c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00b      	beq.n	800e04c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	431a      	orrs	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e048:	2301      	movs	r3, #1
 800e04a:	e02e      	b.n	800e0aa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fbcb 	bl	800e7e8 <SD_InitCard>
 800e052:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00b      	beq.n	800e072 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	431a      	orrs	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	e01b      	b.n	800e0aa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e07a:	4618      	mov	r0, r3
 800e07c:	f004 fd3c 	bl	8012af8 <SDMMC_CmdBlockLength>
 800e080:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00f      	beq.n	800e0a8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a0b      	ldr	r2, [pc, #44]	; (800e0bc <HAL_SD_InitCard+0x134>)
 800e08e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	431a      	orrs	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	372c      	adds	r7, #44	; 0x2c
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd90      	pop	{r4, r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	014f8b59 	.word	0x014f8b59
 800e0b8:	00012110 	.word	0x00012110
 800e0bc:	1fe00fff 	.word	0x1fe00fff

0800e0c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0ce:	0f9b      	lsrs	r3, r3, #30
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0da:	0e9b      	lsrs	r3, r3, #26
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 030f 	and.w	r3, r3, #15
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0ec:	0e1b      	lsrs	r3, r3, #24
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 0303 	and.w	r3, r3, #3
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0fe:	0c1b      	lsrs	r3, r3, #16
 800e100:	b2da      	uxtb	r2, r3
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e10a:	0a1b      	lsrs	r3, r3, #8
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e116:	b2da      	uxtb	r2, r3
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e120:	0d1b      	lsrs	r3, r3, #20
 800e122:	b29a      	uxth	r2, r3
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e12c:	0c1b      	lsrs	r3, r3, #16
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	b2da      	uxtb	r2, r3
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e13e:	0bdb      	lsrs	r3, r3, #15
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	b2da      	uxtb	r2, r3
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e150:	0b9b      	lsrs	r3, r3, #14
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e162:	0b5b      	lsrs	r3, r3, #13
 800e164:	b2db      	uxtb	r3, r3
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e174:	0b1b      	lsrs	r3, r3, #12
 800e176:	b2db      	uxtb	r3, r3
 800e178:	f003 0301 	and.w	r3, r3, #1
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2200      	movs	r2, #0
 800e186:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d163      	bne.n	800e258 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e194:	009a      	lsls	r2, r3, #2
 800e196:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e19a:	4013      	ands	r3, r2
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e1a0:	0f92      	lsrs	r2, r2, #30
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ac:	0edb      	lsrs	r3, r3, #27
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0307 	and.w	r3, r3, #7
 800e1b4:	b2da      	uxtb	r2, r3
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1be:	0e1b      	lsrs	r3, r3, #24
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d0:	0d5b      	lsrs	r3, r3, #21
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	f003 0307 	and.w	r3, r3, #7
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e2:	0c9b      	lsrs	r3, r3, #18
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	f003 0307 	and.w	r3, r3, #7
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f4:	0bdb      	lsrs	r3, r3, #15
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	f003 0307 	and.w	r3, r3, #7
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	7e1b      	ldrb	r3, [r3, #24]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 0307 	and.w	r3, r3, #7
 800e216:	3302      	adds	r3, #2
 800e218:	2201      	movs	r2, #1
 800e21a:	fa02 f303 	lsl.w	r3, r2, r3
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e222:	fb03 f202 	mul.w	r2, r3, r2
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	7a1b      	ldrb	r3, [r3, #8]
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	2201      	movs	r2, #1
 800e236:	409a      	lsls	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e244:	0a52      	lsrs	r2, r2, #9
 800e246:	fb03 f202 	mul.w	r2, r3, r2
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e254:	655a      	str	r2, [r3, #84]	; 0x54
 800e256:	e031      	b.n	800e2bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d11d      	bne.n	800e29c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e264:	041b      	lsls	r3, r3, #16
 800e266:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e26e:	0c1b      	lsrs	r3, r3, #16
 800e270:	431a      	orrs	r2, r3
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	3301      	adds	r3, #1
 800e27c:	029a      	lsls	r2, r3, #10
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e290:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	655a      	str	r2, [r3, #84]	; 0x54
 800e29a:	e00f      	b.n	800e2bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a58      	ldr	r2, [pc, #352]	; (800e404 <HAL_SD_GetCardCSD+0x344>)
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e09d      	b.n	800e3f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c0:	0b9b      	lsrs	r3, r3, #14
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d2:	09db      	lsrs	r3, r3, #7
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2f4:	0fdb      	lsrs	r3, r3, #31
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e300:	0f5b      	lsrs	r3, r3, #29
 800e302:	b2db      	uxtb	r3, r3
 800e304:	f003 0303 	and.w	r3, r3, #3
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e312:	0e9b      	lsrs	r3, r3, #26
 800e314:	b2db      	uxtb	r3, r3
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e324:	0d9b      	lsrs	r3, r3, #22
 800e326:	b2db      	uxtb	r3, r3
 800e328:	f003 030f 	and.w	r3, r3, #15
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e336:	0d5b      	lsrs	r3, r3, #21
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e352:	0c1b      	lsrs	r3, r3, #16
 800e354:	b2db      	uxtb	r3, r3
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	b2da      	uxtb	r2, r3
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e366:	0bdb      	lsrs	r3, r3, #15
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e37a:	0b9b      	lsrs	r3, r3, #14
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	b2da      	uxtb	r2, r3
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e38e:	0b5b      	lsrs	r3, r3, #13
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a2:	0b1b      	lsrs	r3, r3, #12
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3b6:	0a9b      	lsrs	r3, r3, #10
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0303 	and.w	r3, r3, #3
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3ca:	0a1b      	lsrs	r3, r3, #8
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	f003 0303 	and.w	r3, r3, #3
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3de:	085b      	lsrs	r3, r3, #1
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	1fe00fff 	.word	0x1fe00fff

0800e408 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b094      	sub	sp, #80	; 0x50
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b03      	cmp	r3, #3
 800e422:	d101      	bne.n	800e428 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	e0a7      	b.n	800e578 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fb36 	bl	800eaa0 <SD_SendSDStatus>
 800e434:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d011      	beq.n	800e460 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a4f      	ldr	r2, [pc, #316]	; (800e580 <HAL_SD_GetCardStatus+0x178>)
 800e442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e45e:	e070      	b.n	800e542 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	099b      	lsrs	r3, r3, #6
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f003 0303 	and.w	r3, r3, #3
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	095b      	lsrs	r3, r3, #5
 800e474:	b2db      	uxtb	r3, r3
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	0a1b      	lsrs	r3, r3, #8
 800e484:	b29b      	uxth	r3, r3
 800e486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	0e1b      	lsrs	r3, r3, #24
 800e490:	b29b      	uxth	r3, r3
 800e492:	4313      	orrs	r3, r2
 800e494:	b29a      	uxth	r2, r3
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	061a      	lsls	r2, r3, #24
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	0a1b      	lsrs	r3, r3, #8
 800e4ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	0e1b      	lsrs	r3, r3, #24
 800e4b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	0a1b      	lsrs	r3, r3, #8
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	0d1b      	lsrs	r3, r3, #20
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 030f 	and.w	r3, r3, #15
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	0c1b      	lsrs	r3, r3, #16
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	0a9b      	lsrs	r3, r3, #10
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e504:	b2da      	uxtb	r2, r3
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	0a1b      	lsrs	r3, r3, #8
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	f003 0303 	and.w	r3, r3, #3
 800e514:	b2da      	uxtb	r2, r3
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	091b      	lsrs	r3, r3, #4
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	b2da      	uxtb	r2, r3
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f003 030f 	and.w	r3, r3, #15
 800e532:	b2da      	uxtb	r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	0e1b      	lsrs	r3, r3, #24
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e54a:	4618      	mov	r0, r3
 800e54c:	f004 fad4 	bl	8012af8 <SDMMC_CmdBlockLength>
 800e550:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00d      	beq.n	800e574 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a08      	ldr	r2, [pc, #32]	; (800e580 <HAL_SD_GetCardStatus+0x178>)
 800e55e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e564:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3750      	adds	r7, #80	; 0x50
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	1fe00fff 	.word	0x1fe00fff

0800e584 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b08d      	sub	sp, #52	; 0x34
 800e588:	af02      	add	r7, sp, #8
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2203      	movs	r2, #3
 800e598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d02e      	beq.n	800e602 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5aa:	d106      	bne.n	800e5ba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	635a      	str	r2, [r3, #52]	; 0x34
 800e5b8:	e029      	b.n	800e60e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5c0:	d10a      	bne.n	800e5d8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fb64 	bl	800ec90 <SD_WideBus_Enable>
 800e5c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	635a      	str	r2, [r3, #52]	; 0x34
 800e5d6:	e01a      	b.n	800e60e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fba1 	bl	800ed26 <SD_WideBus_Disable>
 800e5e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	635a      	str	r2, [r3, #52]	; 0x34
 800e5f2:	e00c      	b.n	800e60e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	635a      	str	r2, [r3, #52]	; 0x34
 800e600:	e005      	b.n	800e60e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e606:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	2b00      	cmp	r3, #0
 800e614:	d007      	beq.n	800e626 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a5f      	ldr	r2, [pc, #380]	; (800e798 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e61c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e624:	e096      	b.n	800e754 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e626:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e62a:	f04f 0100 	mov.w	r1, #0
 800e62e:	f7fe f933 	bl	800c898 <HAL_RCCEx_GetPeriphCLKFreq>
 800e632:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 8083 	beq.w	800e742 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	695a      	ldr	r2, [r3, #20]
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	4950      	ldr	r1, [pc, #320]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e65a:	fba1 1303 	umull	r1, r3, r1, r3
 800e65e:	0e1b      	lsrs	r3, r3, #24
 800e660:	429a      	cmp	r2, r3
 800e662:	d303      	bcc.n	800e66c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	e05a      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e674:	d103      	bne.n	800e67e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	61bb      	str	r3, [r7, #24]
 800e67c:	e051      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e686:	d126      	bne.n	800e6d6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10e      	bne.n	800e6ae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	4a43      	ldr	r2, [pc, #268]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d906      	bls.n	800e6a6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	4a40      	ldr	r2, [pc, #256]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e69c:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a0:	0e5b      	lsrs	r3, r3, #25
 800e6a2:	61bb      	str	r3, [r7, #24]
 800e6a4:	e03d      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	695b      	ldr	r3, [r3, #20]
 800e6aa:	61bb      	str	r3, [r7, #24]
 800e6ac:	e039      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ba:	4a39      	ldr	r2, [pc, #228]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d906      	bls.n	800e6ce <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	4a36      	ldr	r2, [pc, #216]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c8:	0e5b      	lsrs	r3, r3, #25
 800e6ca:	61bb      	str	r3, [r7, #24]
 800e6cc:	e029      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	695b      	ldr	r3, [r3, #20]
 800e6d2:	61bb      	str	r3, [r7, #24]
 800e6d4:	e025      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d10e      	bne.n	800e6fc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	4a30      	ldr	r2, [pc, #192]	; (800e7a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d906      	bls.n	800e6f4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	4a2c      	ldr	r2, [pc, #176]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ee:	0e1b      	lsrs	r3, r3, #24
 800e6f0:	61bb      	str	r3, [r7, #24]
 800e6f2:	e016      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	e012      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	69fa      	ldr	r2, [r7, #28]
 800e704:	fbb2 f3f3 	udiv	r3, r2, r3
 800e708:	4a26      	ldr	r2, [pc, #152]	; (800e7a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d906      	bls.n	800e71c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	4a22      	ldr	r2, [pc, #136]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e712:	fba2 2303 	umull	r2, r3, r2, r3
 800e716:	0e1b      	lsrs	r3, r3, #24
 800e718:	61bb      	str	r3, [r7, #24]
 800e71a:	e002      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	695b      	ldr	r3, [r3, #20]
 800e720:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681c      	ldr	r4, [r3, #0]
 800e726:	466a      	mov	r2, sp
 800e728:	f107 0314 	add.w	r3, r7, #20
 800e72c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e730:	e882 0003 	stmia.w	r2, {r0, r1}
 800e734:	f107 0308 	add.w	r3, r7, #8
 800e738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e73a:	4620      	mov	r0, r4
 800e73c:	f004 f910 	bl	8012960 <SDMMC_Init>
 800e740:	e008      	b.n	800e754 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e74e:	2301      	movs	r3, #1
 800e750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e75c:	4618      	mov	r0, r3
 800e75e:	f004 f9cb 	bl	8012af8 <SDMMC_CmdBlockLength>
 800e762:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00c      	beq.n	800e784 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a0a      	ldr	r2, [pc, #40]	; (800e798 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e770:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e776:	6a3b      	ldr	r3, [r7, #32]
 800e778:	431a      	orrs	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e790:	4618      	mov	r0, r3
 800e792:	372c      	adds	r7, #44	; 0x2c
 800e794:	46bd      	mov	sp, r7
 800e796:	bd90      	pop	{r4, r7, pc}
 800e798:	1fe00fff 	.word	0x1fe00fff
 800e79c:	55e63b89 	.word	0x55e63b89
 800e7a0:	02faf080 	.word	0x02faf080
 800e7a4:	017d7840 	.word	0x017d7840

0800e7a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e7b4:	f107 030c 	add.w	r3, r7, #12
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fa40 	bl	800ec40 <SD_SendStatus>
 800e7c0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d005      	beq.n	800e7d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	431a      	orrs	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	0a5b      	lsrs	r3, r3, #9
 800e7d8:	f003 030f 	and.w	r3, r3, #15
 800e7dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e7de:	693b      	ldr	r3, [r7, #16]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3718      	adds	r7, #24
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b090      	sub	sp, #64	; 0x40
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e7f4:	f7f7 f90c 	bl	8005a10 <HAL_GetTick>
 800e7f8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f004 f8f6 	bl	80129f0 <SDMMC_GetPowerState>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d102      	bne.n	800e810 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e80a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e80e:	e0b5      	b.n	800e97c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	2b03      	cmp	r3, #3
 800e816:	d02e      	beq.n	800e876 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f004 fa77 	bl	8012d10 <SDMMC_CmdSendCID>
 800e822:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <SD_InitCard+0x46>
    {
      return errorstate;
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	e0a6      	b.n	800e97c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2100      	movs	r1, #0
 800e834:	4618      	mov	r0, r3
 800e836:	f004 f920 	bl	8012a7a <SDMMC_GetResponse>
 800e83a:	4602      	mov	r2, r0
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2104      	movs	r1, #4
 800e846:	4618      	mov	r0, r3
 800e848:	f004 f917 	bl	8012a7a <SDMMC_GetResponse>
 800e84c:	4602      	mov	r2, r0
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2108      	movs	r1, #8
 800e858:	4618      	mov	r0, r3
 800e85a:	f004 f90e 	bl	8012a7a <SDMMC_GetResponse>
 800e85e:	4602      	mov	r2, r0
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	210c      	movs	r1, #12
 800e86a:	4618      	mov	r0, r3
 800e86c:	f004 f905 	bl	8012a7a <SDMMC_GetResponse>
 800e870:	4602      	mov	r2, r0
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d01d      	beq.n	800e8ba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e87e:	e019      	b.n	800e8b4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f107 020a 	add.w	r2, r7, #10
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f004 fa7f 	bl	8012d8e <SDMMC_CmdSetRelAdd>
 800e890:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89a:	e06f      	b.n	800e97c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e89c:	f7f7 f8b8 	bl	8005a10 <HAL_GetTick>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	f241 3287 	movw	r2, #4999	; 0x1387
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d902      	bls.n	800e8b4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e8ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8b2:	e063      	b.n	800e97c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e8b4:	897b      	ldrh	r3, [r7, #10]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d0e2      	beq.n	800e880 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	d036      	beq.n	800e930 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e8c2:	897b      	ldrh	r3, [r7, #10]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d2:	041b      	lsls	r3, r3, #16
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	f004 fa39 	bl	8012d4e <SDMMC_CmdSendCSD>
 800e8dc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <SD_InitCard+0x100>
    {
      return errorstate;
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e6:	e049      	b.n	800e97c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f004 f8c3 	bl	8012a7a <SDMMC_GetResponse>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2104      	movs	r1, #4
 800e900:	4618      	mov	r0, r3
 800e902:	f004 f8ba 	bl	8012a7a <SDMMC_GetResponse>
 800e906:	4602      	mov	r2, r0
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2108      	movs	r1, #8
 800e912:	4618      	mov	r0, r3
 800e914:	f004 f8b1 	bl	8012a7a <SDMMC_GetResponse>
 800e918:	4602      	mov	r2, r0
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	210c      	movs	r1, #12
 800e924:	4618      	mov	r0, r3
 800e926:	f004 f8a8 	bl	8012a7a <SDMMC_GetResponse>
 800e92a:	4602      	mov	r2, r0
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2104      	movs	r1, #4
 800e936:	4618      	mov	r0, r3
 800e938:	f004 f89f 	bl	8012a7a <SDMMC_GetResponse>
 800e93c:	4603      	mov	r3, r0
 800e93e:	0d1a      	lsrs	r2, r3, #20
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e944:	f107 030c 	add.w	r3, r7, #12
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff fbb8 	bl	800e0c0 <HAL_SD_GetCardCSD>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e95a:	e00f      	b.n	800e97c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e964:	041b      	lsls	r3, r3, #16
 800e966:	4619      	mov	r1, r3
 800e968:	4610      	mov	r0, r2
 800e96a:	f004 f8e8 	bl	8012b3e <SDMMC_CmdSelDesel>
 800e96e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <SD_InitCard+0x192>
  {
    return errorstate;
 800e976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e978:	e000      	b.n	800e97c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3740      	adds	r7, #64	; 0x40
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e98c:	2300      	movs	r3, #0
 800e98e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e990:	2300      	movs	r3, #0
 800e992:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e994:	2300      	movs	r3, #0
 800e996:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f004 f8f1 	bl	8012b84 <SDMMC_CmdGoIdleState>
 800e9a2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <SD_PowerON+0x2a>
  {
    return errorstate;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	e072      	b.n	800ea94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f004 f904 	bl	8012bc0 <SDMMC_CmdOperCond>
 800e9b8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9c0:	d10d      	bne.n	800e9de <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f004 f8d9 	bl	8012b84 <SDMMC_CmdGoIdleState>
 800e9d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d004      	beq.n	800e9e4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	e05a      	b.n	800ea94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d137      	bne.n	800ea5c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f004 f904 	bl	8012c00 <SDMMC_CmdAppCommand>
 800e9f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d02d      	beq.n	800ea5c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea04:	e046      	b.n	800ea94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f004 f8f7 	bl	8012c00 <SDMMC_CmdAppCommand>
 800ea12:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <SD_PowerON+0x9a>
    {
      return errorstate;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	e03a      	b.n	800ea94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	491e      	ldr	r1, [pc, #120]	; (800ea9c <SD_PowerON+0x118>)
 800ea24:	4618      	mov	r0, r3
 800ea26:	f004 f90e 	bl	8012c46 <SDMMC_CmdAppOperCommand>
 800ea2a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea36:	e02d      	b.n	800ea94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f004 f81b 	bl	8012a7a <SDMMC_GetResponse>
 800ea44:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	0fdb      	lsrs	r3, r3, #31
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d101      	bne.n	800ea52 <SD_PowerON+0xce>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e000      	b.n	800ea54 <SD_PowerON+0xd0>
 800ea52:	2300      	movs	r3, #0
 800ea54:	613b      	str	r3, [r7, #16]

    count++;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d802      	bhi.n	800ea6c <SD_PowerON+0xe8>
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0cc      	beq.n	800ea06 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d902      	bls.n	800ea7c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea7a:	e00b      	b.n	800ea94 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	c1100000 	.word	0xc1100000

0800eaa0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b08c      	sub	sp, #48	; 0x30
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eaaa:	f7f6 ffb1 	bl	8005a10 <HAL_GetTick>
 800eaae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2100      	movs	r1, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f003 ffdd 	bl	8012a7a <SDMMC_GetResponse>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaca:	d102      	bne.n	800ead2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eacc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ead0:	e0b0      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2140      	movs	r1, #64	; 0x40
 800ead8:	4618      	mov	r0, r3
 800eada:	f004 f80d 	bl	8012af8 <SDMMC_CmdBlockLength>
 800eade:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	e0a0      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafa:	041b      	lsls	r3, r3, #16
 800eafc:	4619      	mov	r1, r3
 800eafe:	4610      	mov	r0, r2
 800eb00:	f004 f87e 	bl	8012c00 <SDMMC_CmdAppCommand>
 800eb04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d005      	beq.n	800eb18 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	e08d      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb1c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800eb1e:	2340      	movs	r3, #64	; 0x40
 800eb20:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800eb22:	2360      	movs	r3, #96	; 0x60
 800eb24:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb26:	2302      	movs	r3, #2
 800eb28:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f107 0208 	add.w	r2, r7, #8
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f003 ffaf 	bl	8012aa0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f004 f966 	bl	8012e18 <SDMMC_CmdStatusRegister>
 800eb4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d02b      	beq.n	800ebac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	e069      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d013      	beq.n	800eb96 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800eb6e:	2300      	movs	r3, #0
 800eb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb72:	e00d      	b.n	800eb90 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f003 ff1b 	bl	80129b4 <SDMMC_ReadFIFO>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb82:	601a      	str	r2, [r3, #0]
        pData++;
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	3304      	adds	r3, #4
 800eb88:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	2b07      	cmp	r3, #7
 800eb94:	d9ee      	bls.n	800eb74 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb96:	f7f6 ff3b 	bl	8005a10 <HAL_GetTick>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eba4:	d102      	bne.n	800ebac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebaa:	e043      	b.n	800ec34 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d0d2      	beq.n	800eb60 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ebc8:	2308      	movs	r3, #8
 800ebca:	e033      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd2:	f003 0302 	and.w	r3, r3, #2
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e02a      	b.n	800ec34 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe4:	f003 0320 	and.w	r3, r3, #32
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d017      	beq.n	800ec1c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ebec:	2320      	movs	r3, #32
 800ebee:	e021      	b.n	800ec34 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f003 fedd 	bl	80129b4 <SDMMC_ReadFIFO>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	601a      	str	r2, [r3, #0]
    pData++;
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	3304      	adds	r3, #4
 800ec04:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec06:	f7f6 ff03 	bl	8005a10 <HAL_GetTick>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec14:	d102      	bne.n	800ec1c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec1a:	e00b      	b.n	800ec34 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e2      	bne.n	800ebf0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a03      	ldr	r2, [pc, #12]	; (800ec3c <SD_SendSDStatus+0x19c>)
 800ec30:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3730      	adds	r7, #48	; 0x30
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	18000f3a 	.word	0x18000f3a

0800ec40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ec50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec54:	e018      	b.n	800ec88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec5e:	041b      	lsls	r3, r3, #16
 800ec60:	4619      	mov	r1, r3
 800ec62:	4610      	mov	r0, r2
 800ec64:	f004 f8b5 	bl	8012dd2 <SDMMC_CmdSendStatus>
 800ec68:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	e009      	b.n	800ec88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f003 fefd 	bl	8012a7a <SDMMC_GetResponse>
 800ec80:	4602      	mov	r2, r0
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ec98:	2300      	movs	r3, #0
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2100      	movs	r1, #0
 800eca6:	4618      	mov	r0, r3
 800eca8:	f003 fee7 	bl	8012a7a <SDMMC_GetResponse>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ecb6:	d102      	bne.n	800ecbe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ecb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ecbc:	e02f      	b.n	800ed1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ecbe:	f107 030c 	add.w	r3, r7, #12
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 f879 	bl	800edbc <SD_FindSCR>
 800ecca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	e023      	b.n	800ed1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01c      	beq.n	800ed1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece8:	041b      	lsls	r3, r3, #16
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f003 ff87 	bl	8012c00 <SDMMC_CmdAppCommand>
 800ecf2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d001      	beq.n	800ecfe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	e00f      	b.n	800ed1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2102      	movs	r1, #2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f003 ffbe 	bl	8012c86 <SDMMC_CmdBusWidth>
 800ed0a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	e003      	b.n	800ed1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	e001      	b.n	800ed1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3718      	adds	r7, #24
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b086      	sub	sp, #24
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
 800ed32:	2300      	movs	r3, #0
 800ed34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f003 fe9c 	bl	8012a7a <SDMMC_GetResponse>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed4c:	d102      	bne.n	800ed54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed52:	e02f      	b.n	800edb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ed54:	f107 030c 	add.w	r3, r7, #12
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f82e 	bl	800edbc <SD_FindSCR>
 800ed60:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	e023      	b.n	800edb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d01c      	beq.n	800edb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed7e:	041b      	lsls	r3, r3, #16
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f003 ff3c 	bl	8012c00 <SDMMC_CmdAppCommand>
 800ed88:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d001      	beq.n	800ed94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	e00f      	b.n	800edb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2100      	movs	r1, #0
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f003 ff73 	bl	8012c86 <SDMMC_CmdBusWidth>
 800eda0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	e003      	b.n	800edb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800edac:	2300      	movs	r3, #0
 800edae:	e001      	b.n	800edb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800edb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08e      	sub	sp, #56	; 0x38
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800edc6:	f7f6 fe23 	bl	8005a10 <HAL_GetTick>
 800edca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800edd0:	2300      	movs	r3, #0
 800edd2:	60bb      	str	r3, [r7, #8]
 800edd4:	2300      	movs	r3, #0
 800edd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2108      	movs	r1, #8
 800ede2:	4618      	mov	r0, r3
 800ede4:	f003 fe88 	bl	8012af8 <SDMMC_CmdBlockLength>
 800ede8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf2:	e0ad      	b.n	800ef50 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfc:	041b      	lsls	r3, r3, #16
 800edfe:	4619      	mov	r1, r3
 800ee00:	4610      	mov	r0, r2
 800ee02:	f003 fefd 	bl	8012c00 <SDMMC_CmdAppCommand>
 800ee06:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	e09e      	b.n	800ef50 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ee18:	2308      	movs	r3, #8
 800ee1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ee1c:	2330      	movs	r3, #48	; 0x30
 800ee1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ee20:	2302      	movs	r3, #2
 800ee22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ee24:	2300      	movs	r3, #0
 800ee26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f107 0210 	add.w	r2, r7, #16
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f003 fe32 	bl	8012aa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f003 ff43 	bl	8012ccc <SDMMC_CmdSendSCR>
 800ee46:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d027      	beq.n	800ee9e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee50:	e07e      	b.n	800ef50 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d113      	bne.n	800ee88 <SD_FindSCR+0xcc>
 800ee60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d110      	bne.n	800ee88 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f003 fda2 	bl	80129b4 <SDMMC_ReadFIFO>
 800ee70:	4603      	mov	r3, r0
 800ee72:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f003 fd9b 	bl	80129b4 <SDMMC_ReadFIFO>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	60fb      	str	r3, [r7, #12]
      index++;
 800ee82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee84:	3301      	adds	r3, #1
 800ee86:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee88:	f7f6 fdc2 	bl	8005a10 <HAL_GetTick>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee96:	d102      	bne.n	800ee9e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee9c:	e058      	b.n	800ef50 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eea4:	f240 532a 	movw	r3, #1322	; 0x52a
 800eea8:	4013      	ands	r3, r2
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0d1      	beq.n	800ee52 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb4:	f003 0308 	and.w	r3, r3, #8
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d005      	beq.n	800eec8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2208      	movs	r2, #8
 800eec2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eec4:	2308      	movs	r3, #8
 800eec6:	e043      	b.n	800ef50 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d005      	beq.n	800eee2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2202      	movs	r2, #2
 800eedc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eede:	2302      	movs	r3, #2
 800eee0:	e036      	b.n	800ef50 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee8:	f003 0320 	and.w	r3, r3, #32
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d005      	beq.n	800eefc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2220      	movs	r2, #32
 800eef6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eef8:	2320      	movs	r3, #32
 800eefa:	e029      	b.n	800ef50 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a15      	ldr	r2, [pc, #84]	; (800ef58 <SD_FindSCR+0x19c>)
 800ef02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	061a      	lsls	r2, r3, #24
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	021b      	lsls	r3, r3, #8
 800ef0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	0a1b      	lsrs	r3, r3, #8
 800ef16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	0e1b      	lsrs	r3, r3, #24
 800ef20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	601a      	str	r2, [r3, #0]
    scr++;
 800ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef28:	3304      	adds	r3, #4
 800ef2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	061a      	lsls	r2, r3, #24
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	021b      	lsls	r3, r3, #8
 800ef34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	0a1b      	lsrs	r3, r3, #8
 800ef3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	0e1b      	lsrs	r3, r3, #24
 800ef48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3738      	adds	r7, #56	; 0x38
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	18000f3a 	.word	0x18000f3a

0800ef5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e10f      	b.n	800f18e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a87      	ldr	r2, [pc, #540]	; (800f198 <HAL_SPI_Init+0x23c>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00f      	beq.n	800ef9e <HAL_SPI_Init+0x42>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a86      	ldr	r2, [pc, #536]	; (800f19c <HAL_SPI_Init+0x240>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d00a      	beq.n	800ef9e <HAL_SPI_Init+0x42>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a84      	ldr	r2, [pc, #528]	; (800f1a0 <HAL_SPI_Init+0x244>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d005      	beq.n	800ef9e <HAL_SPI_Init+0x42>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	2b0f      	cmp	r3, #15
 800ef98:	d901      	bls.n	800ef9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e0f7      	b.n	800f18e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 f900 	bl	800f1a4 <SPI_GetPacketSize>
 800efa4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a7b      	ldr	r2, [pc, #492]	; (800f198 <HAL_SPI_Init+0x23c>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d00c      	beq.n	800efca <HAL_SPI_Init+0x6e>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a79      	ldr	r2, [pc, #484]	; (800f19c <HAL_SPI_Init+0x240>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d007      	beq.n	800efca <HAL_SPI_Init+0x6e>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4a78      	ldr	r2, [pc, #480]	; (800f1a0 <HAL_SPI_Init+0x244>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d002      	beq.n	800efca <HAL_SPI_Init+0x6e>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2b08      	cmp	r3, #8
 800efc8:	d811      	bhi.n	800efee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800efce:	4a72      	ldr	r2, [pc, #456]	; (800f198 <HAL_SPI_Init+0x23c>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d009      	beq.n	800efe8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a70      	ldr	r2, [pc, #448]	; (800f19c <HAL_SPI_Init+0x240>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d004      	beq.n	800efe8 <HAL_SPI_Init+0x8c>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a6f      	ldr	r2, [pc, #444]	; (800f1a0 <HAL_SPI_Init+0x244>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d104      	bne.n	800eff2 <HAL_SPI_Init+0x96>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b10      	cmp	r3, #16
 800efec:	d901      	bls.n	800eff2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	e0cd      	b.n	800f18e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d106      	bne.n	800f00c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7f6 f886 	bl	8005118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f022 0201 	bic.w	r2, r2, #1
 800f022:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f02e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	699b      	ldr	r3, [r3, #24]
 800f034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f038:	d119      	bne.n	800f06e <HAL_SPI_Init+0x112>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f042:	d103      	bne.n	800f04c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10c      	bne.n	800f06e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f05c:	d107      	bne.n	800f06e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f06c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00f      	beq.n	800f09a <HAL_SPI_Init+0x13e>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	2b06      	cmp	r3, #6
 800f080:	d90b      	bls.n	800f09a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	430a      	orrs	r2, r1
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	e007      	b.n	800f0aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	69da      	ldr	r2, [r3, #28]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0b2:	431a      	orrs	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	431a      	orrs	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0bc:	ea42 0103 	orr.w	r1, r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68da      	ldr	r2, [r3, #12]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	430a      	orrs	r2, r1
 800f0ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d4:	431a      	orrs	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0da:	431a      	orrs	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	431a      	orrs	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	431a      	orrs	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	431a      	orrs	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	431a      	orrs	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0fe:	431a      	orrs	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	431a      	orrs	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f10a:	ea42 0103 	orr.w	r1, r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d113      	bne.n	800f14a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f134:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f148:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f022 0201 	bic.w	r2, r2, #1
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	430a      	orrs	r2, r1
 800f17a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2201      	movs	r2, #1
 800f188:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	40013000 	.word	0x40013000
 800f19c:	40003800 	.word	0x40003800
 800f1a0:	40003c00 	.word	0x40003c00

0800f1a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b0:	095b      	lsrs	r3, r3, #5
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	3307      	adds	r3, #7
 800f1c2:	08db      	lsrs	r3, r3, #3
 800f1c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3714      	adds	r7, #20
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr

0800f1da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d101      	bne.n	800f1ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e049      	b.n	800f280 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d106      	bne.n	800f206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7f6 f8d1 	bl	80053a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2202      	movs	r2, #2
 800f20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	3304      	adds	r3, #4
 800f216:	4619      	mov	r1, r3
 800f218:	4610      	mov	r0, r2
 800f21a:	f000 fce3 	bl	800fbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2201      	movs	r2, #1
 800f27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	e049      	b.n	800f32e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d106      	bne.n	800f2b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f841 	bl	800f336 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2202      	movs	r2, #2
 800f2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	4610      	mov	r0, r2
 800f2c8:	f000 fc8c 	bl	800fbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f336:	b480      	push	{r7}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f33e:	bf00      	nop
 800f340:	370c      	adds	r7, #12
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr

0800f34a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b082      	sub	sp, #8
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	e049      	b.n	800f3f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b00      	cmp	r3, #0
 800f366:	d106      	bne.n	800f376 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7f5 ff5f 	bl	8005234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2202      	movs	r2, #2
 800f37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3304      	adds	r3, #4
 800f386:	4619      	mov	r1, r3
 800f388:	4610      	mov	r0, r2
 800f38a:	f000 fc2b 	bl	800fbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e049      	b.n	800f49e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d106      	bne.n	800f424 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7f5 ff40 	bl	80052a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2202      	movs	r2, #2
 800f428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3304      	adds	r3, #4
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f000 fbd4 	bl	800fbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2201      	movs	r2, #1
 800f470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b082      	sub	sp, #8
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	f003 0302 	and.w	r3, r3, #2
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d122      	bne.n	800f502 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d11b      	bne.n	800f502 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f06f 0202 	mvn.w	r2, #2
 800f4d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d003      	beq.n	800f4f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7f4 fa8d 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800f4ee:	e005      	b.n	800f4fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fb63 	bl	800fbbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7f4 fa90 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	f003 0304 	and.w	r3, r3, #4
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d122      	bne.n	800f556 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	f003 0304 	and.w	r3, r3, #4
 800f51a:	2b04      	cmp	r3, #4
 800f51c:	d11b      	bne.n	800f556 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f06f 0204 	mvn.w	r2, #4
 800f526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2202      	movs	r2, #2
 800f52c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	699b      	ldr	r3, [r3, #24]
 800f534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7f4 fa63 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800f542:	e005      	b.n	800f550 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 fb39 	bl	800fbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7f4 fa66 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b08      	cmp	r3, #8
 800f562:	d122      	bne.n	800f5aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	f003 0308 	and.w	r3, r3, #8
 800f56e:	2b08      	cmp	r3, #8
 800f570:	d11b      	bne.n	800f5aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f06f 0208 	mvn.w	r2, #8
 800f57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2204      	movs	r2, #4
 800f580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	f003 0303 	and.w	r3, r3, #3
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d003      	beq.n	800f598 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7f4 fa39 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800f596:	e005      	b.n	800f5a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 fb0f 	bl	800fbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7f4 fa3c 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	f003 0310 	and.w	r3, r3, #16
 800f5b4:	2b10      	cmp	r3, #16
 800f5b6:	d122      	bne.n	800f5fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f003 0310 	and.w	r3, r3, #16
 800f5c2:	2b10      	cmp	r3, #16
 800f5c4:	d11b      	bne.n	800f5fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f06f 0210 	mvn.w	r2, #16
 800f5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2208      	movs	r2, #8
 800f5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	69db      	ldr	r3, [r3, #28]
 800f5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d003      	beq.n	800f5ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7f4 fa0f 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800f5ea:	e005      	b.n	800f5f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fae5 	bl	800fbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7f4 fa12 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	f003 0301 	and.w	r3, r3, #1
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d10e      	bne.n	800f62a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f003 0301 	and.w	r3, r3, #1
 800f616:	2b01      	cmp	r3, #1
 800f618:	d107      	bne.n	800f62a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f06f 0201 	mvn.w	r2, #1
 800f622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f7f4 fa03 	bl	8003a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f634:	2b80      	cmp	r3, #128	; 0x80
 800f636:	d10e      	bne.n	800f656 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f642:	2b80      	cmp	r3, #128	; 0x80
 800f644:	d107      	bne.n	800f656 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f001 f963 	bl	801091c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f664:	d10e      	bne.n	800f684 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f670:	2b80      	cmp	r3, #128	; 0x80
 800f672:	d107      	bne.n	800f684 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f001 f956 	bl	8010930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f68e:	2b40      	cmp	r3, #64	; 0x40
 800f690:	d10e      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	d107      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fa90 	bl	800fbd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b20      	cmp	r3, #32
 800f6bc:	d10e      	bne.n	800f6dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	f003 0320 	and.w	r3, r3, #32
 800f6c8:	2b20      	cmp	r3, #32
 800f6ca:	d107      	bne.n	800f6dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f06f 0220 	mvn.w	r2, #32
 800f6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f001 f916 	bl	8010908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d101      	bne.n	800f702 <HAL_TIM_OC_ConfigChannel+0x1e>
 800f6fe:	2302      	movs	r3, #2
 800f700:	e066      	b.n	800f7d0 <HAL_TIM_OC_ConfigChannel+0xec>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b14      	cmp	r3, #20
 800f70e:	d857      	bhi.n	800f7c0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800f710:	a201      	add	r2, pc, #4	; (adr r2, 800f718 <HAL_TIM_OC_ConfigChannel+0x34>)
 800f712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f716:	bf00      	nop
 800f718:	0800f76d 	.word	0x0800f76d
 800f71c:	0800f7c1 	.word	0x0800f7c1
 800f720:	0800f7c1 	.word	0x0800f7c1
 800f724:	0800f7c1 	.word	0x0800f7c1
 800f728:	0800f77b 	.word	0x0800f77b
 800f72c:	0800f7c1 	.word	0x0800f7c1
 800f730:	0800f7c1 	.word	0x0800f7c1
 800f734:	0800f7c1 	.word	0x0800f7c1
 800f738:	0800f789 	.word	0x0800f789
 800f73c:	0800f7c1 	.word	0x0800f7c1
 800f740:	0800f7c1 	.word	0x0800f7c1
 800f744:	0800f7c1 	.word	0x0800f7c1
 800f748:	0800f797 	.word	0x0800f797
 800f74c:	0800f7c1 	.word	0x0800f7c1
 800f750:	0800f7c1 	.word	0x0800f7c1
 800f754:	0800f7c1 	.word	0x0800f7c1
 800f758:	0800f7a5 	.word	0x0800f7a5
 800f75c:	0800f7c1 	.word	0x0800f7c1
 800f760:	0800f7c1 	.word	0x0800f7c1
 800f764:	0800f7c1 	.word	0x0800f7c1
 800f768:	0800f7b3 	.word	0x0800f7b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	68b9      	ldr	r1, [r7, #8]
 800f772:	4618      	mov	r0, r3
 800f774:	f000 fad0 	bl	800fd18 <TIM_OC1_SetConfig>
      break;
 800f778:	e025      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68b9      	ldr	r1, [r7, #8]
 800f780:	4618      	mov	r0, r3
 800f782:	f000 fb59 	bl	800fe38 <TIM_OC2_SetConfig>
      break;
 800f786:	e01e      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68b9      	ldr	r1, [r7, #8]
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 fbdc 	bl	800ff4c <TIM_OC3_SetConfig>
      break;
 800f794:	e017      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f000 fc5d 	bl	801005c <TIM_OC4_SetConfig>
      break;
 800f7a2:	e010      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 fcc0 	bl	8010130 <TIM_OC5_SetConfig>
      break;
 800f7b0:	e009      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	68b9      	ldr	r1, [r7, #8]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 fd1d 	bl	80101f8 <TIM_OC6_SetConfig>
      break;
 800f7be:	e002      	b.n	800f7c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800f7c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d101      	bne.n	800f7f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f7f2:	2302      	movs	r3, #2
 800f7f4:	e088      	b.n	800f908 <HAL_TIM_IC_ConfigChannel+0x130>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d11b      	bne.n	800f83c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800f814:	f000 fe40 	bl	8010498 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	699a      	ldr	r2, [r3, #24]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f022 020c 	bic.w	r2, r2, #12
 800f826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6999      	ldr	r1, [r3, #24]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	619a      	str	r2, [r3, #24]
 800f83a:	e060      	b.n	800f8fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d11c      	bne.n	800f87c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800f852:	f000 fec4 	bl	80105de <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	699a      	ldr	r2, [r3, #24]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	6999      	ldr	r1, [r3, #24]
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	021a      	lsls	r2, r3, #8
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	430a      	orrs	r2, r1
 800f878:	619a      	str	r2, [r3, #24]
 800f87a:	e040      	b.n	800f8fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b08      	cmp	r3, #8
 800f880:	d11b      	bne.n	800f8ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f892:	f000 ff11 	bl	80106b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	69da      	ldr	r2, [r3, #28]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f022 020c 	bic.w	r2, r2, #12
 800f8a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	69d9      	ldr	r1, [r3, #28]
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	689a      	ldr	r2, [r3, #8]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	430a      	orrs	r2, r1
 800f8b6:	61da      	str	r2, [r3, #28]
 800f8b8:	e021      	b.n	800f8fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b0c      	cmp	r3, #12
 800f8be:	d11c      	bne.n	800f8fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f8d0:	f000 ff2e 	bl	8010730 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	69da      	ldr	r2, [r3, #28]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f8e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	69d9      	ldr	r1, [r3, #28]
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	021a      	lsls	r2, r3, #8
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	61da      	str	r2, [r3, #28]
 800f8f8:	e001      	b.n	800f8fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f906:	7dfb      	ldrb	r3, [r7, #23]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b086      	sub	sp, #24
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f926:	2b01      	cmp	r3, #1
 800f928:	d101      	bne.n	800f92e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f92a:	2302      	movs	r3, #2
 800f92c:	e0ff      	b.n	800fb2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2201      	movs	r2, #1
 800f932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b14      	cmp	r3, #20
 800f93a:	f200 80f0 	bhi.w	800fb1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f93e:	a201      	add	r2, pc, #4	; (adr r2, 800f944 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f944:	0800f999 	.word	0x0800f999
 800f948:	0800fb1f 	.word	0x0800fb1f
 800f94c:	0800fb1f 	.word	0x0800fb1f
 800f950:	0800fb1f 	.word	0x0800fb1f
 800f954:	0800f9d9 	.word	0x0800f9d9
 800f958:	0800fb1f 	.word	0x0800fb1f
 800f95c:	0800fb1f 	.word	0x0800fb1f
 800f960:	0800fb1f 	.word	0x0800fb1f
 800f964:	0800fa1b 	.word	0x0800fa1b
 800f968:	0800fb1f 	.word	0x0800fb1f
 800f96c:	0800fb1f 	.word	0x0800fb1f
 800f970:	0800fb1f 	.word	0x0800fb1f
 800f974:	0800fa5b 	.word	0x0800fa5b
 800f978:	0800fb1f 	.word	0x0800fb1f
 800f97c:	0800fb1f 	.word	0x0800fb1f
 800f980:	0800fb1f 	.word	0x0800fb1f
 800f984:	0800fa9d 	.word	0x0800fa9d
 800f988:	0800fb1f 	.word	0x0800fb1f
 800f98c:	0800fb1f 	.word	0x0800fb1f
 800f990:	0800fb1f 	.word	0x0800fb1f
 800f994:	0800fadd 	.word	0x0800fadd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68b9      	ldr	r1, [r7, #8]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f000 f9ba 	bl	800fd18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	699a      	ldr	r2, [r3, #24]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f042 0208 	orr.w	r2, r2, #8
 800f9b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	699a      	ldr	r2, [r3, #24]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f022 0204 	bic.w	r2, r2, #4
 800f9c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6999      	ldr	r1, [r3, #24]
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	691a      	ldr	r2, [r3, #16]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	430a      	orrs	r2, r1
 800f9d4:	619a      	str	r2, [r3, #24]
      break;
 800f9d6:	e0a5      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68b9      	ldr	r1, [r7, #8]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f000 fa2a 	bl	800fe38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	699a      	ldr	r2, [r3, #24]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	699a      	ldr	r2, [r3, #24]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	6999      	ldr	r1, [r3, #24]
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	021a      	lsls	r2, r3, #8
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	430a      	orrs	r2, r1
 800fa16:	619a      	str	r2, [r3, #24]
      break;
 800fa18:	e084      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68b9      	ldr	r1, [r7, #8]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f000 fa93 	bl	800ff4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	69da      	ldr	r2, [r3, #28]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f042 0208 	orr.w	r2, r2, #8
 800fa34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	69da      	ldr	r2, [r3, #28]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f022 0204 	bic.w	r2, r2, #4
 800fa44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	69d9      	ldr	r1, [r3, #28]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	691a      	ldr	r2, [r3, #16]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	430a      	orrs	r2, r1
 800fa56:	61da      	str	r2, [r3, #28]
      break;
 800fa58:	e064      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	68b9      	ldr	r1, [r7, #8]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 fafb 	bl	801005c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	69da      	ldr	r2, [r3, #28]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	69da      	ldr	r2, [r3, #28]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	69d9      	ldr	r1, [r3, #28]
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	691b      	ldr	r3, [r3, #16]
 800fa90:	021a      	lsls	r2, r3, #8
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	430a      	orrs	r2, r1
 800fa98:	61da      	str	r2, [r3, #28]
      break;
 800fa9a:	e043      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68b9      	ldr	r1, [r7, #8]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 fb44 	bl	8010130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f042 0208 	orr.w	r2, r2, #8
 800fab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f022 0204 	bic.w	r2, r2, #4
 800fac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	691a      	ldr	r2, [r3, #16]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	430a      	orrs	r2, r1
 800fad8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fada:	e023      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68b9      	ldr	r1, [r7, #8]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 fb88 	bl	80101f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800faf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	021a      	lsls	r2, r3, #8
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	430a      	orrs	r2, r1
 800fb1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb1c:	e002      	b.n	800fb24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	75fb      	strb	r3, [r7, #23]
      break;
 800fb22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop

0800fb38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d101      	bne.n	800fb50 <HAL_TIM_SlaveConfigSynchro+0x18>
 800fb4c:	2302      	movs	r3, #2
 800fb4e:	e031      	b.n	800fbb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2202      	movs	r2, #2
 800fb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fb60:	6839      	ldr	r1, [r7, #0]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fbae 	bl	80102c4 <TIM_SlaveTimer_SetConfig>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d009      	beq.n	800fb82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e018      	b.n	800fbb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68da      	ldr	r2, [r3, #12]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	68da      	ldr	r2, [r3, #12]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fba0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbb2:	2300      	movs	r3, #0
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fbc4:	bf00      	nop
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fbd8:	bf00      	nop
 800fbda:	370c      	adds	r7, #12
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr

0800fbe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4a40      	ldr	r2, [pc, #256]	; (800fcf8 <TIM_Base_SetConfig+0x114>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d013      	beq.n	800fc24 <TIM_Base_SetConfig+0x40>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc02:	d00f      	beq.n	800fc24 <TIM_Base_SetConfig+0x40>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a3d      	ldr	r2, [pc, #244]	; (800fcfc <TIM_Base_SetConfig+0x118>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d00b      	beq.n	800fc24 <TIM_Base_SetConfig+0x40>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a3c      	ldr	r2, [pc, #240]	; (800fd00 <TIM_Base_SetConfig+0x11c>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d007      	beq.n	800fc24 <TIM_Base_SetConfig+0x40>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a3b      	ldr	r2, [pc, #236]	; (800fd04 <TIM_Base_SetConfig+0x120>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d003      	beq.n	800fc24 <TIM_Base_SetConfig+0x40>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a3a      	ldr	r2, [pc, #232]	; (800fd08 <TIM_Base_SetConfig+0x124>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d108      	bne.n	800fc36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4a2f      	ldr	r2, [pc, #188]	; (800fcf8 <TIM_Base_SetConfig+0x114>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d01f      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc44:	d01b      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4a2c      	ldr	r2, [pc, #176]	; (800fcfc <TIM_Base_SetConfig+0x118>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d017      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4a2b      	ldr	r2, [pc, #172]	; (800fd00 <TIM_Base_SetConfig+0x11c>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d013      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4a2a      	ldr	r2, [pc, #168]	; (800fd04 <TIM_Base_SetConfig+0x120>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d00f      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4a29      	ldr	r2, [pc, #164]	; (800fd08 <TIM_Base_SetConfig+0x124>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d00b      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4a28      	ldr	r2, [pc, #160]	; (800fd0c <TIM_Base_SetConfig+0x128>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d007      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a27      	ldr	r2, [pc, #156]	; (800fd10 <TIM_Base_SetConfig+0x12c>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d003      	beq.n	800fc7e <TIM_Base_SetConfig+0x9a>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a26      	ldr	r2, [pc, #152]	; (800fd14 <TIM_Base_SetConfig+0x130>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d108      	bne.n	800fc90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	689a      	ldr	r2, [r3, #8]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4a10      	ldr	r2, [pc, #64]	; (800fcf8 <TIM_Base_SetConfig+0x114>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d00f      	beq.n	800fcdc <TIM_Base_SetConfig+0xf8>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4a12      	ldr	r2, [pc, #72]	; (800fd08 <TIM_Base_SetConfig+0x124>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d00b      	beq.n	800fcdc <TIM_Base_SetConfig+0xf8>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4a11      	ldr	r2, [pc, #68]	; (800fd0c <TIM_Base_SetConfig+0x128>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d007      	beq.n	800fcdc <TIM_Base_SetConfig+0xf8>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4a10      	ldr	r2, [pc, #64]	; (800fd10 <TIM_Base_SetConfig+0x12c>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d003      	beq.n	800fcdc <TIM_Base_SetConfig+0xf8>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a0f      	ldr	r2, [pc, #60]	; (800fd14 <TIM_Base_SetConfig+0x130>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d103      	bne.n	800fce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	691a      	ldr	r2, [r3, #16]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2201      	movs	r2, #1
 800fce8:	615a      	str	r2, [r3, #20]
}
 800fcea:	bf00      	nop
 800fcec:	3714      	adds	r7, #20
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	40010000 	.word	0x40010000
 800fcfc:	40000400 	.word	0x40000400
 800fd00:	40000800 	.word	0x40000800
 800fd04:	40000c00 	.word	0x40000c00
 800fd08:	40010400 	.word	0x40010400
 800fd0c:	40014000 	.word	0x40014000
 800fd10:	40014400 	.word	0x40014400
 800fd14:	40014800 	.word	0x40014800

0800fd18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b087      	sub	sp, #28
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
 800fd26:	f023 0201 	bic.w	r2, r3, #1
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	699b      	ldr	r3, [r3, #24]
 800fd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	4b37      	ldr	r3, [pc, #220]	; (800fe20 <TIM_OC1_SetConfig+0x108>)
 800fd44:	4013      	ands	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 0303 	bic.w	r3, r3, #3
 800fd4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f023 0302 	bic.w	r3, r3, #2
 800fd60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	697a      	ldr	r2, [r7, #20]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a2d      	ldr	r2, [pc, #180]	; (800fe24 <TIM_OC1_SetConfig+0x10c>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d00f      	beq.n	800fd94 <TIM_OC1_SetConfig+0x7c>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a2c      	ldr	r2, [pc, #176]	; (800fe28 <TIM_OC1_SetConfig+0x110>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d00b      	beq.n	800fd94 <TIM_OC1_SetConfig+0x7c>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a2b      	ldr	r2, [pc, #172]	; (800fe2c <TIM_OC1_SetConfig+0x114>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d007      	beq.n	800fd94 <TIM_OC1_SetConfig+0x7c>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a2a      	ldr	r2, [pc, #168]	; (800fe30 <TIM_OC1_SetConfig+0x118>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d003      	beq.n	800fd94 <TIM_OC1_SetConfig+0x7c>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <TIM_OC1_SetConfig+0x11c>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d10c      	bne.n	800fdae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	f023 0308 	bic.w	r3, r3, #8
 800fd9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	f023 0304 	bic.w	r3, r3, #4
 800fdac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a1c      	ldr	r2, [pc, #112]	; (800fe24 <TIM_OC1_SetConfig+0x10c>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d00f      	beq.n	800fdd6 <TIM_OC1_SetConfig+0xbe>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4a1b      	ldr	r2, [pc, #108]	; (800fe28 <TIM_OC1_SetConfig+0x110>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d00b      	beq.n	800fdd6 <TIM_OC1_SetConfig+0xbe>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a1a      	ldr	r2, [pc, #104]	; (800fe2c <TIM_OC1_SetConfig+0x114>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d007      	beq.n	800fdd6 <TIM_OC1_SetConfig+0xbe>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a19      	ldr	r2, [pc, #100]	; (800fe30 <TIM_OC1_SetConfig+0x118>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d003      	beq.n	800fdd6 <TIM_OC1_SetConfig+0xbe>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a18      	ldr	r2, [pc, #96]	; (800fe34 <TIM_OC1_SetConfig+0x11c>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d111      	bne.n	800fdfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fde4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	695b      	ldr	r3, [r3, #20]
 800fdea:	693a      	ldr	r2, [r7, #16]
 800fdec:	4313      	orrs	r3, r2
 800fdee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	699b      	ldr	r3, [r3, #24]
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	697a      	ldr	r2, [r7, #20]
 800fe12:	621a      	str	r2, [r3, #32]
}
 800fe14:	bf00      	nop
 800fe16:	371c      	adds	r7, #28
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	fffeff8f 	.word	0xfffeff8f
 800fe24:	40010000 	.word	0x40010000
 800fe28:	40010400 	.word	0x40010400
 800fe2c:	40014000 	.word	0x40014000
 800fe30:	40014400 	.word	0x40014400
 800fe34:	40014800 	.word	0x40014800

0800fe38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	f023 0210 	bic.w	r2, r3, #16
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	699b      	ldr	r3, [r3, #24]
 800fe5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	4b34      	ldr	r3, [pc, #208]	; (800ff34 <TIM_OC2_SetConfig+0xfc>)
 800fe64:	4013      	ands	r3, r2
 800fe66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	021b      	lsls	r3, r3, #8
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f023 0320 	bic.w	r3, r3, #32
 800fe82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	011b      	lsls	r3, r3, #4
 800fe8a:	697a      	ldr	r2, [r7, #20]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a29      	ldr	r2, [pc, #164]	; (800ff38 <TIM_OC2_SetConfig+0x100>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d003      	beq.n	800fea0 <TIM_OC2_SetConfig+0x68>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a28      	ldr	r2, [pc, #160]	; (800ff3c <TIM_OC2_SetConfig+0x104>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d10d      	bne.n	800febc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	011b      	lsls	r3, r3, #4
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800feba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4a1e      	ldr	r2, [pc, #120]	; (800ff38 <TIM_OC2_SetConfig+0x100>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d00f      	beq.n	800fee4 <TIM_OC2_SetConfig+0xac>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4a1d      	ldr	r2, [pc, #116]	; (800ff3c <TIM_OC2_SetConfig+0x104>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d00b      	beq.n	800fee4 <TIM_OC2_SetConfig+0xac>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a1c      	ldr	r2, [pc, #112]	; (800ff40 <TIM_OC2_SetConfig+0x108>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d007      	beq.n	800fee4 <TIM_OC2_SetConfig+0xac>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a1b      	ldr	r2, [pc, #108]	; (800ff44 <TIM_OC2_SetConfig+0x10c>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d003      	beq.n	800fee4 <TIM_OC2_SetConfig+0xac>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4a1a      	ldr	r2, [pc, #104]	; (800ff48 <TIM_OC2_SetConfig+0x110>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d113      	bne.n	800ff0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800feea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	693a      	ldr	r2, [r7, #16]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	699b      	ldr	r3, [r3, #24]
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	693a      	ldr	r2, [r7, #16]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	693a      	ldr	r2, [r7, #16]
 800ff10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	697a      	ldr	r2, [r7, #20]
 800ff24:	621a      	str	r2, [r3, #32]
}
 800ff26:	bf00      	nop
 800ff28:	371c      	adds	r7, #28
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	feff8fff 	.word	0xfeff8fff
 800ff38:	40010000 	.word	0x40010000
 800ff3c:	40010400 	.word	0x40010400
 800ff40:	40014000 	.word	0x40014000
 800ff44:	40014400 	.word	0x40014400
 800ff48:	40014800 	.word	0x40014800

0800ff4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a1b      	ldr	r3, [r3, #32]
 800ff66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	69db      	ldr	r3, [r3, #28]
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4b33      	ldr	r3, [pc, #204]	; (8010044 <TIM_OC3_SetConfig+0xf8>)
 800ff78:	4013      	ands	r3, r2
 800ff7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f023 0303 	bic.w	r3, r3, #3
 800ff82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	021b      	lsls	r3, r3, #8
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4a28      	ldr	r2, [pc, #160]	; (8010048 <TIM_OC3_SetConfig+0xfc>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d003      	beq.n	800ffb2 <TIM_OC3_SetConfig+0x66>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	4a27      	ldr	r2, [pc, #156]	; (801004c <TIM_OC3_SetConfig+0x100>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d10d      	bne.n	800ffce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	021b      	lsls	r3, r3, #8
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a1d      	ldr	r2, [pc, #116]	; (8010048 <TIM_OC3_SetConfig+0xfc>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d00f      	beq.n	800fff6 <TIM_OC3_SetConfig+0xaa>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a1c      	ldr	r2, [pc, #112]	; (801004c <TIM_OC3_SetConfig+0x100>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d00b      	beq.n	800fff6 <TIM_OC3_SetConfig+0xaa>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a1b      	ldr	r2, [pc, #108]	; (8010050 <TIM_OC3_SetConfig+0x104>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d007      	beq.n	800fff6 <TIM_OC3_SetConfig+0xaa>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a1a      	ldr	r2, [pc, #104]	; (8010054 <TIM_OC3_SetConfig+0x108>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d003      	beq.n	800fff6 <TIM_OC3_SetConfig+0xaa>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a19      	ldr	r2, [pc, #100]	; (8010058 <TIM_OC3_SetConfig+0x10c>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d113      	bne.n	801001e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	695b      	ldr	r3, [r3, #20]
 801000a:	011b      	lsls	r3, r3, #4
 801000c:	693a      	ldr	r2, [r7, #16]
 801000e:	4313      	orrs	r3, r2
 8010010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	011b      	lsls	r3, r3, #4
 8010018:	693a      	ldr	r2, [r7, #16]
 801001a:	4313      	orrs	r3, r2
 801001c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	697a      	ldr	r2, [r7, #20]
 8010036:	621a      	str	r2, [r3, #32]
}
 8010038:	bf00      	nop
 801003a:	371c      	adds	r7, #28
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	fffeff8f 	.word	0xfffeff8f
 8010048:	40010000 	.word	0x40010000
 801004c:	40010400 	.word	0x40010400
 8010050:	40014000 	.word	0x40014000
 8010054:	40014400 	.word	0x40014400
 8010058:	40014800 	.word	0x40014800

0801005c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801005c:	b480      	push	{r7}
 801005e:	b087      	sub	sp, #28
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	4b24      	ldr	r3, [pc, #144]	; (8010118 <TIM_OC4_SetConfig+0xbc>)
 8010088:	4013      	ands	r3, r2
 801008a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	021b      	lsls	r3, r3, #8
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	4313      	orrs	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	031b      	lsls	r3, r3, #12
 80100ae:	693a      	ldr	r2, [r7, #16]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a19      	ldr	r2, [pc, #100]	; (801011c <TIM_OC4_SetConfig+0xc0>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d00f      	beq.n	80100dc <TIM_OC4_SetConfig+0x80>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4a18      	ldr	r2, [pc, #96]	; (8010120 <TIM_OC4_SetConfig+0xc4>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d00b      	beq.n	80100dc <TIM_OC4_SetConfig+0x80>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4a17      	ldr	r2, [pc, #92]	; (8010124 <TIM_OC4_SetConfig+0xc8>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d007      	beq.n	80100dc <TIM_OC4_SetConfig+0x80>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4a16      	ldr	r2, [pc, #88]	; (8010128 <TIM_OC4_SetConfig+0xcc>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d003      	beq.n	80100dc <TIM_OC4_SetConfig+0x80>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a15      	ldr	r2, [pc, #84]	; (801012c <TIM_OC4_SetConfig+0xd0>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d109      	bne.n	80100f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	695b      	ldr	r3, [r3, #20]
 80100e8:	019b      	lsls	r3, r3, #6
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	4313      	orrs	r3, r2
 80100ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	685a      	ldr	r2, [r3, #4]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	693a      	ldr	r2, [r7, #16]
 8010108:	621a      	str	r2, [r3, #32]
}
 801010a:	bf00      	nop
 801010c:	371c      	adds	r7, #28
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	feff8fff 	.word	0xfeff8fff
 801011c:	40010000 	.word	0x40010000
 8010120:	40010400 	.word	0x40010400
 8010124:	40014000 	.word	0x40014000
 8010128:	40014400 	.word	0x40014400
 801012c:	40014800 	.word	0x40014800

08010130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010130:	b480      	push	{r7}
 8010132:	b087      	sub	sp, #28
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	4b21      	ldr	r3, [pc, #132]	; (80101e0 <TIM_OC5_SetConfig+0xb0>)
 801015c:	4013      	ands	r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	4313      	orrs	r3, r2
 8010168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	041b      	lsls	r3, r3, #16
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	4313      	orrs	r3, r2
 801017c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a18      	ldr	r2, [pc, #96]	; (80101e4 <TIM_OC5_SetConfig+0xb4>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d00f      	beq.n	80101a6 <TIM_OC5_SetConfig+0x76>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a17      	ldr	r2, [pc, #92]	; (80101e8 <TIM_OC5_SetConfig+0xb8>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d00b      	beq.n	80101a6 <TIM_OC5_SetConfig+0x76>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a16      	ldr	r2, [pc, #88]	; (80101ec <TIM_OC5_SetConfig+0xbc>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d007      	beq.n	80101a6 <TIM_OC5_SetConfig+0x76>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a15      	ldr	r2, [pc, #84]	; (80101f0 <TIM_OC5_SetConfig+0xc0>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d003      	beq.n	80101a6 <TIM_OC5_SetConfig+0x76>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a14      	ldr	r2, [pc, #80]	; (80101f4 <TIM_OC5_SetConfig+0xc4>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d109      	bne.n	80101ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80101ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	021b      	lsls	r3, r3, #8
 80101b4:	697a      	ldr	r2, [r7, #20]
 80101b6:	4313      	orrs	r3, r2
 80101b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	697a      	ldr	r2, [r7, #20]
 80101be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	621a      	str	r2, [r3, #32]
}
 80101d4:	bf00      	nop
 80101d6:	371c      	adds	r7, #28
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr
 80101e0:	fffeff8f 	.word	0xfffeff8f
 80101e4:	40010000 	.word	0x40010000
 80101e8:	40010400 	.word	0x40010400
 80101ec:	40014000 	.word	0x40014000
 80101f0:	40014400 	.word	0x40014400
 80101f4:	40014800 	.word	0x40014800

080101f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b087      	sub	sp, #28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a1b      	ldr	r3, [r3, #32]
 8010206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801021e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	4b22      	ldr	r3, [pc, #136]	; (80102ac <TIM_OC6_SetConfig+0xb4>)
 8010224:	4013      	ands	r3, r2
 8010226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	021b      	lsls	r3, r3, #8
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	4313      	orrs	r3, r2
 8010232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801023a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	051b      	lsls	r3, r3, #20
 8010242:	693a      	ldr	r2, [r7, #16]
 8010244:	4313      	orrs	r3, r2
 8010246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4a19      	ldr	r2, [pc, #100]	; (80102b0 <TIM_OC6_SetConfig+0xb8>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d00f      	beq.n	8010270 <TIM_OC6_SetConfig+0x78>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4a18      	ldr	r2, [pc, #96]	; (80102b4 <TIM_OC6_SetConfig+0xbc>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d00b      	beq.n	8010270 <TIM_OC6_SetConfig+0x78>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4a17      	ldr	r2, [pc, #92]	; (80102b8 <TIM_OC6_SetConfig+0xc0>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d007      	beq.n	8010270 <TIM_OC6_SetConfig+0x78>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4a16      	ldr	r2, [pc, #88]	; (80102bc <TIM_OC6_SetConfig+0xc4>)
 8010264:	4293      	cmp	r3, r2
 8010266:	d003      	beq.n	8010270 <TIM_OC6_SetConfig+0x78>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	4a15      	ldr	r2, [pc, #84]	; (80102c0 <TIM_OC6_SetConfig+0xc8>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d109      	bne.n	8010284 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	029b      	lsls	r3, r3, #10
 801027e:	697a      	ldr	r2, [r7, #20]
 8010280:	4313      	orrs	r3, r2
 8010282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	697a      	ldr	r2, [r7, #20]
 8010288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	685a      	ldr	r2, [r3, #4]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	693a      	ldr	r2, [r7, #16]
 801029c:	621a      	str	r2, [r3, #32]
}
 801029e:	bf00      	nop
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	feff8fff 	.word	0xfeff8fff
 80102b0:	40010000 	.word	0x40010000
 80102b4:	40010400 	.word	0x40010400
 80102b8:	40014000 	.word	0x40014000
 80102bc:	40014400 	.word	0x40014400
 80102c0:	40014800 	.word	0x40014800

080102c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	4b65      	ldr	r3, [pc, #404]	; (8010474 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80102de:	4013      	ands	r3, r2
 80102e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	4b62      	ldr	r3, [pc, #392]	; (8010478 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80102f0:	4013      	ands	r3, r2
 80102f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	693a      	ldr	r2, [r7, #16]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	4a5c      	ldr	r2, [pc, #368]	; (801047c <TIM_SlaveTimer_SetConfig+0x1b8>)
 801030c:	4293      	cmp	r3, r2
 801030e:	f000 80ab 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010312:	4a5a      	ldr	r2, [pc, #360]	; (801047c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010314:	4293      	cmp	r3, r2
 8010316:	f200 80a4 	bhi.w	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801031a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801031e:	f000 80a3 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010326:	f200 809c 	bhi.w	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801032a:	4a55      	ldr	r2, [pc, #340]	; (8010480 <TIM_SlaveTimer_SetConfig+0x1bc>)
 801032c:	4293      	cmp	r3, r2
 801032e:	f000 809b 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010332:	4a53      	ldr	r2, [pc, #332]	; (8010480 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010334:	4293      	cmp	r3, r2
 8010336:	f200 8094 	bhi.w	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801033a:	4a52      	ldr	r2, [pc, #328]	; (8010484 <TIM_SlaveTimer_SetConfig+0x1c0>)
 801033c:	4293      	cmp	r3, r2
 801033e:	f000 8093 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010342:	4a50      	ldr	r2, [pc, #320]	; (8010484 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010344:	4293      	cmp	r3, r2
 8010346:	f200 808c 	bhi.w	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801034a:	4a4f      	ldr	r2, [pc, #316]	; (8010488 <TIM_SlaveTimer_SetConfig+0x1c4>)
 801034c:	4293      	cmp	r3, r2
 801034e:	f000 808b 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010352:	4a4d      	ldr	r2, [pc, #308]	; (8010488 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010354:	4293      	cmp	r3, r2
 8010356:	f200 8084 	bhi.w	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801035a:	4a4c      	ldr	r2, [pc, #304]	; (801048c <TIM_SlaveTimer_SetConfig+0x1c8>)
 801035c:	4293      	cmp	r3, r2
 801035e:	f000 8083 	beq.w	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010362:	4a4a      	ldr	r2, [pc, #296]	; (801048c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d87c      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 8010368:	4a49      	ldr	r2, [pc, #292]	; (8010490 <TIM_SlaveTimer_SetConfig+0x1cc>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d07c      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 801036e:	4a48      	ldr	r2, [pc, #288]	; (8010490 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d876      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 8010374:	4a47      	ldr	r2, [pc, #284]	; (8010494 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d076      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 801037a:	4a46      	ldr	r2, [pc, #280]	; (8010494 <TIM_SlaveTimer_SetConfig+0x1d0>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d870      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 8010380:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010384:	d070      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010386:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801038a:	d86a      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 801038c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010390:	d06a      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010396:	d864      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 8010398:	2b70      	cmp	r3, #112	; 0x70
 801039a:	d01a      	beq.n	80103d2 <TIM_SlaveTimer_SetConfig+0x10e>
 801039c:	2b70      	cmp	r3, #112	; 0x70
 801039e:	d860      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103a0:	2b60      	cmp	r3, #96	; 0x60
 80103a2:	d054      	beq.n	801044e <TIM_SlaveTimer_SetConfig+0x18a>
 80103a4:	2b60      	cmp	r3, #96	; 0x60
 80103a6:	d85c      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103a8:	2b50      	cmp	r3, #80	; 0x50
 80103aa:	d046      	beq.n	801043a <TIM_SlaveTimer_SetConfig+0x176>
 80103ac:	2b50      	cmp	r3, #80	; 0x50
 80103ae:	d858      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103b0:	2b40      	cmp	r3, #64	; 0x40
 80103b2:	d019      	beq.n	80103e8 <TIM_SlaveTimer_SetConfig+0x124>
 80103b4:	2b40      	cmp	r3, #64	; 0x40
 80103b6:	d854      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103b8:	2b30      	cmp	r3, #48	; 0x30
 80103ba:	d055      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103bc:	2b30      	cmp	r3, #48	; 0x30
 80103be:	d850      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103c0:	2b20      	cmp	r3, #32
 80103c2:	d051      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103c4:	2b20      	cmp	r3, #32
 80103c6:	d84c      	bhi.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d04d      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103cc:	2b10      	cmp	r3, #16
 80103ce:	d04b      	beq.n	8010468 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103d0:	e047      	b.n	8010462 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80103e2:	f000 f9e2 	bl	80107aa <TIM_ETR_SetConfig>
      break;
 80103e6:	e040      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b05      	cmp	r3, #5
 80103ee:	d101      	bne.n	80103f4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e03b      	b.n	801046c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6a1b      	ldr	r3, [r3, #32]
 80103fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6a1a      	ldr	r2, [r3, #32]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f022 0201 	bic.w	r2, r2, #1
 801040a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	699b      	ldr	r3, [r3, #24]
 8010412:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801041a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	691b      	ldr	r3, [r3, #16]
 8010420:	011b      	lsls	r3, r3, #4
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	4313      	orrs	r3, r2
 8010426:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	621a      	str	r2, [r3, #32]
      break;
 8010438:	e017      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010446:	461a      	mov	r2, r3
 8010448:	f000 f89a 	bl	8010580 <TIM_TI1_ConfigInputStage>
      break;
 801044c:	e00d      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801045a:	461a      	mov	r2, r3
 801045c:	f000 f8fc 	bl	8010658 <TIM_TI2_ConfigInputStage>
      break;
 8010460:	e003      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010462:	2301      	movs	r3, #1
 8010464:	75fb      	strb	r3, [r7, #23]
      break;
 8010466:	e000      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010468:	bf00      	nop
  }

  return status;
 801046a:	7dfb      	ldrb	r3, [r7, #23]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	ffcfff8f 	.word	0xffcfff8f
 8010478:	fffefff8 	.word	0xfffefff8
 801047c:	00200010 	.word	0x00200010
 8010480:	00100070 	.word	0x00100070
 8010484:	00100060 	.word	0x00100060
 8010488:	00100050 	.word	0x00100050
 801048c:	00100040 	.word	0x00100040
 8010490:	00100030 	.word	0x00100030
 8010494:	00100020 	.word	0x00100020

08010498 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010498:	b480      	push	{r7}
 801049a:	b087      	sub	sp, #28
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
 80104a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	f023 0201 	bic.w	r2, r3, #1
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6a1b      	ldr	r3, [r3, #32]
 80104bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	4a28      	ldr	r2, [pc, #160]	; (8010564 <TIM_TI1_SetConfig+0xcc>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d01b      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104cc:	d017      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	4a25      	ldr	r2, [pc, #148]	; (8010568 <TIM_TI1_SetConfig+0xd0>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d013      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4a24      	ldr	r2, [pc, #144]	; (801056c <TIM_TI1_SetConfig+0xd4>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d00f      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	4a23      	ldr	r2, [pc, #140]	; (8010570 <TIM_TI1_SetConfig+0xd8>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d00b      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	4a22      	ldr	r2, [pc, #136]	; (8010574 <TIM_TI1_SetConfig+0xdc>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d007      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	4a21      	ldr	r2, [pc, #132]	; (8010578 <TIM_TI1_SetConfig+0xe0>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d003      	beq.n	80104fe <TIM_TI1_SetConfig+0x66>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	4a20      	ldr	r2, [pc, #128]	; (801057c <TIM_TI1_SetConfig+0xe4>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d101      	bne.n	8010502 <TIM_TI1_SetConfig+0x6a>
 80104fe:	2301      	movs	r3, #1
 8010500:	e000      	b.n	8010504 <TIM_TI1_SetConfig+0x6c>
 8010502:	2300      	movs	r3, #0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d008      	beq.n	801051a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	f023 0303 	bic.w	r3, r3, #3
 801050e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4313      	orrs	r3, r2
 8010516:	617b      	str	r3, [r7, #20]
 8010518:	e003      	b.n	8010522 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f043 0301 	orr.w	r3, r3, #1
 8010520:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	011b      	lsls	r3, r3, #4
 801052e:	b2db      	uxtb	r3, r3
 8010530:	697a      	ldr	r2, [r7, #20]
 8010532:	4313      	orrs	r3, r2
 8010534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f023 030a 	bic.w	r3, r3, #10
 801053c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	f003 030a 	and.w	r3, r3, #10
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	4313      	orrs	r3, r2
 8010548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	697a      	ldr	r2, [r7, #20]
 801054e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	621a      	str	r2, [r3, #32]
}
 8010556:	bf00      	nop
 8010558:	371c      	adds	r7, #28
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	40010000 	.word	0x40010000
 8010568:	40000400 	.word	0x40000400
 801056c:	40000800 	.word	0x40000800
 8010570:	40000c00 	.word	0x40000c00
 8010574:	40010400 	.word	0x40010400
 8010578:	40001800 	.word	0x40001800
 801057c:	40014000 	.word	0x40014000

08010580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010580:	b480      	push	{r7}
 8010582:	b087      	sub	sp, #28
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6a1b      	ldr	r3, [r3, #32]
 8010590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	f023 0201 	bic.w	r2, r3, #1
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80105aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	011b      	lsls	r3, r3, #4
 80105b0:	693a      	ldr	r2, [r7, #16]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f023 030a 	bic.w	r3, r3, #10
 80105bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80105be:	697a      	ldr	r2, [r7, #20]
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	4313      	orrs	r3, r2
 80105c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	693a      	ldr	r2, [r7, #16]
 80105ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	697a      	ldr	r2, [r7, #20]
 80105d0:	621a      	str	r2, [r3, #32]
}
 80105d2:	bf00      	nop
 80105d4:	371c      	adds	r7, #28
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80105de:	b480      	push	{r7}
 80105e0:	b087      	sub	sp, #28
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	607a      	str	r2, [r7, #4]
 80105ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6a1b      	ldr	r3, [r3, #32]
 80105f0:	f023 0210 	bic.w	r2, r3, #16
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	699b      	ldr	r3, [r3, #24]
 80105fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6a1b      	ldr	r3, [r3, #32]
 8010602:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801060a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	021b      	lsls	r3, r3, #8
 8010610:	697a      	ldr	r2, [r7, #20]
 8010612:	4313      	orrs	r3, r2
 8010614:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801061c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	031b      	lsls	r3, r3, #12
 8010622:	b29b      	uxth	r3, r3
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	4313      	orrs	r3, r2
 8010628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010630:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	011b      	lsls	r3, r3, #4
 8010636:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	4313      	orrs	r3, r2
 801063e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	697a      	ldr	r2, [r7, #20]
 8010644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	621a      	str	r2, [r3, #32]
}
 801064c:	bf00      	nop
 801064e:	371c      	adds	r7, #28
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr

08010658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010658:	b480      	push	{r7}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6a1b      	ldr	r3, [r3, #32]
 8010668:	f023 0210 	bic.w	r2, r3, #16
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	699b      	ldr	r3, [r3, #24]
 8010674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6a1b      	ldr	r3, [r3, #32]
 801067a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	031b      	lsls	r3, r3, #12
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	4313      	orrs	r3, r2
 801068c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	693a      	ldr	r2, [r7, #16]
 801069c:	4313      	orrs	r3, r2
 801069e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	693a      	ldr	r2, [r7, #16]
 80106aa:	621a      	str	r2, [r3, #32]
}
 80106ac:	bf00      	nop
 80106ae:	371c      	adds	r7, #28
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b087      	sub	sp, #28
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	607a      	str	r2, [r7, #4]
 80106c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	69db      	ldr	r3, [r3, #28]
 80106d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6a1b      	ldr	r3, [r3, #32]
 80106dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f023 0303 	bic.w	r3, r3, #3
 80106e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80106f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	011b      	lsls	r3, r3, #4
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	4313      	orrs	r3, r2
 8010700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010708:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	021b      	lsls	r3, r3, #8
 801070e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	4313      	orrs	r3, r2
 8010716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	697a      	ldr	r2, [r7, #20]
 801071c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	621a      	str	r2, [r3, #32]
}
 8010724:	bf00      	nop
 8010726:	371c      	adds	r7, #28
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	69db      	ldr	r3, [r3, #28]
 801074e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	6a1b      	ldr	r3, [r3, #32]
 8010754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801075c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	021b      	lsls	r3, r3, #8
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	4313      	orrs	r3, r2
 8010766:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801076e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	031b      	lsls	r3, r3, #12
 8010774:	b29b      	uxth	r3, r3
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	4313      	orrs	r3, r2
 801077a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010782:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	031b      	lsls	r3, r3, #12
 8010788:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801078c:	693a      	ldr	r2, [r7, #16]
 801078e:	4313      	orrs	r3, r2
 8010790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	693a      	ldr	r2, [r7, #16]
 801079c:	621a      	str	r2, [r3, #32]
}
 801079e:	bf00      	nop
 80107a0:	371c      	adds	r7, #28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80107aa:	b480      	push	{r7}
 80107ac:	b087      	sub	sp, #28
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	60b9      	str	r1, [r7, #8]
 80107b4:	607a      	str	r2, [r7, #4]
 80107b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80107c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	021a      	lsls	r2, r3, #8
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	431a      	orrs	r2, r3
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	4313      	orrs	r3, r2
 80107d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	609a      	str	r2, [r3, #8]
}
 80107de:	bf00      	nop
 80107e0:	371c      	adds	r7, #28
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr
	...

080107ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b085      	sub	sp, #20
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d101      	bne.n	8010804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010800:	2302      	movs	r3, #2
 8010802:	e06d      	b.n	80108e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2201      	movs	r2, #1
 8010808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2202      	movs	r2, #2
 8010810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a30      	ldr	r2, [pc, #192]	; (80108ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d004      	beq.n	8010838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a2f      	ldr	r2, [pc, #188]	; (80108f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d108      	bne.n	801084a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801083e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	4313      	orrs	r3, r2
 8010848:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	4313      	orrs	r3, r2
 801085a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a20      	ldr	r2, [pc, #128]	; (80108ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d022      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010876:	d01d      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a1d      	ldr	r2, [pc, #116]	; (80108f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d018      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a1c      	ldr	r2, [pc, #112]	; (80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d013      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a1a      	ldr	r2, [pc, #104]	; (80108fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d00e      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a15      	ldr	r2, [pc, #84]	; (80108f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d009      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a16      	ldr	r2, [pc, #88]	; (8010900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d004      	beq.n	80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a15      	ldr	r2, [pc, #84]	; (8010904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d10c      	bne.n	80108ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	689b      	ldr	r3, [r3, #8]
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	4313      	orrs	r3, r2
 80108c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2201      	movs	r2, #1
 80108d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3714      	adds	r7, #20
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	40010000 	.word	0x40010000
 80108f0:	40010400 	.word	0x40010400
 80108f4:	40000400 	.word	0x40000400
 80108f8:	40000800 	.word	0x40000800
 80108fc:	40000c00 	.word	0x40000c00
 8010900:	40001800 	.word	0x40001800
 8010904:	40014000 	.word	0x40014000

08010908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010910:	bf00      	nop
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010952:	2301      	movs	r3, #1
 8010954:	e042      	b.n	80109dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7f3 ffa1 	bl	80048b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2224      	movs	r2, #36	; 0x24
 8010972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f022 0201 	bic.w	r2, r2, #1
 8010984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 fcd2 	bl	8011330 <UART_SetConfig>
 801098c:	4603      	mov	r3, r0
 801098e:	2b01      	cmp	r3, #1
 8010990:	d101      	bne.n	8010996 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010992:	2301      	movs	r3, #1
 8010994:	e022      	b.n	80109dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099a:	2b00      	cmp	r3, #0
 801099c:	d002      	beq.n	80109a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f001 fa2e 	bl	8011e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	685a      	ldr	r2, [r3, #4]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	689a      	ldr	r2, [r3, #8]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f042 0201 	orr.w	r2, r2, #1
 80109d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f001 fab5 	bl	8011f44 <UART_CheckIdleState>
 80109da:	4603      	mov	r3, r0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08a      	sub	sp, #40	; 0x28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	4613      	mov	r3, r2
 80109f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109f8:	2b20      	cmp	r3, #32
 80109fa:	d167      	bne.n	8010acc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d002      	beq.n	8010a08 <HAL_UART_Transmit_DMA+0x24>
 8010a02:	88fb      	ldrh	r3, [r7, #6]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d101      	bne.n	8010a0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e060      	b.n	8010ace <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	88fa      	ldrh	r2, [r7, #6]
 8010a16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	88fa      	ldrh	r2, [r7, #6]
 8010a1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2200      	movs	r2, #0
 8010a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2221      	movs	r2, #33	; 0x21
 8010a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d028      	beq.n	8010a8c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a3e:	4a26      	ldr	r2, [pc, #152]	; (8010ad8 <HAL_UART_Transmit_DMA+0xf4>)
 8010a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a46:	4a25      	ldr	r2, [pc, #148]	; (8010adc <HAL_UART_Transmit_DMA+0xf8>)
 8010a48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a4e:	4a24      	ldr	r2, [pc, #144]	; (8010ae0 <HAL_UART_Transmit_DMA+0xfc>)
 8010a50:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a56:	2200      	movs	r2, #0
 8010a58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a62:	4619      	mov	r1, r3
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	3328      	adds	r3, #40	; 0x28
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	88fb      	ldrh	r3, [r7, #6]
 8010a6e:	f7f6 fd05 	bl	800747c <HAL_DMA_Start_IT>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d009      	beq.n	8010a8c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2210      	movs	r2, #16
 8010a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2220      	movs	r2, #32
 8010a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e020      	b.n	8010ace <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2240      	movs	r2, #64	; 0x40
 8010a92:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	3308      	adds	r3, #8
 8010a9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	e853 3f00 	ldrex	r3, [r3]
 8010aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3308      	adds	r3, #8
 8010ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ab4:	623a      	str	r2, [r7, #32]
 8010ab6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab8:	69f9      	ldr	r1, [r7, #28]
 8010aba:	6a3a      	ldr	r2, [r7, #32]
 8010abc:	e841 2300 	strex	r3, r2, [r1]
 8010ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ac2:	69bb      	ldr	r3, [r7, #24]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d1e5      	bne.n	8010a94 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	e000      	b.n	8010ace <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010acc:	2302      	movs	r3, #2
  }
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3728      	adds	r7, #40	; 0x28
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	08012405 	.word	0x08012405
 8010adc:	0801249b 	.word	0x0801249b
 8010ae0:	0801261d 	.word	0x0801261d

08010ae4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08a      	sub	sp, #40	; 0x28
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	4613      	mov	r3, r2
 8010af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010af8:	2b20      	cmp	r3, #32
 8010afa:	d137      	bne.n	8010b6c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <HAL_UART_Receive_DMA+0x24>
 8010b02:	88fb      	ldrh	r3, [r7, #6]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d101      	bne.n	8010b0c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e030      	b.n	8010b6e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a18      	ldr	r2, [pc, #96]	; (8010b78 <HAL_UART_Receive_DMA+0x94>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d01f      	beq.n	8010b5c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d018      	beq.n	8010b5c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	e853 3f00 	ldrex	r3, [r3]
 8010b36:	613b      	str	r3, [r7, #16]
   return(result);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	461a      	mov	r2, r3
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	623b      	str	r3, [r7, #32]
 8010b4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4c:	69f9      	ldr	r1, [r7, #28]
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	e841 2300 	strex	r3, r2, [r1]
 8010b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1e6      	bne.n	8010b2a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010b5c:	88fb      	ldrh	r3, [r7, #6]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	68b9      	ldr	r1, [r7, #8]
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f001 fb00 	bl	8012168 <UART_Start_Receive_DMA>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	e000      	b.n	8010b6e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010b6c:	2302      	movs	r3, #2
  }
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3728      	adds	r7, #40	; 0x28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	58000c00 	.word	0x58000c00

08010b7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b0ba      	sub	sp, #232	; 0xe8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	69db      	ldr	r3, [r3, #28]
 8010b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ba2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010ba6:	f640 030f 	movw	r3, #2063	; 0x80f
 8010baa:	4013      	ands	r3, r2
 8010bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d11b      	bne.n	8010bf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bbc:	f003 0320 	and.w	r3, r3, #32
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d015      	beq.n	8010bf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bc8:	f003 0320 	and.w	r3, r3, #32
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d105      	bne.n	8010bdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d009      	beq.n	8010bf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 8377 	beq.w	80112d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	4798      	blx	r3
      }
      return;
 8010bee:	e371      	b.n	80112d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 8123 	beq.w	8010e40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010bfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010bfe:	4b8d      	ldr	r3, [pc, #564]	; (8010e34 <HAL_UART_IRQHandler+0x2b8>)
 8010c00:	4013      	ands	r3, r2
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d106      	bne.n	8010c14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010c06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010c0a:	4b8b      	ldr	r3, [pc, #556]	; (8010e38 <HAL_UART_IRQHandler+0x2bc>)
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f000 8116 	beq.w	8010e40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d011      	beq.n	8010c44 <HAL_UART_IRQHandler+0xc8>
 8010c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00b      	beq.n	8010c44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2201      	movs	r2, #1
 8010c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c3a:	f043 0201 	orr.w	r2, r3, #1
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c48:	f003 0302 	and.w	r3, r3, #2
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d011      	beq.n	8010c74 <HAL_UART_IRQHandler+0xf8>
 8010c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00b      	beq.n	8010c74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2202      	movs	r2, #2
 8010c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c6a:	f043 0204 	orr.w	r2, r3, #4
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c78:	f003 0304 	and.w	r3, r3, #4
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d011      	beq.n	8010ca4 <HAL_UART_IRQHandler+0x128>
 8010c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c84:	f003 0301 	and.w	r3, r3, #1
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00b      	beq.n	8010ca4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2204      	movs	r2, #4
 8010c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c9a:	f043 0202 	orr.w	r2, r3, #2
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ca8:	f003 0308 	and.w	r3, r3, #8
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d017      	beq.n	8010ce0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cb4:	f003 0320 	and.w	r3, r3, #32
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d105      	bne.n	8010cc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010cbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010cc0:	4b5c      	ldr	r3, [pc, #368]	; (8010e34 <HAL_UART_IRQHandler+0x2b8>)
 8010cc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00b      	beq.n	8010ce0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2208      	movs	r2, #8
 8010cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd6:	f043 0208 	orr.w	r2, r3, #8
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d012      	beq.n	8010d12 <HAL_UART_IRQHandler+0x196>
 8010cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00c      	beq.n	8010d12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d08:	f043 0220 	orr.w	r2, r3, #32
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 82dd 	beq.w	80112d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d22:	f003 0320 	and.w	r3, r3, #32
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d013      	beq.n	8010d52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d2e:	f003 0320 	and.w	r3, r3, #32
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d105      	bne.n	8010d42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d007      	beq.n	8010d52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d003      	beq.n	8010d52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d66:	2b40      	cmp	r3, #64	; 0x40
 8010d68:	d005      	beq.n	8010d76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d054      	beq.n	8010e20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f001 fade 	bl	8012338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d86:	2b40      	cmp	r3, #64	; 0x40
 8010d88:	d146      	bne.n	8010e18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	3308      	adds	r3, #8
 8010d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d98:	e853 3f00 	ldrex	r3, [r3]
 8010d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	3308      	adds	r3, #8
 8010db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010dc6:	e841 2300 	strex	r3, r2, [r1]
 8010dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1d9      	bne.n	8010d8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d017      	beq.n	8010e10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010de6:	4a15      	ldr	r2, [pc, #84]	; (8010e3c <HAL_UART_IRQHandler+0x2c0>)
 8010de8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f7 f8cb 	bl	8007f8c <HAL_DMA_Abort_IT>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d019      	beq.n	8010e30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e0e:	e00f      	b.n	8010e30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7f2 fdcf 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e16:	e00b      	b.n	8010e30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7f2 fdcb 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e1e:	e007      	b.n	8010e30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7f2 fdc7 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010e2e:	e253      	b.n	80112d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e30:	bf00      	nop
    return;
 8010e32:	e251      	b.n	80112d8 <HAL_UART_IRQHandler+0x75c>
 8010e34:	10000001 	.word	0x10000001
 8010e38:	04000120 	.word	0x04000120
 8010e3c:	0801269d 	.word	0x0801269d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	f040 81e7 	bne.w	8011218 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e4e:	f003 0310 	and.w	r3, r3, #16
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 81e0 	beq.w	8011218 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e5c:	f003 0310 	and.w	r3, r3, #16
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 81d9 	beq.w	8011218 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2210      	movs	r2, #16
 8010e6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e78:	2b40      	cmp	r3, #64	; 0x40
 8010e7a:	f040 8151 	bne.w	8011120 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	4a96      	ldr	r2, [pc, #600]	; (80110e0 <HAL_UART_IRQHandler+0x564>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d068      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a93      	ldr	r2, [pc, #588]	; (80110e4 <HAL_UART_IRQHandler+0x568>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d061      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4a91      	ldr	r2, [pc, #580]	; (80110e8 <HAL_UART_IRQHandler+0x56c>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d05a      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a8e      	ldr	r2, [pc, #568]	; (80110ec <HAL_UART_IRQHandler+0x570>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d053      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a8c      	ldr	r2, [pc, #560]	; (80110f0 <HAL_UART_IRQHandler+0x574>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d04c      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a89      	ldr	r2, [pc, #548]	; (80110f4 <HAL_UART_IRQHandler+0x578>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d045      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a87      	ldr	r2, [pc, #540]	; (80110f8 <HAL_UART_IRQHandler+0x57c>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d03e      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a84      	ldr	r2, [pc, #528]	; (80110fc <HAL_UART_IRQHandler+0x580>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d037      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a82      	ldr	r2, [pc, #520]	; (8011100 <HAL_UART_IRQHandler+0x584>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d030      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a7f      	ldr	r2, [pc, #508]	; (8011104 <HAL_UART_IRQHandler+0x588>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d029      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a7d      	ldr	r2, [pc, #500]	; (8011108 <HAL_UART_IRQHandler+0x58c>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d022      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a7a      	ldr	r2, [pc, #488]	; (801110c <HAL_UART_IRQHandler+0x590>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d01b      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a78      	ldr	r2, [pc, #480]	; (8011110 <HAL_UART_IRQHandler+0x594>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d014      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a75      	ldr	r2, [pc, #468]	; (8011114 <HAL_UART_IRQHandler+0x598>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d00d      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a73      	ldr	r2, [pc, #460]	; (8011118 <HAL_UART_IRQHandler+0x59c>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d006      	beq.n	8010f5e <HAL_UART_IRQHandler+0x3e2>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a70      	ldr	r2, [pc, #448]	; (801111c <HAL_UART_IRQHandler+0x5a0>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d106      	bne.n	8010f6c <HAL_UART_IRQHandler+0x3f0>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	e005      	b.n	8010f78 <HAL_UART_IRQHandler+0x3fc>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f000 81ab 	beq.w	80112dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f90:	429a      	cmp	r2, r3
 8010f92:	f080 81a3 	bcs.w	80112dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fa6:	69db      	ldr	r3, [r3, #28]
 8010fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fac:	f000 8087 	beq.w	80110be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fbc:	e853 3f00 	ldrex	r3, [r3]
 8010fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010fde:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010fea:	e841 2300 	strex	r3, r2, [r1]
 8010fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1da      	bne.n	8010fb0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3308      	adds	r3, #8
 8011000:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011004:	e853 3f00 	ldrex	r3, [r3]
 8011008:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801100a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801100c:	f023 0301 	bic.w	r3, r3, #1
 8011010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3308      	adds	r3, #8
 801101a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801101e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011022:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011024:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011026:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801102a:	e841 2300 	strex	r3, r2, [r1]
 801102e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1e1      	bne.n	8010ffa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	3308      	adds	r3, #8
 801103c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011040:	e853 3f00 	ldrex	r3, [r3]
 8011044:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801104c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	3308      	adds	r3, #8
 8011056:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801105a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801105c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801105e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011060:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011062:	e841 2300 	strex	r3, r2, [r1]
 8011066:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1e3      	bne.n	8011036 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2220      	movs	r2, #32
 8011072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011084:	e853 3f00 	ldrex	r3, [r3]
 8011088:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801108a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801108c:	f023 0310 	bic.w	r3, r3, #16
 8011090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	461a      	mov	r2, r3
 801109a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801109e:	65bb      	str	r3, [r7, #88]	; 0x58
 80110a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80110ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1e4      	bne.n	801107c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7f6 fc49 	bl	8007950 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2202      	movs	r2, #2
 80110c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f91d 	bl	8011318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110de:	e0fd      	b.n	80112dc <HAL_UART_IRQHandler+0x760>
 80110e0:	40020010 	.word	0x40020010
 80110e4:	40020028 	.word	0x40020028
 80110e8:	40020040 	.word	0x40020040
 80110ec:	40020058 	.word	0x40020058
 80110f0:	40020070 	.word	0x40020070
 80110f4:	40020088 	.word	0x40020088
 80110f8:	400200a0 	.word	0x400200a0
 80110fc:	400200b8 	.word	0x400200b8
 8011100:	40020410 	.word	0x40020410
 8011104:	40020428 	.word	0x40020428
 8011108:	40020440 	.word	0x40020440
 801110c:	40020458 	.word	0x40020458
 8011110:	40020470 	.word	0x40020470
 8011114:	40020488 	.word	0x40020488
 8011118:	400204a0 	.word	0x400204a0
 801111c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801112c:	b29b      	uxth	r3, r3
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801113a:	b29b      	uxth	r3, r3
 801113c:	2b00      	cmp	r3, #0
 801113e:	f000 80cf 	beq.w	80112e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8011142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011146:	2b00      	cmp	r3, #0
 8011148:	f000 80ca 	beq.w	80112e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	e853 3f00 	ldrex	r3, [r3]
 8011158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	461a      	mov	r2, r3
 801116a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801116e:	647b      	str	r3, [r7, #68]	; 0x44
 8011170:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011176:	e841 2300 	strex	r3, r2, [r1]
 801117a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1e4      	bne.n	801114c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	3308      	adds	r3, #8
 8011188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	e853 3f00 	ldrex	r3, [r3]
 8011190:	623b      	str	r3, [r7, #32]
   return(result);
 8011192:	6a3a      	ldr	r2, [r7, #32]
 8011194:	4b55      	ldr	r3, [pc, #340]	; (80112ec <HAL_UART_IRQHandler+0x770>)
 8011196:	4013      	ands	r3, r2
 8011198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	3308      	adds	r3, #8
 80111a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80111a6:	633a      	str	r2, [r7, #48]	; 0x30
 80111a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ae:	e841 2300 	strex	r3, r2, [r1]
 80111b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1e3      	bne.n	8011182 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2220      	movs	r2, #32
 80111be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	e853 3f00 	ldrex	r3, [r3]
 80111da:	60fb      	str	r3, [r7, #12]
   return(result);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f023 0310 	bic.w	r3, r3, #16
 80111e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	461a      	mov	r2, r3
 80111ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80111f0:	61fb      	str	r3, [r7, #28]
 80111f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111f4:	69b9      	ldr	r1, [r7, #24]
 80111f6:	69fa      	ldr	r2, [r7, #28]
 80111f8:	e841 2300 	strex	r3, r2, [r1]
 80111fc:	617b      	str	r3, [r7, #20]
   return(result);
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1e4      	bne.n	80111ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2202      	movs	r2, #2
 8011208:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801120a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801120e:	4619      	mov	r1, r3
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 f881 	bl	8011318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011216:	e063      	b.n	80112e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801121c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d00e      	beq.n	8011242 <HAL_UART_IRQHandler+0x6c6>
 8011224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801122c:	2b00      	cmp	r3, #0
 801122e:	d008      	beq.n	8011242 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f001 fa6f 	bl	801271e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011240:	e051      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801124a:	2b00      	cmp	r3, #0
 801124c:	d014      	beq.n	8011278 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801124e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011256:	2b00      	cmp	r3, #0
 8011258:	d105      	bne.n	8011266 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801125a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801125e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011262:	2b00      	cmp	r3, #0
 8011264:	d008      	beq.n	8011278 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801126a:	2b00      	cmp	r3, #0
 801126c:	d03a      	beq.n	80112e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	4798      	blx	r3
    }
    return;
 8011276:	e035      	b.n	80112e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801127c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011280:	2b00      	cmp	r3, #0
 8011282:	d009      	beq.n	8011298 <HAL_UART_IRQHandler+0x71c>
 8011284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801128c:	2b00      	cmp	r3, #0
 801128e:	d003      	beq.n	8011298 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f001 fa19 	bl	80126c8 <UART_EndTransmit_IT>
    return;
 8011296:	e026      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801129c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d009      	beq.n	80112b8 <HAL_UART_IRQHandler+0x73c>
 80112a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d003      	beq.n	80112b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f001 fa48 	bl	8012746 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112b6:	e016      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80112b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d010      	beq.n	80112e6 <HAL_UART_IRQHandler+0x76a>
 80112c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	da0c      	bge.n	80112e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f001 fa30 	bl	8012732 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112d2:	e008      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112d4:	bf00      	nop
 80112d6:	e006      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80112d8:	bf00      	nop
 80112da:	e004      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112dc:	bf00      	nop
 80112de:	e002      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112e0:	bf00      	nop
 80112e2:	e000      	b.n	80112e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80112e4:	bf00      	nop
  }
}
 80112e6:	37e8      	adds	r7, #232	; 0xe8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	effffffe 	.word	0xeffffffe

080112f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80112f8:	bf00      	nop
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801130c:	bf00      	nop
 801130e:	370c      	adds	r7, #12
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011324:	bf00      	nop
 8011326:	370c      	adds	r7, #12
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr

08011330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011334:	b092      	sub	sp, #72	; 0x48
 8011336:	af00      	add	r7, sp, #0
 8011338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	689a      	ldr	r2, [r3, #8]
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	431a      	orrs	r2, r3
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	695b      	ldr	r3, [r3, #20]
 801134e:	431a      	orrs	r2, r3
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	69db      	ldr	r3, [r3, #28]
 8011354:	4313      	orrs	r3, r2
 8011356:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	4bbe      	ldr	r3, [pc, #760]	; (8011658 <UART_SetConfig+0x328>)
 8011360:	4013      	ands	r3, r2
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	6812      	ldr	r2, [r2, #0]
 8011366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011368:	430b      	orrs	r3, r1
 801136a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	68da      	ldr	r2, [r3, #12]
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	430a      	orrs	r2, r1
 8011380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	699b      	ldr	r3, [r3, #24]
 8011386:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4ab3      	ldr	r2, [pc, #716]	; (801165c <UART_SetConfig+0x32c>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d004      	beq.n	801139c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	6a1b      	ldr	r3, [r3, #32]
 8011396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011398:	4313      	orrs	r3, r2
 801139a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	689a      	ldr	r2, [r3, #8]
 80113a2:	4baf      	ldr	r3, [pc, #700]	; (8011660 <UART_SetConfig+0x330>)
 80113a4:	4013      	ands	r3, r2
 80113a6:	697a      	ldr	r2, [r7, #20]
 80113a8:	6812      	ldr	r2, [r2, #0]
 80113aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113ac:	430b      	orrs	r3, r1
 80113ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b6:	f023 010f 	bic.w	r1, r3, #15
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	430a      	orrs	r2, r1
 80113c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4aa6      	ldr	r2, [pc, #664]	; (8011664 <UART_SetConfig+0x334>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d177      	bne.n	80114c0 <UART_SetConfig+0x190>
 80113d0:	4ba5      	ldr	r3, [pc, #660]	; (8011668 <UART_SetConfig+0x338>)
 80113d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113d8:	2b28      	cmp	r3, #40	; 0x28
 80113da:	d86d      	bhi.n	80114b8 <UART_SetConfig+0x188>
 80113dc:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <UART_SetConfig+0xb4>)
 80113de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e2:	bf00      	nop
 80113e4:	08011489 	.word	0x08011489
 80113e8:	080114b9 	.word	0x080114b9
 80113ec:	080114b9 	.word	0x080114b9
 80113f0:	080114b9 	.word	0x080114b9
 80113f4:	080114b9 	.word	0x080114b9
 80113f8:	080114b9 	.word	0x080114b9
 80113fc:	080114b9 	.word	0x080114b9
 8011400:	080114b9 	.word	0x080114b9
 8011404:	08011491 	.word	0x08011491
 8011408:	080114b9 	.word	0x080114b9
 801140c:	080114b9 	.word	0x080114b9
 8011410:	080114b9 	.word	0x080114b9
 8011414:	080114b9 	.word	0x080114b9
 8011418:	080114b9 	.word	0x080114b9
 801141c:	080114b9 	.word	0x080114b9
 8011420:	080114b9 	.word	0x080114b9
 8011424:	08011499 	.word	0x08011499
 8011428:	080114b9 	.word	0x080114b9
 801142c:	080114b9 	.word	0x080114b9
 8011430:	080114b9 	.word	0x080114b9
 8011434:	080114b9 	.word	0x080114b9
 8011438:	080114b9 	.word	0x080114b9
 801143c:	080114b9 	.word	0x080114b9
 8011440:	080114b9 	.word	0x080114b9
 8011444:	080114a1 	.word	0x080114a1
 8011448:	080114b9 	.word	0x080114b9
 801144c:	080114b9 	.word	0x080114b9
 8011450:	080114b9 	.word	0x080114b9
 8011454:	080114b9 	.word	0x080114b9
 8011458:	080114b9 	.word	0x080114b9
 801145c:	080114b9 	.word	0x080114b9
 8011460:	080114b9 	.word	0x080114b9
 8011464:	080114a9 	.word	0x080114a9
 8011468:	080114b9 	.word	0x080114b9
 801146c:	080114b9 	.word	0x080114b9
 8011470:	080114b9 	.word	0x080114b9
 8011474:	080114b9 	.word	0x080114b9
 8011478:	080114b9 	.word	0x080114b9
 801147c:	080114b9 	.word	0x080114b9
 8011480:	080114b9 	.word	0x080114b9
 8011484:	080114b1 	.word	0x080114b1
 8011488:	2301      	movs	r3, #1
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e222      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011490:	2304      	movs	r3, #4
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e21e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011498:	2308      	movs	r3, #8
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e21a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114a0:	2310      	movs	r3, #16
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e216      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114a8:	2320      	movs	r3, #32
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e212      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114b0:	2340      	movs	r3, #64	; 0x40
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e20e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114b8:	2380      	movs	r3, #128	; 0x80
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e20a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a69      	ldr	r2, [pc, #420]	; (801166c <UART_SetConfig+0x33c>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d130      	bne.n	801152c <UART_SetConfig+0x1fc>
 80114ca:	4b67      	ldr	r3, [pc, #412]	; (8011668 <UART_SetConfig+0x338>)
 80114cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ce:	f003 0307 	and.w	r3, r3, #7
 80114d2:	2b05      	cmp	r3, #5
 80114d4:	d826      	bhi.n	8011524 <UART_SetConfig+0x1f4>
 80114d6:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <UART_SetConfig+0x1ac>)
 80114d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114dc:	080114f5 	.word	0x080114f5
 80114e0:	080114fd 	.word	0x080114fd
 80114e4:	08011505 	.word	0x08011505
 80114e8:	0801150d 	.word	0x0801150d
 80114ec:	08011515 	.word	0x08011515
 80114f0:	0801151d 	.word	0x0801151d
 80114f4:	2300      	movs	r3, #0
 80114f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fa:	e1ec      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80114fc:	2304      	movs	r3, #4
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e1e8      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011504:	2308      	movs	r3, #8
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e1e4      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801150c:	2310      	movs	r3, #16
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e1e0      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011514:	2320      	movs	r3, #32
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e1dc      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801151c:	2340      	movs	r3, #64	; 0x40
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e1d8      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011524:	2380      	movs	r3, #128	; 0x80
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e1d4      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a4f      	ldr	r2, [pc, #316]	; (8011670 <UART_SetConfig+0x340>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d130      	bne.n	8011598 <UART_SetConfig+0x268>
 8011536:	4b4c      	ldr	r3, [pc, #304]	; (8011668 <UART_SetConfig+0x338>)
 8011538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801153a:	f003 0307 	and.w	r3, r3, #7
 801153e:	2b05      	cmp	r3, #5
 8011540:	d826      	bhi.n	8011590 <UART_SetConfig+0x260>
 8011542:	a201      	add	r2, pc, #4	; (adr r2, 8011548 <UART_SetConfig+0x218>)
 8011544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011548:	08011561 	.word	0x08011561
 801154c:	08011569 	.word	0x08011569
 8011550:	08011571 	.word	0x08011571
 8011554:	08011579 	.word	0x08011579
 8011558:	08011581 	.word	0x08011581
 801155c:	08011589 	.word	0x08011589
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e1b6      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011568:	2304      	movs	r3, #4
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e1b2      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011570:	2308      	movs	r3, #8
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e1ae      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011578:	2310      	movs	r3, #16
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157e:	e1aa      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011580:	2320      	movs	r3, #32
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e1a6      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011588:	2340      	movs	r3, #64	; 0x40
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e1a2      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011590:	2380      	movs	r3, #128	; 0x80
 8011592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011596:	e19e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4a35      	ldr	r2, [pc, #212]	; (8011674 <UART_SetConfig+0x344>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d130      	bne.n	8011604 <UART_SetConfig+0x2d4>
 80115a2:	4b31      	ldr	r3, [pc, #196]	; (8011668 <UART_SetConfig+0x338>)
 80115a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115a6:	f003 0307 	and.w	r3, r3, #7
 80115aa:	2b05      	cmp	r3, #5
 80115ac:	d826      	bhi.n	80115fc <UART_SetConfig+0x2cc>
 80115ae:	a201      	add	r2, pc, #4	; (adr r2, 80115b4 <UART_SetConfig+0x284>)
 80115b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b4:	080115cd 	.word	0x080115cd
 80115b8:	080115d5 	.word	0x080115d5
 80115bc:	080115dd 	.word	0x080115dd
 80115c0:	080115e5 	.word	0x080115e5
 80115c4:	080115ed 	.word	0x080115ed
 80115c8:	080115f5 	.word	0x080115f5
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d2:	e180      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115d4:	2304      	movs	r3, #4
 80115d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115da:	e17c      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115dc:	2308      	movs	r3, #8
 80115de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115e2:	e178      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115e4:	2310      	movs	r3, #16
 80115e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ea:	e174      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115ec:	2320      	movs	r3, #32
 80115ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f2:	e170      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115f4:	2340      	movs	r3, #64	; 0x40
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e16c      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80115fc:	2380      	movs	r3, #128	; 0x80
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e168      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a1b      	ldr	r2, [pc, #108]	; (8011678 <UART_SetConfig+0x348>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d142      	bne.n	8011694 <UART_SetConfig+0x364>
 801160e:	4b16      	ldr	r3, [pc, #88]	; (8011668 <UART_SetConfig+0x338>)
 8011610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011612:	f003 0307 	and.w	r3, r3, #7
 8011616:	2b05      	cmp	r3, #5
 8011618:	d838      	bhi.n	801168c <UART_SetConfig+0x35c>
 801161a:	a201      	add	r2, pc, #4	; (adr r2, 8011620 <UART_SetConfig+0x2f0>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	08011639 	.word	0x08011639
 8011624:	08011641 	.word	0x08011641
 8011628:	08011649 	.word	0x08011649
 801162c:	08011651 	.word	0x08011651
 8011630:	0801167d 	.word	0x0801167d
 8011634:	08011685 	.word	0x08011685
 8011638:	2300      	movs	r3, #0
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163e:	e14a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011640:	2304      	movs	r3, #4
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011646:	e146      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011648:	2308      	movs	r3, #8
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164e:	e142      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011650:	2310      	movs	r3, #16
 8011652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011656:	e13e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011658:	cfff69f3 	.word	0xcfff69f3
 801165c:	58000c00 	.word	0x58000c00
 8011660:	11fff4ff 	.word	0x11fff4ff
 8011664:	40011000 	.word	0x40011000
 8011668:	58024400 	.word	0x58024400
 801166c:	40004400 	.word	0x40004400
 8011670:	40004800 	.word	0x40004800
 8011674:	40004c00 	.word	0x40004c00
 8011678:	40005000 	.word	0x40005000
 801167c:	2320      	movs	r3, #32
 801167e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011682:	e128      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011684:	2340      	movs	r3, #64	; 0x40
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e124      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801168c:	2380      	movs	r3, #128	; 0x80
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e120      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4acb      	ldr	r2, [pc, #812]	; (80119c8 <UART_SetConfig+0x698>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d176      	bne.n	801178c <UART_SetConfig+0x45c>
 801169e:	4bcb      	ldr	r3, [pc, #812]	; (80119cc <UART_SetConfig+0x69c>)
 80116a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80116a6:	2b28      	cmp	r3, #40	; 0x28
 80116a8:	d86c      	bhi.n	8011784 <UART_SetConfig+0x454>
 80116aa:	a201      	add	r2, pc, #4	; (adr r2, 80116b0 <UART_SetConfig+0x380>)
 80116ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b0:	08011755 	.word	0x08011755
 80116b4:	08011785 	.word	0x08011785
 80116b8:	08011785 	.word	0x08011785
 80116bc:	08011785 	.word	0x08011785
 80116c0:	08011785 	.word	0x08011785
 80116c4:	08011785 	.word	0x08011785
 80116c8:	08011785 	.word	0x08011785
 80116cc:	08011785 	.word	0x08011785
 80116d0:	0801175d 	.word	0x0801175d
 80116d4:	08011785 	.word	0x08011785
 80116d8:	08011785 	.word	0x08011785
 80116dc:	08011785 	.word	0x08011785
 80116e0:	08011785 	.word	0x08011785
 80116e4:	08011785 	.word	0x08011785
 80116e8:	08011785 	.word	0x08011785
 80116ec:	08011785 	.word	0x08011785
 80116f0:	08011765 	.word	0x08011765
 80116f4:	08011785 	.word	0x08011785
 80116f8:	08011785 	.word	0x08011785
 80116fc:	08011785 	.word	0x08011785
 8011700:	08011785 	.word	0x08011785
 8011704:	08011785 	.word	0x08011785
 8011708:	08011785 	.word	0x08011785
 801170c:	08011785 	.word	0x08011785
 8011710:	0801176d 	.word	0x0801176d
 8011714:	08011785 	.word	0x08011785
 8011718:	08011785 	.word	0x08011785
 801171c:	08011785 	.word	0x08011785
 8011720:	08011785 	.word	0x08011785
 8011724:	08011785 	.word	0x08011785
 8011728:	08011785 	.word	0x08011785
 801172c:	08011785 	.word	0x08011785
 8011730:	08011775 	.word	0x08011775
 8011734:	08011785 	.word	0x08011785
 8011738:	08011785 	.word	0x08011785
 801173c:	08011785 	.word	0x08011785
 8011740:	08011785 	.word	0x08011785
 8011744:	08011785 	.word	0x08011785
 8011748:	08011785 	.word	0x08011785
 801174c:	08011785 	.word	0x08011785
 8011750:	0801177d 	.word	0x0801177d
 8011754:	2301      	movs	r3, #1
 8011756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175a:	e0bc      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801175c:	2304      	movs	r3, #4
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011762:	e0b8      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011764:	2308      	movs	r3, #8
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e0b4      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801176c:	2310      	movs	r3, #16
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011772:	e0b0      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011774:	2320      	movs	r3, #32
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177a:	e0ac      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801177c:	2340      	movs	r3, #64	; 0x40
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011782:	e0a8      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011784:	2380      	movs	r3, #128	; 0x80
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178a:	e0a4      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a8f      	ldr	r2, [pc, #572]	; (80119d0 <UART_SetConfig+0x6a0>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d130      	bne.n	80117f8 <UART_SetConfig+0x4c8>
 8011796:	4b8d      	ldr	r3, [pc, #564]	; (80119cc <UART_SetConfig+0x69c>)
 8011798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801179a:	f003 0307 	and.w	r3, r3, #7
 801179e:	2b05      	cmp	r3, #5
 80117a0:	d826      	bhi.n	80117f0 <UART_SetConfig+0x4c0>
 80117a2:	a201      	add	r2, pc, #4	; (adr r2, 80117a8 <UART_SetConfig+0x478>)
 80117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a8:	080117c1 	.word	0x080117c1
 80117ac:	080117c9 	.word	0x080117c9
 80117b0:	080117d1 	.word	0x080117d1
 80117b4:	080117d9 	.word	0x080117d9
 80117b8:	080117e1 	.word	0x080117e1
 80117bc:	080117e9 	.word	0x080117e9
 80117c0:	2300      	movs	r3, #0
 80117c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c6:	e086      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117c8:	2304      	movs	r3, #4
 80117ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ce:	e082      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117d0:	2308      	movs	r3, #8
 80117d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d6:	e07e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117d8:	2310      	movs	r3, #16
 80117da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117de:	e07a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117e0:	2320      	movs	r3, #32
 80117e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e6:	e076      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117e8:	2340      	movs	r3, #64	; 0x40
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ee:	e072      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117f0:	2380      	movs	r3, #128	; 0x80
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f6:	e06e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a75      	ldr	r2, [pc, #468]	; (80119d4 <UART_SetConfig+0x6a4>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d130      	bne.n	8011864 <UART_SetConfig+0x534>
 8011802:	4b72      	ldr	r3, [pc, #456]	; (80119cc <UART_SetConfig+0x69c>)
 8011804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011806:	f003 0307 	and.w	r3, r3, #7
 801180a:	2b05      	cmp	r3, #5
 801180c:	d826      	bhi.n	801185c <UART_SetConfig+0x52c>
 801180e:	a201      	add	r2, pc, #4	; (adr r2, 8011814 <UART_SetConfig+0x4e4>)
 8011810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011814:	0801182d 	.word	0x0801182d
 8011818:	08011835 	.word	0x08011835
 801181c:	0801183d 	.word	0x0801183d
 8011820:	08011845 	.word	0x08011845
 8011824:	0801184d 	.word	0x0801184d
 8011828:	08011855 	.word	0x08011855
 801182c:	2300      	movs	r3, #0
 801182e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011832:	e050      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011834:	2304      	movs	r3, #4
 8011836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801183a:	e04c      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801183c:	2308      	movs	r3, #8
 801183e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011842:	e048      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011844:	2310      	movs	r3, #16
 8011846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801184a:	e044      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801184c:	2320      	movs	r3, #32
 801184e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011852:	e040      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011854:	2340      	movs	r3, #64	; 0x40
 8011856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185a:	e03c      	b.n	80118d6 <UART_SetConfig+0x5a6>
 801185c:	2380      	movs	r3, #128	; 0x80
 801185e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011862:	e038      	b.n	80118d6 <UART_SetConfig+0x5a6>
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a5b      	ldr	r2, [pc, #364]	; (80119d8 <UART_SetConfig+0x6a8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d130      	bne.n	80118d0 <UART_SetConfig+0x5a0>
 801186e:	4b57      	ldr	r3, [pc, #348]	; (80119cc <UART_SetConfig+0x69c>)
 8011870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011872:	f003 0307 	and.w	r3, r3, #7
 8011876:	2b05      	cmp	r3, #5
 8011878:	d826      	bhi.n	80118c8 <UART_SetConfig+0x598>
 801187a:	a201      	add	r2, pc, #4	; (adr r2, 8011880 <UART_SetConfig+0x550>)
 801187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011880:	08011899 	.word	0x08011899
 8011884:	080118a1 	.word	0x080118a1
 8011888:	080118a9 	.word	0x080118a9
 801188c:	080118b1 	.word	0x080118b1
 8011890:	080118b9 	.word	0x080118b9
 8011894:	080118c1 	.word	0x080118c1
 8011898:	2302      	movs	r3, #2
 801189a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801189e:	e01a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118a0:	2304      	movs	r3, #4
 80118a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118a6:	e016      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118a8:	2308      	movs	r3, #8
 80118aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ae:	e012      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118b0:	2310      	movs	r3, #16
 80118b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b6:	e00e      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118b8:	2320      	movs	r3, #32
 80118ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118be:	e00a      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118c0:	2340      	movs	r3, #64	; 0x40
 80118c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c6:	e006      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118c8:	2380      	movs	r3, #128	; 0x80
 80118ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ce:	e002      	b.n	80118d6 <UART_SetConfig+0x5a6>
 80118d0:	2380      	movs	r3, #128	; 0x80
 80118d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a3f      	ldr	r2, [pc, #252]	; (80119d8 <UART_SetConfig+0x6a8>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	f040 80f8 	bne.w	8011ad2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80118e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118e6:	2b20      	cmp	r3, #32
 80118e8:	dc46      	bgt.n	8011978 <UART_SetConfig+0x648>
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	f2c0 8082 	blt.w	80119f4 <UART_SetConfig+0x6c4>
 80118f0:	3b02      	subs	r3, #2
 80118f2:	2b1e      	cmp	r3, #30
 80118f4:	d87e      	bhi.n	80119f4 <UART_SetConfig+0x6c4>
 80118f6:	a201      	add	r2, pc, #4	; (adr r2, 80118fc <UART_SetConfig+0x5cc>)
 80118f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fc:	0801197f 	.word	0x0801197f
 8011900:	080119f5 	.word	0x080119f5
 8011904:	08011987 	.word	0x08011987
 8011908:	080119f5 	.word	0x080119f5
 801190c:	080119f5 	.word	0x080119f5
 8011910:	080119f5 	.word	0x080119f5
 8011914:	08011997 	.word	0x08011997
 8011918:	080119f5 	.word	0x080119f5
 801191c:	080119f5 	.word	0x080119f5
 8011920:	080119f5 	.word	0x080119f5
 8011924:	080119f5 	.word	0x080119f5
 8011928:	080119f5 	.word	0x080119f5
 801192c:	080119f5 	.word	0x080119f5
 8011930:	080119f5 	.word	0x080119f5
 8011934:	080119a7 	.word	0x080119a7
 8011938:	080119f5 	.word	0x080119f5
 801193c:	080119f5 	.word	0x080119f5
 8011940:	080119f5 	.word	0x080119f5
 8011944:	080119f5 	.word	0x080119f5
 8011948:	080119f5 	.word	0x080119f5
 801194c:	080119f5 	.word	0x080119f5
 8011950:	080119f5 	.word	0x080119f5
 8011954:	080119f5 	.word	0x080119f5
 8011958:	080119f5 	.word	0x080119f5
 801195c:	080119f5 	.word	0x080119f5
 8011960:	080119f5 	.word	0x080119f5
 8011964:	080119f5 	.word	0x080119f5
 8011968:	080119f5 	.word	0x080119f5
 801196c:	080119f5 	.word	0x080119f5
 8011970:	080119f5 	.word	0x080119f5
 8011974:	080119e7 	.word	0x080119e7
 8011978:	2b40      	cmp	r3, #64	; 0x40
 801197a:	d037      	beq.n	80119ec <UART_SetConfig+0x6bc>
 801197c:	e03a      	b.n	80119f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801197e:	f7fb fd0b 	bl	800d398 <HAL_RCCEx_GetD3PCLK1Freq>
 8011982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011984:	e03c      	b.n	8011a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801198a:	4618      	mov	r0, r3
 801198c:	f7fb fd1a 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011994:	e034      	b.n	8011a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011996:	f107 0318 	add.w	r3, r7, #24
 801199a:	4618      	mov	r0, r3
 801199c:	f7fb fe66 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119a4:	e02c      	b.n	8011a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119a6:	4b09      	ldr	r3, [pc, #36]	; (80119cc <UART_SetConfig+0x69c>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f003 0320 	and.w	r3, r3, #32
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d016      	beq.n	80119e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119b2:	4b06      	ldr	r3, [pc, #24]	; (80119cc <UART_SetConfig+0x69c>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	08db      	lsrs	r3, r3, #3
 80119b8:	f003 0303 	and.w	r3, r3, #3
 80119bc:	4a07      	ldr	r2, [pc, #28]	; (80119dc <UART_SetConfig+0x6ac>)
 80119be:	fa22 f303 	lsr.w	r3, r2, r3
 80119c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119c4:	e01c      	b.n	8011a00 <UART_SetConfig+0x6d0>
 80119c6:	bf00      	nop
 80119c8:	40011400 	.word	0x40011400
 80119cc:	58024400 	.word	0x58024400
 80119d0:	40007800 	.word	0x40007800
 80119d4:	40007c00 	.word	0x40007c00
 80119d8:	58000c00 	.word	0x58000c00
 80119dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80119e0:	4b9d      	ldr	r3, [pc, #628]	; (8011c58 <UART_SetConfig+0x928>)
 80119e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119e4:	e00c      	b.n	8011a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119e6:	4b9d      	ldr	r3, [pc, #628]	; (8011c5c <UART_SetConfig+0x92c>)
 80119e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ea:	e009      	b.n	8011a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119f2:	e005      	b.n	8011a00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80119f4:	2300      	movs	r3, #0
 80119f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119f8:	2301      	movs	r3, #1
 80119fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 81de 	beq.w	8011dc4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0c:	4a94      	ldr	r2, [pc, #592]	; (8011c60 <UART_SetConfig+0x930>)
 8011a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a12:	461a      	mov	r2, r3
 8011a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	685a      	ldr	r2, [r3, #4]
 8011a20:	4613      	mov	r3, r2
 8011a22:	005b      	lsls	r3, r3, #1
 8011a24:	4413      	add	r3, r2
 8011a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d305      	bcc.n	8011a38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d903      	bls.n	8011a40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a3e:	e1c1      	b.n	8011dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a42:	2200      	movs	r2, #0
 8011a44:	60bb      	str	r3, [r7, #8]
 8011a46:	60fa      	str	r2, [r7, #12]
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4c:	4a84      	ldr	r2, [pc, #528]	; (8011c60 <UART_SetConfig+0x930>)
 8011a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	2200      	movs	r2, #0
 8011a56:	603b      	str	r3, [r7, #0]
 8011a58:	607a      	str	r2, [r7, #4]
 8011a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a62:	f7ee fc41 	bl	80002e8 <__aeabi_uldivmod>
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	f04f 0200 	mov.w	r2, #0
 8011a72:	f04f 0300 	mov.w	r3, #0
 8011a76:	020b      	lsls	r3, r1, #8
 8011a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a7c:	0202      	lsls	r2, r0, #8
 8011a7e:	6979      	ldr	r1, [r7, #20]
 8011a80:	6849      	ldr	r1, [r1, #4]
 8011a82:	0849      	lsrs	r1, r1, #1
 8011a84:	2000      	movs	r0, #0
 8011a86:	460c      	mov	r4, r1
 8011a88:	4605      	mov	r5, r0
 8011a8a:	eb12 0804 	adds.w	r8, r2, r4
 8011a8e:	eb43 0905 	adc.w	r9, r3, r5
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	469a      	mov	sl, r3
 8011a9a:	4693      	mov	fp, r2
 8011a9c:	4652      	mov	r2, sl
 8011a9e:	465b      	mov	r3, fp
 8011aa0:	4640      	mov	r0, r8
 8011aa2:	4649      	mov	r1, r9
 8011aa4:	f7ee fc20 	bl	80002e8 <__aeabi_uldivmod>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	460b      	mov	r3, r1
 8011aac:	4613      	mov	r3, r2
 8011aae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ab6:	d308      	bcc.n	8011aca <UART_SetConfig+0x79a>
 8011ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011abe:	d204      	bcs.n	8011aca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac6:	60da      	str	r2, [r3, #12]
 8011ac8:	e17c      	b.n	8011dc4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ad0:	e178      	b.n	8011dc4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	69db      	ldr	r3, [r3, #28]
 8011ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ada:	f040 80c5 	bne.w	8011c68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011ade:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011ae2:	2b20      	cmp	r3, #32
 8011ae4:	dc48      	bgt.n	8011b78 <UART_SetConfig+0x848>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	db7b      	blt.n	8011be2 <UART_SetConfig+0x8b2>
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d879      	bhi.n	8011be2 <UART_SetConfig+0x8b2>
 8011aee:	a201      	add	r2, pc, #4	; (adr r2, 8011af4 <UART_SetConfig+0x7c4>)
 8011af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af4:	08011b7f 	.word	0x08011b7f
 8011af8:	08011b87 	.word	0x08011b87
 8011afc:	08011be3 	.word	0x08011be3
 8011b00:	08011be3 	.word	0x08011be3
 8011b04:	08011b8f 	.word	0x08011b8f
 8011b08:	08011be3 	.word	0x08011be3
 8011b0c:	08011be3 	.word	0x08011be3
 8011b10:	08011be3 	.word	0x08011be3
 8011b14:	08011b9f 	.word	0x08011b9f
 8011b18:	08011be3 	.word	0x08011be3
 8011b1c:	08011be3 	.word	0x08011be3
 8011b20:	08011be3 	.word	0x08011be3
 8011b24:	08011be3 	.word	0x08011be3
 8011b28:	08011be3 	.word	0x08011be3
 8011b2c:	08011be3 	.word	0x08011be3
 8011b30:	08011be3 	.word	0x08011be3
 8011b34:	08011baf 	.word	0x08011baf
 8011b38:	08011be3 	.word	0x08011be3
 8011b3c:	08011be3 	.word	0x08011be3
 8011b40:	08011be3 	.word	0x08011be3
 8011b44:	08011be3 	.word	0x08011be3
 8011b48:	08011be3 	.word	0x08011be3
 8011b4c:	08011be3 	.word	0x08011be3
 8011b50:	08011be3 	.word	0x08011be3
 8011b54:	08011be3 	.word	0x08011be3
 8011b58:	08011be3 	.word	0x08011be3
 8011b5c:	08011be3 	.word	0x08011be3
 8011b60:	08011be3 	.word	0x08011be3
 8011b64:	08011be3 	.word	0x08011be3
 8011b68:	08011be3 	.word	0x08011be3
 8011b6c:	08011be3 	.word	0x08011be3
 8011b70:	08011be3 	.word	0x08011be3
 8011b74:	08011bd5 	.word	0x08011bd5
 8011b78:	2b40      	cmp	r3, #64	; 0x40
 8011b7a:	d02e      	beq.n	8011bda <UART_SetConfig+0x8aa>
 8011b7c:	e031      	b.n	8011be2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b7e:	f7f9 fc55 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
 8011b82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b84:	e033      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b86:	f7f9 fc67 	bl	800b458 <HAL_RCC_GetPCLK2Freq>
 8011b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b8c:	e02f      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fb fc16 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b9c:	e027      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b9e:	f107 0318 	add.w	r3, r7, #24
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fb fd62 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bac:	e01f      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011bae:	4b2d      	ldr	r3, [pc, #180]	; (8011c64 <UART_SetConfig+0x934>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f003 0320 	and.w	r3, r3, #32
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d009      	beq.n	8011bce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011bba:	4b2a      	ldr	r3, [pc, #168]	; (8011c64 <UART_SetConfig+0x934>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	08db      	lsrs	r3, r3, #3
 8011bc0:	f003 0303 	and.w	r3, r3, #3
 8011bc4:	4a24      	ldr	r2, [pc, #144]	; (8011c58 <UART_SetConfig+0x928>)
 8011bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8011bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011bcc:	e00f      	b.n	8011bee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011bce:	4b22      	ldr	r3, [pc, #136]	; (8011c58 <UART_SetConfig+0x928>)
 8011bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bd2:	e00c      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011bd4:	4b21      	ldr	r3, [pc, #132]	; (8011c5c <UART_SetConfig+0x92c>)
 8011bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bd8:	e009      	b.n	8011bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011be0:	e005      	b.n	8011bee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011be2:	2300      	movs	r3, #0
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011be6:	2301      	movs	r3, #1
 8011be8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f000 80e7 	beq.w	8011dc4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfa:	4a19      	ldr	r2, [pc, #100]	; (8011c60 <UART_SetConfig+0x930>)
 8011bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c00:	461a      	mov	r2, r3
 8011c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c08:	005a      	lsls	r2, r3, #1
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	085b      	lsrs	r3, r3, #1
 8011c10:	441a      	add	r2, r3
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	2b0f      	cmp	r3, #15
 8011c20:	d916      	bls.n	8011c50 <UART_SetConfig+0x920>
 8011c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c28:	d212      	bcs.n	8011c50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	f023 030f 	bic.w	r3, r3, #15
 8011c32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	085b      	lsrs	r3, r3, #1
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	f003 0307 	and.w	r3, r3, #7
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c42:	4313      	orrs	r3, r2
 8011c44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011c4c:	60da      	str	r2, [r3, #12]
 8011c4e:	e0b9      	b.n	8011dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011c50:	2301      	movs	r3, #1
 8011c52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c56:	e0b5      	b.n	8011dc4 <UART_SetConfig+0xa94>
 8011c58:	03d09000 	.word	0x03d09000
 8011c5c:	003d0900 	.word	0x003d0900
 8011c60:	08014088 	.word	0x08014088
 8011c64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c6c:	2b20      	cmp	r3, #32
 8011c6e:	dc49      	bgt.n	8011d04 <UART_SetConfig+0x9d4>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	db7c      	blt.n	8011d6e <UART_SetConfig+0xa3e>
 8011c74:	2b20      	cmp	r3, #32
 8011c76:	d87a      	bhi.n	8011d6e <UART_SetConfig+0xa3e>
 8011c78:	a201      	add	r2, pc, #4	; (adr r2, 8011c80 <UART_SetConfig+0x950>)
 8011c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7e:	bf00      	nop
 8011c80:	08011d0b 	.word	0x08011d0b
 8011c84:	08011d13 	.word	0x08011d13
 8011c88:	08011d6f 	.word	0x08011d6f
 8011c8c:	08011d6f 	.word	0x08011d6f
 8011c90:	08011d1b 	.word	0x08011d1b
 8011c94:	08011d6f 	.word	0x08011d6f
 8011c98:	08011d6f 	.word	0x08011d6f
 8011c9c:	08011d6f 	.word	0x08011d6f
 8011ca0:	08011d2b 	.word	0x08011d2b
 8011ca4:	08011d6f 	.word	0x08011d6f
 8011ca8:	08011d6f 	.word	0x08011d6f
 8011cac:	08011d6f 	.word	0x08011d6f
 8011cb0:	08011d6f 	.word	0x08011d6f
 8011cb4:	08011d6f 	.word	0x08011d6f
 8011cb8:	08011d6f 	.word	0x08011d6f
 8011cbc:	08011d6f 	.word	0x08011d6f
 8011cc0:	08011d3b 	.word	0x08011d3b
 8011cc4:	08011d6f 	.word	0x08011d6f
 8011cc8:	08011d6f 	.word	0x08011d6f
 8011ccc:	08011d6f 	.word	0x08011d6f
 8011cd0:	08011d6f 	.word	0x08011d6f
 8011cd4:	08011d6f 	.word	0x08011d6f
 8011cd8:	08011d6f 	.word	0x08011d6f
 8011cdc:	08011d6f 	.word	0x08011d6f
 8011ce0:	08011d6f 	.word	0x08011d6f
 8011ce4:	08011d6f 	.word	0x08011d6f
 8011ce8:	08011d6f 	.word	0x08011d6f
 8011cec:	08011d6f 	.word	0x08011d6f
 8011cf0:	08011d6f 	.word	0x08011d6f
 8011cf4:	08011d6f 	.word	0x08011d6f
 8011cf8:	08011d6f 	.word	0x08011d6f
 8011cfc:	08011d6f 	.word	0x08011d6f
 8011d00:	08011d61 	.word	0x08011d61
 8011d04:	2b40      	cmp	r3, #64	; 0x40
 8011d06:	d02e      	beq.n	8011d66 <UART_SetConfig+0xa36>
 8011d08:	e031      	b.n	8011d6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d0a:	f7f9 fb8f 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
 8011d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d10:	e033      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d12:	f7f9 fba1 	bl	800b458 <HAL_RCC_GetPCLK2Freq>
 8011d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d18:	e02f      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fb fb50 	bl	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d28:	e027      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d2a:	f107 0318 	add.w	r3, r7, #24
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fb fc9c 	bl	800d66c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d38:	e01f      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d3a:	4b2d      	ldr	r3, [pc, #180]	; (8011df0 <UART_SetConfig+0xac0>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f003 0320 	and.w	r3, r3, #32
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d009      	beq.n	8011d5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d46:	4b2a      	ldr	r3, [pc, #168]	; (8011df0 <UART_SetConfig+0xac0>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	08db      	lsrs	r3, r3, #3
 8011d4c:	f003 0303 	and.w	r3, r3, #3
 8011d50:	4a28      	ldr	r2, [pc, #160]	; (8011df4 <UART_SetConfig+0xac4>)
 8011d52:	fa22 f303 	lsr.w	r3, r2, r3
 8011d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d58:	e00f      	b.n	8011d7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011d5a:	4b26      	ldr	r3, [pc, #152]	; (8011df4 <UART_SetConfig+0xac4>)
 8011d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d5e:	e00c      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d60:	4b25      	ldr	r3, [pc, #148]	; (8011df8 <UART_SetConfig+0xac8>)
 8011d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d64:	e009      	b.n	8011d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d6c:	e005      	b.n	8011d7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d72:	2301      	movs	r3, #1
 8011d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d78:	bf00      	nop
    }

    if (pclk != 0U)
 8011d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d021      	beq.n	8011dc4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d84:	4a1d      	ldr	r2, [pc, #116]	; (8011dfc <UART_SetConfig+0xacc>)
 8011d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	085b      	lsrs	r3, r3, #1
 8011d98:	441a      	add	r2, r3
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011da2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	2b0f      	cmp	r3, #15
 8011da8:	d909      	bls.n	8011dbe <UART_SetConfig+0xa8e>
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011db0:	d205      	bcs.n	8011dbe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	60da      	str	r2, [r3, #12]
 8011dbc:	e002      	b.n	8011dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011de0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3748      	adds	r7, #72	; 0x48
 8011de8:	46bd      	mov	sp, r7
 8011dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011dee:	bf00      	nop
 8011df0:	58024400 	.word	0x58024400
 8011df4:	03d09000 	.word	0x03d09000
 8011df8:	003d0900 	.word	0x003d0900
 8011dfc:	08014088 	.word	0x08014088

08011e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00a      	beq.n	8011e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	430a      	orrs	r2, r1
 8011e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e2e:	f003 0302 	and.w	r3, r3, #2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00a      	beq.n	8011e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	430a      	orrs	r2, r1
 8011e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e50:	f003 0304 	and.w	r3, r3, #4
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00a      	beq.n	8011e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e72:	f003 0308 	and.w	r3, r3, #8
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d00a      	beq.n	8011e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	430a      	orrs	r2, r1
 8011e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e94:	f003 0310 	and.w	r3, r3, #16
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00a      	beq.n	8011eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	689b      	ldr	r3, [r3, #8]
 8011ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	430a      	orrs	r2, r1
 8011eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb6:	f003 0320 	and.w	r3, r3, #32
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00a      	beq.n	8011ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	689b      	ldr	r3, [r3, #8]
 8011ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	430a      	orrs	r2, r1
 8011ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d01a      	beq.n	8011f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	430a      	orrs	r2, r1
 8011ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011efe:	d10a      	bne.n	8011f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	430a      	orrs	r2, r1
 8011f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00a      	beq.n	8011f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	430a      	orrs	r2, r1
 8011f36:	605a      	str	r2, [r3, #4]
  }
}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b098      	sub	sp, #96	; 0x60
 8011f48:	af02      	add	r7, sp, #8
 8011f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f54:	f7f3 fd5c 	bl	8005a10 <HAL_GetTick>
 8011f58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f003 0308 	and.w	r3, r3, #8
 8011f64:	2b08      	cmp	r3, #8
 8011f66:	d12f      	bne.n	8011fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f70:	2200      	movs	r2, #0
 8011f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 f88e 	bl	8012098 <UART_WaitOnFlagUntilTimeout>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d022      	beq.n	8011fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	e853 3f00 	ldrex	r3, [r3]
 8011f8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f96:	653b      	str	r3, [r7, #80]	; 0x50
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8011fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fa8:	e841 2300 	strex	r3, r2, [r1]
 8011fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d1e6      	bne.n	8011f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2220      	movs	r2, #32
 8011fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011fc4:	2303      	movs	r3, #3
 8011fc6:	e063      	b.n	8012090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f003 0304 	and.w	r3, r3, #4
 8011fd2:	2b04      	cmp	r3, #4
 8011fd4:	d149      	bne.n	801206a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f000 f857 	bl	8012098 <UART_WaitOnFlagUntilTimeout>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d03c      	beq.n	801206a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	e853 3f00 	ldrex	r3, [r3]
 8011ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	461a      	mov	r2, r3
 801200c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200e:	633b      	str	r3, [r7, #48]	; 0x30
 8012010:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012016:	e841 2300 	strex	r3, r2, [r1]
 801201a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1e6      	bne.n	8011ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3308      	adds	r3, #8
 8012028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	e853 3f00 	ldrex	r3, [r3]
 8012030:	60fb      	str	r3, [r7, #12]
   return(result);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f023 0301 	bic.w	r3, r3, #1
 8012038:	64bb      	str	r3, [r7, #72]	; 0x48
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	3308      	adds	r3, #8
 8012040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012042:	61fa      	str	r2, [r7, #28]
 8012044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012046:	69b9      	ldr	r1, [r7, #24]
 8012048:	69fa      	ldr	r2, [r7, #28]
 801204a:	e841 2300 	strex	r3, r2, [r1]
 801204e:	617b      	str	r3, [r7, #20]
   return(result);
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d1e5      	bne.n	8012022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2220      	movs	r2, #32
 801205a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012066:	2303      	movs	r3, #3
 8012068:	e012      	b.n	8012090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2220      	movs	r2, #32
 801206e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2220      	movs	r2, #32
 8012076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2200      	movs	r2, #0
 8012084:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2200      	movs	r2, #0
 801208a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801208e:	2300      	movs	r3, #0
}
 8012090:	4618      	mov	r0, r3
 8012092:	3758      	adds	r7, #88	; 0x58
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	603b      	str	r3, [r7, #0]
 80120a4:	4613      	mov	r3, r2
 80120a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120a8:	e049      	b.n	801213e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120b0:	d045      	beq.n	801213e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80120b2:	f7f3 fcad 	bl	8005a10 <HAL_GetTick>
 80120b6:	4602      	mov	r2, r0
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	69ba      	ldr	r2, [r7, #24]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d302      	bcc.n	80120c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d101      	bne.n	80120cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80120c8:	2303      	movs	r3, #3
 80120ca:	e048      	b.n	801215e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f003 0304 	and.w	r3, r3, #4
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d031      	beq.n	801213e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	f003 0308 	and.w	r3, r3, #8
 80120e4:	2b08      	cmp	r3, #8
 80120e6:	d110      	bne.n	801210a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2208      	movs	r2, #8
 80120ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f000 f921 	bl	8012338 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2208      	movs	r2, #8
 80120fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012106:	2301      	movs	r3, #1
 8012108:	e029      	b.n	801215e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	69db      	ldr	r3, [r3, #28]
 8012110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012118:	d111      	bne.n	801213e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	f000 f907 	bl	8012338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2220      	movs	r2, #32
 801212e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2200      	movs	r2, #0
 8012136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801213a:	2303      	movs	r3, #3
 801213c:	e00f      	b.n	801215e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	69da      	ldr	r2, [r3, #28]
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	4013      	ands	r3, r2
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	429a      	cmp	r2, r3
 801214c:	bf0c      	ite	eq
 801214e:	2301      	moveq	r3, #1
 8012150:	2300      	movne	r3, #0
 8012152:	b2db      	uxtb	r3, r3
 8012154:	461a      	mov	r2, r3
 8012156:	79fb      	ldrb	r3, [r7, #7]
 8012158:	429a      	cmp	r2, r3
 801215a:	d0a6      	beq.n	80120aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801215c:	2300      	movs	r3, #0
}
 801215e:	4618      	mov	r0, r3
 8012160:	3710      	adds	r7, #16
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b096      	sub	sp, #88	; 0x58
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	4613      	mov	r3, r2
 8012174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	88fa      	ldrh	r2, [r7, #6]
 8012180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2222      	movs	r2, #34	; 0x22
 8012190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801219a:	2b00      	cmp	r3, #0
 801219c:	d02d      	beq.n	80121fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121a4:	4a40      	ldr	r2, [pc, #256]	; (80122a8 <UART_Start_Receive_DMA+0x140>)
 80121a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121ae:	4a3f      	ldr	r2, [pc, #252]	; (80122ac <UART_Start_Receive_DMA+0x144>)
 80121b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121b8:	4a3d      	ldr	r2, [pc, #244]	; (80122b0 <UART_Start_Receive_DMA+0x148>)
 80121ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121c2:	2200      	movs	r2, #0
 80121c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	3324      	adds	r3, #36	; 0x24
 80121d2:	4619      	mov	r1, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121d8:	461a      	mov	r2, r3
 80121da:	88fb      	ldrh	r3, [r7, #6]
 80121dc:	f7f5 f94e 	bl	800747c <HAL_DMA_Start_IT>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d009      	beq.n	80121fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2210      	movs	r2, #16
 80121ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2220      	movs	r2, #32
 80121f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80121f6:	2301      	movs	r3, #1
 80121f8:	e051      	b.n	801229e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	691b      	ldr	r3, [r3, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d018      	beq.n	8012234 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801220a:	e853 3f00 	ldrex	r3, [r3]
 801220e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012216:	657b      	str	r3, [r7, #84]	; 0x54
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	461a      	mov	r2, r3
 801221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012220:	64bb      	str	r3, [r7, #72]	; 0x48
 8012222:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012224:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012228:	e841 2300 	strex	r3, r2, [r1]
 801222c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012230:	2b00      	cmp	r3, #0
 8012232:	d1e6      	bne.n	8012202 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	3308      	adds	r3, #8
 801223a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	e853 3f00 	ldrex	r3, [r3]
 8012242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	f043 0301 	orr.w	r3, r3, #1
 801224a:	653b      	str	r3, [r7, #80]	; 0x50
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3308      	adds	r3, #8
 8012252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012254:	637a      	str	r2, [r7, #52]	; 0x34
 8012256:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801225a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801225c:	e841 2300 	strex	r3, r2, [r1]
 8012260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1e5      	bne.n	8012234 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	3308      	adds	r3, #8
 801226e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	e853 3f00 	ldrex	r3, [r3]
 8012276:	613b      	str	r3, [r7, #16]
   return(result);
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801227e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	3308      	adds	r3, #8
 8012286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012288:	623a      	str	r2, [r7, #32]
 801228a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228c:	69f9      	ldr	r1, [r7, #28]
 801228e:	6a3a      	ldr	r2, [r7, #32]
 8012290:	e841 2300 	strex	r3, r2, [r1]
 8012294:	61bb      	str	r3, [r7, #24]
   return(result);
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1e5      	bne.n	8012268 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801229c:	2300      	movs	r3, #0
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3758      	adds	r7, #88	; 0x58
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	080124b7 	.word	0x080124b7
 80122ac:	080125df 	.word	0x080125df
 80122b0:	0801261d 	.word	0x0801261d

080122b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b08f      	sub	sp, #60	; 0x3c
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c2:	6a3b      	ldr	r3, [r7, #32]
 80122c4:	e853 3f00 	ldrex	r3, [r3]
 80122c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80122d0:	637b      	str	r3, [r7, #52]	; 0x34
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122dc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122e2:	e841 2300 	strex	r3, r2, [r1]
 80122e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d1e6      	bne.n	80122bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	3308      	adds	r3, #8
 80122f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	e853 3f00 	ldrex	r3, [r3]
 80122fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012304:	633b      	str	r3, [r7, #48]	; 0x30
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	3308      	adds	r3, #8
 801230c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801230e:	61ba      	str	r2, [r7, #24]
 8012310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012312:	6979      	ldr	r1, [r7, #20]
 8012314:	69ba      	ldr	r2, [r7, #24]
 8012316:	e841 2300 	strex	r3, r2, [r1]
 801231a:	613b      	str	r3, [r7, #16]
   return(result);
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1e5      	bne.n	80122ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2220      	movs	r2, #32
 8012326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801232a:	bf00      	nop
 801232c:	373c      	adds	r7, #60	; 0x3c
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
	...

08012338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012338:	b480      	push	{r7}
 801233a:	b095      	sub	sp, #84	; 0x54
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012348:	e853 3f00 	ldrex	r3, [r3]
 801234c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235e:	643b      	str	r3, [r7, #64]	; 0x40
 8012360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012366:	e841 2300 	strex	r3, r2, [r1]
 801236a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1e6      	bne.n	8012340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	3308      	adds	r3, #8
 8012378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	e853 3f00 	ldrex	r3, [r3]
 8012380:	61fb      	str	r3, [r7, #28]
   return(result);
 8012382:	69fa      	ldr	r2, [r7, #28]
 8012384:	4b1e      	ldr	r3, [pc, #120]	; (8012400 <UART_EndRxTransfer+0xc8>)
 8012386:	4013      	ands	r3, r2
 8012388:	64bb      	str	r3, [r7, #72]	; 0x48
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	3308      	adds	r3, #8
 8012390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801239a:	e841 2300 	strex	r3, r2, [r1]
 801239e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1e5      	bne.n	8012372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d118      	bne.n	80123e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	e853 3f00 	ldrex	r3, [r3]
 80123ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	f023 0310 	bic.w	r3, r3, #16
 80123c2:	647b      	str	r3, [r7, #68]	; 0x44
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	461a      	mov	r2, r3
 80123ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123cc:	61bb      	str	r3, [r7, #24]
 80123ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d0:	6979      	ldr	r1, [r7, #20]
 80123d2:	69ba      	ldr	r2, [r7, #24]
 80123d4:	e841 2300 	strex	r3, r2, [r1]
 80123d8:	613b      	str	r3, [r7, #16]
   return(result);
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1e6      	bne.n	80123ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2220      	movs	r2, #32
 80123e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80123f4:	bf00      	nop
 80123f6:	3754      	adds	r7, #84	; 0x54
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	effffffe 	.word	0xeffffffe

08012404 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b090      	sub	sp, #64	; 0x40
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012410:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	69db      	ldr	r3, [r3, #28]
 8012416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801241a:	d037      	beq.n	801248c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801241e:	2200      	movs	r2, #0
 8012420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	3308      	adds	r3, #8
 801242a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	e853 3f00 	ldrex	r3, [r3]
 8012432:	623b      	str	r3, [r7, #32]
   return(result);
 8012434:	6a3b      	ldr	r3, [r7, #32]
 8012436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801243a:	63bb      	str	r3, [r7, #56]	; 0x38
 801243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3308      	adds	r3, #8
 8012442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012444:	633a      	str	r2, [r7, #48]	; 0x30
 8012446:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801244a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801244c:	e841 2300 	strex	r3, r2, [r1]
 8012450:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1e5      	bne.n	8012424 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	e853 3f00 	ldrex	r3, [r3]
 8012464:	60fb      	str	r3, [r7, #12]
   return(result);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801246c:	637b      	str	r3, [r7, #52]	; 0x34
 801246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012476:	61fb      	str	r3, [r7, #28]
 8012478:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801247a:	69b9      	ldr	r1, [r7, #24]
 801247c:	69fa      	ldr	r2, [r7, #28]
 801247e:	e841 2300 	strex	r3, r2, [r1]
 8012482:	617b      	str	r3, [r7, #20]
   return(result);
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1e6      	bne.n	8012458 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801248a:	e002      	b.n	8012492 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801248c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801248e:	f7f1 fa49 	bl	8003924 <HAL_UART_TxCpltCallback>
}
 8012492:	bf00      	nop
 8012494:	3740      	adds	r7, #64	; 0x40
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b084      	sub	sp, #16
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f7fe ff21 	bl	80112f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124ae:	bf00      	nop
 80124b0:	3710      	adds	r7, #16
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b09c      	sub	sp, #112	; 0x70
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	69db      	ldr	r3, [r3, #28]
 80124c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124cc:	d071      	beq.n	80125b2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80124ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124d0:	2200      	movs	r2, #0
 80124d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124de:	e853 3f00 	ldrex	r3, [r3]
 80124e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80124e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80124ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	461a      	mov	r2, r3
 80124f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80124f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80124fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124fc:	e841 2300 	strex	r3, r2, [r1]
 8012500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1e6      	bne.n	80124d6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	3308      	adds	r3, #8
 801250e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012512:	e853 3f00 	ldrex	r3, [r3]
 8012516:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801251a:	f023 0301 	bic.w	r3, r3, #1
 801251e:	667b      	str	r3, [r7, #100]	; 0x64
 8012520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	3308      	adds	r3, #8
 8012526:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012528:	647a      	str	r2, [r7, #68]	; 0x44
 801252a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801252c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801252e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012530:	e841 2300 	strex	r3, r2, [r1]
 8012534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012538:	2b00      	cmp	r3, #0
 801253a:	d1e5      	bne.n	8012508 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	3308      	adds	r3, #8
 8012542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012546:	e853 3f00 	ldrex	r3, [r3]
 801254a:	623b      	str	r3, [r7, #32]
   return(result);
 801254c:	6a3b      	ldr	r3, [r7, #32]
 801254e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012552:	663b      	str	r3, [r7, #96]	; 0x60
 8012554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	3308      	adds	r3, #8
 801255a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801255c:	633a      	str	r2, [r7, #48]	; 0x30
 801255e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012564:	e841 2300 	strex	r3, r2, [r1]
 8012568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256c:	2b00      	cmp	r3, #0
 801256e:	d1e5      	bne.n	801253c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012572:	2220      	movs	r2, #32
 8012574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801257a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801257c:	2b01      	cmp	r3, #1
 801257e:	d118      	bne.n	80125b2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	e853 3f00 	ldrex	r3, [r3]
 801258c:	60fb      	str	r3, [r7, #12]
   return(result);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f023 0310 	bic.w	r3, r3, #16
 8012594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	461a      	mov	r2, r3
 801259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801259e:	61fb      	str	r3, [r7, #28]
 80125a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a2:	69b9      	ldr	r1, [r7, #24]
 80125a4:	69fa      	ldr	r2, [r7, #28]
 80125a6:	e841 2300 	strex	r3, r2, [r1]
 80125aa:	617b      	str	r3, [r7, #20]
   return(result);
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1e6      	bne.n	8012580 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125b4:	2200      	movs	r2, #0
 80125b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d107      	bne.n	80125d0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125c6:	4619      	mov	r1, r3
 80125c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80125ca:	f7fe fea5 	bl	8011318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80125ce:	e002      	b.n	80125d6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80125d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80125d2:	f7f1 f9bf 	bl	8003954 <HAL_UART_RxCpltCallback>
}
 80125d6:	bf00      	nop
 80125d8:	3770      	adds	r7, #112	; 0x70
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b084      	sub	sp, #16
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2201      	movs	r2, #1
 80125f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d109      	bne.n	801260e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012600:	085b      	lsrs	r3, r3, #1
 8012602:	b29b      	uxth	r3, r3
 8012604:	4619      	mov	r1, r3
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7fe fe86 	bl	8011318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801260c:	e002      	b.n	8012614 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801260e:	68f8      	ldr	r0, [r7, #12]
 8012610:	f7fe fe78 	bl	8011304 <HAL_UART_RxHalfCpltCallback>
}
 8012614:	bf00      	nop
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b086      	sub	sp, #24
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012628:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012630:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012638:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012644:	2b80      	cmp	r3, #128	; 0x80
 8012646:	d109      	bne.n	801265c <UART_DMAError+0x40>
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2b21      	cmp	r3, #33	; 0x21
 801264c:	d106      	bne.n	801265c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	2200      	movs	r2, #0
 8012652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012656:	6978      	ldr	r0, [r7, #20]
 8012658:	f7ff fe2c 	bl	80122b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012666:	2b40      	cmp	r3, #64	; 0x40
 8012668:	d109      	bne.n	801267e <UART_DMAError+0x62>
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2b22      	cmp	r3, #34	; 0x22
 801266e:	d106      	bne.n	801267e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	2200      	movs	r2, #0
 8012674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012678:	6978      	ldr	r0, [r7, #20]
 801267a:	f7ff fe5d 	bl	8012338 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012684:	f043 0210 	orr.w	r2, r3, #16
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801268e:	6978      	ldr	r0, [r7, #20]
 8012690:	f7f1 f990 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012694:	bf00      	nop
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2200      	movs	r2, #0
 80126ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2200      	movs	r2, #0
 80126b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f7f1 f97a 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126c0:	bf00      	nop
 80126c2:	3710      	adds	r7, #16
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b088      	sub	sp, #32
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	e853 3f00 	ldrex	r3, [r3]
 80126dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126e4:	61fb      	str	r3, [r7, #28]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	61bb      	str	r3, [r7, #24]
 80126f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126f2:	6979      	ldr	r1, [r7, #20]
 80126f4:	69ba      	ldr	r2, [r7, #24]
 80126f6:	e841 2300 	strex	r3, r2, [r1]
 80126fa:	613b      	str	r3, [r7, #16]
   return(result);
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1e6      	bne.n	80126d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2220      	movs	r2, #32
 8012706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7f1 f907 	bl	8003924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012716:	bf00      	nop
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801271e:	b480      	push	{r7}
 8012720:	b083      	sub	sp, #12
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012726:	bf00      	nop
 8012728:	370c      	adds	r7, #12
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr

08012732 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012732:	b480      	push	{r7}
 8012734:	b083      	sub	sp, #12
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801273a:	bf00      	nop
 801273c:	370c      	adds	r7, #12
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr

08012746 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012746:	b480      	push	{r7}
 8012748:	b083      	sub	sp, #12
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801274e:	bf00      	nop
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr

0801275a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801275a:	b480      	push	{r7}
 801275c:	b085      	sub	sp, #20
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012768:	2b01      	cmp	r3, #1
 801276a:	d101      	bne.n	8012770 <HAL_UARTEx_DisableFifoMode+0x16>
 801276c:	2302      	movs	r3, #2
 801276e:	e027      	b.n	80127c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2201      	movs	r2, #1
 8012774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2224      	movs	r2, #36	; 0x24
 801277c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	681a      	ldr	r2, [r3, #0]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f022 0201 	bic.w	r2, r2, #1
 8012796:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801279e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2200      	movs	r2, #0
 80127a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2220      	movs	r2, #32
 80127b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2200      	movs	r2, #0
 80127ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d101      	bne.n	80127e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80127e0:	2302      	movs	r3, #2
 80127e2:	e02d      	b.n	8012840 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2224      	movs	r2, #36	; 0x24
 80127f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f022 0201 	bic.w	r2, r2, #1
 801280a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	683a      	ldr	r2, [r7, #0]
 801281c:	430a      	orrs	r2, r1
 801281e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f000 f84f 	bl	80128c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	68fa      	ldr	r2, [r7, #12]
 801282c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2220      	movs	r2, #32
 8012832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2200      	movs	r2, #0
 801283a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3710      	adds	r7, #16
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012858:	2b01      	cmp	r3, #1
 801285a:	d101      	bne.n	8012860 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801285c:	2302      	movs	r3, #2
 801285e:	e02d      	b.n	80128bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2201      	movs	r2, #1
 8012864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2224      	movs	r2, #36	; 0x24
 801286c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	f022 0201 	bic.w	r2, r2, #1
 8012886:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	683a      	ldr	r2, [r7, #0]
 8012898:	430a      	orrs	r2, r1
 801289a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f000 f811 	bl	80128c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2220      	movs	r2, #32
 80128ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3710      	adds	r7, #16
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d108      	bne.n	80128e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2201      	movs	r2, #1
 80128d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2201      	movs	r2, #1
 80128e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80128e4:	e031      	b.n	801294a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80128e6:	2310      	movs	r3, #16
 80128e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80128ea:	2310      	movs	r3, #16
 80128ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	689b      	ldr	r3, [r3, #8]
 80128f4:	0e5b      	lsrs	r3, r3, #25
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	f003 0307 	and.w	r3, r3, #7
 80128fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	689b      	ldr	r3, [r3, #8]
 8012904:	0f5b      	lsrs	r3, r3, #29
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f003 0307 	and.w	r3, r3, #7
 801290c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801290e:	7bbb      	ldrb	r3, [r7, #14]
 8012910:	7b3a      	ldrb	r2, [r7, #12]
 8012912:	4911      	ldr	r1, [pc, #68]	; (8012958 <UARTEx_SetNbDataToProcess+0x94>)
 8012914:	5c8a      	ldrb	r2, [r1, r2]
 8012916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801291a:	7b3a      	ldrb	r2, [r7, #12]
 801291c:	490f      	ldr	r1, [pc, #60]	; (801295c <UARTEx_SetNbDataToProcess+0x98>)
 801291e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012920:	fb93 f3f2 	sdiv	r3, r3, r2
 8012924:	b29a      	uxth	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801292c:	7bfb      	ldrb	r3, [r7, #15]
 801292e:	7b7a      	ldrb	r2, [r7, #13]
 8012930:	4909      	ldr	r1, [pc, #36]	; (8012958 <UARTEx_SetNbDataToProcess+0x94>)
 8012932:	5c8a      	ldrb	r2, [r1, r2]
 8012934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012938:	7b7a      	ldrb	r2, [r7, #13]
 801293a:	4908      	ldr	r1, [pc, #32]	; (801295c <UARTEx_SetNbDataToProcess+0x98>)
 801293c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801293e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801294a:	bf00      	nop
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	080140a0 	.word	0x080140a0
 801295c:	080140a8 	.word	0x080140a8

08012960 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012960:	b084      	sub	sp, #16
 8012962:	b480      	push	{r7}
 8012964:	b085      	sub	sp, #20
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	f107 001c 	add.w	r0, r7, #28
 801296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012972:	2300      	movs	r3, #0
 8012974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012976:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012978:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801297a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801297e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012980:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012982:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012986:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	4313      	orrs	r3, r2
 801298c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	4b07      	ldr	r3, [pc, #28]	; (80129b0 <SDMMC_Init+0x50>)
 8012994:	4013      	ands	r3, r2
 8012996:	68fa      	ldr	r2, [r7, #12]
 8012998:	431a      	orrs	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3714      	adds	r7, #20
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	b004      	add	sp, #16
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	ffc02c00 	.word	0xffc02c00

080129b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	370c      	adds	r7, #12
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr

080129ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80129ce:	b480      	push	{r7}
 80129d0:	b083      	sub	sp, #12
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f043 0203 	orr.w	r2, r3, #3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80129e2:	2300      	movs	r3, #0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr

080129f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f003 0303 	and.w	r3, r3, #3
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b085      	sub	sp, #20
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012a30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012a36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	68da      	ldr	r2, [r3, #12]
 8012a42:	4b06      	ldr	r3, [pc, #24]	; (8012a5c <SDMMC_SendCommand+0x50>)
 8012a44:	4013      	ands	r3, r2
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	431a      	orrs	r2, r3
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a4e:	2300      	movs	r3, #0
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3714      	adds	r7, #20
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr
 8012a5c:	fffee0c0 	.word	0xfffee0c0

08012a60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	691b      	ldr	r3, [r3, #16]
 8012a6c:	b2db      	uxtb	r3, r3
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	370c      	adds	r7, #12
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
 8012a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3314      	adds	r3, #20
 8012a88:	461a      	mov	r2, r3
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3714      	adds	r7, #20
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b085      	sub	sp, #20
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	685a      	ldr	r2, [r3, #4]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ac6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012acc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012ad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	431a      	orrs	r2, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012aea:	2300      	movs	r3, #0

}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3714      	adds	r7, #20
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b088      	sub	sp, #32
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012b06:	2310      	movs	r3, #16
 8012b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b10:	2300      	movs	r3, #0
 8012b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b1a:	f107 0308 	add.w	r3, r7, #8
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff ff73 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b2a:	2110      	movs	r1, #16
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f000 f995 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b34:	69fb      	ldr	r3, [r7, #28]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3720      	adds	r7, #32
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b088      	sub	sp, #32
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
 8012b46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012b4c:	2307      	movs	r3, #7
 8012b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b56:	2300      	movs	r3, #0
 8012b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b60:	f107 0308 	add.w	r3, r7, #8
 8012b64:	4619      	mov	r1, r3
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7ff ff50 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b70:	2107      	movs	r1, #7
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f972 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b7a:	69fb      	ldr	r3, [r7, #28]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3720      	adds	r7, #32
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b088      	sub	sp, #32
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012b90:	2300      	movs	r3, #0
 8012b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012b94:	2300      	movs	r3, #0
 8012b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ba0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ba2:	f107 0308 	add.w	r3, r7, #8
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f7ff ff2f 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 fb96 	bl	80132e0 <SDMMC_GetCmdError>
 8012bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3720      	adds	r7, #32
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b088      	sub	sp, #32
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012bc8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012bce:	2308      	movs	r3, #8
 8012bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012be0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012be2:	f107 0308 	add.w	r3, r7, #8
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7ff ff0f 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fb28 	bl	8013244 <SDMMC_GetCmdResp7>
 8012bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3720      	adds	r7, #32
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b088      	sub	sp, #32
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012c0e:	2337      	movs	r3, #55	; 0x37
 8012c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c22:	f107 0308 	add.w	r3, r7, #8
 8012c26:	4619      	mov	r1, r3
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff feef 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c32:	2137      	movs	r1, #55	; 0x37
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f000 f911 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3720      	adds	r7, #32
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}

08012c46 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b088      	sub	sp, #32
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
 8012c4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012c54:	2329      	movs	r3, #41	; 0x29
 8012c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c68:	f107 0308 	add.w	r3, r7, #8
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7ff fecc 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f000 fa2d 	bl	80130d4 <SDMMC_GetCmdResp3>
 8012c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c7c:	69fb      	ldr	r3, [r7, #28]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3720      	adds	r7, #32
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}

08012c86 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b088      	sub	sp, #32
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012c94:	2306      	movs	r3, #6
 8012c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ca8:	f107 0308 	add.w	r3, r7, #8
 8012cac:	4619      	mov	r1, r3
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7ff feac 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cb8:	2106      	movs	r1, #6
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f8ce 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cc2:	69fb      	ldr	r3, [r7, #28]
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3720      	adds	r7, #32
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012cd8:	2333      	movs	r3, #51	; 0x33
 8012cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cec:	f107 0308 	add.w	r3, r7, #8
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f7ff fe8a 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cfc:	2133      	movs	r1, #51	; 0x33
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f8ac 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d06:	69fb      	ldr	r3, [r7, #28]
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3720      	adds	r7, #32
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b088      	sub	sp, #32
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012d1c:	2302      	movs	r3, #2
 8012d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d26:	2300      	movs	r3, #0
 8012d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d30:	f107 0308 	add.w	r3, r7, #8
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff fe68 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f000 f97f 	bl	8013040 <SDMMC_GetCmdResp2>
 8012d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d44:	69fb      	ldr	r3, [r7, #28]
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3720      	adds	r7, #32
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b088      	sub	sp, #32
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
 8012d56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012d5c:	2309      	movs	r3, #9
 8012d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d66:	2300      	movs	r3, #0
 8012d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d70:	f107 0308 	add.w	r3, r7, #8
 8012d74:	4619      	mov	r1, r3
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff fe48 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 f95f 	bl	8013040 <SDMMC_GetCmdResp2>
 8012d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d84:	69fb      	ldr	r3, [r7, #28]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b088      	sub	sp, #32
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012da6:	2300      	movs	r3, #0
 8012da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012db0:	f107 0308 	add.w	r3, r7, #8
 8012db4:	4619      	mov	r1, r3
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7ff fe28 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	2103      	movs	r1, #3
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 f9c7 	bl	8013154 <SDMMC_GetCmdResp6>
 8012dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dc8:	69fb      	ldr	r3, [r7, #28]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3720      	adds	r7, #32
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}

08012dd2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dd2:	b580      	push	{r7, lr}
 8012dd4:	b088      	sub	sp, #32
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	6078      	str	r0, [r7, #4]
 8012dda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012de0:	230d      	movs	r3, #13
 8012de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dea:	2300      	movs	r3, #0
 8012dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012df2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012df4:	f107 0308 	add.w	r3, r7, #8
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ff fe06 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e04:	210d      	movs	r1, #13
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f828 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e0e:	69fb      	ldr	r3, [r7, #28]
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3720      	adds	r7, #32
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b088      	sub	sp, #32
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012e20:	2300      	movs	r3, #0
 8012e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012e24:	230d      	movs	r3, #13
 8012e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e38:	f107 0308 	add.w	r3, r7, #8
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff fde4 	bl	8012a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e48:	210d      	movs	r1, #13
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 f806 	bl	8012e5c <SDMMC_GetCmdResp1>
 8012e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e52:	69fb      	ldr	r3, [r7, #28]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3720      	adds	r7, #32
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	460b      	mov	r3, r1
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012e6a:	4b70      	ldr	r3, [pc, #448]	; (801302c <SDMMC_GetCmdResp1+0x1d0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4a70      	ldr	r2, [pc, #448]	; (8013030 <SDMMC_GetCmdResp1+0x1d4>)
 8012e70:	fba2 2303 	umull	r2, r3, r2, r3
 8012e74:	0a5a      	lsrs	r2, r3, #9
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	fb02 f303 	mul.w	r3, r2, r3
 8012e7c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	1e5a      	subs	r2, r3, #1
 8012e82:	61fa      	str	r2, [r7, #28]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d102      	bne.n	8012e8e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e8c:	e0c9      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e92:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012e94:	69ba      	ldr	r2, [r7, #24]
 8012e96:	4b67      	ldr	r3, [pc, #412]	; (8013034 <SDMMC_GetCmdResp1+0x1d8>)
 8012e98:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d0ef      	beq.n	8012e7e <SDMMC_GetCmdResp1+0x22>
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d1ea      	bne.n	8012e7e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eac:	f003 0304 	and.w	r3, r3, #4
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d004      	beq.n	8012ebe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2204      	movs	r2, #4
 8012eb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012eba:	2304      	movs	r3, #4
 8012ebc:	e0b1      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ec2:	f003 0301 	and.w	r3, r3, #1
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d004      	beq.n	8012ed4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2201      	movs	r2, #1
 8012ece:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	e0a6      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	4a58      	ldr	r2, [pc, #352]	; (8013038 <SDMMC_GetCmdResp1+0x1dc>)
 8012ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f7ff fdc0 	bl	8012a60 <SDMMC_GetCommandResponse>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	7afb      	ldrb	r3, [r7, #11]
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d001      	beq.n	8012eee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e099      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012eee:	2100      	movs	r1, #0
 8012ef0:	68f8      	ldr	r0, [r7, #12]
 8012ef2:	f7ff fdc2 	bl	8012a7a <SDMMC_GetResponse>
 8012ef6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	4b50      	ldr	r3, [pc, #320]	; (801303c <SDMMC_GetCmdResp1+0x1e0>)
 8012efc:	4013      	ands	r3, r2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d101      	bne.n	8012f06 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012f02:	2300      	movs	r3, #0
 8012f04:	e08d      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	da02      	bge.n	8012f12 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012f10:	e087      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d001      	beq.n	8012f20 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012f1c:	2340      	movs	r3, #64	; 0x40
 8012f1e:	e080      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d001      	beq.n	8012f2e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012f2a:	2380      	movs	r3, #128	; 0x80
 8012f2c:	e079      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d002      	beq.n	8012f3e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f3c:	e071      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d002      	beq.n	8012f4e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f4c:	e069      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f5c:	e061      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f6c:	e059      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d002      	beq.n	8012f7e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f7c:	e051      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f8c:	e049      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d002      	beq.n	8012f9e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012f98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012f9c:	e041      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fac:	e039      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d002      	beq.n	8012fbe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012fbc:	e031      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012fcc:	e029      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d002      	beq.n	8012fde <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012fd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012fdc:	e021      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012fec:	e019      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012ff8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012ffc:	e011      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013004:	2b00      	cmp	r3, #0
 8013006:	d002      	beq.n	801300e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013008:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801300c:	e009      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	f003 0308 	and.w	r3, r3, #8
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013018:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801301c:	e001      	b.n	8013022 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801301e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013022:	4618      	mov	r0, r3
 8013024:	3720      	adds	r7, #32
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	24000030 	.word	0x24000030
 8013030:	10624dd3 	.word	0x10624dd3
 8013034:	00200045 	.word	0x00200045
 8013038:	002000c5 	.word	0x002000c5
 801303c:	fdffe008 	.word	0xfdffe008

08013040 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013040:	b480      	push	{r7}
 8013042:	b085      	sub	sp, #20
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013048:	4b1f      	ldr	r3, [pc, #124]	; (80130c8 <SDMMC_GetCmdResp2+0x88>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4a1f      	ldr	r2, [pc, #124]	; (80130cc <SDMMC_GetCmdResp2+0x8c>)
 801304e:	fba2 2303 	umull	r2, r3, r2, r3
 8013052:	0a5b      	lsrs	r3, r3, #9
 8013054:	f241 3288 	movw	r2, #5000	; 0x1388
 8013058:	fb02 f303 	mul.w	r3, r2, r3
 801305c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	60fa      	str	r2, [r7, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801306c:	e026      	b.n	80130bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013072:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801307a:	2b00      	cmp	r3, #0
 801307c:	d0ef      	beq.n	801305e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1ea      	bne.n	801305e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	2b00      	cmp	r3, #0
 8013092:	d004      	beq.n	801309e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2204      	movs	r2, #4
 8013098:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801309a:	2304      	movs	r3, #4
 801309c:	e00e      	b.n	80130bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130a2:	f003 0301 	and.w	r3, r3, #1
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d004      	beq.n	80130b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2201      	movs	r2, #1
 80130ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e003      	b.n	80130bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	4a06      	ldr	r2, [pc, #24]	; (80130d0 <SDMMC_GetCmdResp2+0x90>)
 80130b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	24000030 	.word	0x24000030
 80130cc:	10624dd3 	.word	0x10624dd3
 80130d0:	002000c5 	.word	0x002000c5

080130d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130dc:	4b1a      	ldr	r3, [pc, #104]	; (8013148 <SDMMC_GetCmdResp3+0x74>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4a1a      	ldr	r2, [pc, #104]	; (801314c <SDMMC_GetCmdResp3+0x78>)
 80130e2:	fba2 2303 	umull	r2, r3, r2, r3
 80130e6:	0a5b      	lsrs	r3, r3, #9
 80130e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80130ec:	fb02 f303 	mul.w	r3, r2, r3
 80130f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	1e5a      	subs	r2, r3, #1
 80130f6:	60fa      	str	r2, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013100:	e01b      	b.n	801313a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013106:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801310e:	2b00      	cmp	r3, #0
 8013110:	d0ef      	beq.n	80130f2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1ea      	bne.n	80130f2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013120:	f003 0304 	and.w	r3, r3, #4
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2204      	movs	r2, #4
 801312c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801312e:	2304      	movs	r3, #4
 8013130:	e003      	b.n	801313a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	4a06      	ldr	r2, [pc, #24]	; (8013150 <SDMMC_GetCmdResp3+0x7c>)
 8013136:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013138:	2300      	movs	r3, #0
}
 801313a:	4618      	mov	r0, r3
 801313c:	3714      	adds	r7, #20
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop
 8013148:	24000030 	.word	0x24000030
 801314c:	10624dd3 	.word	0x10624dd3
 8013150:	002000c5 	.word	0x002000c5

08013154 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b088      	sub	sp, #32
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	460b      	mov	r3, r1
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013162:	4b35      	ldr	r3, [pc, #212]	; (8013238 <SDMMC_GetCmdResp6+0xe4>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4a35      	ldr	r2, [pc, #212]	; (801323c <SDMMC_GetCmdResp6+0xe8>)
 8013168:	fba2 2303 	umull	r2, r3, r2, r3
 801316c:	0a5b      	lsrs	r3, r3, #9
 801316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013172:	fb02 f303 	mul.w	r3, r2, r3
 8013176:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	1e5a      	subs	r2, r3, #1
 801317c:	61fa      	str	r2, [r7, #28]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013182:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013186:	e052      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801318c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013194:	2b00      	cmp	r3, #0
 8013196:	d0ef      	beq.n	8013178 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d1ea      	bne.n	8013178 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131a6:	f003 0304 	and.w	r3, r3, #4
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d004      	beq.n	80131b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2204      	movs	r2, #4
 80131b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131b4:	2304      	movs	r3, #4
 80131b6:	e03a      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131bc:	f003 0301 	and.w	r3, r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d004      	beq.n	80131ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2201      	movs	r2, #1
 80131c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131ca:	2301      	movs	r3, #1
 80131cc:	e02f      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80131ce:	68f8      	ldr	r0, [r7, #12]
 80131d0:	f7ff fc46 	bl	8012a60 <SDMMC_GetCommandResponse>
 80131d4:	4603      	mov	r3, r0
 80131d6:	461a      	mov	r2, r3
 80131d8:	7afb      	ldrb	r3, [r7, #11]
 80131da:	4293      	cmp	r3, r2
 80131dc:	d001      	beq.n	80131e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131de:	2301      	movs	r3, #1
 80131e0:	e025      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	4a16      	ldr	r2, [pc, #88]	; (8013240 <SDMMC_GetCmdResp6+0xec>)
 80131e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80131e8:	2100      	movs	r1, #0
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f7ff fc45 	bl	8012a7a <SDMMC_GetResponse>
 80131f0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d106      	bne.n	801320a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	0c1b      	lsrs	r3, r3, #16
 8013200:	b29a      	uxth	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013206:	2300      	movs	r3, #0
 8013208:	e011      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013210:	2b00      	cmp	r3, #0
 8013212:	d002      	beq.n	801321a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013218:	e009      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013220:	2b00      	cmp	r3, #0
 8013222:	d002      	beq.n	801322a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013228:	e001      	b.n	801322e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801322a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801322e:	4618      	mov	r0, r3
 8013230:	3720      	adds	r7, #32
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	24000030 	.word	0x24000030
 801323c:	10624dd3 	.word	0x10624dd3
 8013240:	002000c5 	.word	0x002000c5

08013244 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013244:	b480      	push	{r7}
 8013246:	b085      	sub	sp, #20
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801324c:	4b22      	ldr	r3, [pc, #136]	; (80132d8 <SDMMC_GetCmdResp7+0x94>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4a22      	ldr	r2, [pc, #136]	; (80132dc <SDMMC_GetCmdResp7+0x98>)
 8013252:	fba2 2303 	umull	r2, r3, r2, r3
 8013256:	0a5b      	lsrs	r3, r3, #9
 8013258:	f241 3288 	movw	r2, #5000	; 0x1388
 801325c:	fb02 f303 	mul.w	r3, r2, r3
 8013260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	1e5a      	subs	r2, r3, #1
 8013266:	60fa      	str	r2, [r7, #12]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d102      	bne.n	8013272 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801326c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013270:	e02c      	b.n	80132cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013276:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801327e:	2b00      	cmp	r3, #0
 8013280:	d0ef      	beq.n	8013262 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013288:	2b00      	cmp	r3, #0
 801328a:	d1ea      	bne.n	8013262 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013290:	f003 0304 	and.w	r3, r3, #4
 8013294:	2b00      	cmp	r3, #0
 8013296:	d004      	beq.n	80132a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2204      	movs	r2, #4
 801329c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801329e:	2304      	movs	r3, #4
 80132a0:	e014      	b.n	80132cc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132a6:	f003 0301 	and.w	r3, r3, #1
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d004      	beq.n	80132b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2201      	movs	r2, #1
 80132b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132b4:	2301      	movs	r3, #1
 80132b6:	e009      	b.n	80132cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2240      	movs	r2, #64	; 0x40
 80132c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80132ca:	2300      	movs	r3, #0

}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3714      	adds	r7, #20
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr
 80132d8:	24000030 	.word	0x24000030
 80132dc:	10624dd3 	.word	0x10624dd3

080132e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132e8:	4b11      	ldr	r3, [pc, #68]	; (8013330 <SDMMC_GetCmdError+0x50>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	4a11      	ldr	r2, [pc, #68]	; (8013334 <SDMMC_GetCmdError+0x54>)
 80132ee:	fba2 2303 	umull	r2, r3, r2, r3
 80132f2:	0a5b      	lsrs	r3, r3, #9
 80132f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80132f8:	fb02 f303 	mul.w	r3, r2, r3
 80132fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	1e5a      	subs	r2, r3, #1
 8013302:	60fa      	str	r2, [r7, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d102      	bne.n	801330e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801330c:	e009      	b.n	8013322 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013316:	2b00      	cmp	r3, #0
 8013318:	d0f1      	beq.n	80132fe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	4a06      	ldr	r2, [pc, #24]	; (8013338 <SDMMC_GetCmdError+0x58>)
 801331e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013320:	2300      	movs	r3, #0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3714      	adds	r7, #20
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
 801332e:	bf00      	nop
 8013330:	24000030 	.word	0x24000030
 8013334:	10624dd3 	.word	0x10624dd3
 8013338:	002000c5 	.word	0x002000c5

0801333c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801333c:	b084      	sub	sp, #16
 801333e:	b580      	push	{r7, lr}
 8013340:	b084      	sub	sp, #16
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
 8013346:	f107 001c 	add.w	r0, r7, #28
 801334a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013350:	2b01      	cmp	r3, #1
 8013352:	d120      	bne.n	8013396 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	68da      	ldr	r2, [r3, #12]
 8013364:	4b2a      	ldr	r3, [pc, #168]	; (8013410 <USB_CoreInit+0xd4>)
 8013366:	4013      	ands	r3, r2
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801337a:	2b01      	cmp	r3, #1
 801337c:	d105      	bne.n	801338a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f000 faac 	bl	80138e8 <USB_CoreReset>
 8013390:	4603      	mov	r3, r0
 8013392:	73fb      	strb	r3, [r7, #15]
 8013394:	e01a      	b.n	80133cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 faa0 	bl	80138e8 <USB_CoreReset>
 80133a8:	4603      	mov	r3, r0
 80133aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80133ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d106      	bne.n	80133c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	639a      	str	r2, [r3, #56]	; 0x38
 80133be:	e005      	b.n	80133cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80133cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d116      	bne.n	8013400 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80133e0:	4b0c      	ldr	r3, [pc, #48]	; (8013414 <USB_CoreInit+0xd8>)
 80133e2:	4313      	orrs	r3, r2
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	f043 0206 	orr.w	r2, r3, #6
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	689b      	ldr	r3, [r3, #8]
 80133f8:	f043 0220 	orr.w	r2, r3, #32
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013400:	7bfb      	ldrb	r3, [r7, #15]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801340c:	b004      	add	sp, #16
 801340e:	4770      	bx	lr
 8013410:	ffbdffbf 	.word	0xffbdffbf
 8013414:	03ee0000 	.word	0x03ee0000

08013418 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013418:	b480      	push	{r7}
 801341a:	b083      	sub	sp, #12
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	f023 0201 	bic.w	r2, r3, #1
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr

0801343a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b084      	sub	sp, #16
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	460b      	mov	r3, r1
 8013444:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013446:	2300      	movs	r3, #0
 8013448:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013456:	78fb      	ldrb	r3, [r7, #3]
 8013458:	2b01      	cmp	r3, #1
 801345a:	d115      	bne.n	8013488 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013468:	2001      	movs	r0, #1
 801346a:	f7f2 fadd 	bl	8005a28 <HAL_Delay>
      ms++;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	3301      	adds	r3, #1
 8013472:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f000 fa29 	bl	80138cc <USB_GetMode>
 801347a:	4603      	mov	r3, r0
 801347c:	2b01      	cmp	r3, #1
 801347e:	d01e      	beq.n	80134be <USB_SetCurrentMode+0x84>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b31      	cmp	r3, #49	; 0x31
 8013484:	d9f0      	bls.n	8013468 <USB_SetCurrentMode+0x2e>
 8013486:	e01a      	b.n	80134be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013488:	78fb      	ldrb	r3, [r7, #3]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d115      	bne.n	80134ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801349a:	2001      	movs	r0, #1
 801349c:	f7f2 fac4 	bl	8005a28 <HAL_Delay>
      ms++;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	3301      	adds	r3, #1
 80134a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 fa10 	bl	80138cc <USB_GetMode>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d005      	beq.n	80134be <USB_SetCurrentMode+0x84>
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2b31      	cmp	r3, #49	; 0x31
 80134b6:	d9f0      	bls.n	801349a <USB_SetCurrentMode+0x60>
 80134b8:	e001      	b.n	80134be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80134ba:	2301      	movs	r3, #1
 80134bc:	e005      	b.n	80134ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2b32      	cmp	r3, #50	; 0x32
 80134c2:	d101      	bne.n	80134c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80134c4:	2301      	movs	r3, #1
 80134c6:	e000      	b.n	80134ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
	...

080134d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80134d4:	b084      	sub	sp, #16
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b086      	sub	sp, #24
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]
 80134de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80134e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80134e6:	2300      	movs	r3, #0
 80134e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80134ee:	2300      	movs	r3, #0
 80134f0:	613b      	str	r3, [r7, #16]
 80134f2:	e009      	b.n	8013508 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	3340      	adds	r3, #64	; 0x40
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	4413      	add	r3, r2
 80134fe:	2200      	movs	r2, #0
 8013500:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	3301      	adds	r3, #1
 8013506:	613b      	str	r3, [r7, #16]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	2b0e      	cmp	r3, #14
 801350c:	d9f2      	bls.n	80134f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013510:	2b00      	cmp	r3, #0
 8013512:	d11c      	bne.n	801354e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	68fa      	ldr	r2, [r7, #12]
 801351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013522:	f043 0302 	orr.w	r3, r3, #2
 8013526:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801352c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	601a      	str	r2, [r3, #0]
 801354c:	e005      	b.n	801355a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013552:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013560:	461a      	mov	r2, r3
 8013562:	2300      	movs	r3, #0
 8013564:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801356c:	4619      	mov	r1, r3
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013574:	461a      	mov	r2, r3
 8013576:	680b      	ldr	r3, [r1, #0]
 8013578:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357c:	2b01      	cmp	r3, #1
 801357e:	d10c      	bne.n	801359a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	2b00      	cmp	r3, #0
 8013584:	d104      	bne.n	8013590 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013586:	2100      	movs	r1, #0
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 f965 	bl	8013858 <USB_SetDevSpeed>
 801358e:	e008      	b.n	80135a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013590:	2101      	movs	r1, #1
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f000 f960 	bl	8013858 <USB_SetDevSpeed>
 8013598:	e003      	b.n	80135a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801359a:	2103      	movs	r1, #3
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f95b 	bl	8013858 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80135a2:	2110      	movs	r1, #16
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 f8f3 	bl	8013790 <USB_FlushTxFifo>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d001      	beq.n	80135b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80135b0:	2301      	movs	r3, #1
 80135b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 f91f 	bl	80137f8 <USB_FlushRxFifo>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80135c0:	2301      	movs	r3, #1
 80135c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ca:	461a      	mov	r2, r3
 80135cc:	2300      	movs	r3, #0
 80135ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135d6:	461a      	mov	r2, r3
 80135d8:	2300      	movs	r3, #0
 80135da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135e2:	461a      	mov	r2, r3
 80135e4:	2300      	movs	r3, #0
 80135e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135e8:	2300      	movs	r3, #0
 80135ea:	613b      	str	r3, [r7, #16]
 80135ec:	e043      	b.n	8013676 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	015a      	lsls	r2, r3, #5
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	4413      	add	r3, r2
 80135f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013604:	d118      	bne.n	8013638 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d10a      	bne.n	8013622 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	015a      	lsls	r2, r3, #5
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	4413      	add	r3, r2
 8013614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013618:	461a      	mov	r2, r3
 801361a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801361e:	6013      	str	r3, [r2, #0]
 8013620:	e013      	b.n	801364a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362e:	461a      	mov	r2, r3
 8013630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013634:	6013      	str	r3, [r2, #0]
 8013636:	e008      	b.n	801364a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	015a      	lsls	r2, r3, #5
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4413      	add	r3, r2
 8013640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013644:	461a      	mov	r2, r3
 8013646:	2300      	movs	r3, #0
 8013648:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	015a      	lsls	r2, r3, #5
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	4413      	add	r3, r2
 8013652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013656:	461a      	mov	r2, r3
 8013658:	2300      	movs	r3, #0
 801365a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	015a      	lsls	r2, r3, #5
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	4413      	add	r3, r2
 8013664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013668:	461a      	mov	r2, r3
 801366a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801366e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	3301      	adds	r3, #1
 8013674:	613b      	str	r3, [r7, #16]
 8013676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013678:	693a      	ldr	r2, [r7, #16]
 801367a:	429a      	cmp	r2, r3
 801367c:	d3b7      	bcc.n	80135ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801367e:	2300      	movs	r3, #0
 8013680:	613b      	str	r3, [r7, #16]
 8013682:	e043      	b.n	801370c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013684:	693b      	ldr	r3, [r7, #16]
 8013686:	015a      	lsls	r2, r3, #5
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	4413      	add	r3, r2
 801368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801369a:	d118      	bne.n	80136ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d10a      	bne.n	80136b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	015a      	lsls	r2, r3, #5
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	4413      	add	r3, r2
 80136aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ae:	461a      	mov	r2, r3
 80136b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80136b4:	6013      	str	r3, [r2, #0]
 80136b6:	e013      	b.n	80136e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	015a      	lsls	r2, r3, #5
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	4413      	add	r3, r2
 80136c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136c4:	461a      	mov	r2, r3
 80136c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80136ca:	6013      	str	r3, [r2, #0]
 80136cc:	e008      	b.n	80136e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	015a      	lsls	r2, r3, #5
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	4413      	add	r3, r2
 80136d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136da:	461a      	mov	r2, r3
 80136dc:	2300      	movs	r3, #0
 80136de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	015a      	lsls	r2, r3, #5
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	4413      	add	r3, r2
 80136e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ec:	461a      	mov	r2, r3
 80136ee:	2300      	movs	r3, #0
 80136f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	015a      	lsls	r2, r3, #5
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	4413      	add	r3, r2
 80136fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136fe:	461a      	mov	r2, r3
 8013700:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013704:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	3301      	adds	r3, #1
 801370a:	613b      	str	r3, [r7, #16]
 801370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	429a      	cmp	r2, r3
 8013712:	d3b7      	bcc.n	8013684 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801371a:	691b      	ldr	r3, [r3, #16]
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013726:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013734:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	2b00      	cmp	r3, #0
 801373a:	d105      	bne.n	8013748 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	699b      	ldr	r3, [r3, #24]
 8013740:	f043 0210 	orr.w	r2, r3, #16
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	699a      	ldr	r2, [r3, #24]
 801374c:	4b0e      	ldr	r3, [pc, #56]	; (8013788 <USB_DevInit+0x2b4>)
 801374e:	4313      	orrs	r3, r2
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013756:	2b00      	cmp	r3, #0
 8013758:	d005      	beq.n	8013766 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	699b      	ldr	r3, [r3, #24]
 801375e:	f043 0208 	orr.w	r2, r3, #8
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013768:	2b01      	cmp	r3, #1
 801376a:	d105      	bne.n	8013778 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	699a      	ldr	r2, [r3, #24]
 8013770:	4b06      	ldr	r3, [pc, #24]	; (801378c <USB_DevInit+0x2b8>)
 8013772:	4313      	orrs	r3, r2
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013778:	7dfb      	ldrb	r3, [r7, #23]
}
 801377a:	4618      	mov	r0, r3
 801377c:	3718      	adds	r7, #24
 801377e:	46bd      	mov	sp, r7
 8013780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013784:	b004      	add	sp, #16
 8013786:	4770      	bx	lr
 8013788:	803c3800 	.word	0x803c3800
 801378c:	40000004 	.word	0x40000004

08013790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801379a:	2300      	movs	r3, #0
 801379c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	3301      	adds	r3, #1
 80137a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	4a13      	ldr	r2, [pc, #76]	; (80137f4 <USB_FlushTxFifo+0x64>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d901      	bls.n	80137b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80137ac:	2303      	movs	r3, #3
 80137ae:	e01b      	b.n	80137e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	691b      	ldr	r3, [r3, #16]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	daf2      	bge.n	801379e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80137b8:	2300      	movs	r3, #0
 80137ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	019b      	lsls	r3, r3, #6
 80137c0:	f043 0220 	orr.w	r2, r3, #32
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	3301      	adds	r3, #1
 80137cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	4a08      	ldr	r2, [pc, #32]	; (80137f4 <USB_FlushTxFifo+0x64>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d901      	bls.n	80137da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80137d6:	2303      	movs	r3, #3
 80137d8:	e006      	b.n	80137e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	691b      	ldr	r3, [r3, #16]
 80137de:	f003 0320 	and.w	r3, r3, #32
 80137e2:	2b20      	cmp	r3, #32
 80137e4:	d0f0      	beq.n	80137c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3714      	adds	r7, #20
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr
 80137f4:	00030d40 	.word	0x00030d40

080137f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b085      	sub	sp, #20
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013800:	2300      	movs	r3, #0
 8013802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	3301      	adds	r3, #1
 8013808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	4a11      	ldr	r2, [pc, #68]	; (8013854 <USB_FlushRxFifo+0x5c>)
 801380e:	4293      	cmp	r3, r2
 8013810:	d901      	bls.n	8013816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013812:	2303      	movs	r3, #3
 8013814:	e018      	b.n	8013848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	2b00      	cmp	r3, #0
 801381c:	daf2      	bge.n	8013804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801381e:	2300      	movs	r3, #0
 8013820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2210      	movs	r2, #16
 8013826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3301      	adds	r3, #1
 801382c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	4a08      	ldr	r2, [pc, #32]	; (8013854 <USB_FlushRxFifo+0x5c>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d901      	bls.n	801383a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013836:	2303      	movs	r3, #3
 8013838:	e006      	b.n	8013848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	691b      	ldr	r3, [r3, #16]
 801383e:	f003 0310 	and.w	r3, r3, #16
 8013842:	2b10      	cmp	r3, #16
 8013844:	d0f0      	beq.n	8013828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013846:	2300      	movs	r3, #0
}
 8013848:	4618      	mov	r0, r3
 801384a:	3714      	adds	r7, #20
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr
 8013854:	00030d40 	.word	0x00030d40

08013858 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	78fb      	ldrb	r3, [r7, #3]
 8013872:	68f9      	ldr	r1, [r7, #12]
 8013874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013878:	4313      	orrs	r3, r2
 801387a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3714      	adds	r7, #20
 8013882:	46bd      	mov	sp, r7
 8013884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013888:	4770      	bx	lr

0801388a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801388a:	b480      	push	{r7}
 801388c:	b085      	sub	sp, #20
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138a4:	f023 0303 	bic.w	r3, r3, #3
 80138a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138b8:	f043 0302 	orr.w	r3, r3, #2
 80138bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138be:	2300      	movs	r3, #0
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3714      	adds	r7, #20
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	695b      	ldr	r3, [r3, #20]
 80138d8:	f003 0301 	and.w	r3, r3, #1
}
 80138dc:	4618      	mov	r0, r3
 80138de:	370c      	adds	r7, #12
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80138f0:	2300      	movs	r3, #0
 80138f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	3301      	adds	r3, #1
 80138f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	4a13      	ldr	r2, [pc, #76]	; (801394c <USB_CoreReset+0x64>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d901      	bls.n	8013906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013902:	2303      	movs	r3, #3
 8013904:	e01b      	b.n	801393e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	691b      	ldr	r3, [r3, #16]
 801390a:	2b00      	cmp	r3, #0
 801390c:	daf2      	bge.n	80138f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	f043 0201 	orr.w	r2, r3, #1
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	3301      	adds	r3, #1
 8013922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	4a09      	ldr	r2, [pc, #36]	; (801394c <USB_CoreReset+0x64>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d901      	bls.n	8013930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801392c:	2303      	movs	r3, #3
 801392e:	e006      	b.n	801393e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	691b      	ldr	r3, [r3, #16]
 8013934:	f003 0301 	and.w	r3, r3, #1
 8013938:	2b01      	cmp	r3, #1
 801393a:	d0f0      	beq.n	801391e <USB_CoreReset+0x36>

  return HAL_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3714      	adds	r7, #20
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr
 801394a:	bf00      	nop
 801394c:	00030d40 	.word	0x00030d40

08013950 <sbrk_aligned>:
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	4e0e      	ldr	r6, [pc, #56]	; (801398c <sbrk_aligned+0x3c>)
 8013954:	460c      	mov	r4, r1
 8013956:	6831      	ldr	r1, [r6, #0]
 8013958:	4605      	mov	r5, r0
 801395a:	b911      	cbnz	r1, 8013962 <sbrk_aligned+0x12>
 801395c:	f000 f8e4 	bl	8013b28 <_sbrk_r>
 8013960:	6030      	str	r0, [r6, #0]
 8013962:	4621      	mov	r1, r4
 8013964:	4628      	mov	r0, r5
 8013966:	f000 f8df 	bl	8013b28 <_sbrk_r>
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	d00a      	beq.n	8013984 <sbrk_aligned+0x34>
 801396e:	1cc4      	adds	r4, r0, #3
 8013970:	f024 0403 	bic.w	r4, r4, #3
 8013974:	42a0      	cmp	r0, r4
 8013976:	d007      	beq.n	8013988 <sbrk_aligned+0x38>
 8013978:	1a21      	subs	r1, r4, r0
 801397a:	4628      	mov	r0, r5
 801397c:	f000 f8d4 	bl	8013b28 <_sbrk_r>
 8013980:	3001      	adds	r0, #1
 8013982:	d101      	bne.n	8013988 <sbrk_aligned+0x38>
 8013984:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013988:	4620      	mov	r0, r4
 801398a:	bd70      	pop	{r4, r5, r6, pc}
 801398c:	2400198c 	.word	0x2400198c

08013990 <_malloc_r>:
 8013990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013994:	1ccd      	adds	r5, r1, #3
 8013996:	f025 0503 	bic.w	r5, r5, #3
 801399a:	3508      	adds	r5, #8
 801399c:	2d0c      	cmp	r5, #12
 801399e:	bf38      	it	cc
 80139a0:	250c      	movcc	r5, #12
 80139a2:	2d00      	cmp	r5, #0
 80139a4:	4607      	mov	r7, r0
 80139a6:	db01      	blt.n	80139ac <_malloc_r+0x1c>
 80139a8:	42a9      	cmp	r1, r5
 80139aa:	d905      	bls.n	80139b8 <_malloc_r+0x28>
 80139ac:	230c      	movs	r3, #12
 80139ae:	603b      	str	r3, [r7, #0]
 80139b0:	2600      	movs	r6, #0
 80139b2:	4630      	mov	r0, r6
 80139b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013a8c <_malloc_r+0xfc>
 80139bc:	f000 f868 	bl	8013a90 <__malloc_lock>
 80139c0:	f8d8 3000 	ldr.w	r3, [r8]
 80139c4:	461c      	mov	r4, r3
 80139c6:	bb5c      	cbnz	r4, 8013a20 <_malloc_r+0x90>
 80139c8:	4629      	mov	r1, r5
 80139ca:	4638      	mov	r0, r7
 80139cc:	f7ff ffc0 	bl	8013950 <sbrk_aligned>
 80139d0:	1c43      	adds	r3, r0, #1
 80139d2:	4604      	mov	r4, r0
 80139d4:	d155      	bne.n	8013a82 <_malloc_r+0xf2>
 80139d6:	f8d8 4000 	ldr.w	r4, [r8]
 80139da:	4626      	mov	r6, r4
 80139dc:	2e00      	cmp	r6, #0
 80139de:	d145      	bne.n	8013a6c <_malloc_r+0xdc>
 80139e0:	2c00      	cmp	r4, #0
 80139e2:	d048      	beq.n	8013a76 <_malloc_r+0xe6>
 80139e4:	6823      	ldr	r3, [r4, #0]
 80139e6:	4631      	mov	r1, r6
 80139e8:	4638      	mov	r0, r7
 80139ea:	eb04 0903 	add.w	r9, r4, r3
 80139ee:	f000 f89b 	bl	8013b28 <_sbrk_r>
 80139f2:	4581      	cmp	r9, r0
 80139f4:	d13f      	bne.n	8013a76 <_malloc_r+0xe6>
 80139f6:	6821      	ldr	r1, [r4, #0]
 80139f8:	1a6d      	subs	r5, r5, r1
 80139fa:	4629      	mov	r1, r5
 80139fc:	4638      	mov	r0, r7
 80139fe:	f7ff ffa7 	bl	8013950 <sbrk_aligned>
 8013a02:	3001      	adds	r0, #1
 8013a04:	d037      	beq.n	8013a76 <_malloc_r+0xe6>
 8013a06:	6823      	ldr	r3, [r4, #0]
 8013a08:	442b      	add	r3, r5
 8013a0a:	6023      	str	r3, [r4, #0]
 8013a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d038      	beq.n	8013a86 <_malloc_r+0xf6>
 8013a14:	685a      	ldr	r2, [r3, #4]
 8013a16:	42a2      	cmp	r2, r4
 8013a18:	d12b      	bne.n	8013a72 <_malloc_r+0xe2>
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	605a      	str	r2, [r3, #4]
 8013a1e:	e00f      	b.n	8013a40 <_malloc_r+0xb0>
 8013a20:	6822      	ldr	r2, [r4, #0]
 8013a22:	1b52      	subs	r2, r2, r5
 8013a24:	d41f      	bmi.n	8013a66 <_malloc_r+0xd6>
 8013a26:	2a0b      	cmp	r2, #11
 8013a28:	d917      	bls.n	8013a5a <_malloc_r+0xca>
 8013a2a:	1961      	adds	r1, r4, r5
 8013a2c:	42a3      	cmp	r3, r4
 8013a2e:	6025      	str	r5, [r4, #0]
 8013a30:	bf18      	it	ne
 8013a32:	6059      	strne	r1, [r3, #4]
 8013a34:	6863      	ldr	r3, [r4, #4]
 8013a36:	bf08      	it	eq
 8013a38:	f8c8 1000 	streq.w	r1, [r8]
 8013a3c:	5162      	str	r2, [r4, r5]
 8013a3e:	604b      	str	r3, [r1, #4]
 8013a40:	4638      	mov	r0, r7
 8013a42:	f104 060b 	add.w	r6, r4, #11
 8013a46:	f000 f829 	bl	8013a9c <__malloc_unlock>
 8013a4a:	f026 0607 	bic.w	r6, r6, #7
 8013a4e:	1d23      	adds	r3, r4, #4
 8013a50:	1af2      	subs	r2, r6, r3
 8013a52:	d0ae      	beq.n	80139b2 <_malloc_r+0x22>
 8013a54:	1b9b      	subs	r3, r3, r6
 8013a56:	50a3      	str	r3, [r4, r2]
 8013a58:	e7ab      	b.n	80139b2 <_malloc_r+0x22>
 8013a5a:	42a3      	cmp	r3, r4
 8013a5c:	6862      	ldr	r2, [r4, #4]
 8013a5e:	d1dd      	bne.n	8013a1c <_malloc_r+0x8c>
 8013a60:	f8c8 2000 	str.w	r2, [r8]
 8013a64:	e7ec      	b.n	8013a40 <_malloc_r+0xb0>
 8013a66:	4623      	mov	r3, r4
 8013a68:	6864      	ldr	r4, [r4, #4]
 8013a6a:	e7ac      	b.n	80139c6 <_malloc_r+0x36>
 8013a6c:	4634      	mov	r4, r6
 8013a6e:	6876      	ldr	r6, [r6, #4]
 8013a70:	e7b4      	b.n	80139dc <_malloc_r+0x4c>
 8013a72:	4613      	mov	r3, r2
 8013a74:	e7cc      	b.n	8013a10 <_malloc_r+0x80>
 8013a76:	230c      	movs	r3, #12
 8013a78:	603b      	str	r3, [r7, #0]
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	f000 f80e 	bl	8013a9c <__malloc_unlock>
 8013a80:	e797      	b.n	80139b2 <_malloc_r+0x22>
 8013a82:	6025      	str	r5, [r4, #0]
 8013a84:	e7dc      	b.n	8013a40 <_malloc_r+0xb0>
 8013a86:	605b      	str	r3, [r3, #4]
 8013a88:	deff      	udf	#255	; 0xff
 8013a8a:	bf00      	nop
 8013a8c:	24001988 	.word	0x24001988

08013a90 <__malloc_lock>:
 8013a90:	4801      	ldr	r0, [pc, #4]	; (8013a98 <__malloc_lock+0x8>)
 8013a92:	f000 b883 	b.w	8013b9c <__retarget_lock_acquire_recursive>
 8013a96:	bf00      	nop
 8013a98:	24001acc 	.word	0x24001acc

08013a9c <__malloc_unlock>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	; (8013aa4 <__malloc_unlock+0x8>)
 8013a9e:	f000 b87e 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	24001acc 	.word	0x24001acc

08013aa8 <realloc>:
 8013aa8:	4b02      	ldr	r3, [pc, #8]	; (8013ab4 <realloc+0xc>)
 8013aaa:	460a      	mov	r2, r1
 8013aac:	4601      	mov	r1, r0
 8013aae:	6818      	ldr	r0, [r3, #0]
 8013ab0:	f000 b802 	b.w	8013ab8 <_realloc_r>
 8013ab4:	2400008c 	.word	0x2400008c

08013ab8 <_realloc_r>:
 8013ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abc:	4680      	mov	r8, r0
 8013abe:	4614      	mov	r4, r2
 8013ac0:	460e      	mov	r6, r1
 8013ac2:	b921      	cbnz	r1, 8013ace <_realloc_r+0x16>
 8013ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac8:	4611      	mov	r1, r2
 8013aca:	f7ff bf61 	b.w	8013990 <_malloc_r>
 8013ace:	b92a      	cbnz	r2, 8013adc <_realloc_r+0x24>
 8013ad0:	f000 f874 	bl	8013bbc <_free_r>
 8013ad4:	4625      	mov	r5, r4
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013adc:	f000 f8ba 	bl	8013c54 <_malloc_usable_size_r>
 8013ae0:	4284      	cmp	r4, r0
 8013ae2:	4607      	mov	r7, r0
 8013ae4:	d802      	bhi.n	8013aec <_realloc_r+0x34>
 8013ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013aea:	d812      	bhi.n	8013b12 <_realloc_r+0x5a>
 8013aec:	4621      	mov	r1, r4
 8013aee:	4640      	mov	r0, r8
 8013af0:	f7ff ff4e 	bl	8013990 <_malloc_r>
 8013af4:	4605      	mov	r5, r0
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d0ed      	beq.n	8013ad6 <_realloc_r+0x1e>
 8013afa:	42bc      	cmp	r4, r7
 8013afc:	4622      	mov	r2, r4
 8013afe:	4631      	mov	r1, r6
 8013b00:	bf28      	it	cs
 8013b02:	463a      	movcs	r2, r7
 8013b04:	f000 f84c 	bl	8013ba0 <memcpy>
 8013b08:	4631      	mov	r1, r6
 8013b0a:	4640      	mov	r0, r8
 8013b0c:	f000 f856 	bl	8013bbc <_free_r>
 8013b10:	e7e1      	b.n	8013ad6 <_realloc_r+0x1e>
 8013b12:	4635      	mov	r5, r6
 8013b14:	e7df      	b.n	8013ad6 <_realloc_r+0x1e>

08013b16 <memset>:
 8013b16:	4402      	add	r2, r0
 8013b18:	4603      	mov	r3, r0
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d100      	bne.n	8013b20 <memset+0xa>
 8013b1e:	4770      	bx	lr
 8013b20:	f803 1b01 	strb.w	r1, [r3], #1
 8013b24:	e7f9      	b.n	8013b1a <memset+0x4>
	...

08013b28 <_sbrk_r>:
 8013b28:	b538      	push	{r3, r4, r5, lr}
 8013b2a:	4d06      	ldr	r5, [pc, #24]	; (8013b44 <_sbrk_r+0x1c>)
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	4604      	mov	r4, r0
 8013b30:	4608      	mov	r0, r1
 8013b32:	602b      	str	r3, [r5, #0]
 8013b34:	f7f1 fdd2 	bl	80056dc <_sbrk>
 8013b38:	1c43      	adds	r3, r0, #1
 8013b3a:	d102      	bne.n	8013b42 <_sbrk_r+0x1a>
 8013b3c:	682b      	ldr	r3, [r5, #0]
 8013b3e:	b103      	cbz	r3, 8013b42 <_sbrk_r+0x1a>
 8013b40:	6023      	str	r3, [r4, #0]
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	24001ac8 	.word	0x24001ac8

08013b48 <__errno>:
 8013b48:	4b01      	ldr	r3, [pc, #4]	; (8013b50 <__errno+0x8>)
 8013b4a:	6818      	ldr	r0, [r3, #0]
 8013b4c:	4770      	bx	lr
 8013b4e:	bf00      	nop
 8013b50:	2400008c 	.word	0x2400008c

08013b54 <__libc_init_array>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	4d0d      	ldr	r5, [pc, #52]	; (8013b8c <__libc_init_array+0x38>)
 8013b58:	4c0d      	ldr	r4, [pc, #52]	; (8013b90 <__libc_init_array+0x3c>)
 8013b5a:	1b64      	subs	r4, r4, r5
 8013b5c:	10a4      	asrs	r4, r4, #2
 8013b5e:	2600      	movs	r6, #0
 8013b60:	42a6      	cmp	r6, r4
 8013b62:	d109      	bne.n	8013b78 <__libc_init_array+0x24>
 8013b64:	4d0b      	ldr	r5, [pc, #44]	; (8013b94 <__libc_init_array+0x40>)
 8013b66:	4c0c      	ldr	r4, [pc, #48]	; (8013b98 <__libc_init_array+0x44>)
 8013b68:	f000 f87c 	bl	8013c64 <_init>
 8013b6c:	1b64      	subs	r4, r4, r5
 8013b6e:	10a4      	asrs	r4, r4, #2
 8013b70:	2600      	movs	r6, #0
 8013b72:	42a6      	cmp	r6, r4
 8013b74:	d105      	bne.n	8013b82 <__libc_init_array+0x2e>
 8013b76:	bd70      	pop	{r4, r5, r6, pc}
 8013b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b7c:	4798      	blx	r3
 8013b7e:	3601      	adds	r6, #1
 8013b80:	e7ee      	b.n	8013b60 <__libc_init_array+0xc>
 8013b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b86:	4798      	blx	r3
 8013b88:	3601      	adds	r6, #1
 8013b8a:	e7f2      	b.n	8013b72 <__libc_init_array+0x1e>
 8013b8c:	080140b8 	.word	0x080140b8
 8013b90:	080140b8 	.word	0x080140b8
 8013b94:	080140b8 	.word	0x080140b8
 8013b98:	080140c0 	.word	0x080140c0

08013b9c <__retarget_lock_acquire_recursive>:
 8013b9c:	4770      	bx	lr

08013b9e <__retarget_lock_release_recursive>:
 8013b9e:	4770      	bx	lr

08013ba0 <memcpy>:
 8013ba0:	440a      	add	r2, r1
 8013ba2:	4291      	cmp	r1, r2
 8013ba4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013ba8:	d100      	bne.n	8013bac <memcpy+0xc>
 8013baa:	4770      	bx	lr
 8013bac:	b510      	push	{r4, lr}
 8013bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bb6:	4291      	cmp	r1, r2
 8013bb8:	d1f9      	bne.n	8013bae <memcpy+0xe>
 8013bba:	bd10      	pop	{r4, pc}

08013bbc <_free_r>:
 8013bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bbe:	2900      	cmp	r1, #0
 8013bc0:	d044      	beq.n	8013c4c <_free_r+0x90>
 8013bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bc6:	9001      	str	r0, [sp, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f1a1 0404 	sub.w	r4, r1, #4
 8013bce:	bfb8      	it	lt
 8013bd0:	18e4      	addlt	r4, r4, r3
 8013bd2:	f7ff ff5d 	bl	8013a90 <__malloc_lock>
 8013bd6:	4a1e      	ldr	r2, [pc, #120]	; (8013c50 <_free_r+0x94>)
 8013bd8:	9801      	ldr	r0, [sp, #4]
 8013bda:	6813      	ldr	r3, [r2, #0]
 8013bdc:	b933      	cbnz	r3, 8013bec <_free_r+0x30>
 8013bde:	6063      	str	r3, [r4, #4]
 8013be0:	6014      	str	r4, [r2, #0]
 8013be2:	b003      	add	sp, #12
 8013be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013be8:	f7ff bf58 	b.w	8013a9c <__malloc_unlock>
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	d908      	bls.n	8013c02 <_free_r+0x46>
 8013bf0:	6825      	ldr	r5, [r4, #0]
 8013bf2:	1961      	adds	r1, r4, r5
 8013bf4:	428b      	cmp	r3, r1
 8013bf6:	bf01      	itttt	eq
 8013bf8:	6819      	ldreq	r1, [r3, #0]
 8013bfa:	685b      	ldreq	r3, [r3, #4]
 8013bfc:	1949      	addeq	r1, r1, r5
 8013bfe:	6021      	streq	r1, [r4, #0]
 8013c00:	e7ed      	b.n	8013bde <_free_r+0x22>
 8013c02:	461a      	mov	r2, r3
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	b10b      	cbz	r3, 8013c0c <_free_r+0x50>
 8013c08:	42a3      	cmp	r3, r4
 8013c0a:	d9fa      	bls.n	8013c02 <_free_r+0x46>
 8013c0c:	6811      	ldr	r1, [r2, #0]
 8013c0e:	1855      	adds	r5, r2, r1
 8013c10:	42a5      	cmp	r5, r4
 8013c12:	d10b      	bne.n	8013c2c <_free_r+0x70>
 8013c14:	6824      	ldr	r4, [r4, #0]
 8013c16:	4421      	add	r1, r4
 8013c18:	1854      	adds	r4, r2, r1
 8013c1a:	42a3      	cmp	r3, r4
 8013c1c:	6011      	str	r1, [r2, #0]
 8013c1e:	d1e0      	bne.n	8013be2 <_free_r+0x26>
 8013c20:	681c      	ldr	r4, [r3, #0]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	6053      	str	r3, [r2, #4]
 8013c26:	440c      	add	r4, r1
 8013c28:	6014      	str	r4, [r2, #0]
 8013c2a:	e7da      	b.n	8013be2 <_free_r+0x26>
 8013c2c:	d902      	bls.n	8013c34 <_free_r+0x78>
 8013c2e:	230c      	movs	r3, #12
 8013c30:	6003      	str	r3, [r0, #0]
 8013c32:	e7d6      	b.n	8013be2 <_free_r+0x26>
 8013c34:	6825      	ldr	r5, [r4, #0]
 8013c36:	1961      	adds	r1, r4, r5
 8013c38:	428b      	cmp	r3, r1
 8013c3a:	bf04      	itt	eq
 8013c3c:	6819      	ldreq	r1, [r3, #0]
 8013c3e:	685b      	ldreq	r3, [r3, #4]
 8013c40:	6063      	str	r3, [r4, #4]
 8013c42:	bf04      	itt	eq
 8013c44:	1949      	addeq	r1, r1, r5
 8013c46:	6021      	streq	r1, [r4, #0]
 8013c48:	6054      	str	r4, [r2, #4]
 8013c4a:	e7ca      	b.n	8013be2 <_free_r+0x26>
 8013c4c:	b003      	add	sp, #12
 8013c4e:	bd30      	pop	{r4, r5, pc}
 8013c50:	24001988 	.word	0x24001988

08013c54 <_malloc_usable_size_r>:
 8013c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c58:	1f18      	subs	r0, r3, #4
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	bfbc      	itt	lt
 8013c5e:	580b      	ldrlt	r3, [r1, r0]
 8013c60:	18c0      	addlt	r0, r0, r3
 8013c62:	4770      	bx	lr

08013c64 <_init>:
 8013c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c66:	bf00      	nop
 8013c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c6a:	bc08      	pop	{r3}
 8013c6c:	469e      	mov	lr, r3
 8013c6e:	4770      	bx	lr

08013c70 <_fini>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	bf00      	nop
 8013c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c76:	bc08      	pop	{r3}
 8013c78:	469e      	mov	lr, r3
 8013c7a:	4770      	bx	lr
