
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ea8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08015148  08015148  00025148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156d0  080156d0  000256d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080156d8  080156d8  000256d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080156e0  080156e0  000256e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  080156e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b94  240000a0  08015784  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002c34  08015784  00032c34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003219d  00000000  00000000  00030111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ecf  00000000  00000000  000622ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000023b0  00000000  00000000  00067180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c0b  00000000  00000000  00069530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e374  00000000  00000000  0006b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ce6b  00000000  00000000  000a94af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018a279  00000000  00000000  000d631a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a3f0  00000000  00000000  00260594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  0026a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015130 	.word	0x08015130

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08015130 	.word	0x08015130

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f006 fafc 	bl	8006c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f82e 	bl	80006f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f8aa 	bl	80007f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 feca 	bl	8001434 <MX_GPIO_Init>
  MX_BDMA_Init();
 80006a0:	f000 fe68 	bl	8001374 <MX_BDMA_Init>
  MX_DMA_Init();
 80006a4:	f000 fe86 	bl	80013b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80006a8:	f000 f8c0 	bl	800082c <MX_ADC1_Init>
  MX_I2C1_Init();
 80006ac:	f000 f9ac 	bl	8000a08 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80006b0:	f000 f9ea 	bl	8000a88 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80006b4:	f000 fa34 	bl	8000b20 <MX_UART4_Init>
  MX_UART5_Init();
 80006b8:	f000 fa7e 	bl	8000bb8 <MX_UART5_Init>
  MX_UART7_Init();
 80006bc:	f000 fac8 	bl	8000c50 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fb12 	bl	8000ce8 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 80006c4:	f000 fb5c 	bl	8000d80 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80006c8:	f000 fb86 	bl	8000dd8 <MX_SPI1_Init>
  MX_TIM5_Init();
 80006cc:	f000 fcba 	bl	8001044 <MX_TIM5_Init>
  MX_TIM2_Init();
 80006d0:	f000 fbd8 	bl	8000e84 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d4:	f000 fe1c 	bl	8001310 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80006d8:	f000 fc4e 	bl	8000f78 <MX_TIM3_Init>
  MX_TIM15_Init();
 80006dc:	f000 fd6c 	bl	80011b8 <MX_TIM15_Init>
  MX_TIM7_Init();
 80006e0:	f000 fd32 	bl	8001148 <MX_TIM7_Init>
  MX_TIM16_Init();
 80006e4:	f000 fdec 	bl	80012c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006e8:	f003 ff68 	bl	80045bc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006ec:	f003 ffbc 	bl	8004668 <loop>
 80006f0:	e7fc      	b.n	80006ec <main+0x60>
	...

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	; 0x70
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	224c      	movs	r2, #76	; 0x4c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f014 f928 	bl	8014958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f014 f922 	bl	8014958 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000714:	2002      	movs	r0, #2
 8000716:	f00b fa75 	bl	800bc04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <SystemClock_Config+0xf4>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <SystemClock_Config+0xf4>)
 8000724:	f023 0301 	bic.w	r3, r3, #1
 8000728:	62d3      	str	r3, [r2, #44]	; 0x2c
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <SystemClock_Config+0xf4>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <SystemClock_Config+0xf8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <SystemClock_Config+0xf8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <SystemClock_Config+0xf8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	bf00      	nop
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0xf8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075a:	d1f8      	bne.n	800074e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000776:	2305      	movs	r3, #5
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000782:	2314      	movs	r3, #20
 8000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800078a:	2308      	movs	r3, #8
 800078c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078e:	2300      	movs	r3, #0
 8000790:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4618      	mov	r0, r3
 800079c:	f00b fec0 	bl	800c520 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007a6:	f000 ff1f 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b6:	2308      	movs	r3, #8
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80007be:	2350      	movs	r3, #80	; 0x50
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 80007c8:	2350      	movs	r3, #80	; 0x50
 80007ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00c faff 	bl	800cdd4 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007dc:	f000 ff04 	bl	80015e8 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3770      	adds	r7, #112	; 0x70
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58000400 	.word	0x58000400
 80007ec:	58024800 	.word	0x58024800

080007f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0b0      	sub	sp, #192	; 0xc0
 80007f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	22c0      	movs	r2, #192	; 0xc0
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f014 f8ab 	bl	8014958 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4618      	mov	r0, r3
 8000816:	f00c fe69 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 fee2 	bl	80015e8 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	37c0      	adds	r7, #192	; 0xc0
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000850:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000852:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <MX_ADC1_Init+0x1b8>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000856:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000858:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000864:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000866:	2201      	movs	r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000876:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000878:	2201      	movs	r2, #1
 800087a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 800087c:	4b58      	ldr	r3, [pc, #352]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800087e:	2208      	movs	r2, #8
 8000880:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000896:	2203      	movs	r2, #3
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a0:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ae:	484c      	ldr	r0, [pc, #304]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008b0:	f006 fc7c 	bl	80071ac <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008ba:	f000 fe95 	bl	80015e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4845      	ldr	r0, [pc, #276]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008ca:	f007 fd1d 	bl	8008308 <HAL_ADCEx_MultiModeConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 fe88 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008d8:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <MX_ADC1_Init+0x1bc>)
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008dc:	2306      	movs	r3, #6
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80008e0:	2306      	movs	r3, #6
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ea:	2304      	movs	r3, #4
 80008ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4839      	ldr	r0, [pc, #228]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80008fc:	f007 f850 	bl	80079a0 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000906:	f000 fe6f 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_ADC1_Init+0x1c0>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800090e:	230c      	movs	r3, #12
 8000910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4832      	ldr	r0, [pc, #200]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000918:	f007 f842 	bl	80079a0 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000922:	f000 fe61 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_ADC1_Init+0x1c4>)
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800092a:	2312      	movs	r3, #18
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000934:	f007 f834 	bl	80079a0 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800093e:	f000 fe53 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_ADC1_Init+0x1c8>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000946:	2318      	movs	r3, #24
 8000948:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4824      	ldr	r0, [pc, #144]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 8000950:	f007 f826 	bl	80079a0 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800095a:	f000 fe45 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC1_Init+0x1cc>)
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800096e:	f007 f817 	bl	80079a0 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000978:	f000 fe36 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_ADC1_Init+0x1d0>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000980:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 800098c:	f007 f808 	bl	80079a0 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000996:	f000 fe27 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_ADC1_Init+0x1d4>)
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800099e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80009aa:	f006 fff9 	bl	80079a0 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80009b4:	f000 fe18 	bl	80015e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_ADC1_Init+0x1d8>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009bc:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_ADC1_Init+0x1b4>)
 80009c8:	f006 ffea 	bl	80079a0 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009d2:	f000 fe09 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	240000bc 	.word	0x240000bc
 80009e4:	40022000 	.word	0x40022000
 80009e8:	0c900008 	.word	0x0c900008
 80009ec:	10c00010 	.word	0x10c00010
 80009f0:	14f00020 	.word	0x14f00020
 80009f4:	21800100 	.word	0x21800100
 80009f8:	25b00200 	.word	0x25b00200
 80009fc:	2a000400 	.word	0x2a000400
 8000a00:	2e300800 	.word	0x2e300800
 8000a04:	4b840000 	.word	0x4b840000

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_I2C1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a44:	f00a fe6e 	bl	800b724 <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 fdcb 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a56:	f00a fef5 	bl	800b844 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 fdc2 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a68:	f00a ff37 	bl	800b8da <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 fdb9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000198 	.word	0x24000198
 8000a80:	40005400 	.word	0x40005400
 8000a84:	00c0eaff 	.word	0x00c0eaff

08000a88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_LPUART1_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ad2:	f011 fa23 	bl	8011f1c <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 fd84 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000ae4:	f013 f9e0 	bl	8013ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 fd7b 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	f013 fa15 	bl	8013f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 fd72 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_LPUART1_UART_Init+0x90>)
 8000b06:	f013 f996 	bl	8013e36 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 fd6a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240001ec 	.word	0x240001ec
 8000b1c:	58000c00 	.word	0x58000c00

08000b20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_UART4_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b6a:	f011 f9d7 	bl	8011f1c <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b74:	f000 fd38 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b7c:	f013 f994 	bl	8013ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f000 fd2f 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b8e:	f013 f9c9 	bl	8013f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fd26 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_UART4_Init+0x90>)
 8000b9e:	f013 f94a 	bl	8013e36 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 fd1e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000280 	.word	0x24000280
 8000bb4:	40004c00 	.word	0x40004c00

08000bb8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <MX_UART5_Init+0x94>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_UART5_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_UART5_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c02:	f011 f98b 	bl	8011f1c <HAL_UART_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 fcec 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c14:	f013 f948 	bl	8013ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 fce3 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c26:	f013 f97d 	bl	8013f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 fcda 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_UART5_Init+0x90>)
 8000c36:	f013 f8fe 	bl	8013e36 <HAL_UARTEx_DisableFifoMode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 fcd2 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000314 	.word	0x24000314
 8000c4c:	40005000 	.word	0x40005000

08000c50 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <MX_UART7_Init+0x94>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000c9a:	f011 f93f 	bl	8011f1c <HAL_UART_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 fca0 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cac:	f013 f8fc 	bl	8013ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f000 fc97 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cbe:	f013 f931 	bl	8013f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000cc8:	f000 fc8e 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_UART7_Init+0x90>)
 8000cce:	f013 f8b2 	bl	8013e36 <HAL_UARTEx_DisableFifoMode>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 fc86 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	240003a8 	.word	0x240003a8
 8000ce4:	40007800 	.word	0x40007800

08000ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <MX_USART3_UART_Init+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d32:	f011 f8f3 	bl	8011f1c <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 fc54 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d44:	f013 f8b0 	bl	8013ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f000 fc4b 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d56:	f013 f8e5 	bl	8013f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 fc42 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d66:	f013 f866 	bl	8013e36 <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 fc3a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2400043c 	.word	0x2400043c
 8000d7c:	40004800 	.word	0x40004800

08000d80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <MX_QUADSPI_Init+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000d9e:	2216      	movs	r2, #22
 8000da0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_QUADSPI_Init+0x50>)
 8000dbe:	f00a ff6b 	bl	800bc98 <HAL_QSPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 fc0e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000728 	.word	0x24000728
 8000dd4:	52005000 	.word	0x52005000

08000dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <MX_SPI1_Init+0xa8>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000de4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_SPI1_Init+0xa4>)
 8000e68:	f00f f83e 	bl	800fee8 <HAL_SPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e72:	f000 fbb9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000774 	.word	0x24000774
 8000e80:	40013000 	.word	0x40013000

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eb2:	2263      	movs	r2, #99	; 0x63
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ed2:	f00f fa17 	bl	8010304 <HAL_TIM_PWM_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000edc:	f000 fb84 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4821      	ldr	r0, [pc, #132]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000ef0:	f010 ff68 	bl	8011dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000efa:	f000 fb75 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2360      	movs	r3, #96	; 0x60
 8000f00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f16:	f00f ffc3 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f20:	f000 fb62 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2204      	movs	r2, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f2c:	f00f ffb8 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f36:	f000 fb57 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f42:	f00f ffad 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000f4c:	f000 fb4c 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	220c      	movs	r2, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f58:	f00f ffa2 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000f62:	f000 fb41 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM2_Init+0xf0>)
 8000f68:	f005 f922 	bl	80061b0 <HAL_TIM_MspPostInit>

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	240007fc 	.word	0x240007fc

08000f78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_TIM3_Init+0xc4>)
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <MX_TIM3_Init+0xc8>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fa4:	2263      	movs	r2, #99	; 0x63
 8000fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_TIM3_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15503;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fb0:	f643 428f 	movw	r2, #15503	; 0x3c8f
 8000fb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc2:	481e      	ldr	r0, [pc, #120]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fc4:	f00f f99e 	bl	8010304 <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f000 fb0b 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_TIM3_Init+0xc4>)
 8000fe2:	f010 feef 	bl	8011dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fec:	f000 fafc 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM3_Init+0xc4>)
 8001008:	f00f ff4a 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001012:	f000 fae9 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	2204      	movs	r2, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM3_Init+0xc4>)
 800101e:	f00f ff3f 	bl	8010ea0 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001028:	f000 fade 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM3_Init+0xc4>)
 800102e:	f005 f8bf 	bl	80061b0 <HAL_TIM_MspPostInit>

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000848 	.word	0x24000848
 8001040:	40000400 	.word	0x40000400

08001044 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001074:	4a33      	ldr	r2, [pc, #204]	; (8001144 <MX_TIM5_Init+0x100>)
 8001076:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <MX_TIM5_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_TIM5_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001098:	4829      	ldr	r0, [pc, #164]	; (8001140 <MX_TIM5_Init+0xfc>)
 800109a:	f00f fa99 	bl	80105d0 <HAL_TIM_IC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80010a4:	f000 faa0 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010a8:	2304      	movs	r3, #4
 80010aa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	481f      	ldr	r0, [pc, #124]	; (8001140 <MX_TIM5_Init+0xfc>)
 80010c4:	f010 f800 	bl	80110c8 <HAL_TIM_SlaveConfigSynchro>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80010ce:	f000 fa8b 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_TIM5_Init+0xfc>)
 80010ec:	f00f fe3b 	bl	8010d66 <HAL_TIM_IC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 80010f6:	f000 fa77 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2204      	movs	r2, #4
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM5_Init+0xfc>)
 800110c:	f00f fe2b 	bl	8010d66 <HAL_TIM_IC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001116:	f000 fa67 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM5_Init+0xfc>)
 8001128:	f010 fe4c 	bl	8011dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001132:	f000 fa59 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000894 	.word	0x24000894
 8001144:	40000c00 	.word	0x40000c00

08001148 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM7_Init+0x68>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <MX_TIM7_Init+0x6c>)
 800115c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001160:	f242 720f 	movw	r2, #9999	; 0x270f
 8001164:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_TIM7_Init+0x68>)
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_TIM7_Init+0x68>)
 800117c:	f00e fff3 	bl	8010166 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001186:	f000 fa2f 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM7_Init+0x68>)
 8001198:	f010 fe14 	bl	8011dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011a2:	f000 fa21 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240008e0 	.word	0x240008e0
 80011b4:	40001400 	.word	0x40001400

080011b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <MX_TIM15_Init+0x104>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_TIM15_Init+0x100>)
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_TIM15_Init+0x100>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001212:	4829      	ldr	r0, [pc, #164]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001214:	f00f f9dc 	bl	80105d0 <HAL_TIM_IC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 f9e3 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001222:	2304      	movs	r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001226:	2350      	movs	r3, #80	; 0x50
 8001228:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <MX_TIM15_Init+0x100>)
 800123e:	f00f ff43 	bl	80110c8 <HAL_TIM_SlaveConfigSynchro>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001248:	f000 f9ce 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001266:	f00f fd7e 	bl	8010d66 <HAL_TIM_IC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 8001270:	f000 f9ba 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001274:	2302      	movs	r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2204      	movs	r2, #4
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM15_Init+0x100>)
 8001286:	f00f fd6e 	bl	8010d66 <HAL_TIM_IC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 8001290:	f000 f9aa 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM15_Init+0x100>)
 80012a2:	f010 fd8f 	bl	8011dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80012ac:	f000 f99c 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400092c 	.word	0x2400092c
 80012bc:	40014000 	.word	0x40014000

080012c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_TIM16_Init+0x48>)
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_TIM16_Init+0x4c>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_TIM16_Init+0x48>)
 80012cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_TIM16_Init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_TIM16_Init+0x48>)
 80012da:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_TIM16_Init+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_TIM16_Init+0x48>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_TIM16_Init+0x48>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM16_Init+0x48>)
 80012f4:	f00e ff37 	bl	8010166 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012fe:	f000 f973 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000978 	.word	0x24000978
 800130c:	40014400 	.word	0x40014400

08001310 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001318:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131c:	2209      	movs	r2, #9
 800131e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001322:	2202      	movs	r2, #2
 8001324:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132e:	2202      	movs	r2, #2
 8001330:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001358:	f00a fb0b 	bl	800b972 <HAL_PCD_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001362:	f000 f941 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240009c4 	.word	0x240009c4
 8001370:	40080000 	.word	0x40080000

08001374 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_BDMA_Init+0x3c>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <MX_BDMA_Init+0x3c>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_BDMA_Init+0x3c>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2081      	movs	r0, #129	; 0x81
 800139e:	f007 f96c 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80013a2:	2081      	movs	r0, #129	; 0x81
 80013a4:	f007 f983 	bl	80086ae <HAL_NVIC_EnableIRQ>

}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58024400 	.word	0x58024400

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_DMA_Init+0x7c>)
 80013bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_DMA_Init+0x7c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_DMA_Init+0x7c>)
 80013cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	200b      	movs	r0, #11
 80013de:	f007 f94c 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e2:	200b      	movs	r0, #11
 80013e4:	f007 f963 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	200c      	movs	r0, #12
 80013ee:	f007 f944 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013f2:	200c      	movs	r0, #12
 80013f4:	f007 f95b 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200d      	movs	r0, #13
 80013fe:	f007 f93c 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001402:	200d      	movs	r0, #13
 8001404:	f007 f953 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200e      	movs	r0, #14
 800140e:	f007 f934 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001412:	200e      	movs	r0, #14
 8001414:	f007 f94b 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	200f      	movs	r0, #15
 800141e:	f007 f92c 	bl	800867a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001422:	200f      	movs	r0, #15
 8001424:	f007 f943 	bl	80086ae <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a60      	ldr	r2, [pc, #384]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a59      	ldr	r2, [pc, #356]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a3b      	ldr	r2, [pc, #236]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_GPIO_Init+0x1a0>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f248 0108 	movw	r1, #32776	; 0x8008
 8001504:	4834      	ldr	r0, [pc, #208]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 8001506:	f00a f8d9 	bl	800b6bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f24c 0120 	movw	r1, #49184	; 0xc020
 8001510:	4832      	ldr	r0, [pc, #200]	; (80015dc <MX_GPIO_Init+0x1a8>)
 8001512:	f00a f8d3 	bl	800b6bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 800151c:	4830      	ldr	r0, [pc, #192]	; (80015e0 <MX_GPIO_Init+0x1ac>)
 800151e:	f00a f8cd 	bl	800b6bc <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LED_RED_Pin;
 8001522:	f248 0308 	movw	r3, #32776	; 0x8008
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4827      	ldr	r0, [pc, #156]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 800153c:	f009 ff0e 	bl	800b35c <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4823      	ldr	r0, [pc, #140]	; (80015e4 <MX_GPIO_Init+0x1b0>)
 8001558:	f009 ff00 	bl	800b35c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001560:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4819      	ldr	r0, [pc, #100]	; (80015d8 <MX_GPIO_Init+0x1a4>)
 8001572:	f009 fef3 	bl	800b35c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 8001576:	f24c 0320 	movw	r3, #49184	; 0xc020
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_GPIO_Init+0x1a8>)
 8001590:	f009 fee4 	bl	800b35c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001594:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 8001598:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_GPIO_Init+0x1ac>)
 80015ae:	f009 fed5 	bl	800b35c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_GPIO_Init+0x1a8>)
 80015c6:	f009 fec9 	bl	800b35c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58020800 	.word	0x58020800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>

080015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	ed87 0a00 	vstr	s0, [r7]
 80015fe:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    std::memcpy(&val, &f, sizeof(val));
 8001600:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	15db      	asrs	r3, r3, #23
 8001606:	b21b      	sxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001612:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001614:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d103      	bne.n	8001624 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 800161c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001620:	82fb      	strh	r3, [r7, #22]
 8001622:	e02a      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 800162c:	8afb      	ldrh	r3, [r7, #22]
 800162e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001632:	b29b      	uxth	r3, r3
 8001634:	82fb      	strh	r3, [r7, #22]
 8001636:	e020      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e01a      	b.n	800167a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800164a:	b29b      	uxth	r3, r3
 800164c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001654:	e008      	b.n	8001668 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
          exp--;
 800165c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f1      	beq.n	8001656 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001678:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	6079      	str	r1, [r7, #4]
 80016a2:	0152      	lsls	r2, r2, #5
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	08d9      	lsrs	r1, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	0ad9      	lsrs	r1, r3, #11
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	b2d9      	uxtb	r1, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	0cdb      	lsrs	r3, r3, #19
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1c58      	adds	r0, r3, #1
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	430a      	orrs	r2, r1
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80016e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e8:	111b      	asrs	r3, r3, #4
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	6079      	str	r1, [r7, #4]
 80016f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80016fc:	edd7 7a00 	vldr	s15, [r7]
 8001700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d508      	bpl.n	800171c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3b01      	subs	r3, #1
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 800171c:	2308      	movs	r3, #8
  }
 800171e:	4618      	mov	r0, r3
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800172a:	b480      	push	{r7}
 800172c:	b087      	sub	sp, #28
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3303      	adds	r3, #3
 8001738:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	031b      	lsls	r3, r3, #12
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b21b      	sxth	r3, r3
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	b29b      	uxth	r3, r3
 800179a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80017a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 80017b4:	23ff      	movs	r3, #255	; 0xff
 80017b6:	82fb      	strh	r3, [r7, #22]
 80017b8:	e02c      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 80017ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017be:	f240 427e 	movw	r2, #1150	; 0x47e
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dd04      	ble.n	80017d0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e021      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80017d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017d4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80017d8:	dd05      	ble.n	80017e6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80017da:	8afb      	ldrh	r3, [r7, #22]
 80017dc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	82fb      	strh	r3, [r7, #22]
 80017e4:	e016      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80017e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ea:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80017ee:	dc02      	bgt.n	80017f6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80017f0:	2300      	movs	r3, #0
 80017f2:	82fb      	strh	r3, [r7, #22]
 80017f4:	e00e      	b.n	8001814 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fc:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80017fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001802:	f240 3381 	movw	r3, #897	; 0x381
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800181a:	4293      	cmp	r3, r2
 800181c:	d002      	beq.n	8001824 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3301      	adds	r3, #1
 8001822:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	05da      	lsls	r2, r3, #23
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	061b      	lsls	r3, r3, #24
 8001844:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fa      	ldr	r2, [r7, #12]

    std::memcpy(f, &val, sizeof(val));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	601a      	str	r2, [r3, #0]
    return 8;
 8001854:	2308      	movs	r3, #8
  }
 8001856:	4618      	mov	r0, r3
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN3ros3MsgC1Ev>:
class Msg
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	0801564c 	.word	0x0801564c

080018a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
      data()
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffe8 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ffcf 	bl	8001862 <_ZN3ros4TimeC1Ev>
    {
    }
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	08015634 	.word	0x08015634

080018d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0a19      	lsrs	r1, r3, #8
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0c19      	lsrs	r1, r3, #16
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3302      	adds	r3, #2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0e19      	lsrs	r1, r3, #24
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3303      	adds	r3, #3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a19      	lsrs	r1, r3, #8
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	0c19      	lsrs	r1, r3, #16
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3302      	adds	r3, #2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0e19      	lsrs	r1, r3, #24
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3303      	adds	r3, #3
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3304      	adds	r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
      return offset;
 8001976:	68fb      	ldr	r3, [r7, #12]
    }
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	440b      	add	r3, r1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3302      	adds	r3, #2
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	440b      	add	r3, r1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3303      	adds	r3, #3
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	440b      	add	r3, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	061b      	lsls	r3, r3, #24
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	440b      	add	r3, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3302      	adds	r3, #2
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	440b      	add	r3, r1
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	440b      	add	r3, r1
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08015148 	.word	0x08015148

08001a68 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	08015158 	.word	0x08015158

08001a84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fef8 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aa4:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aaa:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ab0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
    {
    }
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	0801561c 	.word	0x0801561c
 8001ac8:	0801517c 	.word	0x0801517c

08001acc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	8899      	ldrh	r1, [r3, #4]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	889b      	ldrh	r3, [r3, #4]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	b299      	uxth	r1, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3302      	adds	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fbea 	bl	80002e0 <strlen>
 8001b0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fe2e 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	18d0      	adds	r0, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f012 ff9a 	bl	8014a68 <memcpy>
      offset += length_topic_name;
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4413      	add	r3, r2
 8001b3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fbcd 	bl	80002e0 <strlen>
 8001b46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fe11 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	18d0      	adds	r0, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f012 ff7d 	bl	8014a68 <memcpy>
      offset += length_message_type;
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fbb0 	bl	80002e0 <strlen>
 8001b80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fdf4 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3304      	adds	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	18d0      	adds	r0, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f012 ff60 	bl	8014a68 <memcpy>
      offset += length_md5sum;
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0a19      	lsrs	r1, r3, #8
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0c19      	lsrs	r1, r3, #16
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2ca      	uxtb	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0e19      	lsrs	r1, r3, #24
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3303      	adds	r3, #3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
    }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b08a      	sub	sp, #40	; 0x28
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	889b      	ldrh	r3, [r3, #4]
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fdb1 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	3304      	adds	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e00b      	b.n	8001c78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	441a      	add	r2, r3
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3ed      	bcc.n	8001c60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	441a      	add	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	441a      	add	r2, r3
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 fd7e 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	e00b      	b.n	8001cde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	441a      	add	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	6a3a      	ldr	r2, [r7, #32]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3ed      	bcc.n	8001cc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	441a      	add	r2, r3
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fd4b 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	3304      	adds	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e00b      	b.n	8001d44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	441a      	add	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	440b      	add	r3, r1
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3ed      	bcc.n	8001d2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	3b01      	subs	r3, #1
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	441a      	add	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	440a      	add	r2, r1
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	440b      	add	r3, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	440b      	add	r3, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3303      	adds	r3, #3
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	440b      	add	r3, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
    }
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	08015180 	.word	0x08015180

08001df0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0801519c 	.word	0x0801519c

08001e0c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fd34 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
      level(0),
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	711a      	strb	r2, [r3, #4]
      msg("")
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e2c:	609a      	str	r2, [r3, #8]
    {
    }
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	08015604 	.word	0x08015604
 8001e3c:	0801517c 	.word	0x0801517c

08001e40 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	7912      	ldrb	r2, [r2, #4]
 8001e58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa3b 	bl	80002e0 <strlen>
 8001e6a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fc7f 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	18d0      	adds	r0, r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f012 fdeb 	bl	8014a68 <memcpy>
      offset += length_msg;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	441a      	add	r2, r3
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fc70 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00b      	b.n	8001efa <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	440b      	add	r3, r1
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3ed      	bcc.n	8001ee2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
     return offset;
 8001f2a:	693b      	ldr	r3, [r7, #16]
    }
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	080151c0 	.word	0x080151c0

08001f50 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	080151d4 	.word	0x080151d4

08001f6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc84 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	080155ec 	.word	0x080155ec

08001fc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0a19      	lsrs	r1, r3, #8
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b2ca      	uxtb	r2, r1
 8001ff4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0c19      	lsrs	r1, r3, #16
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	3302      	adds	r3, #2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	b2ca      	uxtb	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0e19      	lsrs	r1, r3, #24
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3303      	adds	r3, #3
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3304      	adds	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	e02a      	b.n	800207c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	0a19      	lsrs	r1, r3, #8
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	3301      	adds	r3, #1
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	0c19      	lsrs	r1, r3, #16
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3302      	adds	r3, #2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	0e19      	lsrs	r1, r3, #24
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	3303      	adds	r3, #3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4413      	add	r3, r2
 800206c:	b2ca      	uxtb	r2, r1
 800206e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3304      	adds	r3, #4
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	3301      	adds	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3cf      	bcc.n	8002026 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	0a19      	lsrs	r1, r3, #8
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	3301      	adds	r3, #1
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	0c19      	lsrs	r1, r3, #16
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	3302      	adds	r3, #2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	b2ca      	uxtb	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	0e19      	lsrs	r1, r3, #24
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3303      	adds	r3, #3
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3304      	adds	r3, #4
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	e02a      	b.n	800212c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2ca      	uxtb	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0a19      	lsrs	r1, r3, #8
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	3301      	adds	r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	0c19      	lsrs	r1, r3, #16
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3302      	adds	r3, #2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0e19      	lsrs	r1, r3, #24
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	3303      	adds	r3, #3
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	3304      	adds	r3, #4
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3cf      	bcc.n	80020d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69d9      	ldr	r1, [r3, #28]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b2ca      	uxtb	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	0a19      	lsrs	r1, r3, #8
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4413      	add	r3, r2
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	0c19      	lsrs	r1, r3, #16
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	3302      	adds	r3, #2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	0e19      	lsrs	r1, r3, #24
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3303      	adds	r3, #3
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	3304      	adds	r3, #4
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e027      	b.n	80021d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f8a4 	bl	80002e0 <strlen>
 8002198:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fae8 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3304      	adds	r3, #4
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	18d0      	adds	r0, r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4619      	mov	r1, r3
 80021c4:	f012 fc50 	bl	8014a68 <memcpy>
      offset += length_stringsi;
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4413      	add	r3, r2
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	3301      	adds	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3d2      	bcc.n	8002186 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021e2:	4618      	mov	r0, r3
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b08e      	sub	sp, #56	; 0x38
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	3301      	adds	r3, #1
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	4313      	orrs	r3, r2
 8002212:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3302      	adds	r3, #2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	4313      	orrs	r3, r2
 8002224:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	3303      	adds	r3, #3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	6a3a      	ldr	r2, [r7, #32]
 8002234:	4313      	orrs	r3, r2
 8002236:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	3304      	adds	r3, #4
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d90a      	bls.n	800225e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f012 fb28 	bl	80148a8 <realloc>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
 8002268:	e035      	b.n	80022d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	440a      	add	r2, r1
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	3301      	adds	r3, #1
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	440b      	add	r3, r1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	3302      	adds	r3, #2
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	440b      	add	r3, r1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	3303      	adds	r3, #3
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	440b      	add	r3, r1
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	3304      	adds	r3, #4
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	3301      	adds	r3, #1
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3c4      	bcc.n	800226a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	3301      	adds	r3, #1
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	3302      	adds	r3, #2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	3303      	adds	r3, #3
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4313      	orrs	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	3304      	adds	r3, #4
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	d90a      	bls.n	8002346 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f012 fab4 	bl	80148a8 <realloc>
 8002340:	4602      	mov	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	e035      	b.n	80023be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	440a      	add	r2, r1
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	3301      	adds	r3, #1
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	3302      	adds	r3, #2
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	440b      	add	r3, r1
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	3303      	adds	r3, #3
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	440b      	add	r3, r1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	3304      	adds	r3, #4
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	3214      	adds	r2, #20
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	3301      	adds	r3, #1
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3c4      	bcc.n	8002352 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	3301      	adds	r3, #1
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	3302      	adds	r3, #2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	3303      	adds	r3, #3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	3304      	adds	r3, #4
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	429a      	cmp	r2, r3
 8002416:	d90a      	bls.n	800242e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f012 fa40 	bl	80148a8 <realloc>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
 8002438:	e03e      	b.n	80024b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	441a      	add	r2, r3
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f9b5 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	3304      	adds	r3, #4
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e00b      	b.n	8002470 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	441a      	add	r2, r3
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3b01      	subs	r3, #1
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	440b      	add	r3, r1
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ed      	bcc.n	8002458 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800247c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	3b01      	subs	r3, #1
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	3b01      	subs	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4413      	add	r3, r2
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	3220      	adds	r2, #32
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	3301      	adds	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3bb      	bcc.n	800243a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	080154e0 	.word	0x080154e0

080024e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	080151f8 	.word	0x080151f8

08002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68d8      	ldr	r0, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6891      	ldr	r1, [r2, #8]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
  };
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
  }
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d077      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d06f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a45      	ldr	r2, [pc, #276]	; (80026bc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d067      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d05f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d057      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	; (80026cc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d047      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d03f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d037      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2d      	ldr	r2, [pc, #180]	; (80026dc <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d017      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00f      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10a      	bne.n	8002692 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	e009      	b.n	80026a6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40020010 	.word	0x40020010
 80026b8:	40020028 	.word	0x40020028
 80026bc:	40020040 	.word	0x40020040
 80026c0:	40020058 	.word	0x40020058
 80026c4:	40020070 	.word	0x40020070
 80026c8:	40020088 	.word	0x40020088
 80026cc:	400200a0 	.word	0x400200a0
 80026d0:	400200b8 	.word	0x400200b8
 80026d4:	40020410 	.word	0x40020410
 80026d8:	40020428 	.word	0x40020428
 80026dc:	40020440 	.word	0x40020440
 80026e0:	40020458 	.word	0x40020458
 80026e4:	40020470 	.word	0x40020470
 80026e8:	40020488 	.word	0x40020488
 80026ec:	400204a0 	.word	0x400204a0
 80026f0:	400204b8 	.word	0x400204b8

080026f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <_ZN13STM32HardwareC1Ev+0x34>)
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	24000280 	.word	0x24000280

0800272c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f804 	bl	8002742 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002756:	4619      	mov	r1, r3
 8002758:	f00f fd3e 	bl	80121d8 <HAL_UART_Receive_DMA>
    }
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800276c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002770:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fefb 	bl	8002574 <_ZN13STM32Hardware10getRdmaIndEv>
 800277e:	4603      	mov	r3, r0
 8002780:	429c      	cmp	r4, r3
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002794:	1c59      	adds	r1, r3, #1
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80027b4:	68fb      	ldr	r3, [r7, #12]
    }
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
	...

080027c0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d108      	bne.n	80027e6 <_ZN13STM32Hardware5flushEv+0x26>
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZN13STM32Hardware5flushEv+0x26>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <_ZN13STM32Hardware5flushEv+0x28>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d03f      	beq.n	800286c <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d031      	beq.n	8002866 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800280e:	429a      	cmp	r2, r3
 8002810:	d20a      	bcs.n	8002828 <_ZN13STM32Hardware5flushEv+0x68>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002820:	b29b      	uxth	r3, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	e006      	b.n	8002836 <_ZN13STM32Hardware5flushEv+0x76>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800282e:	b29b      	uxth	r3, r3
 8002830:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002834:	b29b      	uxth	r3, r3
 8002836:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	89fa      	ldrh	r2, [r7, #14]
 800284c:	4619      	mov	r1, r3
 800284e:	f00f fc43 	bl	80120d8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	4413      	add	r3, r2
 800285c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002866:	4b03      	ldr	r3, [pc, #12]	; (8002874 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
      }
    }
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	24000ed0 	.word	0x24000ed0

08002878 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
      int n = length;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288e:	bfa8      	it	ge
 8002890:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002894:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800289c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	bf28      	it	cs
 80028a6:	4613      	movcs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80028b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f012 f8d3 	bl	8014a68 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4413      	add	r3, r2
 80028cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d00b      	beq.n	80028f6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	18d1      	adds	r1, r2, r3
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	f012 f8b9 	bl	8014a68 <memcpy>
      }

      flush();
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff ff62 	bl	80027c0 <_ZN13STM32Hardware5flushEv>
    }
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	f004 fa44 	bl	8006d98 <HAL_GetTick>
 8002910:	4603      	mov	r3, r0
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ffac 	bl	8001884 <_ZN3ros3MsgC1Ev>
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
      label(""),
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002936:	605a      	str	r2, [r3, #4]
      size(0),
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
      stride(0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	60da      	str	r2, [r3, #12]
    {
    }
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	080155a8 	.word	0x080155a8
 8002954:	0801517c 	.word	0x0801517c

08002958 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fcb8 	bl	80002e0 <strlen>
 8002970:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fefc 	bl	8004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	18d0      	adds	r0, r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	4619      	mov	r1, r3
 8002994:	f012 f868 	bl	8014a68 <memcpy>
      offset += length_label;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a19      	lsrs	r1, r3, #8
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	0c19      	lsrs	r1, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3302      	adds	r3, #2
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0e19      	lsrs	r1, r3, #24
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3303      	adds	r3, #3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3304      	adds	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	b2ca      	uxtb	r2, r1
 80029f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a19      	lsrs	r1, r3, #8
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	0c19      	lsrs	r1, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3302      	adds	r3, #2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	b2ca      	uxtb	r2, r1
 8002a1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0e19      	lsrs	r1, r3, #24
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3303      	adds	r3, #3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3304      	adds	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a34:	68fb      	ldr	r3, [r7, #12]
    }
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	441a      	add	r2, r3
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 feac 	bl	80047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3304      	adds	r3, #4
 8002a62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e00b      	b.n	8002a82 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	441a      	add	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	440b      	add	r3, r1
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3ed      	bcc.n	8002a6a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	3b01      	subs	r3, #1
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	440b      	add	r3, r1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3302      	adds	r3, #2
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	3303      	adds	r3, #3
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	440b      	add	r3, r1
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3304      	adds	r3, #4
 8002b06:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	440b      	add	r3, r1
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3302      	adds	r3, #2
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	440b      	add	r3, r1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	613b      	str	r3, [r7, #16]
     return offset;
 8002b5e:	693b      	ldr	r3, [r7, #16]
    }
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	0801521c 	.word	0x0801521c

08002b84 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0801523c 	.word	0x0801523c

08002ba0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fe6a 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff feab 	bl	800291c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
    {
    }
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	08015590 	.word	0x08015590

08002be0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b2ca      	uxtb	r2, r1
 8002bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0a19      	lsrs	r1, r3, #8
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2ca      	uxtb	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c19      	lsrs	r1, r3, #16
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3302      	adds	r3, #2
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0e19      	lsrs	r1, r3, #24
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	e017      	b.n	8002c6e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	18d0      	adds	r0, r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4413      	add	r3, r2
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4798      	blx	r3
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3e2      	bcc.n	8002c3e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	0a19      	lsrs	r1, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	0c19      	lsrs	r1, r3, #16
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	0e19      	lsrs	r1, r3, #24
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3303      	adds	r3, #3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90a      	bls.n	8002d40 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f011 fdb7 	bl	80148a8 <realloc>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e01a      	b.n	8002d82 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0008 	add.w	r0, r3, #8
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7ff fe70 	bl	8002a3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	18d0      	adds	r0, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3308      	adds	r3, #8
 8002d74:	2210      	movs	r2, #16
 8002d76:	4619      	mov	r1, r3
 8002d78:	f011 fe76 	bl	8014a68 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3df      	bcc.n	8002d4c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	440b      	add	r3, r1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3302      	adds	r3, #2
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	440b      	add	r3, r1
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	440b      	add	r3, r1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3304      	adds	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
     return offset;
 8002de2:	697b      	ldr	r3, [r7, #20]
    }
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	08015260 	.word	0x08015260

08002e08 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	0801527c 	.word	0x0801527c

08002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fd28 	bl	8001884 <_ZN3ros3MsgC1Ev>
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
      layout(),
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff feae 	bl	8002ba0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08015578 	.word	0x08015578

08002e68 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	1d18      	adds	r0, r3, #4
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff fead 	bl	8002be0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	0a19      	lsrs	r1, r3, #8
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	0c19      	lsrs	r1, r3, #16
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	0e19      	lsrs	r1, r3, #24
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e02a      	b.n	8002f34 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2ca      	uxtb	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0a19      	lsrs	r1, r3, #8
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0c19      	lsrs	r1, r3, #16
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	b2ca      	uxtb	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0e19      	lsrs	r1, r3, #24
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3301      	adds	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3cf      	bcc.n	8002ede <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002f3e:	697b      	ldr	r3, [r7, #20]
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1d18      	adds	r0, r3, #4
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7ff feb3 	bl	8002ccc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90a      	bls.n	8002fd4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f011 fc6d 	bl	80148a8 <realloc>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e035      	b.n	800304c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	440a      	add	r2, r1
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	440b      	add	r3, r1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3302      	adds	r3, #2
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	440b      	add	r3, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3303      	adds	r3, #3
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	440b      	add	r3, r1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3304      	adds	r3, #4
 8003032:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	3228      	adds	r2, #40	; 0x28
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3301      	adds	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3c4      	bcc.n	8002fe0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003056:	697b      	ldr	r3, [r7, #20]
    }
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	080152a0 	.word	0x080152a0

0800307c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	080152bc 	.word	0x080152bc

08003098 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
      data(0)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fbee 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
    {
    }
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	08015560 	.word	0x08015560

080030c4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	b2ca      	uxtb	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0a19      	lsrs	r1, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3301      	adds	r3, #1
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	b2ca      	uxtb	r2, r1
 80030f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	0c19      	lsrs	r1, r3, #16
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3302      	adds	r3, #2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	b2ca      	uxtb	r2, r1
 8003102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0e19      	lsrs	r1, r3, #24
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3303      	adds	r3, #3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	b2ca      	uxtb	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
      return offset;
 800311a:	68fb      	ldr	r3, [r7, #12]
    }
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6839      	ldr	r1, [r7, #0]
 8003140:	440a      	add	r2, r1
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	440b      	add	r3, r1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	4313      	orrs	r3, r2
 8003158:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3302      	adds	r3, #2
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	440b      	add	r3, r1
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4313      	orrs	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3303      	adds	r3, #3
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	440b      	add	r3, r1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
     return offset;
 800318a:	68fb      	ldr	r3, [r7, #12]
    }
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	080152e0 	.word	0x080152e0

080031b4 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	080152f4 	.word	0x080152f4

080031d0 <_ZN9vesc_msgs9VescStateC1Ev>:
      enum { FAULT_CODE_DRV8302 = 3 };
      enum { FAULT_CODE_ABS_OVER_CURRENT = 4 };
      enum { FAULT_CODE_OVER_TEMP_FET = 5 };
      enum { FAULT_CODE_OVER_TEMP_MOTOR = 6 };

    VescState():
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
      charge_regen(0),
      energy_drawn(0),
      energy_regen(0),
      displacement(0),
      distance_traveled(0),
      fault_code(0)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fb52 	bl	8001884 <_ZN3ros3MsgC1Ev>
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <_ZN9vesc_msgs9VescStateC1Ev+0x88>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
      voltage_input(0),
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	605a      	str	r2, [r3, #4]
      temperature_pcb(0),
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
      current_motor(0),
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
      current_input(0),
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
      speed(0),
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
      duty_cycle(0),
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
      charge_drawn(0),
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
      charge_regen(0),
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
      energy_drawn(0),
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
      energy_regen(0),
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
      displacement(0),
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c
      distance_traveled(0),
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
      fault_code(0)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	08015548 	.word	0x08015548

0800325c <_ZNK9vesc_msgs9VescState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->voltage_input);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 7a01 	vldr	s15, [r3, #4]
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	4610      	mov	r0, r2
 800327c:	f7fe f9b9 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature_pcb);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edd3 7a02 	vldr	s15, [r3, #8]
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	4610      	mov	r0, r2
 800329a:	f7fe f9aa 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_motor);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	441a      	add	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80032b2:	eeb0 0a67 	vmov.f32	s0, s15
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe f99b 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_input);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fe f98c 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80032ee:	eeb0 0a67 	vmov.f32	s0, s15
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fe f97d 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->duty_cycle);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edd3 7a06 	vldr	s15, [r3, #24]
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	4610      	mov	r0, r2
 8003312:	f7fe f96e 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_drawn);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	edd3 7a07 	vldr	s15, [r3, #28]
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	4610      	mov	r0, r2
 8003330:	f7fe f95f 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_regen);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 7a08 	vldr	s15, [r3, #32]
 8003348:	eeb0 0a67 	vmov.f32	s0, s15
 800334c:	4610      	mov	r0, r2
 800334e:	f7fe f950 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_drawn);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	441a      	add	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003366:	eeb0 0a67 	vmov.f32	s0, s15
 800336a:	4610      	mov	r0, r2
 800336c:	f7fe f941 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_regen);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003384:	eeb0 0a67 	vmov.f32	s0, s15
 8003388:	4610      	mov	r0, r2
 800338a:	f7fe f932 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->displacement);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80033a2:	eeb0 0a67 	vmov.f32	s0, s15
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fe f923 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->distance_traveled);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80033c0:	eeb0 0a67 	vmov.f32	s0, s15
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7fe f914 	bl	80015f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.real = this->fault_code;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_fault_code.base >> (8 * 0)) & 0xFF;
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	b2ca      	uxtb	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_fault_code.base >> (8 * 1)) & 0xFF;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0a19      	lsrs	r1, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_fault_code.base >> (8 * 2)) & 0xFF;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	0c19      	lsrs	r1, r3, #16
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3302      	adds	r3, #2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	b2ca      	uxtb	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_fault_code.base >> (8 * 3)) & 0xFF;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	0e19      	lsrs	r1, r3, #24
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3303      	adds	r3, #3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	b2ca      	uxtb	r2, r1
 8003412:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->fault_code);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3304      	adds	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]
      return offset;
 800341a:	68fb      	ldr	r3, [r7, #12]
    }
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZN9vesc_msgs9VescState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->voltage_input));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7fe f973 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature_pcb));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3308      	adds	r3, #8
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe f966 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800345e:	4602      	mov	r2, r0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_motor));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	330c      	adds	r3, #12
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7fe f959 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_input));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3310      	adds	r3, #16
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f7fe f94c 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	441a      	add	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3314      	adds	r3, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f7fe f93f 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->duty_cycle));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3318      	adds	r3, #24
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe f932 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_drawn));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	331c      	adds	r3, #28
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe f925 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_regen));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3320      	adds	r3, #32
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7fe f918 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_drawn));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7fe f90b 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_regen));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3328      	adds	r3, #40	; 0x28
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe f8fe 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->displacement));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	441a      	add	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	332c      	adds	r3, #44	; 0x2c
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe f8f1 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4413      	add	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->distance_traveled));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3330      	adds	r3, #48	; 0x30
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe f8e4 	bl	800172a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.base = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	440a      	add	r2, r1
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3301      	adds	r3, #1
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	440b      	add	r3, r1
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	4313      	orrs	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3302      	adds	r3, #2
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	440b      	add	r3, r1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	4313      	orrs	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3303      	adds	r3, #3
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	440b      	add	r3, r1
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]
      this->fault_code = u_fault_code.real;
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->fault_code);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3304      	adds	r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80035be:	68fb      	ldr	r3, [r7, #12]
    }
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZN9vesc_msgs9VescState7getTypeEv>:

    const char * getType(){ return "vesc_msgs/VescState"; };
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <_ZN9vesc_msgs9VescState7getTypeEv+0x18>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	08015318 	.word	0x08015318

080035e4 <_ZN9vesc_msgs9VescState6getMD5Ev>:
    const char * getMD5(){ return "81214bb4c1945e7c159bd76ec397ac04"; };
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <_ZN9vesc_msgs9VescState6getMD5Ev+0x18>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	0801532c 	.word	0x0801532c

08003600 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	080155d8 	.word	0x080155d8

08003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ffe8 	bl	8003600 <_ZN3ros15NodeHandleBase_C1Ev>
 8003630:	4a36      	ldr	r2, [pc, #216]	; (800370c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f85a 	bl	80026f4 <_ZN13STM32HardwareC1Ev>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f011 f973 	bl	8014958 <memset>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f011 f96a 	bl	8014958 <memset>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800368a:	2264      	movs	r2, #100	; 0x64
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f011 f962 	bl	8014958 <memset>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800369a:	2264      	movs	r2, #100	; 0x64
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f011 f95a 	bl	8014958 <memset>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fc36 	bl	8001f6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	08015534 	.word	0x08015534

08003710 <_Z13read_ble_dataPh>:


//char hello[] = "Hello world from STM32!";


HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003718:	4bac      	ldr	r3, [pc, #688]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e01e      	b.n	800375e <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2bfe      	cmp	r3, #254	; 0xfe
 800372a:	d115      	bne.n	8003758 <_Z13read_ble_dataPh+0x48>
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	3301      	adds	r3, #1
 8003730:	425a      	negs	r2, r3
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	bf58      	it	pl
 800373c:	4253      	negpl	r3, r2
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003754:	701a      	strb	r2, [r3, #0]
			break;
 8003756:	e009      	b.n	800376c <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	3301      	adds	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	4b9b      	ldr	r3, [pc, #620]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f103 021f 	add.w	r2, r3, #31
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	429a      	cmp	r2, r3
 800376a:	dad9      	bge.n	8003720 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 800376c:	4b97      	ldr	r3, [pc, #604]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	3302      	adds	r3, #2
 8003772:	425a      	negs	r2, r3
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	f002 021f 	and.w	r2, r2, #31
 800377c:	bf58      	it	pl
 800377e:	4253      	negpl	r3, r2
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <_Z13read_ble_dataPh+0x80>
 800378c:	2301      	movs	r3, #1
 800378e:	e116      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003790:	4b8e      	ldr	r3, [pc, #568]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	3303      	adds	r3, #3
 8003796:	425a      	negs	r2, r3
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	f002 021f 	and.w	r2, r2, #31
 80037a0:	bf58      	it	pl
 80037a2:	4253      	negpl	r3, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d001      	beq.n	80037b4 <_Z13read_ble_dataPh+0xa4>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e104      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 80037b4:	4b85      	ldr	r3, [pc, #532]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	425a      	negs	r2, r3
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	bf58      	it	pl
 80037c6:	4253      	negpl	r3, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b30      	cmp	r3, #48	; 0x30
 80037d2:	d001      	beq.n	80037d8 <_Z13read_ble_dataPh+0xc8>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0f2      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 80037d8:	4b7c      	ldr	r3, [pc, #496]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3305      	adds	r3, #5
 80037de:	425a      	negs	r2, r3
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	f002 021f 	and.w	r2, r2, #31
 80037e8:	bf58      	it	pl
 80037ea:	4253      	negpl	r3, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b5c      	cmp	r3, #92	; 0x5c
 80037f6:	d001      	beq.n	80037fc <_Z13read_ble_dataPh+0xec>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0e0      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 80037fc:	4b73      	ldr	r3, [pc, #460]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	3306      	adds	r3, #6
 8003802:	425a      	negs	r2, r3
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	f002 021f 	and.w	r2, r2, #31
 800380c:	bf58      	it	pl
 800380e:	4253      	negpl	r3, r2
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b17      	cmp	r3, #23
 800381a:	d001      	beq.n	8003820 <_Z13read_ble_dataPh+0x110>
 800381c:	2301      	movs	r3, #1
 800381e:	e0ce      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3307      	adds	r3, #7
 8003826:	425a      	negs	r2, r3
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	f002 021f 	and.w	r2, r2, #31
 8003830:	bf58      	it	pl
 8003832:	4253      	negpl	r3, r2
 8003834:	461a      	mov	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b06      	cmp	r3, #6
 800383e:	d001      	beq.n	8003844 <_Z13read_ble_dataPh+0x134>
 8003840:	2301      	movs	r3, #1
 8003842:	e0bc      	b.n	80039be <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	3309      	adds	r3, #9
 800384a:	425a      	negs	r2, r3
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	f002 021f 	and.w	r2, r2, #31
 8003854:	bf58      	it	pl
 8003856:	4253      	negpl	r3, r2
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b21a      	sxth	r2, r3
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 8003864:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003866:	4b59      	ldr	r3, [pc, #356]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	330b      	adds	r3, #11
 800386c:	425a      	negs	r2, r3
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	f002 021f 	and.w	r2, r2, #31
 8003876:	bf58      	it	pl
 8003878:	4253      	negpl	r3, r2
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d008      	beq.n	8003898 <_Z13read_ble_dataPh+0x188>
 8003886:	4b52      	ldr	r3, [pc, #328]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 8003888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388c:	b29b      	uxth	r3, r3
 800388e:	425b      	negs	r3, r3
 8003890:	b29b      	uxth	r3, r3
 8003892:	b21a      	sxth	r2, r3
 8003894:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 8003896:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003898:	4b4c      	ldr	r3, [pc, #304]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	330e      	adds	r3, #14
 800389e:	425a      	negs	r2, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	bf58      	it	pl
 80038aa:	4253      	negpl	r3, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	4619      	mov	r1, r3
 80038b8:	4b44      	ldr	r3, [pc, #272]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	330d      	adds	r3, #13
 80038be:	425a      	negs	r2, r3
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	bf58      	it	pl
 80038ca:	4253      	negpl	r3, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	ea41 0203 	orr.w	r2, r1, r3
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 80038e4:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	330f      	adds	r3, #15
 80038ec:	425a      	negs	r2, r3
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	f002 021f 	and.w	r2, r2, #31
 80038f6:	bf58      	it	pl
 80038f8:	4253      	negpl	r3, r2
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800390a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800390e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 8003914:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003918:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3310      	adds	r3, #16
 800391e:	425a      	negs	r2, r3
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	bf58      	it	pl
 800392a:	4253      	negpl	r3, r2
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	b29b      	uxth	r3, r3
 800393a:	4619      	mov	r1, r3
 800393c:	4b23      	ldr	r3, [pc, #140]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	3311      	adds	r3, #17
 8003942:	425a      	negs	r2, r3
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	bf58      	it	pl
 800394e:	4253      	negpl	r3, r2
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003962:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003966:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800396a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 8003970:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3312      	adds	r3, #18
 800397a:	425a      	negs	r2, r3
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	f002 021f 	and.w	r2, r2, #31
 8003984:	bf58      	it	pl
 8003986:	4253      	negpl	r3, r2
 8003988:	461a      	mov	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	b29a      	uxth	r2, r3
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <_Z13read_ble_dataPh+0x2bc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	3313      	adds	r3, #19
 800399c:	4259      	negs	r1, r3
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	f001 011f 	and.w	r1, r1, #31
 80039a6:	bf58      	it	pl
 80039a8:	424b      	negpl	r3, r1
 80039aa:	4619      	mov	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	440b      	add	r3, r1
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <_Z13read_ble_dataPh+0x2c0>)
 80039ba:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	24001a44 	.word	0x24001a44
 80039d0:	240018e4 	.word	0x240018e4

080039d4 <_Z15read_speed_dataPm>:

HAL_StatusTypeDef read_speed_data(uint32_t* data){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e00a      	b.n	80039f8 <_Z15read_speed_dataPm+0x24>
		if(data[i]==acsr)break;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <_Z15read_speed_dataPm+0x7c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d006      	beq.n	8003a00 <_Z15read_speed_dataPm+0x2c>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	3301      	adds	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d9f1      	bls.n	80039e2 <_Z15read_speed_dataPm+0xe>
 80039fe:	e000      	b.n	8003a02 <_Z15read_speed_dataPm+0x2e>
		if(data[i]==acsr)break;
 8003a00:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b11      	cmp	r3, #17
 8003a06:	d101      	bne.n	8003a0c <_Z15read_speed_dataPm+0x38>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e01c      	b.n	8003a46 <_Z15read_speed_dataPm+0x72>

	memcpy(speed,&data[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	18d1      	adds	r1, r2, r3
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	f1c3 0310 	rsb	r3, r3, #16
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	461a      	mov	r2, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <_Z15read_speed_dataPm+0x80>)
 8003a22:	f011 f821 	bl	8014a68 <memcpy>
	if(i){
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <_Z15read_speed_dataPm+0x70>
		memcpy(&speed[SPEED_PIN_COUNT-i],data,i*sizeof(uint32_t));
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	f1c3 0310 	rsb	r3, r3, #16
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <_Z15read_speed_dataPm+0x80>)
 8003a36:	1898      	adds	r0, r3, r2
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	f011 f812 	bl	8014a68 <memcpy>
	}
	return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	41435352 	.word	0x41435352
 8003a54:	2400195c 	.word	0x2400195c

08003a58 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_UART_TxCpltCallback+0x28>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d106      	bne.n	8003a76 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003a68:	4806      	ldr	r0, [pc, #24]	; (8003a84 <HAL_UART_TxCpltCallback+0x2c>)
 8003a6a:	f000 feca 	bl	8004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fea5 	bl	80027c0 <_ZN13STM32Hardware5flushEv>
	}

}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	24000280 	.word	0x24000280
 8003a84:	24000ed4 	.word	0x24000ed4

08003a88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_UART_RxCpltCallback+0x48>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d107      	bne.n	8003aa8 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <HAL_UART_RxCpltCallback+0x4c>)
 8003a9a:	f000 feb2 	bl	8004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fe4e 	bl	8002742 <_ZN13STM32Hardware10reset_rbufEv>
		read_ble_data(esc_receive);
	}else if(huart==&huart_f103){
		read_speed_data(speed_receive);
	}

}
 8003aa6:	e00e      	b.n	8003ac6 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_esc){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <HAL_UART_RxCpltCallback+0x50>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <HAL_UART_RxCpltCallback+0x30>
		read_ble_data(esc_receive);
 8003ab0:	480a      	ldr	r0, [pc, #40]	; (8003adc <HAL_UART_RxCpltCallback+0x54>)
 8003ab2:	f7ff fe2d 	bl	8003710 <_Z13read_ble_dataPh>
}
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_f103){
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_UART_RxCpltCallback+0x58>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d102      	bne.n	8003ac6 <HAL_UART_RxCpltCallback+0x3e>
		read_speed_data(speed_receive);
 8003ac0:	4808      	ldr	r0, [pc, #32]	; (8003ae4 <HAL_UART_RxCpltCallback+0x5c>)
 8003ac2:	f7ff ff87 	bl	80039d4 <_Z15read_speed_dataPm>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	24000280 	.word	0x24000280
 8003ad4:	24000ed4 	.word	0x24000ed4
 8003ad8:	240001ec 	.word	0x240001ec
 8003adc:	240018f8 	.word	0x240018f8
 8003ae0:	24000314 	.word	0x24000314
 8003ae4:	24001918 	.word	0x24001918

08003ae8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003ae8:	b5b0      	push	{r4, r5, r7, lr}
 8003aea:	b096      	sub	sp, #88	; 0x58
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_UARTEx_RxEventCallback+0x208>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f040 80f4 	bne.w	8003ce8 <HAL_UARTEx_RxEventCallback+0x200>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b78      	cmp	r3, #120	; 0x78
 8003b06:	d116      	bne.n	8003b36 <HAL_UARTEx_RxEventCallback+0x4e>
 8003b08:	4b7a      	ldr	r3, [pc, #488]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b69      	cmp	r3, #105	; 0x69
 8003b0e:	d112      	bne.n	8003b36 <HAL_UARTEx_RxEventCallback+0x4e>
 8003b10:	4b78      	ldr	r3, [pc, #480]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b12:	789b      	ldrb	r3, [r3, #2]
 8003b14:	2b6c      	cmp	r3, #108	; 0x6c
 8003b16:	d10e      	bne.n	8003b36 <HAL_UARTEx_RxEventCallback+0x4e>
 8003b18:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b1a:	78db      	ldrb	r3, [r3, #3]
 8003b1c:	2b69      	cmp	r3, #105	; 0x69
 8003b1e:	d10a      	bne.n	8003b36 <HAL_UARTEx_RxEventCallback+0x4e>
 8003b20:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b22:	791b      	ldrb	r3, [r3, #4]
 8003b24:	2b6e      	cmp	r3, #110	; 0x6e
 8003b26:	d106      	bne.n	8003b36 <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 8003b28:	230a      	movs	r3, #10
 8003b2a:	223c      	movs	r2, #60	; 0x3c
 8003b2c:	4972      	ldr	r1, [pc, #456]	; (8003cf8 <HAL_UARTEx_RxEventCallback+0x210>)
 8003b2e:	4873      	ldr	r0, [pc, #460]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x214>)
 8003b30:	f00e fa44 	bl	8011fbc <HAL_UART_Transmit>
 8003b34:	e072      	b.n	8003c1c <HAL_UARTEx_RxEventCallback+0x134>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 8003b36:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b61      	cmp	r3, #97	; 0x61
 8003b3c:	d15f      	bne.n	8003bfe <HAL_UARTEx_RxEventCallback+0x116>
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b63      	cmp	r3, #99	; 0x63
 8003b44:	d15b      	bne.n	8003bfe <HAL_UARTEx_RxEventCallback+0x116>
 8003b46:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b48:	789b      	ldrb	r3, [r3, #2]
 8003b4a:	2b73      	cmp	r3, #115	; 0x73
 8003b4c:	d157      	bne.n	8003bfe <HAL_UARTEx_RxEventCallback+0x116>
 8003b4e:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b50:	78db      	ldrb	r3, [r3, #3]
 8003b52:	2b72      	cmp	r3, #114	; 0x72
 8003b54:	d153      	bne.n	8003bfe <HAL_UARTEx_RxEventCallback+0x116>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 8003b56:	2338      	movs	r3, #56	; 0x38
 8003b58:	657b      	str	r3, [r7, #84]	; 0x54
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 8003b5a:	4a66      	ldr	r2, [pc, #408]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b62      	cmp	r3, #98	; 0x62
 8003b64:	d111      	bne.n	8003b8a <HAL_UARTEx_RxEventCallback+0xa2>
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a62      	ldr	r2, [pc, #392]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b6c:	5cd3      	ldrb	r3, [r2, r3]
 8003b6e:	2b34      	cmp	r3, #52	; 0x34
 8003b70:	d10b      	bne.n	8003b8a <HAL_UARTEx_RxEventCallback+0xa2>
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	3302      	adds	r3, #2
 8003b76:	4a5f      	ldr	r2, [pc, #380]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	2b30      	cmp	r3, #48	; 0x30
 8003b7c:	d105      	bne.n	8003b8a <HAL_UARTEx_RxEventCallback+0xa2>
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b80:	3303      	adds	r3, #3
 8003b82:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
 8003b86:	2b31      	cmp	r3, #49	; 0x31
 8003b88:	d010      	beq.n	8003bac <HAL_UARTEx_RxEventCallback+0xc4>
				uint8_t data[]= "Receive Wrong Data\n";
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x218>)
 8003b8c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003b90:	461d      	mov	r5, r3
 8003b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003b9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	2214      	movs	r2, #20
 8003ba2:	4856      	ldr	r0, [pc, #344]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x214>)
 8003ba4:	f00e fa0a 	bl	8011fbc <HAL_UART_Transmit>
			}else{
 8003ba8:	bf00      	nop
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));

			}

		}else{
 8003baa:	e037      	b.n	8003c1c <HAL_UARTEx_RxEventCallback+0x134>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_UARTEx_RxEventCallback+0x210>)
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				uint8_t data[]= "Write the Configuration Complete!\n";
 8003bc8:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_UARTEx_RxEventCallback+0x21c>)
 8003bca:	f107 0408 	add.w	r4, r7, #8
 8003bce:	461d      	mov	r5, r3
 8003bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	8022      	strh	r2, [r4, #0]
 8003bde:	3402      	adds	r4, #2
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003be4:	f107 0108 	add.w	r1, r7, #8
 8003be8:	230a      	movs	r3, #10
 8003bea:	2223      	movs	r2, #35	; 0x23
 8003bec:	4843      	ldr	r0, [pc, #268]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x214>)
 8003bee:	f00e f9e5 	bl	8011fbc <HAL_UART_Transmit>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8003bf2:	223c      	movs	r2, #60	; 0x3c
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4840      	ldr	r0, [pc, #256]	; (8003cf8 <HAL_UARTEx_RxEventCallback+0x210>)
 8003bf8:	f002 ff56 	bl	8006aa8 <QSPI_W25Q64JV_Write>
		}else{
 8003bfc:	e00e      	b.n	8003c1c <HAL_UARTEx_RxEventCallback+0x134>
			uint8_t data[]= "Receive Wrong Data\n";
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x218>)
 8003c00:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003c04:	461d      	mov	r5, r3
 8003c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
 8003c0e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c12:	230a      	movs	r3, #10
 8003c14:	2214      	movs	r2, #20
 8003c16:	4839      	ldr	r0, [pc, #228]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x214>)
 8003c18:	f00e f9d0 	bl	8011fbc <HAL_UART_Transmit>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x20c>)
 8003c20:	4836      	ldr	r0, [pc, #216]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x214>)
 8003c22:	f010 f9bd 	bl	8013fa0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a38      	ldr	r2, [pc, #224]	; (8003d0c <HAL_UARTEx_RxEventCallback+0x224>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d04a      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <HAL_UARTEx_RxEventCallback+0x228>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d045      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a35      	ldr	r2, [pc, #212]	; (8003d14 <HAL_UARTEx_RxEventCallback+0x22c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d040      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c44:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <HAL_UARTEx_RxEventCallback+0x230>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a32      	ldr	r2, [pc, #200]	; (8003d1c <HAL_UARTEx_RxEventCallback+0x234>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a30      	ldr	r2, [pc, #192]	; (8003d20 <HAL_UARTEx_RxEventCallback+0x238>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d031      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c62:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <HAL_UARTEx_RxEventCallback+0x23c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02c      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <HAL_UARTEx_RxEventCallback+0x240>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d027      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_UARTEx_RxEventCallback+0x244>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <HAL_UARTEx_RxEventCallback+0x248>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_UARTEx_RxEventCallback+0x24c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <HAL_UARTEx_RxEventCallback+0x250>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_UARTEx_RxEventCallback+0x254>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <HAL_UARTEx_RxEventCallback+0x258>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_UARTEx_RxEventCallback+0x1de>
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <HAL_UARTEx_RxEventCallback+0x260>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <HAL_UARTEx_RxEventCallback+0x1f0>
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0208 	bic.w	r2, r2, #8
 8003cd4:	601a      	str	r2, [r3, #0]
	}
}
 8003cd6:	e007      	b.n	8003ce8 <HAL_UARTEx_RxEventCallback+0x200>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x220>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3758      	adds	r7, #88	; 0x58
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf0:	40007800 	.word	0x40007800
 8003cf4:	240019bc 	.word	0x240019bc
 8003cf8:	24000004 	.word	0x24000004
 8003cfc:	240003a8 	.word	0x240003a8
 8003d00:	08015350 	.word	0x08015350
 8003d04:	08015364 	.word	0x08015364
 8003d08:	240006b0 	.word	0x240006b0
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8

08003d4c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==LPUART1) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_UART_ErrorCallback+0x3c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d105      	bne.n	8003d6a <HAL_UART_ErrorCallback+0x1e>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8003d5e:	2220      	movs	r2, #32
 8003d60:	490a      	ldr	r1, [pc, #40]	; (8003d8c <HAL_UART_ErrorCallback+0x40>)
 8003d62:	480b      	ldr	r0, [pc, #44]	; (8003d90 <HAL_UART_ErrorCallback+0x44>)
 8003d64:	f00e fa38 	bl	80121d8 <HAL_UART_Receive_DMA>
    }else if(UartHandle->Instance==UART5) {
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
    }
}
 8003d68:	e009      	b.n	8003d7e <HAL_UART_ErrorCallback+0x32>
    }else if(UartHandle->Instance==UART5) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_UART_ErrorCallback+0x48>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d104      	bne.n	8003d7e <HAL_UART_ErrorCallback+0x32>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8003d74:	2244      	movs	r2, #68	; 0x44
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <HAL_UART_ErrorCallback+0x4c>)
 8003d78:	4808      	ldr	r0, [pc, #32]	; (8003d9c <HAL_UART_ErrorCallback+0x50>)
 8003d7a:	f00e fa2d 	bl	80121d8 <HAL_UART_Receive_DMA>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	58000c00 	.word	0x58000c00
 8003d8c:	240018f8 	.word	0x240018f8
 8003d90:	240001ec 	.word	0x240001ec
 8003d94:	40005000 	.word	0x40005000
 8003d98:	24001918 	.word	0x24001918
 8003d9c:	24000314 	.word	0x24000314

08003da0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
//		freq=temp_freq;
//		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
//	}


}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM3){
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
//
//	}
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d15d      	bne.n	8003e96 <HAL_TIM_PeriodElapsedCallback+0xce>
		vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 8003dda:	4b5c      	ldr	r3, [pc, #368]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003de8:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8003f30 <HAL_TIM_PeriodElapsedCallback+0x168>
 8003dec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003df0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003df4:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003df6:	edc3 7a06 	vstr	s15, [r3, #24]
		vesc_state.voltage_input = esc_sensor.voltage;
 8003dfa:	4b54      	ldr	r3, [pc, #336]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4a54      	ldr	r2, [pc, #336]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003e00:	6053      	str	r3, [r2, #4]
		vesc_state.current_input = esc_sensor.current;
 8003e02:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003e08:	6113      	str	r3, [r2, #16]
		vesc_state.temperature_pcb = esc_sensor.temperature;
 8003e0a:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003e0c:	8a1b      	ldrh	r3, [r3, #16]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	4b4e      	ldr	r3, [pc, #312]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003e18:	edc3 7a02 	vstr	s15, [r3, #8]
		vesc_state.speed = esc_sensor.rpm;
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003e2a:	edc3 7a05 	vstr	s15, [r3, #20]

		vesc_pub.publish(&vesc_state);
 8003e2e:	4948      	ldr	r1, [pc, #288]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003e30:	4848      	ldr	r0, [pc, #288]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003e32:	f7fe fb7e 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wheel_speed_pub.publish(&wheel_speed);
 8003e36:	4948      	ldr	r1, [pc, #288]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003e38:	4848      	ldr	r0, [pc, #288]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003e3a:	f7fe fb7a 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		for(uint8_t i=0;i<8;++i){
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	e01d      	b.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0xb8>
			forces.data[i]=(float)force_raw[i]*3.3/0xFFFF;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	4a46      	ldr	r2, [pc, #280]	; (8003f60 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e58:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003f38 <HAL_TIM_PeriodElapsedCallback+0x170>
 8003e5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e60:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003f40 <HAL_TIM_PeriodElapsedCallback+0x178>
 8003e64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e76:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<8;++i){
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	d9de      	bls.n	8003e44 <HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		force_pub.publish(&forces);
 8003e86:	4937      	ldr	r1, [pc, #220]	; (8003f64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003e88:	4837      	ldr	r0, [pc, #220]	; (8003f68 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003e8a:	f7fe fb52 	bl	8002532 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		nh.spinOnce();
 8003e8e:	4837      	ldr	r0, [pc, #220]	; (8003f6c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003e90:	f000 fcc3 	bl	800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 8003e94:	e047      	b.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x15e>
	}else if(htim->Instance==TIM7){
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a35      	ldr	r2, [pc, #212]	; (8003f70 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d142      	bne.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x15e>
		//no esc topic received
		if(pid_its++>10){
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	b2d1      	uxtb	r1, r2
 8003ea8:	4a32      	ldr	r2, [pc, #200]	; (8003f74 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003eaa:	7011      	strb	r1, [r2, #0]
 8003eac:	2b0a      	cmp	r3, #10
 8003eae:	bf8c      	ite	hi
 8003eb0:	2301      	movhi	r3, #1
 8003eb2:	2300      	movls	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_TIM_PeriodElapsedCallback+0x104>
			pid_its=10;
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003ebc:	220a      	movs	r2, #10
 8003ebe:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,parameters.esc_offset);
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
			return;
 8003eca:	e02c      	b.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x15e>
		}

		if(pid_mode==PID_Manual){
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d128      	bne.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x15e>
			uint32_t esc_pulse=esc_duty_cycle_set*(parameters.esc_max-parameters.esc_offset)+parameters.esc_offset;
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003eea:	edd3 7a00 	vldr	s15, [r3]
 8003eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 3a90 	vmov	r3, s15
 8003f0a:	60bb      	str	r3, [r7, #8]
			//if(pre_esc_pulse==esc_pulse) no action needed.
			if(pre_esc_pulse!=esc_pulse){
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d007      	beq.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x15e>
				pre_esc_pulse=esc_pulse;
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pre_esc_pulse);
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
//	}
//	if(htim->Instance==TIM15){
//		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
//	}
}
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	f3af 8000 	nop.w
 8003f30:	00000000 	.word	0x00000000
 8003f34:	40590000 	.word	0x40590000
 8003f38:	66666666 	.word	0x66666666
 8003f3c:	400a6666 	.word	0x400a6666
 8003f40:	00000000 	.word	0x00000000
 8003f44:	40efffe0 	.word	0x40efffe0
 8003f48:	40001000 	.word	0x40001000
 8003f4c:	240018e4 	.word	0x240018e4
 8003f50:	24001810 	.word	0x24001810
 8003f54:	240018a8 	.word	0x240018a8
 8003f58:	24001878 	.word	0x24001878
 8003f5c:	240018d0 	.word	0x240018d0
 8003f60:	240019a8 	.word	0x240019a8
 8003f64:	24001848 	.word	0x24001848
 8003f68:	240018bc 	.word	0x240018bc
 8003f6c:	24000ed4 	.word	0x24000ed4
 8003f70:	40001400 	.word	0x40001400
 8003f74:	240019b8 	.word	0x240019b8
 8003f78:	24000004 	.word	0x24000004
 8003f7c:	24000848 	.word	0x24000848
 8003f80:	24000000 	.word	0x24000000
 8003f84:	24001a20 	.word	0x24001a20
 8003f88:	24001a30 	.word	0x24001a30

08003f8c <_Z14speed_callbackRKN8std_msgs7Float32E>:
	default:
		break;
	}
}

void speed_callback(const std_msgs::Float32& msg){
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	pid_mode = PID_Auto;
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_Z14speed_callbackRKN8std_msgs7Float32E+0x2c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <_Z14speed_callbackRKN8std_msgs7Float32E+0x30>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	24000000 	.word	0x24000000
 8003fb8:	240019b8 	.word	0x240019b8
 8003fbc:	24001a24 	.word	0x24001a24

08003fc0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

void duty_cycle_callback(const std_msgs::Float32& msg){
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	pid_mode=PID_Manual;
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x2c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
	esc_duty_cycle_set = msg.data;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x30>)
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	24000000 	.word	0x24000000
 8003fec:	240019b8 	.word	0x240019b8
 8003ff0:	24001a20 	.word	0x24001a20

08003ff4 <_Z17steering_callbackRKN8std_msgs7Float32E>:

void steering_callback(const std_msgs::Float32& msg){
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	uint32_t steering_pulse = parameters.steering_ratio*(msg.data-parameters.steering_offset);
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 8003ffe:	ed93 7a08 	vldr	s14, [r3, #32]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	edd3 6a01 	vldr	s13, [r3, #4]
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 800400a:	8b9b      	ldrh	r3, [r3, #28]
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004014:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	60fb      	str	r3, [r7, #12]
	if(steering_pulse != pre_steering_pulse){
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d007      	beq.n	8004040 <_Z17steering_callbackRKN8std_msgs7Float32E+0x4c>
		pre_steering_pulse = steering_pulse;
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pre_steering_pulse);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <_Z17steering_callbackRKN8std_msgs7Float32E+0x60>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	24000004 	.word	0x24000004
 8004050:	24001a2c 	.word	0x24001a2c
 8004054:	24000848 	.word	0x24000848

08004058 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

void brake_callback(const std_msgs::Float32MultiArray& msg){
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*tim2_arr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	ed93 7a00 	vldr	s14, [r3]
 8004068:	4b3c      	ldr	r3, [pc, #240]	; (800415c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800407c:	ee17 3a90 	vmov	r3, s15
 8004080:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d006      	beq.n	800409a <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 800408c:	4a34      	ldr	r2, [pc, #208]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 8004092:	4b34      	ldr	r3, [pc, #208]	; (8004164 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*tim2_arr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	3304      	adds	r3, #4
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	4b2d      	ldr	r3, [pc, #180]	; (800415c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 3a90 	vmov	r3, s15
 80040bc:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d006      	beq.n	80040d6 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*tim2_arr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	3308      	adds	r3, #8
 80040dc:	ed93 7a00 	vldr	s14, [r3]
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f4:	ee17 3a90 	vmov	r3, s15
 80040f8:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	429a      	cmp	r2, r3
 8004102:	d006      	beq.n	8004112 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 8004104:	4a16      	ldr	r2, [pc, #88]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*tim2_arr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	330c      	adds	r3, #12
 8004118:	ed93 7a00 	vldr	s14, [r3]
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004130:	ee17 3a90 	vmov	r3, s15
 8004134:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	429a      	cmp	r2, r3
 800413e:	d006      	beq.n	800414e <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8004140:	4a07      	ldr	r2, [pc, #28]	; (8004160 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	24001a28 	.word	0x24001a28
 8004160:	24001a34 	.word	0x24001a34
 8004164:	240007fc 	.word	0x240007fc

08004168 <_Z10uart_setupv>:

void adc_setup(){
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
}

void uart_setup(){
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 800416c:	2220      	movs	r2, #32
 800416e:	4939      	ldr	r1, [pc, #228]	; (8004254 <_Z10uart_setupv+0xec>)
 8004170:	4839      	ldr	r0, [pc, #228]	; (8004258 <_Z10uart_setupv+0xf0>)
 8004172:	f00e f831 	bl	80121d8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8004176:	2244      	movs	r2, #68	; 0x44
 8004178:	4938      	ldr	r1, [pc, #224]	; (800425c <_Z10uart_setupv+0xf4>)
 800417a:	4839      	ldr	r0, [pc, #228]	; (8004260 <_Z10uart_setupv+0xf8>)
 800417c:	f00e f82c 	bl	80121d8 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	4938      	ldr	r1, [pc, #224]	; (8004264 <_Z10uart_setupv+0xfc>)
 8004184:	4838      	ldr	r0, [pc, #224]	; (8004268 <_Z10uart_setupv+0x100>)
 8004186:	f00f ff0b 	bl	8013fa0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800418a:	4b38      	ldr	r3, [pc, #224]	; (800426c <_Z10uart_setupv+0x104>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a38      	ldr	r2, [pc, #224]	; (8004270 <_Z10uart_setupv+0x108>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d04a      	beq.n	800422a <_Z10uart_setupv+0xc2>
 8004194:	4b35      	ldr	r3, [pc, #212]	; (800426c <_Z10uart_setupv+0x104>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a36      	ldr	r2, [pc, #216]	; (8004274 <_Z10uart_setupv+0x10c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d045      	beq.n	800422a <_Z10uart_setupv+0xc2>
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <_Z10uart_setupv+0x104>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a35      	ldr	r2, [pc, #212]	; (8004278 <_Z10uart_setupv+0x110>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d040      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041a8:	4b30      	ldr	r3, [pc, #192]	; (800426c <_Z10uart_setupv+0x104>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a33      	ldr	r2, [pc, #204]	; (800427c <_Z10uart_setupv+0x114>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d03b      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <_Z10uart_setupv+0x104>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <_Z10uart_setupv+0x118>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d036      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <_Z10uart_setupv+0x104>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a30      	ldr	r2, [pc, #192]	; (8004284 <_Z10uart_setupv+0x11c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d031      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <_Z10uart_setupv+0x104>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <_Z10uart_setupv+0x120>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d02c      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <_Z10uart_setupv+0x104>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2d      	ldr	r2, [pc, #180]	; (800428c <_Z10uart_setupv+0x124>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d027      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041da:	4b24      	ldr	r3, [pc, #144]	; (800426c <_Z10uart_setupv+0x104>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <_Z10uart_setupv+0x128>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <_Z10uart_setupv+0x104>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <_Z10uart_setupv+0x12c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01d      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041ee:	4b1f      	ldr	r3, [pc, #124]	; (800426c <_Z10uart_setupv+0x104>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a29      	ldr	r2, [pc, #164]	; (8004298 <_Z10uart_setupv+0x130>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d018      	beq.n	800422a <_Z10uart_setupv+0xc2>
 80041f8:	4b1c      	ldr	r3, [pc, #112]	; (800426c <_Z10uart_setupv+0x104>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a27      	ldr	r2, [pc, #156]	; (800429c <_Z10uart_setupv+0x134>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <_Z10uart_setupv+0xc2>
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <_Z10uart_setupv+0x104>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <_Z10uart_setupv+0x138>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <_Z10uart_setupv+0xc2>
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <_Z10uart_setupv+0x104>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <_Z10uart_setupv+0x13c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <_Z10uart_setupv+0xc2>
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <_Z10uart_setupv+0x104>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <_Z10uart_setupv+0x140>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <_Z10uart_setupv+0xc2>
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <_Z10uart_setupv+0x104>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <_Z10uart_setupv+0x144>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <_Z10uart_setupv+0xd4>
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <_Z10uart_setupv+0x104>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <_Z10uart_setupv+0x104>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0208 	bic.w	r2, r2, #8
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e008      	b.n	800424e <_Z10uart_setupv+0xe6>
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <_Z10uart_setupv+0x104>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <_Z10uart_setupv+0x104>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0204 	bic.w	r2, r2, #4
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	240018f8 	.word	0x240018f8
 8004258:	240001ec 	.word	0x240001ec
 800425c:	24001918 	.word	0x24001918
 8004260:	24000314 	.word	0x24000314
 8004264:	240019bc 	.word	0x240019bc
 8004268:	240003a8 	.word	0x240003a8
 800426c:	240006b0 	.word	0x240006b0
 8004270:	40020010 	.word	0x40020010
 8004274:	40020028 	.word	0x40020028
 8004278:	40020040 	.word	0x40020040
 800427c:	40020058 	.word	0x40020058
 8004280:	40020070 	.word	0x40020070
 8004284:	40020088 	.word	0x40020088
 8004288:	400200a0 	.word	0x400200a0
 800428c:	400200b8 	.word	0x400200b8
 8004290:	40020410 	.word	0x40020410
 8004294:	40020428 	.word	0x40020428
 8004298:	40020440 	.word	0x40020440
 800429c:	40020458 	.word	0x40020458
 80042a0:	40020470 	.word	0x40020470
 80042a4:	40020488 	.word	0x40020488
 80042a8:	400204a0 	.word	0x400204a0
 80042ac:	400204b8 	.word	0x400204b8

080042b0 <_Z11timer_setupv>:

void timer_setup(){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	//set tim6 ARR value based on topic publish frequency and start tim6
	__HAL_TIM_SET_AUTORELOAD(&htim16,uint32_t(10000/parameters.publish_frequency-1));
 80042b4:	4b51      	ldr	r3, [pc, #324]	; (80043fc <_Z11timer_setupv+0x14c>)
 80042b6:	7d1b      	ldrb	r3, [r3, #20]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80042be:	fb93 f3f2 	sdiv	r3, r3, r2
 80042c2:	1e5a      	subs	r2, r3, #1
 80042c4:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <_Z11timer_setupv+0x150>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <_Z11timer_setupv+0x14c>)
 80042cc:	7d1b      	ldrb	r3, [r3, #20]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80042d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80042d8:	3b01      	subs	r3, #1
 80042da:	461a      	mov	r2, r3
 80042dc:	4b48      	ldr	r3, [pc, #288]	; (8004400 <_Z11timer_setupv+0x150>)
 80042de:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim16);
 80042e0:	4847      	ldr	r0, [pc, #284]	; (8004400 <_Z11timer_setupv+0x150>)
 80042e2:	f00b ff97 	bl	8010214 <HAL_TIM_Base_Start_IT>

	//set tim7 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_AUTORELOAD(&htim7,uint32_t(10000/parameters.pid_frequency-1));
 80042e6:	4b45      	ldr	r3, [pc, #276]	; (80043fc <_Z11timer_setupv+0x14c>)
 80042e8:	7d5b      	ldrb	r3, [r3, #21]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80042f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80042f4:	1e5a      	subs	r2, r3, #1
 80042f6:	4b43      	ldr	r3, [pc, #268]	; (8004404 <_Z11timer_setupv+0x154>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80042fc:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <_Z11timer_setupv+0x14c>)
 80042fe:	7d5b      	ldrb	r3, [r3, #21]
 8004300:	461a      	mov	r2, r3
 8004302:	f242 7310 	movw	r3, #10000	; 0x2710
 8004306:	fb93 f3f2 	sdiv	r3, r3, r2
 800430a:	3b01      	subs	r3, #1
 800430c:	461a      	mov	r2, r3
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <_Z11timer_setupv+0x154>)
 8004310:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim7);
 8004312:	483c      	ldr	r0, [pc, #240]	; (8004404 <_Z11timer_setupv+0x154>)
 8004314:	f00b ff7e 	bl	8010214 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	__HAL_TIM_SET_AUTORELOAD(&htim3,uint32_t(1000000/parameters.steering_esc_pwm_frequency-1));
 8004318:	4b38      	ldr	r3, [pc, #224]	; (80043fc <_Z11timer_setupv+0x14c>)
 800431a:	ed93 7a06 	vldr	s14, [r3, #24]
 800431e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004408 <_Z11timer_setupv+0x158>
 8004322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800432a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <_Z11timer_setupv+0x15c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004336:	ee17 2a90 	vmov	r2, s15
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <_Z11timer_setupv+0x14c>)
 800433e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004342:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004408 <_Z11timer_setupv+0x158>
 8004346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800434e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004356:	ee17 2a90 	vmov	r2, s15
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <_Z11timer_setupv+0x15c>)
 800435c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <_Z11timer_setupv+0x14c>)
 8004360:	8b9a      	ldrh	r2, [r3, #28]
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <_Z11timer_setupv+0x15c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <_Z11timer_setupv+0x14c>)
 800436a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <_Z11timer_setupv+0x15c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004372:	2100      	movs	r1, #0
 8004374:	4825      	ldr	r0, [pc, #148]	; (800440c <_Z11timer_setupv+0x15c>)
 8004376:	f00c f81d 	bl	80103b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800437a:	2104      	movs	r1, #4
 800437c:	4823      	ldr	r0, [pc, #140]	; (800440c <_Z11timer_setupv+0x15c>)
 800437e:	f00c f819 	bl	80103b4 <HAL_TIM_PWM_Start>

	//set brake pwm
	tim2_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <_Z11timer_setupv+0x14c>)
 8004384:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004388:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004408 <_Z11timer_setupv+0x158>
 800438c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439c:	ee17 2a90 	vmov	r2, s15
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <_Z11timer_setupv+0x160>)
 80043a2:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,tim2_arr);
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <_Z11timer_setupv+0x164>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <_Z11timer_setupv+0x160>)
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <_Z11timer_setupv+0x160>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	; (8004414 <_Z11timer_setupv+0x164>)
 80043b4:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80043b6:	4b17      	ldr	r3, [pc, #92]	; (8004414 <_Z11timer_setupv+0x164>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <_Z11timer_setupv+0x164>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <_Z11timer_setupv+0x164>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <_Z11timer_setupv+0x164>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80043d6:	2100      	movs	r1, #0
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <_Z11timer_setupv+0x15c>)
 80043da:	f00b ffeb 	bl	80103b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80043de:	2104      	movs	r1, #4
 80043e0:	480a      	ldr	r0, [pc, #40]	; (800440c <_Z11timer_setupv+0x15c>)
 80043e2:	f00b ffe7 	bl	80103b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80043e6:	2108      	movs	r1, #8
 80043e8:	4808      	ldr	r0, [pc, #32]	; (800440c <_Z11timer_setupv+0x15c>)
 80043ea:	f00b ffe3 	bl	80103b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80043ee:	210c      	movs	r1, #12
 80043f0:	4806      	ldr	r0, [pc, #24]	; (800440c <_Z11timer_setupv+0x15c>)
 80043f2:	f00b ffdf 	bl	80103b4 <HAL_TIM_PWM_Start>

}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	24000004 	.word	0x24000004
 8004400:	24000978 	.word	0x24000978
 8004404:	240008e0 	.word	0x240008e0
 8004408:	49742400 	.word	0x49742400
 800440c:	24000848 	.word	0x24000848
 8004410:	24001a28 	.word	0x24001a28
 8004414:	240007fc 	.word	0x240007fc

08004418 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );

void ros_setup(){
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
	forces.data = new std_msgs::Float32MultiArray::_data_type[8];
 800441c:	2020      	movs	r0, #32
 800441e:	f010 f96b 	bl	80146f8 <_Znaj>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <_Z9ros_setupv+0x48>)
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
	forces.data_length = 8;
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <_Z9ros_setupv+0x48>)
 800442c:	2208      	movs	r2, #8
 800442e:	625a      	str	r2, [r3, #36]	; 0x24


	wheel_speed.data = new std_msgs::Float32MultiArray::_data_type[16];
 8004430:	2040      	movs	r0, #64	; 0x40
 8004432:	f010 f961 	bl	80146f8 <_Znaj>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <_Z9ros_setupv+0x4c>)
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c
	wheel_speed.data_length = 16;
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <_Z9ros_setupv+0x4c>)
 8004440:	2210      	movs	r2, #16
 8004442:	625a      	str	r2, [r3, #36]	; 0x24



	nh.advertise(vesc_pub);
 8004444:	4908      	ldr	r1, [pc, #32]	; (8004468 <_Z9ros_setupv+0x50>)
 8004446:	4809      	ldr	r0, [pc, #36]	; (800446c <_Z9ros_setupv+0x54>)
 8004448:	f000 fc18 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(force_pub);
 800444c:	4908      	ldr	r1, [pc, #32]	; (8004470 <_Z9ros_setupv+0x58>)
 800444e:	4807      	ldr	r0, [pc, #28]	; (800446c <_Z9ros_setupv+0x54>)
 8004450:	f000 fc14 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(wheel_speed_pub);
 8004454:	4907      	ldr	r1, [pc, #28]	; (8004474 <_Z9ros_setupv+0x5c>)
 8004456:	4805      	ldr	r0, [pc, #20]	; (800446c <_Z9ros_setupv+0x54>)
 8004458:	f000 fc10 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}
 8004460:	24001848 	.word	0x24001848
 8004464:	24001878 	.word	0x24001878
 8004468:	240018a8 	.word	0x240018a8
 800446c:	24000ed4 	.word	0x24000ed4
 8004470:	240018bc 	.word	0x240018bc
 8004474:	240018d0 	.word	0x240018d0

08004478 <_Z15read_parametersv>:

void read_parameters(){
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b09c      	sub	sp, #112	; 0x70
 800447c:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 800447e:	f002 f99b 	bl	80067b8 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004482:	f002 f9a1 	bl	80067c8 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004486:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800448a:	4618      	mov	r0, r3
 800448c:	f002 fb98 	bl	8006bc0 <QSPI_W25Q64JV_DeviceID>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d000      	beq.n	80044a2 <_Z15read_parametersv+0x2a>
	    while (1);
 80044a0:	e7fe      	b.n	80044a0 <_Z15read_parametersv+0x28>
	}
	char str[]="Connect to ROM, ROM ID: [0x00,0x00]\n";
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <_Z15read_parametersv+0x128>)
 80044a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80044a8:	461d      	mov	r5, r3
 80044aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044b6:	6020      	str	r0, [r4, #0]
 80044b8:	3404      	adds	r4, #4
 80044ba:	7021      	strb	r1, [r4, #0]
	sprintf(str,"Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 80044bc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80044c0:	461a      	mov	r2, r3
 80044c2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80044c6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80044ca:	4936      	ldr	r1, [pc, #216]	; (80045a4 <_Z15read_parametersv+0x12c>)
 80044cc:	f010 fa24 	bl	8014918 <siprintf>
	HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 80044d0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80044d4:	230a      	movs	r3, #10
 80044d6:	2225      	movs	r2, #37	; 0x25
 80044d8:	4833      	ldr	r0, [pc, #204]	; (80045a8 <_Z15read_parametersv+0x130>)
 80044da:	f00d fd6f 	bl	8011fbc <HAL_UART_Transmit>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 80044de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044e2:	2204      	movs	r2, #4
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f002 f9ec 	bl	80068c4 <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 80044ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80044f0:	2b61      	cmp	r3, #97	; 0x61
 80044f2:	d10b      	bne.n	800450c <_Z15read_parametersv+0x94>
 80044f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80044f8:	2b63      	cmp	r3, #99	; 0x63
 80044fa:	d107      	bne.n	800450c <_Z15read_parametersv+0x94>
 80044fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004500:	2b73      	cmp	r3, #115	; 0x73
 8004502:	d103      	bne.n	800450c <_Z15read_parametersv+0x94>
 8004504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004508:	2b72      	cmp	r3, #114	; 0x72
 800450a:	d018      	beq.n	800453e <_Z15read_parametersv+0xc6>
		char str[]="Read Parameters Head Fails\n";
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <_Z15read_parametersv+0x134>)
 800450e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004512:	461d      	mov	r5, r3
 8004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800451c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart7, (uint8_t*)header, 4, 10);
 8004520:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004524:	230a      	movs	r3, #10
 8004526:	2204      	movs	r2, #4
 8004528:	481f      	ldr	r0, [pc, #124]	; (80045a8 <_Z15read_parametersv+0x130>)
 800452a:	f00d fd47 	bl	8011fbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 800452e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004532:	230a      	movs	r3, #10
 8004534:	221c      	movs	r2, #28
 8004536:	481c      	ldr	r0, [pc, #112]	; (80045a8 <_Z15read_parametersv+0x130>)
 8004538:	f00d fd40 	bl	8011fbc <HAL_UART_Transmit>
 800453c:	e02d      	b.n	800459a <_Z15read_parametersv+0x122>
		return;
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 800453e:	223c      	movs	r2, #60	; 0x3c
 8004540:	2100      	movs	r1, #0
 8004542:	481b      	ldr	r0, [pc, #108]	; (80045b0 <_Z15read_parametersv+0x138>)
 8004544:	f002 f9be 	bl	80068c4 <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <_Z15read_parametersv+0x138>)
 800454a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800454e:	2b62      	cmp	r3, #98	; 0x62
 8004550:	d10e      	bne.n	8004570 <_Z15read_parametersv+0xf8>
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <_Z15read_parametersv+0x138>)
 8004554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004558:	2b34      	cmp	r3, #52	; 0x34
 800455a:	d109      	bne.n	8004570 <_Z15read_parametersv+0xf8>
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <_Z15read_parametersv+0x138>)
 800455e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	d104      	bne.n	8004570 <_Z15read_parametersv+0xf8>
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <_Z15read_parametersv+0x138>)
 8004568:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800456c:	2b31      	cmp	r3, #49	; 0x31
 800456e:	d014      	beq.n	800459a <_Z15read_parametersv+0x122>
		char str[]="Read Parameters Tailor Fails\n";
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <_Z15read_parametersv+0x13c>)
 8004572:	1d3c      	adds	r4, r7, #4
 8004574:	461d      	mov	r5, r3
 8004576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800457a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800457e:	c407      	stmia	r4!, {r0, r1, r2}
 8004580:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart7, (uint8_t*)parameters.tailer, 4, 10);
 8004582:	230a      	movs	r3, #10
 8004584:	2204      	movs	r2, #4
 8004586:	490c      	ldr	r1, [pc, #48]	; (80045b8 <_Z15read_parametersv+0x140>)
 8004588:	4807      	ldr	r0, [pc, #28]	; (80045a8 <_Z15read_parametersv+0x130>)
 800458a:	f00d fd17 	bl	8011fbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)str, sizeof(str), 10);
 800458e:	1d39      	adds	r1, r7, #4
 8004590:	230a      	movs	r3, #10
 8004592:	221e      	movs	r2, #30
 8004594:	4804      	ldr	r0, [pc, #16]	; (80045a8 <_Z15read_parametersv+0x130>)
 8004596:	f00d fd11 	bl	8011fbc <HAL_UART_Transmit>
	}

//	QSPI_W25Q64JV_Write((uint8_t*)(),0x0,2*Font_7x10.size);

}
 800459a:	3770      	adds	r7, #112	; 0x70
 800459c:	46bd      	mov	sp, r7
 800459e:	bdb0      	pop	{r4, r5, r7, pc}
 80045a0:	080153b4 	.word	0x080153b4
 80045a4:	08015388 	.word	0x08015388
 80045a8:	240003a8 	.word	0x240003a8
 80045ac:	080153dc 	.word	0x080153dc
 80045b0:	24000004 	.word	0x24000004
 80045b4:	080153f8 	.word	0x080153f8
 80045b8:	2400003c 	.word	0x2400003c

080045bc <setup>:


void setup(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0

	read_parameters();
 80045c2:	f7ff ff59 	bl	8004478 <_Z15read_parametersv>
  nh.initNode();
 80045c6:	481d      	ldr	r0, [pc, #116]	; (800463c <setup+0x80>)
 80045c8:	f000 fb88 	bl	8004cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  uart_setup();
 80045cc:	f7ff fdcc 	bl	8004168 <_Z10uart_setupv>
  timer_setup();
 80045d0:	f7ff fe6e 	bl	80042b0 <_Z11timer_setupv>
  ros_setup();
 80045d4:	f7ff ff20 	bl	8004418 <_Z9ros_setupv>





  uint16_t inc = TIM4->ARR/38;
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <setup+0x84>)
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <setup+0x88>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	80fb      	strh	r3, [r7, #6]
//  }
//  for(int i=16;i<32;++i){
//    triangle2[i] = (33-(i+1))*inc;
//  }

  pwm_generator_indicator = 0;
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <setup+0x8c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
  is_frequency_set = 0;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <setup+0x90>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
  uint32_t clock = HAL_RCC_GetPCLK1Freq();
 80045f4:	f008 ff4e 	bl	800d494 <HAL_RCC_GetPCLK1Freq>
 80045f8:	6038      	str	r0, [r7, #0]
  TIMER_CLOCK_FREQ = clock/(TIM5->PSC+1);
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <setup+0x94>)
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	3301      	adds	r3, #1
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <setup+0x98>)
 8004608:	6013      	str	r3, [r2, #0]
//  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1 );
//  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2 );

//  HAL_TIM_PWM_

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800460a:	2100      	movs	r1, #0
 800460c:	4812      	ldr	r0, [pc, #72]	; (8004658 <setup+0x9c>)
 800460e:	f00c f93b 	bl	8010888 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004612:	2104      	movs	r1, #4
 8004614:	4810      	ldr	r0, [pc, #64]	; (8004658 <setup+0x9c>)
 8004616:	f00c f833 	bl	8010680 <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800461a:	2100      	movs	r1, #0
 800461c:	480f      	ldr	r0, [pc, #60]	; (800465c <setup+0xa0>)
 800461e:	f00c f933 	bl	8010888 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004622:	2104      	movs	r1, #4
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <setup+0xa0>)
 8004626:	f00c f82b 	bl	8010680 <HAL_TIM_IC_Start>



  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 800462a:	2201      	movs	r2, #1
 800462c:	2108      	movs	r1, #8
 800462e:	480c      	ldr	r0, [pc, #48]	; (8004660 <setup+0xa4>)
 8004630:	f007 f844 	bl	800b6bc <HAL_GPIO_WritePin>



}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	24000ed4 	.word	0x24000ed4
 8004640:	40000800 	.word	0x40000800
 8004644:	6bca1af3 	.word	0x6bca1af3
 8004648:	240019a4 	.word	0x240019a4
 800464c:	240019a5 	.word	0x240019a5
 8004650:	40000c00 	.word	0x40000c00
 8004654:	2400199c 	.word	0x2400199c
 8004658:	24000894 	.word	0x24000894
 800465c:	2400092c 	.word	0x2400092c
 8004660:	58021000 	.word	0x58021000
 8004664:	00000000 	.word	0x00000000

08004668 <loop>:



void loop(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
//  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

//  str_msg.data = hello;
//  chatter.publish(&str_msg);

  vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <loop+0xf8>)
 8004670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800467c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8004750 <loop+0xe8>
 8004680:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004684:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <loop+0xfc>)
 800468a:	edc3 7a06 	vstr	s15, [r3, #24]
  vesc_state.voltage_input = esc_sensor.voltage;
 800468e:	4b34      	ldr	r3, [pc, #208]	; (8004760 <loop+0xf8>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a34      	ldr	r2, [pc, #208]	; (8004764 <loop+0xfc>)
 8004694:	6053      	str	r3, [r2, #4]
  vesc_state.current_input = esc_sensor.current;
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <loop+0xf8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4a32      	ldr	r2, [pc, #200]	; (8004764 <loop+0xfc>)
 800469c:	6113      	str	r3, [r2, #16]
  vesc_state.temperature_pcb = esc_sensor.temperature;
 800469e:	4b30      	ldr	r3, [pc, #192]	; (8004760 <loop+0xf8>)
 80046a0:	8a1b      	ldrh	r3, [r3, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <loop+0xfc>)
 80046ac:	edc3 7a02 	vstr	s15, [r3, #8]
  vesc_state.speed = esc_sensor.rpm;
 80046b0:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <loop+0xf8>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <loop+0xfc>)
 80046be:	edc3 7a05 	vstr	s15, [r3, #20]


	_index=(_index+1)%32;
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <loop+0x100>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <loop+0x100>)
 80046ce:	6013      	str	r3, [r2, #0]
//	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1,triangle1[_index]);
//	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2,triangle2[_index]);


  for(int i=2;i<8;++i){
 80046d0:	2302      	movs	r3, #2
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e014      	b.n	8004700 <loop+0x98>
	  forces.data[i] = 0.1*i;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80046e0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004758 <loop+0xf0>
 80046e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <loop+0x104>)
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046f6:	edc3 7a00 	vstr	s15, [r3]
  for(int i=2;i<8;++i){
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3301      	adds	r3, #1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b07      	cmp	r3, #7
 8004704:	dde7      	ble.n	80046d6 <loop+0x6e>
  }
  for(int i=0;i<16;++i){
 8004706:	2300      	movs	r3, #0
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	e012      	b.n	8004732 <loop+0xca>
  	  wheel_speed.data[i] = 10*i;
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <loop+0x108>)
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004728:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<16;++i){
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	dde9      	ble.n	800470c <loop+0xa4>

//  freq1=0;
//  duty1=0;
//  freq2=1;
//  duty2=1;
  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 8004738:	2108      	movs	r1, #8
 800473a:	480e      	ldr	r0, [pc, #56]	; (8004774 <loop+0x10c>)
 800473c:	f006 ffd7 	bl	800b6ee <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8004740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004744:	f002 fb34 	bl	8006db0 <HAL_Delay>
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	00000000 	.word	0x00000000
 8004754:	40590000 	.word	0x40590000
 8004758:	9999999a 	.word	0x9999999a
 800475c:	3fb99999 	.word	0x3fb99999
 8004760:	240018e4 	.word	0x240018e4
 8004764:	24001810 	.word	0x24001810
 8004768:	240019a0 	.word	0x240019a0
 800476c:	24001848 	.word	0x24001848
 8004770:	24001878 	.word	0x24001878
 8004774:	58021000 	.word	0x58021000

08004778 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e00c      	b.n	80047a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	fa22 f103 	lsr.w	r1, r2, r3
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	b2ca      	uxtb	r2, r1
 800479a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d9ef      	bls.n	8004788 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e010      	b.n	80047ee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	440a      	add	r2, r1
 80047d6:	7812      	ldrb	r2, [r2, #0]
 80047d8:	4611      	mov	r1, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	00d2      	lsls	r2, r2, #3
 80047de:	fa01 f202 	lsl.w	r2, r1, r2
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d9eb      	bls.n	80047cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
  }
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe f86c 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 800482c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800483c:	4293      	cmp	r3, r2
 800483e:	d903      	bls.n	8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800486c:	2b00      	cmp	r3, #0
 800486e:	d014      	beq.n	800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe f845 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 800487a:	4602      	mov	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004886:	429a      	cmp	r2, r3
 8004888:	bf8c      	ite	hi
 800488a:	2301      	movhi	r3, #1
 800488c:	2300      	movls	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8004894:	f06f 0301 	mvn.w	r3, #1
 8004898:	e194      	b.n	8004bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd ff60 	bl	8002764 <_ZN13STM32Hardware4readEv>
 80048a4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f2c0 8174 	blt.w	8004b96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	441a      	add	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	d11e      	bne.n	8004906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	b2d1      	uxtb	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	460a      	mov	r2, r1
 80048e0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80048ea:	1e5a      	subs	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1b4      	bne.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2208      	movs	r2, #8
 8004900:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004904:	e7af      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800490c:	2b00      	cmp	r3, #0
 800490e:	d128      	bne.n	8004962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2bff      	cmp	r3, #255	; 0xff
 8004914:	d10d      	bne.n	8004932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f103 0214 	add.w	r2, r3, #20
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004930:	e799      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd ffe4 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	bf8c      	ite	hi
 800494a:	2301      	movhi	r3, #1
 800494c:	2300      	movls	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d088      	beq.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800495c:	f06f 0301 	mvn.w	r3, #1
 8004960:	e130      	b.n	8004bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004968:	2b01      	cmp	r3, #1
 800496a:	d118      	bne.n	800499e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2bfe      	cmp	r3, #254	; 0xfe
 8004970:	d107      	bne.n	8004982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004980:	e771      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004990:	2b00      	cmp	r3, #0
 8004992:	f47f af68 	bne.w	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9bd 	bl	8004d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800499c:	e763      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d113      	bne.n	80049d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80049ce:	e74a      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d110      	bne.n	80049fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80049fa:	e734      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d116      	bne.n	8004a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004a0c:	425a      	negs	r2, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	bf58      	it	pl
 8004a14:	4253      	negpl	r3, r2
 8004a16:	2bff      	cmp	r3, #255	; 0xff
 8004a18:	d107      	bne.n	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a28:	e71d      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a32:	e718      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d10f      	bne.n	8004a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004a5c:	e703      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d117      	bne.n	8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	441a      	add	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2207      	movs	r2, #7
 8004a7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f aeec 	bne.w	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2208      	movs	r2, #8
 8004a92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004a96:	e6e6      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	f47f aee1 	bne.w	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004ab2:	425a      	negs	r2, r3
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	bf58      	it	pl
 8004aba:	4253      	negpl	r3, r2
 8004abc:	2bff      	cmp	r3, #255	; 0xff
 8004abe:	f47f aed2 	bne.w	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f922 	bl	8004d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f93d 	bl	8004d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aec:	e06a      	b.n	8004bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004af4:	2b0a      	cmp	r3, #10
 8004af6:	d107      	bne.n	8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa05 	bl	8004f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004b06:	e6ae      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d10e      	bne.n	8004b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fd fb62 	bl	80021ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004b2e:	e69a      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b36:	2b0b      	cmp	r3, #11
 8004b38:	d104      	bne.n	8004b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004b42:	e690      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b4a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f43f ae84 	beq.w	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b64:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004b78:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004b90:	4611      	mov	r1, r2
 8004b92:	4798      	blx	r3
    while (true)
 8004b94:	e667      	b.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004b96:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00f      	beq.n	8004bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d906      	bls.n	8004bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8ae 	bl	8004d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8004bc2:	2300      	movs	r3, #0
  }
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	080155c0 	.word	0x080155c0

08004bec <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ffe5 	bl	8004bcc <_ZN3ros11Subscriber_C1Ev>
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fa43 	bl	8003098 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  };
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	0801551c 	.word	0x0801551c

08004c34 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ffc1 	bl	8004bcc <_ZN3ros11Subscriber_C1Ev>
 8004c4a:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	330c      	adds	r3, #12
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe f8e5 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
  };
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08015504 	.word	0x08015504

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e01d      	b.n	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
        return true;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e006      	b.n	8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b18      	cmp	r3, #24
 8004ccc:	ddde      	ble.n	8004c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004cce:	2300      	movs	r3, #0
  }
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fd1f 	bl	800272c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004d1e:	f107 030c 	add.w	r3, r7, #12
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fc fdbe 	bl	80018a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f107 020c 	add.w	r2, r7, #12
 8004d32:	210a      	movs	r1, #10
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
    rt_time = hardware_.time();
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fd fde1 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004d52:	b590      	push	{r4, r7, lr}
 8004d54:	b08b      	sub	sp, #44	; 0x2c
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fc fe90 	bl	8001a84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	e062      	b.n	8004e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d056      	beq.n	8004e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4798      	blx	r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4608      	mov	r0, r1
 8004df8:	4798      	blx	r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e02:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681c      	ldr	r4, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fd fb9e 	bl	800255a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004e1e:	4601      	mov	r1, r0
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	461a      	mov	r2, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	2b18      	cmp	r3, #24
 8004e34:	dd99      	ble.n	8004d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e05e      	b.n	8004efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d053      	beq.n	8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	4798      	blx	r3
 8004e90:	4603      	mov	r3, r0
 8004e92:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4608      	mov	r0, r1
 8004eb4:	4798      	blx	r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ebe:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681c      	ldr	r4, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004ece:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4798      	blx	r3
 8004ee8:	4601      	mov	r1, r0
 8004eea:	f107 030c 	add.w	r3, r7, #12
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2b18      	cmp	r3, #24
 8004efe:	dd9d      	ble.n	8004e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004f08:	bf00      	nop
 8004f0a:	372c      	adds	r7, #44	; 0x2c
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}

08004f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc fcc0 	bl	80018a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fd fceb 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fc fd1f 	bl	8001984 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4915      	ldr	r1, [pc, #84]	; (8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004f4c:	fba1 1303 	umull	r1, r3, r1, r3
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	4413      	add	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004f5c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f66:	fb00 f303 	mul.w	r3, r0, r3
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	440b      	add	r3, r1
 8004f74:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004f76:	f107 0308 	add.w	r3, r7, #8
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8a6 	bl	80050d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fd fcbb 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	10624dd3 	.word	0x10624dd3
 8004fa4:	000f4240 	.word	0x000f4240

08004fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b63      	cmp	r3, #99	; 0x63
 8004fb8:	dd09      	ble.n	8004fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004fc0:	f083 0301 	eor.w	r3, r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e079      	b.n	80050c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004fda:	3207      	adds	r2, #7
 8004fdc:	4611      	mov	r1, r2
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	22ff      	movs	r2, #255	; 0xff
 8004fe8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	22fe      	movs	r2, #254	; 0xfe
 8004ff0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	b29b      	uxth	r3, r3
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b29b      	uxth	r3, r3
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800501a:	4413      	add	r3, r2
 800501c:	b2db      	uxtb	r3, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	b21b      	sxth	r3, r3
 8005036:	121b      	asrs	r3, r3, #8
 8005038:	b21b      	sxth	r3, r3
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005046:	2305      	movs	r3, #5
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e00c      	b.n	8005066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4413      	add	r3, r2
 8005052:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	3301      	adds	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	3306      	adds	r3, #6
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	dded      	ble.n	800504c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3307      	adds	r3, #7
 8005074:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	425a      	negs	r2, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	bf58      	it	pl
 8005080:	4253      	negpl	r3, r2
 8005082:	b2da      	uxtb	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6179      	str	r1, [r7, #20]
 800508a:	43d2      	mvns	r2, r2
 800508c:	b2d1      	uxtb	r1, r2
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	460a      	mov	r2, r1
 8005094:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	dc0a      	bgt.n	80050b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1d18      	adds	r0, r3, #4
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fd fbe3 	bl	8002878 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	e005      	b.n	80050c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80050b6:	4905      	ldr	r1, [pc, #20]	; (80050cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f849 	bl	8005150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	08015418 	.word	0x08015418

080050d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd fc10 	bl	8002904 <_ZN13STM32Hardware4timeEv>
 80050e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4915      	ldr	r1, [pc, #84]	; (8005144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80050ee:	fba1 1303 	umull	r1, r3, r1, r3
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	1e5a      	subs	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8005106:	fba3 0302 	umull	r0, r3, r3, r2
 800510a:	099b      	lsrs	r3, r3, #6
 800510c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005110:	fb00 f303 	mul.w	r3, r0, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	1aca      	subs	r2, r1, r3
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8005120:	4413      	add	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f001 fa94 	bl	8006664 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	10624dd3 	.word	0x10624dd3
 8005148:	000f4240 	.word	0x000f4240
 800514c:	3b9aca00 	.word	0x3b9aca00

08005150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	2103      	movs	r1, #3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f804 	bl	800516c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	460b      	mov	r3, r1
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	4618      	mov	r0, r3
 8005180:	f7fc fe44 	bl	8001e0c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005184:	7afb      	ldrb	r3, [r7, #11]
 8005186:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f107 0214 	add.w	r2, r7, #20
 8005196:	2107      	movs	r1, #7
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	4798      	blx	r3
  }
 800519c:	bf00      	nop
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_Z41__static_initialization_and_destruction_0ii>:
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d13a      	bne.n	800522a <_Z41__static_initialization_and_destruction_0ii+0x86>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d135      	bne.n	800522a <_Z41__static_initialization_and_destruction_0ii+0x86>
ros::NodeHandle nh;
 80051be:	481d      	ldr	r0, [pc, #116]	; (8005234 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80051c0:	f7fe fa2e 	bl	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
vesc_msgs::VescState vesc_state;
 80051c4:	481c      	ldr	r0, [pc, #112]	; (8005238 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80051c6:	f7fe f803 	bl	80031d0 <_ZN9vesc_msgs9VescStateC1Ev>
std_msgs::Float32MultiArray forces;
 80051ca:	481c      	ldr	r0, [pc, #112]	; (800523c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80051cc:	f7fd fe2a 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wheel_speed;
 80051d0:	481b      	ldr	r0, [pc, #108]	; (8005240 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80051d2:	f7fd fe27 	bl	8002e24 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher vesc_pub("vesc_sensor", &vesc_state);
 80051d6:	2300      	movs	r3, #0
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80051da:	491a      	ldr	r1, [pc, #104]	; (8005244 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80051dc:	481a      	ldr	r0, [pc, #104]	; (8005248 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80051de:	f7fd f991 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher force_pub("forces", &forces);
 80051e2:	2300      	movs	r3, #0
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80051e6:	4919      	ldr	r1, [pc, #100]	; (800524c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80051e8:	4819      	ldr	r0, [pc, #100]	; (8005250 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80051ea:	f7fd f98b 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wheel_speed_pub("forces", &wheel_speed);
 80051ee:	2300      	movs	r3, #0
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80051f2:	4916      	ldr	r1, [pc, #88]	; (800524c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80051f4:	4817      	ldr	r0, [pc, #92]	; (8005254 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80051f6:	f7fd f985 	bl	8002504 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 80051fa:	2301      	movs	r3, #1
 80051fc:	4a16      	ldr	r2, [pc, #88]	; (8005258 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80051fe:	4917      	ldr	r1, [pc, #92]	; (800525c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005200:	4817      	ldr	r0, [pc, #92]	; (8005260 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005202:	f7ff fcf3 	bl	8004bec <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005206:	2301      	movs	r3, #1
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800520a:	4917      	ldr	r1, [pc, #92]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800520c:	4817      	ldr	r0, [pc, #92]	; (800526c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800520e:	f7ff fced 	bl	8004bec <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8005212:	2301      	movs	r3, #1
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005216:	4917      	ldr	r1, [pc, #92]	; (8005274 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005218:	4817      	ldr	r0, [pc, #92]	; (8005278 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800521a:	f7ff fce7 	bl	8004bec <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 800521e:	2301      	movs	r3, #1
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005222:	4917      	ldr	r1, [pc, #92]	; (8005280 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8005224:	4817      	ldr	r0, [pc, #92]	; (8005284 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005226:	f7ff fd05 	bl	8004c34 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	24000ed4 	.word	0x24000ed4
 8005238:	24001810 	.word	0x24001810
 800523c:	24001848 	.word	0x24001848
 8005240:	24001878 	.word	0x24001878
 8005244:	08015454 	.word	0x08015454
 8005248:	240018a8 	.word	0x240018a8
 800524c:	08015460 	.word	0x08015460
 8005250:	240018bc 	.word	0x240018bc
 8005254:	240018d0 	.word	0x240018d0
 8005258:	08003f8d 	.word	0x08003f8d
 800525c:	08015468 	.word	0x08015468
 8005260:	24001a48 	.word	0x24001a48
 8005264:	08003fc1 	.word	0x08003fc1
 8005268:	08015478 	.word	0x08015478
 800526c:	24001a64 	.word	0x24001a64
 8005270:	08003ff5 	.word	0x08003ff5
 8005274:	0801548c 	.word	0x0801548c
 8005278:	24001a80 	.word	0x24001a80
 800527c:	08004059 	.word	0x08004059
 8005280:	080154a0 	.word	0x080154a0
 8005284:	24001a9c 	.word	0x24001a9c

08005288 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	330c      	adds	r3, #12
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd fe55 	bl	8002f48 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	320c      	adds	r2, #12
 80052a6:	4610      	mov	r0, r2
 80052a8:	4798      	blx	r3
  }
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	330c      	adds	r3, #12
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd fec2 	bl	8003060 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 80052dc:	4603      	mov	r3, r0
  }
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	330c      	adds	r3, #12
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fec2 	bl	800307c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 80052f8:	4603      	mov	r3, r0
  }
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	330c      	adds	r3, #12
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd ff08 	bl	8003128 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	320c      	adds	r2, #12
 8005320:	4610      	mov	r0, r2
 8005322:	4798      	blx	r3
  }
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
  }
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	330c      	adds	r3, #12
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd ff21 	bl	8003198 <_ZN8std_msgs7Float327getTypeEv>
 8005356:	4603      	mov	r3, r0
  }
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	330c      	adds	r3, #12
 800536c:	4618      	mov	r0, r3
 800536e:	f7fd ff21 	bl	80031b4 <_ZN8std_msgs7Float326getMD5Ev>
 8005372:	4603      	mov	r3, r0
  }
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
    return configured_;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <_GLOBAL__sub_I_nh>:
 8005396:	b580      	push	{r7, lr}
 8005398:	af00      	add	r7, sp, #0
 800539a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800539e:	2001      	movs	r0, #1
 80053a0:	f7ff ff00 	bl	80051a4 <_Z41__static_initialization_and_destruction_0ii>
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_MspInit+0x30>)
 80053b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053b4:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <HAL_MspInit+0x30>)
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_MspInit+0x30>)
 80053c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	58024400 	.word	0x58024400

080053dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b0bc      	sub	sp, #240	; 0xf0
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053f4:	f107 0318 	add.w	r3, r7, #24
 80053f8:	22c0      	movs	r2, #192	; 0xc0
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00f faab 	bl	8014958 <memset>
  if(hadc->Instance==ADC1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <HAL_ADC_MspInit+0x1a4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	f040 80b5 	bne.w	8005578 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800540e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800541a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800541e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005422:	f107 0318 	add.w	r3, r7, #24
 8005426:	4618      	mov	r0, r3
 8005428:	f008 f860 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8005432:	f7fc f8d9 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005436:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800543c:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 800543e:	f043 0320 	orr.w	r3, r3, #32
 8005442:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005446:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005454:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800545a:	4a4a      	ldr	r2, [pc, #296]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005464:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005478:	4a42      	ldr	r2, [pc, #264]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005482:	4b40      	ldr	r3, [pc, #256]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005490:	4b3c      	ldr	r3, [pc, #240]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005496:	4a3b      	ldr	r2, [pc, #236]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054a0:	4b38      	ldr	r3, [pc, #224]	; (8005584 <HAL_ADC_MspInit+0x1a8>)
 80054a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 80054ae:	2333      	movs	r3, #51	; 0x33
 80054b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054b4:	2303      	movs	r3, #3
 80054b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80054c4:	4619      	mov	r1, r3
 80054c6:	4830      	ldr	r0, [pc, #192]	; (8005588 <HAL_ADC_MspInit+0x1ac>)
 80054c8:	f005 ff48 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 80054cc:	2350      	movs	r3, #80	; 0x50
 80054ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d2:	2303      	movs	r3, #3
 80054d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80054e2:	4619      	mov	r1, r3
 80054e4:	4829      	ldr	r0, [pc, #164]	; (800558c <HAL_ADC_MspInit+0x1b0>)
 80054e6:	f005 ff39 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 80054ea:	2303      	movs	r3, #3
 80054ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054f0:	2303      	movs	r3, #3
 80054f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005500:	4619      	mov	r1, r3
 8005502:	4823      	ldr	r0, [pc, #140]	; (8005590 <HAL_ADC_MspInit+0x1b4>)
 8005504:	f005 ff2a 	bl	800b35c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8005508:	4b22      	ldr	r3, [pc, #136]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 800550a:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_ADC_MspInit+0x1bc>)
 800550c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005510:	2209      	movs	r2, #9
 8005512:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800551a:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 800551c:	2200      	movs	r2, #0
 800551e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005526:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 800552a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800552e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005536:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005538:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 800553a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005540:	4b14      	ldr	r3, [pc, #80]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005542:	2200      	movs	r2, #0
 8005544:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005548:	2200      	movs	r2, #0
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800554c:	4811      	ldr	r0, [pc, #68]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 800554e:	f003 f8c9 	bl	80086e4 <HAL_DMA_Init>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 8005558:	f7fc f846 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005560:	64da      	str	r2, [r3, #76]	; 0x4c
 8005562:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <HAL_ADC_MspInit+0x1b8>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005568:	2200      	movs	r2, #0
 800556a:	2100      	movs	r1, #0
 800556c:	2012      	movs	r0, #18
 800556e:	f003 f884 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005572:	2012      	movs	r0, #18
 8005574:	f003 f89b 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005578:	bf00      	nop
 800557a:	37f0      	adds	r7, #240	; 0xf0
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40022000 	.word	0x40022000
 8005584:	58024400 	.word	0x58024400
 8005588:	58020800 	.word	0x58020800
 800558c:	58020000 	.word	0x58020000
 8005590:	58020400 	.word	0x58020400
 8005594:	24000120 	.word	0x24000120
 8005598:	40020070 	.word	0x40020070

0800559c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b0ba      	sub	sp, #232	; 0xe8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	22c0      	movs	r2, #192	; 0xc0
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f00f f9cb 	bl	8014958 <memset>
  if(hi2c->Instance==I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a27      	ldr	r2, [pc, #156]	; (8005664 <HAL_I2C_MspInit+0xc8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d146      	bne.n	800565a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80055cc:	f04f 0208 	mov.w	r2, #8
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055de:	f107 0310 	add.w	r3, r7, #16
 80055e2:	4618      	mov	r0, r3
 80055e4:	f007 ff82 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80055ee:	f7fb fffb 	bl	80015e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 80055f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 8005604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005618:	2312      	movs	r3, #18
 800561a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800562a:	2304      	movs	r3, #4
 800562c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005630:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005634:	4619      	mov	r1, r3
 8005636:	480d      	ldr	r0, [pc, #52]	; (800566c <HAL_I2C_MspInit+0xd0>)
 8005638:	f005 fe90 	bl	800b35c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 800563e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005642:	4a09      	ldr	r2, [pc, #36]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 8005644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005648:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_I2C_MspInit+0xcc>)
 800564e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800565a:	bf00      	nop
 800565c:	37e8      	adds	r7, #232	; 0xe8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40005400 	.word	0x40005400
 8005668:	58024400 	.word	0x58024400
 800566c:	58020400 	.word	0x58020400

08005670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0c4      	sub	sp, #272	; 0x110
 8005674:	af00      	add	r7, sp, #0
 8005676:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800567a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800567e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005680:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005694:	22c0      	movs	r2, #192	; 0xc0
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f00f f95d 	bl	8014958 <memset>
  if(huart->Instance==LPUART1)
 800569e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4aa6      	ldr	r2, [pc, #664]	; (8005944 <HAL_UART_MspInit+0x2d4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f040 8084 	bne.w	80057ba <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80056b2:	f04f 0204 	mov.w	r2, #4
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056c8:	4618      	mov	r0, r3
 80056ca:	f007 ff0f 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 80056d4:	f7fb ff88 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80056d8:	4b9b      	ldr	r3, [pc, #620]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80056da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056de:	4a9a      	ldr	r2, [pc, #616]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056e8:	4b97      	ldr	r3, [pc, #604]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80056ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f6:	4b94      	ldr	r3, [pc, #592]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80056f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056fc:	4a92      	ldr	r2, [pc, #584]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005706:	4b90      	ldr	r3, [pc, #576]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 8005708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005714:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005718:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800572e:	2303      	movs	r3, #3
 8005730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005734:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005738:	4619      	mov	r1, r3
 800573a:	4884      	ldr	r0, [pc, #528]	; (800594c <HAL_UART_MspInit+0x2dc>)
 800573c:	f005 fe0e 	bl	800b35c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8005740:	4b83      	ldr	r3, [pc, #524]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005742:	4a84      	ldr	r2, [pc, #528]	; (8005954 <HAL_UART_MspInit+0x2e4>)
 8005744:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8005746:	4b82      	ldr	r3, [pc, #520]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005748:	2209      	movs	r2, #9
 800574a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800574c:	4b80      	ldr	r3, [pc, #512]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005752:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005754:	2200      	movs	r2, #0
 8005756:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005758:	4b7d      	ldr	r3, [pc, #500]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 800575a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005760:	4b7b      	ldr	r3, [pc, #492]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005766:	4b7a      	ldr	r3, [pc, #488]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800576c:	4b78      	ldr	r3, [pc, #480]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 800576e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005772:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005774:	4b76      	ldr	r3, [pc, #472]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005776:	2200      	movs	r2, #0
 8005778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800577a:	4875      	ldr	r0, [pc, #468]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 800577c:	f002 ffb2 	bl	80086e4 <HAL_DMA_Init>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8005786:	f7fb ff2f 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800578a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800578e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6e      	ldr	r2, [pc, #440]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800579a:	4a6d      	ldr	r2, [pc, #436]	; (8005950 <HAL_UART_MspInit+0x2e0>)
 800579c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	208e      	movs	r0, #142	; 0x8e
 80057ae:	f002 ff64 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80057b2:	208e      	movs	r0, #142	; 0x8e
 80057b4:	f002 ff7b 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80057b8:	e294      	b.n	8005ce4 <HAL_UART_MspInit+0x674>
  else if(huart->Instance==UART4)
 80057ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a64      	ldr	r2, [pc, #400]	; (8005958 <HAL_UART_MspInit+0x2e8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	f040 80d1 	bne.w	8005970 <HAL_UART_MspInit+0x300>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80057ce:	f04f 0202 	mov.w	r2, #2
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057e4:	4618      	mov	r0, r3
 80057e6:	f007 fe81 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_MspInit+0x184>
      Error_Handler();
 80057f0:	f7fb fefa 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80057f4:	4b54      	ldr	r3, [pc, #336]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80057f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057fa:	4a53      	ldr	r2, [pc, #332]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 80057fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005800:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005804:	4b50      	ldr	r3, [pc, #320]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 8005806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800580a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005812:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 8005814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005818:	4a4b      	ldr	r2, [pc, #300]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 800581a:	f043 0308 	orr.w	r3, r3, #8
 800581e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005822:	4b49      	ldr	r3, [pc, #292]	; (8005948 <HAL_UART_MspInit+0x2d8>)
 8005824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005830:	2303      	movs	r3, #3
 8005832:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005836:	2302      	movs	r3, #2
 8005838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005848:	2308      	movs	r3, #8
 800584a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800584e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005852:	4619      	mov	r1, r3
 8005854:	4841      	ldr	r0, [pc, #260]	; (800595c <HAL_UART_MspInit+0x2ec>)
 8005856:	f005 fd81 	bl	800b35c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800585a:	4b41      	ldr	r3, [pc, #260]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 800585c:	4a41      	ldr	r2, [pc, #260]	; (8005964 <HAL_UART_MspInit+0x2f4>)
 800585e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005860:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005862:	223f      	movs	r2, #63	; 0x3f
 8005864:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800586c:	4b3c      	ldr	r3, [pc, #240]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005872:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005878:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005880:	4b37      	ldr	r3, [pc, #220]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005882:	2200      	movs	r2, #0
 8005884:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005886:	4b36      	ldr	r3, [pc, #216]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005888:	2200      	movs	r2, #0
 800588a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 800588e:	2200      	movs	r2, #0
 8005890:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 8005894:	2200      	movs	r2, #0
 8005896:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005898:	4831      	ldr	r0, [pc, #196]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 800589a:	f002 ff23 	bl	80086e4 <HAL_DMA_Init>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80058a4:	f7fb fea0 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80058a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2b      	ldr	r2, [pc, #172]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 80058b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80058b8:	4a29      	ldr	r2, [pc, #164]	; (8005960 <HAL_UART_MspInit+0x2f0>)
 80058ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 80058c6:	4b28      	ldr	r3, [pc, #160]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <HAL_UART_MspInit+0x2fc>)
 80058ca:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058ce:	2240      	movs	r2, #64	; 0x40
 80058d0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058d2:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058d4:	2240      	movs	r2, #64	; 0x40
 80058d6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058d8:	4b23      	ldr	r3, [pc, #140]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058da:	2200      	movs	r2, #0
 80058dc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058e4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ec:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 8005900:	2200      	movs	r2, #0
 8005902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005904:	4818      	ldr	r0, [pc, #96]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 8005906:	f002 feed 	bl	80086e4 <HAL_DMA_Init>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8005910:	f7fb fe6a 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 8005920:	67da      	str	r2, [r3, #124]	; 0x7c
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <HAL_UART_MspInit+0x2f8>)
 8005924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005928:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005930:	2200      	movs	r2, #0
 8005932:	2100      	movs	r1, #0
 8005934:	2034      	movs	r0, #52	; 0x34
 8005936:	f002 fea0 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800593a:	2034      	movs	r0, #52	; 0x34
 800593c:	f002 feb7 	bl	80086ae <HAL_NVIC_EnableIRQ>
}
 8005940:	e1d0      	b.n	8005ce4 <HAL_UART_MspInit+0x674>
 8005942:	bf00      	nop
 8005944:	58000c00 	.word	0x58000c00
 8005948:	58024400 	.word	0x58024400
 800594c:	58020000 	.word	0x58020000
 8005950:	240004d0 	.word	0x240004d0
 8005954:	58025408 	.word	0x58025408
 8005958:	40004c00 	.word	0x40004c00
 800595c:	58020c00 	.word	0x58020c00
 8005960:	24000548 	.word	0x24000548
 8005964:	40020010 	.word	0x40020010
 8005968:	240005c0 	.word	0x240005c0
 800596c:	40020028 	.word	0x40020028
  else if(huart->Instance==UART5)
 8005970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a9f      	ldr	r2, [pc, #636]	; (8005bfc <HAL_UART_MspInit+0x58c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	f040 8087 	bne.w	8005a92 <HAL_UART_MspInit+0x422>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005984:	f04f 0202 	mov.w	r2, #2
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800599a:	4618      	mov	r0, r3
 800599c:	f007 fda6 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80059a6:	f7fb fe1f 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80059aa:	4b95      	ldr	r3, [pc, #596]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059b0:	4a93      	ldr	r2, [pc, #588]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059ba:	4b91      	ldr	r3, [pc, #580]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c8:	4b8d      	ldr	r3, [pc, #564]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ce:	4a8c      	ldr	r2, [pc, #560]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059d8:	4b89      	ldr	r3, [pc, #548]	; (8005c00 <HAL_UART_MspInit+0x590>)
 80059da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80059e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80059ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2302      	movs	r3, #2
 80059f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8005a00:	230e      	movs	r3, #14
 8005a02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	487d      	ldr	r0, [pc, #500]	; (8005c04 <HAL_UART_MspInit+0x594>)
 8005a0e:	f005 fca5 	bl	800b35c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8005a12:	4b7d      	ldr	r3, [pc, #500]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a14:	4a7d      	ldr	r2, [pc, #500]	; (8005c0c <HAL_UART_MspInit+0x59c>)
 8005a16:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005a18:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a1a:	2241      	movs	r2, #65	; 0x41
 8005a1c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a1e:	4b7a      	ldr	r3, [pc, #488]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a24:	4b78      	ldr	r3, [pc, #480]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a2a:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a30:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a32:	4b75      	ldr	r3, [pc, #468]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a38:	4b73      	ldr	r3, [pc, #460]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a44:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a4c:	4b6e      	ldr	r3, [pc, #440]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005a52:	486d      	ldr	r0, [pc, #436]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a54:	f002 fe46 	bl	80086e4 <HAL_DMA_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8005a5e:	f7fb fdc3 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a66      	ldr	r2, [pc, #408]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a72:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_UART_MspInit+0x598>)
 8005a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005a80:	2200      	movs	r2, #0
 8005a82:	2100      	movs	r1, #0
 8005a84:	2035      	movs	r0, #53	; 0x35
 8005a86:	f002 fdf8 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005a8a:	2035      	movs	r0, #53	; 0x35
 8005a8c:	f002 fe0f 	bl	80086ae <HAL_NVIC_EnableIRQ>
}
 8005a90:	e128      	b.n	8005ce4 <HAL_UART_MspInit+0x674>
  else if(huart->Instance==UART7)
 8005a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_UART_MspInit+0x5a0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f040 80bf 	bne.w	8005c24 <HAL_UART_MspInit+0x5b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005aa6:	f04f 0202 	mov.w	r2, #2
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005abc:	4618      	mov	r0, r3
 8005abe:	f007 fd15 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_MspInit+0x45c>
      Error_Handler();
 8005ac8:	f7fb fd8e 	bl	80015e8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005acc:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ad2:	4a4b      	ldr	r2, [pc, #300]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005adc:	4b48      	ldr	r3, [pc, #288]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005af0:	4a43      	ldr	r2, [pc, #268]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005af2:	f043 0310 	orr.w	r3, r3, #16
 8005af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b08:	4b3d      	ldr	r3, [pc, #244]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0e:	4a3c      	ldr	r2, [pc, #240]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b18:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_UART_MspInit+0x590>)
 8005b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8005b40:	2307      	movs	r3, #7
 8005b42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4831      	ldr	r0, [pc, #196]	; (8005c14 <HAL_UART_MspInit+0x5a4>)
 8005b4e:	f005 fc05 	bl	800b35c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8005b6c:	230b      	movs	r3, #11
 8005b6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b76:	4619      	mov	r1, r3
 8005b78:	4827      	ldr	r0, [pc, #156]	; (8005c18 <HAL_UART_MspInit+0x5a8>)
 8005b7a:	f005 fbef 	bl	800b35c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8005b7e:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <HAL_UART_MspInit+0x5b0>)
 8005b82:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005b86:	224f      	movs	r2, #79	; 0x4f
 8005b88:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b90:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b9c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8005bbc:	4817      	ldr	r0, [pc, #92]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bbe:	f002 fd91 	bl	80086e4 <HAL_DMA_Init>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_UART_MspInit+0x55c>
      Error_Handler();
 8005bc8:	f7fb fd0e 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8005bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a11      	ldr	r2, [pc, #68]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005bdc:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <HAL_UART_MspInit+0x5ac>)
 8005bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005be2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8005bea:	2200      	movs	r2, #0
 8005bec:	2100      	movs	r1, #0
 8005bee:	2052      	movs	r0, #82	; 0x52
 8005bf0:	f002 fd43 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005bf4:	2052      	movs	r0, #82	; 0x52
 8005bf6:	f002 fd5a 	bl	80086ae <HAL_NVIC_EnableIRQ>
}
 8005bfa:	e073      	b.n	8005ce4 <HAL_UART_MspInit+0x674>
 8005bfc:	40005000 	.word	0x40005000
 8005c00:	58024400 	.word	0x58024400
 8005c04:	58020400 	.word	0x58020400
 8005c08:	24000638 	.word	0x24000638
 8005c0c:	40020040 	.word	0x40020040
 8005c10:	40007800 	.word	0x40007800
 8005c14:	58021000 	.word	0x58021000
 8005c18:	58020000 	.word	0x58020000
 8005c1c:	240006b0 	.word	0x240006b0
 8005c20:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8005c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <HAL_UART_MspInit+0x680>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d156      	bne.n	8005ce4 <HAL_UART_MspInit+0x674>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005c36:	f04f 0202 	mov.w	r2, #2
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f007 fc4d 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_UART_MspInit+0x5ec>
      Error_Handler();
 8005c58:	f7fb fcc6 	bl	80015e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c6c:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c72:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8005c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c88:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c9a:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <HAL_UART_MspInit+0x684>)
 8005c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca0:	f003 0202 	and.w	r2, r3, #2
 8005ca4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005cb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <HAL_UART_MspInit+0x688>)
 8005ce0:	f005 fb3c 	bl	800b35c <HAL_GPIO_Init>
}
 8005ce4:	bf00      	nop
 8005ce6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40004800 	.word	0x40004800
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	58020400 	.word	0x58020400

08005cfc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b0bc      	sub	sp, #240	; 0xf0
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	60da      	str	r2, [r3, #12]
 8005d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d14:	f107 0318 	add.w	r3, r7, #24
 8005d18:	22c0      	movs	r2, #192	; 0xc0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f00e fe1b 	bl	8014958 <memset>
  if(hqspi->Instance==QUADSPI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a55      	ldr	r2, [pc, #340]	; (8005e7c <HAL_QSPI_MspInit+0x180>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	f040 80a3 	bne.w	8005e74 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8005d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d3e:	f107 0318 	add.w	r3, r7, #24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f007 fbd2 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8005d4e:	f7fb fc4b 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005d52:	4b4b      	ldr	r3, [pc, #300]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005d58:	4a49      	ldr	r2, [pc, #292]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d5e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005d62:	4b47      	ldr	r3, [pc, #284]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d70:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d76:	4a42      	ldr	r2, [pc, #264]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d78:	f043 0310 	orr.w	r3, r3, #16
 8005d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d80:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d8e:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d94:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005d96:	f043 0302 	orr.w	r3, r3, #2
 8005d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d9e:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dac:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db2:	4a33      	ldr	r2, [pc, #204]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005db4:	f043 0308 	orr.w	r3, r3, #8
 8005db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <HAL_QSPI_MspInit+0x184>)
 8005dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005dca:	2304      	movs	r3, #4
 8005dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005de2:	2309      	movs	r3, #9
 8005de4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005dec:	4619      	mov	r1, r3
 8005dee:	4825      	ldr	r0, [pc, #148]	; (8005e84 <HAL_QSPI_MspInit+0x188>)
 8005df0:	f005 fab4 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005df4:	2304      	movs	r3, #4
 8005df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005e0c:	2309      	movs	r3, #9
 8005e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e16:	4619      	mov	r1, r3
 8005e18:	481b      	ldr	r0, [pc, #108]	; (8005e88 <HAL_QSPI_MspInit+0x18c>)
 8005e1a:	f005 fa9f 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005e1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e26:	2302      	movs	r3, #2
 8005e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005e38:	2309      	movs	r3, #9
 8005e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e42:	4619      	mov	r1, r3
 8005e44:	4811      	ldr	r0, [pc, #68]	; (8005e8c <HAL_QSPI_MspInit+0x190>)
 8005e46:	f005 fa89 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e4a:	2340      	movs	r3, #64	; 0x40
 8005e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e50:	2302      	movs	r3, #2
 8005e52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005e62:	230a      	movs	r3, #10
 8005e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4806      	ldr	r0, [pc, #24]	; (8005e88 <HAL_QSPI_MspInit+0x18c>)
 8005e70:	f005 fa74 	bl	800b35c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005e74:	bf00      	nop
 8005e76:	37f0      	adds	r7, #240	; 0xf0
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	52005000 	.word	0x52005000
 8005e80:	58024400 	.word	0x58024400
 8005e84:	58021000 	.word	0x58021000
 8005e88:	58020400 	.word	0x58020400
 8005e8c:	58020c00 	.word	0x58020c00

08005e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b0bc      	sub	sp, #240	; 0xf0
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ea8:	f107 0318 	add.w	r3, r7, #24
 8005eac:	22c0      	movs	r2, #192	; 0xc0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00e fd51 	bl	8014958 <memset>
  if(hspi->Instance==SPI1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a38      	ldr	r2, [pc, #224]	; (8005f9c <HAL_SPI_MspInit+0x10c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d168      	bne.n	8005f92 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ed0:	f107 0318 	add.w	r3, r7, #24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f007 fb09 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8005ee0:	f7fb fb82 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eea:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f08:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f0a:	f043 0308 	orr.w	r3, r3, #8
 8005f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f12:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f20:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <HAL_SPI_MspInit+0x110>)
 8005f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f44:	2302      	movs	r3, #2
 8005f46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f56:	2305      	movs	r3, #5
 8005f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f60:	4619      	mov	r1, r3
 8005f62:	4810      	ldr	r0, [pc, #64]	; (8005fa4 <HAL_SPI_MspInit+0x114>)
 8005f64:	f005 f9fa 	bl	800b35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005f68:	2318      	movs	r3, #24
 8005f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f80:	2305      	movs	r3, #5
 8005f82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4806      	ldr	r0, [pc, #24]	; (8005fa8 <HAL_SPI_MspInit+0x118>)
 8005f8e:	f005 f9e5 	bl	800b35c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005f92:	bf00      	nop
 8005f94:	37f0      	adds	r7, #240	; 0xf0
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40013000 	.word	0x40013000
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	58020c00 	.word	0x58020c00
 8005fa8:	58020400 	.word	0x58020400

08005fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d10f      	bne.n	8005fde <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fc4:	4a13      	ldr	r2, [pc, #76]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005fdc:	e013      	b.n	8006006 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0d      	ldr	r2, [pc, #52]	; (8006018 <HAL_TIM_PWM_MspInit+0x6c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10e      	bne.n	8006006 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
 8006018:	40000400 	.word	0x40000400

0800601c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 031c 	add.w	r3, r7, #28
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a34      	ldr	r2, [pc, #208]	; (800610c <HAL_TIM_IC_MspInit+0xf0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d12e      	bne.n	800609c <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800603e:	4b34      	ldr	r3, [pc, #208]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 8006040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006044:	4a32      	ldr	r2, [pc, #200]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 8006046:	f043 0308 	orr.w	r3, r3, #8
 800604a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800604e:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 8006050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 800605e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006062:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800606c:	4b28      	ldr	r3, [pc, #160]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 800606e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006086:	2300      	movs	r3, #0
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800608a:	2302      	movs	r3, #2
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 800608e:	f107 031c 	add.w	r3, r7, #28
 8006092:	4619      	mov	r1, r3
 8006094:	481f      	ldr	r0, [pc, #124]	; (8006114 <HAL_TIM_IC_MspInit+0xf8>)
 8006096:	f005 f961 	bl	800b35c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800609a:	e032      	b.n	8006102 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_TIM_IC_MspInit+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d12d      	bne.n	8006102 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ac:	4a18      	ldr	r2, [pc, #96]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060c4:	4b12      	ldr	r3, [pc, #72]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ca:	4a11      	ldr	r2, [pc, #68]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060cc:	f043 0310 	orr.w	r3, r3, #16
 80060d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <HAL_TIM_IC_MspInit+0xf4>)
 80060d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 80060e2:	2320      	movs	r3, #32
 80060e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e6:	2302      	movs	r3, #2
 80060e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ee:	2300      	movs	r3, #0
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80060f2:	2304      	movs	r3, #4
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 80060f6:	f107 031c 	add.w	r3, r7, #28
 80060fa:	4619      	mov	r1, r3
 80060fc:	4807      	ldr	r0, [pc, #28]	; (800611c <HAL_TIM_IC_MspInit+0x100>)
 80060fe:	f005 f92d 	bl	800b35c <HAL_GPIO_Init>
}
 8006102:	bf00      	nop
 8006104:	3730      	adds	r7, #48	; 0x30
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40000c00 	.word	0x40000c00
 8006110:	58024400 	.word	0x58024400
 8006114:	58020000 	.word	0x58020000
 8006118:	40014000 	.word	0x40014000
 800611c:	58021000 	.word	0x58021000

08006120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <HAL_TIM_Base_MspInit+0x84>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d117      	bne.n	8006162 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 8006134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006138:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 800613a:	f043 0320 	orr.w	r3, r3, #32
 800613e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 8006144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	2037      	movs	r0, #55	; 0x37
 8006156:	f002 fa90 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800615a:	2037      	movs	r0, #55	; 0x37
 800615c:	f002 faa7 	bl	80086ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006160:	e01b      	b.n	800619a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM16)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a11      	ldr	r2, [pc, #68]	; (80061ac <HAL_TIM_Base_MspInit+0x8c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d116      	bne.n	800619a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 800616e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006172:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 8006174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <HAL_TIM_Base_MspInit+0x88>)
 800617e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	2075      	movs	r0, #117	; 0x75
 8006190:	f002 fa73 	bl	800867a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006194:	2075      	movs	r0, #117	; 0x75
 8006196:	f002 fa8a 	bl	80086ae <HAL_NVIC_EnableIRQ>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40001400 	.word	0x40001400
 80061a8:	58024400 	.word	0x58024400
 80061ac:	40014400 	.word	0x40014400

080061b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d120      	bne.n	8006214 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 80061d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 80061e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 80061f0:	f248 030e 	movw	r3, #32782	; 0x800e
 80061f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f6:	2302      	movs	r3, #2
 80061f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061fe:	2300      	movs	r3, #0
 8006200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006202:	2301      	movs	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006206:	f107 0314 	add.w	r3, r7, #20
 800620a:	4619      	mov	r1, r3
 800620c:	4816      	ldr	r0, [pc, #88]	; (8006268 <HAL_TIM_MspPostInit+0xb8>)
 800620e:	f005 f8a5 	bl	800b35c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006212:	e023      	b.n	800625c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <HAL_TIM_MspPostInit+0xbc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d11e      	bne.n	800625c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 8006220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006224:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <HAL_TIM_MspPostInit+0xb4>)
 8006230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 800623c:	23c0      	movs	r3, #192	; 0xc0
 800623e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006240:	2302      	movs	r3, #2
 8006242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006248:	2300      	movs	r3, #0
 800624a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800624c:	2302      	movs	r3, #2
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006250:	f107 0314 	add.w	r3, r7, #20
 8006254:	4619      	mov	r1, r3
 8006256:	4806      	ldr	r0, [pc, #24]	; (8006270 <HAL_TIM_MspPostInit+0xc0>)
 8006258:	f005 f880 	bl	800b35c <HAL_GPIO_Init>
}
 800625c:	bf00      	nop
 800625e:	3728      	adds	r7, #40	; 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58024400 	.word	0x58024400
 8006268:	58020000 	.word	0x58020000
 800626c:	40000400 	.word	0x40000400
 8006270:	58020800 	.word	0x58020800

08006274 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b0ba      	sub	sp, #232	; 0xe8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800627c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800628c:	f107 0310 	add.w	r3, r7, #16
 8006290:	22c0      	movs	r2, #192	; 0xc0
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f00e fb5f 	bl	8014958 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a28      	ldr	r2, [pc, #160]	; (8006340 <HAL_PCD_MspInit+0xcc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d149      	bne.n	8006338 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80062a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80062b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	f007 f915 	bl	800d4ec <HAL_RCCEx_PeriphCLKConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80062c8:	f7fb f98e 	bl	80015e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80062cc:	f005 fcd4 	bl	800bc78 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 80062d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 80062e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f6:	2302      	movs	r3, #2
 80062f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006308:	230a      	movs	r3, #10
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006312:	4619      	mov	r1, r3
 8006314:	480c      	ldr	r0, [pc, #48]	; (8006348 <HAL_PCD_MspInit+0xd4>)
 8006316:	f005 f821 	bl	800b35c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 800631c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006320:	4a08      	ldr	r2, [pc, #32]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 8006322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006326:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_PCD_MspInit+0xd0>)
 800632c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006338:	bf00      	nop
 800633a:	37e8      	adds	r7, #232	; 0xe8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40080000 	.word	0x40080000
 8006344:	58024400 	.word	0x58024400
 8006348:	58020000 	.word	0x58020000

0800634c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006350:	e7fe      	b.n	8006350 <NMI_Handler+0x4>

08006352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006352:	b480      	push	{r7}
 8006354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006356:	e7fe      	b.n	8006356 <HardFault_Handler+0x4>

08006358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800635c:	e7fe      	b.n	800635c <MemManage_Handler+0x4>

0800635e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006362:	e7fe      	b.n	8006362 <BusFault_Handler+0x4>

08006364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006368:	e7fe      	b.n	8006368 <UsageFault_Handler+0x4>

0800636a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800636a:	b480      	push	{r7}
 800636c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006386:	b480      	push	{r7}
 8006388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006398:	f000 fcea 	bl	8006d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800639c:	bf00      	nop
 800639e:	bd80      	pop	{r7, pc}

080063a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80063a4:	4802      	ldr	r0, [pc, #8]	; (80063b0 <DMA1_Stream0_IRQHandler+0x10>)
 80063a6:	f003 fcc7 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	24000548 	.word	0x24000548

080063b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80063b8:	4802      	ldr	r0, [pc, #8]	; (80063c4 <DMA1_Stream1_IRQHandler+0x10>)
 80063ba:	f003 fcbd 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	240005c0 	.word	0x240005c0

080063c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <DMA1_Stream2_IRQHandler+0x10>)
 80063ce:	f003 fcb3 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	24000638 	.word	0x24000638

080063dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <DMA1_Stream3_IRQHandler+0x10>)
 80063e2:	f003 fca9 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	240006b0 	.word	0x240006b0

080063f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80063f4:	4802      	ldr	r0, [pc, #8]	; (8006400 <DMA1_Stream4_IRQHandler+0x10>)
 80063f6:	f003 fc9f 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	24000120 	.word	0x24000120

08006404 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006408:	4802      	ldr	r0, [pc, #8]	; (8006414 <ADC_IRQHandler+0x10>)
 800640a:	f001 f871 	bl	80074f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	240000bc 	.word	0x240000bc

08006418 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <UART4_IRQHandler+0x10>)
 800641e:	f00b ff27 	bl	8012270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	24000280 	.word	0x24000280

0800642c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <UART5_IRQHandler+0x10>)
 8006432:	f00b ff1d 	bl	8012270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	24000314 	.word	0x24000314

08006440 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006444:	4802      	ldr	r0, [pc, #8]	; (8006450 <TIM7_IRQHandler+0x10>)
 8006446:	f00a fb6f 	bl	8010b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	240008e0 	.word	0x240008e0

08006454 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <UART7_IRQHandler+0x10>)
 800645a:	f00b ff09 	bl	8012270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	240003a8 	.word	0x240003a8

08006468 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800646c:	4802      	ldr	r0, [pc, #8]	; (8006478 <TIM16_IRQHandler+0x10>)
 800646e:	f00a fb5b 	bl	8010b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	24000978 	.word	0x24000978

0800647c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <BDMA_Channel0_IRQHandler+0x10>)
 8006482:	f003 fc59 	bl	8009d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	240004d0 	.word	0x240004d0

08006490 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006494:	4802      	ldr	r0, [pc, #8]	; (80064a0 <LPUART1_IRQHandler+0x10>)
 8006496:	f00b feeb 	bl	8012270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	240001ec 	.word	0x240001ec

080064a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return 1;
 80064a8:	2301      	movs	r3, #1
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_kill>:

int _kill(int pid, int sig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80064be:	f00e faa7 	bl	8014a10 <__errno>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2216      	movs	r2, #22
 80064c6:	601a      	str	r2, [r3, #0]
  return -1;
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_exit>:

void _exit (int status)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ffe7 	bl	80064b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80064e6:	e7fe      	b.n	80064e6 <_exit+0x12>

080064e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064f0:	4a14      	ldr	r2, [pc, #80]	; (8006544 <_sbrk+0x5c>)
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <_sbrk+0x60>)
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <_sbrk+0x64>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <_sbrk+0x64>)
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <_sbrk+0x68>)
 8006508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <_sbrk+0x64>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4413      	add	r3, r2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	429a      	cmp	r2, r3
 8006516:	d207      	bcs.n	8006528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006518:	f00e fa7a 	bl	8014a10 <__errno>
 800651c:	4603      	mov	r3, r0
 800651e:	220c      	movs	r2, #12
 8006520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006526:	e009      	b.n	800653c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006528:	4b08      	ldr	r3, [pc, #32]	; (800654c <_sbrk+0x64>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800652e:	4b07      	ldr	r3, [pc, #28]	; (800654c <_sbrk+0x64>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	4a05      	ldr	r2, [pc, #20]	; (800654c <_sbrk+0x64>)
 8006538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800653a:	68fb      	ldr	r3, [r7, #12]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	24080000 	.word	0x24080000
 8006548:	00000400 	.word	0x00000400
 800654c:	24001ae0 	.word	0x24001ae0
 8006550:	24002c38 	.word	0x24002c38

08006554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006558:	4b37      	ldr	r3, [pc, #220]	; (8006638 <SystemInit+0xe4>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	4a36      	ldr	r2, [pc, #216]	; (8006638 <SystemInit+0xe4>)
 8006560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006568:	4b34      	ldr	r3, [pc, #208]	; (800663c <SystemInit+0xe8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2b06      	cmp	r3, #6
 8006572:	d807      	bhi.n	8006584 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <SystemInit+0xe8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 030f 	bic.w	r3, r3, #15
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <SystemInit+0xe8>)
 800657e:	f043 0307 	orr.w	r3, r3, #7
 8006582:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006584:	4b2e      	ldr	r3, [pc, #184]	; (8006640 <SystemInit+0xec>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2d      	ldr	r2, [pc, #180]	; (8006640 <SystemInit+0xec>)
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <SystemInit+0xec>)
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006596:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <SystemInit+0xec>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4929      	ldr	r1, [pc, #164]	; (8006640 <SystemInit+0xec>)
 800659c:	4b29      	ldr	r3, [pc, #164]	; (8006644 <SystemInit+0xf0>)
 800659e:	4013      	ands	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065a2:	4b26      	ldr	r3, [pc, #152]	; (800663c <SystemInit+0xe8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065ae:	4b23      	ldr	r3, [pc, #140]	; (800663c <SystemInit+0xe8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 030f 	bic.w	r3, r3, #15
 80065b6:	4a21      	ldr	r2, [pc, #132]	; (800663c <SystemInit+0xe8>)
 80065b8:	f043 0307 	orr.w	r3, r3, #7
 80065bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <SystemInit+0xec>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80065c4:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <SystemInit+0xec>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80065ca:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <SystemInit+0xec>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80065d0:	4b1b      	ldr	r3, [pc, #108]	; (8006640 <SystemInit+0xec>)
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <SystemInit+0xf4>)
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <SystemInit+0xec>)
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <SystemInit+0xf8>)
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80065dc:	4b18      	ldr	r3, [pc, #96]	; (8006640 <SystemInit+0xec>)
 80065de:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <SystemInit+0xfc>)
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <SystemInit+0xec>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80065e8:	4b15      	ldr	r3, [pc, #84]	; (8006640 <SystemInit+0xec>)
 80065ea:	4a19      	ldr	r2, [pc, #100]	; (8006650 <SystemInit+0xfc>)
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <SystemInit+0xec>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <SystemInit+0xec>)
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <SystemInit+0xfc>)
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <SystemInit+0xec>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <SystemInit+0xec>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <SystemInit+0xec>)
 8006606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800660a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <SystemInit+0xec>)
 800660e:	2200      	movs	r2, #0
 8006610:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <SystemInit+0x100>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <SystemInit+0x104>)
 8006618:	4013      	ands	r3, r2
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661e:	d202      	bcs.n	8006626 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <SystemInit+0x108>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <SystemInit+0x10c>)
 8006628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800662c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800662e:	bf00      	nop
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000ed00 	.word	0xe000ed00
 800663c:	52002000 	.word	0x52002000
 8006640:	58024400 	.word	0x58024400
 8006644:	eaf6ed7f 	.word	0xeaf6ed7f
 8006648:	02020200 	.word	0x02020200
 800664c:	01ff0000 	.word	0x01ff0000
 8006650:	01010280 	.word	0x01010280
 8006654:	5c001000 	.word	0x5c001000
 8006658:	ffff0000 	.word	0xffff0000
 800665c:	51008108 	.word	0x51008108
 8006660:	52004000 	.word	0x52004000

08006664 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	0a5a      	lsrs	r2, r3, #9
 8006674:	490f      	ldr	r1, [pc, #60]	; (80066b4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006676:	fba1 1202 	umull	r1, r2, r1, r2
 800667a:	09d2      	lsrs	r2, r2, #7
 800667c:	490e      	ldr	r1, [pc, #56]	; (80066b8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800667e:	fb01 f202 	mul.w	r2, r1, r2
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	441a      	add	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	00044b83 	.word	0x00044b83
 80066b8:	3b9aca00 	.word	0x3b9aca00

080066bc <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 80066bc:	b5b0      	push	{r4, r5, r7, lr}
 80066be:	b096      	sub	sp, #88	; 0x58
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 80066c4:	f107 0320 	add.w	r3, r7, #32
 80066c8:	2238      	movs	r2, #56	; 0x38
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f00e f943 	bl	8014958 <memset>
 80066d2:	2305      	movs	r3, #5
 80066d4:	623b      	str	r3, [r7, #32]
 80066d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
 80066dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 80066e4:	f107 0408 	add.w	r4, r7, #8
 80066e8:	461d      	mov	r5, r3
 80066ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066f2:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 80066f6:	f107 0208 	add.w	r2, r7, #8
 80066fa:	f107 0120 	add.w	r1, r7, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4807      	ldr	r0, [pc, #28]	; (8006720 <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8006702:	f005 fcca 	bl	800c09a <HAL_QSPI_AutoPolling>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006710:	e000      	b.n	8006714 <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3758      	adds	r7, #88	; 0x58
 8006718:	46bd      	mov	sp, r7
 800671a:	bdb0      	pop	{r4, r5, r7, pc}
 800671c:	080154b0 	.word	0x080154b0
 8006720:	24000728 	.word	0x24000728

08006724 <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b094      	sub	sp, #80	; 0x50
 8006728:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 800672a:	f107 0318 	add.w	r3, r7, #24
 800672e:	2238      	movs	r2, #56	; 0x38
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f00e f910 	bl	8014958 <memset>
 8006738:	2306      	movs	r3, #6
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006742:	f107 0318 	add.w	r3, r7, #24
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4619      	mov	r1, r3
 800674c:	4818      	ldr	r0, [pc, #96]	; (80067b0 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 800674e:	f005 fb17 	bl	800bd80 <HAL_QSPI_Command>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800675c:	e023      	b.n	80067a6 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800675e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006762:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8006764:	2305      	movs	r3, #5
 8006766:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8006768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8006776:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <QSPI_W25Q64JV_WriteEnable+0x90>)
 8006778:	463c      	mov	r4, r7
 800677a:	461d      	mov	r5, r3
 800677c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006780:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006784:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006788:	463a      	mov	r2, r7
 800678a:	f107 0118 	add.w	r1, r7, #24
 800678e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006792:	4807      	ldr	r0, [pc, #28]	; (80067b0 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8006794:	f005 fc81 	bl	800c09a <HAL_QSPI_AutoPolling>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 800679e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a2:	e000      	b.n	80067a6 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3750      	adds	r7, #80	; 0x50
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bdb0      	pop	{r4, r5, r7, pc}
 80067ae:	bf00      	nop
 80067b0:	24000728 	.word	0x24000728
 80067b4:	080154c8 	.word	0x080154c8

080067b8 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	; 0x38
 80067cc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 80067ce:	463b      	mov	r3, r7
 80067d0:	2238      	movs	r2, #56	; 0x38
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f00e f8bf 	bl	8014958 <memset>
 80067da:	2366      	movs	r3, #102	; 0x66
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e2:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80067e4:	463b      	mov	r3, r7
 80067e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ea:	4619      	mov	r1, r3
 80067ec:	4814      	ldr	r0, [pc, #80]	; (8006840 <QSPI_W25Q64JV_Reset+0x78>)
 80067ee:	f005 fac7 	bl	800bd80 <HAL_QSPI_Command>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 80067f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067fc:	e01c      	b.n	8006838 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80067fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006802:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8006804:	2399      	movs	r3, #153	; 0x99
 8006806:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006808:	463b      	mov	r3, r7
 800680a:	f241 3288 	movw	r2, #5000	; 0x1388
 800680e:	4619      	mov	r1, r3
 8006810:	480b      	ldr	r0, [pc, #44]	; (8006840 <QSPI_W25Q64JV_Reset+0x78>)
 8006812:	f005 fab5 	bl	800bd80 <HAL_QSPI_Command>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006820:	e00a      	b.n	8006838 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006822:	f241 3088 	movw	r0, #5000	; 0x1388
 8006826:	f7ff ff49 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8006830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006834:	e000      	b.n	8006838 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3738      	adds	r7, #56	; 0x38
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	24000728 	.word	0x24000728

08006844 <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b090      	sub	sp, #64	; 0x40
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 800684c:	f7ff ff6a 	bl	8006724 <QSPI_W25Q64JV_WriteEnable>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8006856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800685a:	e02c      	b.n	80068b6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 800685c:	f107 0308 	add.w	r3, r7, #8
 8006860:	2238      	movs	r2, #56	; 0x38
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f00e f877 	bl	8014958 <memset>
 800686a:	2320      	movs	r3, #32
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4619      	mov	r1, r3
 800688e:	480c      	ldr	r0, [pc, #48]	; (80068c0 <QSPI_W25Q64JV_EraseSector+0x7c>)
 8006890:	f005 fa76 	bl	800bd80 <HAL_QSPI_Command>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 800689a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800689e:	e00a      	b.n	80068b6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 80068a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80068a4:	f7ff ff0a 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b2:	e000      	b.n	80068b6 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3740      	adds	r7, #64	; 0x40
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	24000728 	.word	0x24000728

080068c4 <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b092      	sub	sp, #72	; 0x48
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 80068d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80068d4:	f7ff fef2 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e2:	e044      	b.n	800696e <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	2238      	movs	r2, #56	; 0x38
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f00e f833 	bl	8014958 <memset>
 80068f2:	23eb      	movs	r3, #235	; 0xeb
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	23f0      	movs	r3, #240	; 0xf0
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	2304      	movs	r3, #4
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
 8006908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
 800690e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006914:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
 800691a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006924:	f107 0310 	add.w	r3, r7, #16
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4619      	mov	r1, r3
 800692e:	4812      	ldr	r0, [pc, #72]	; (8006978 <QSPI_W25Q64JV_Read+0xb4>)
 8006930:	f005 fa26 	bl	800bd80 <HAL_QSPI_Command>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800693e:	e016      	b.n	800696e <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006940:	f241 3288 	movw	r2, #5000	; 0x1388
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	480c      	ldr	r0, [pc, #48]	; (8006978 <QSPI_W25Q64JV_Read+0xb4>)
 8006948:	f005 fb0a 	bl	800bf60 <HAL_QSPI_Receive>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006956:	e00a      	b.n	800696e <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006958:	f241 3088 	movw	r0, #5000	; 0x1388
 800695c:	f7ff feae 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8006966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800696a:	e000      	b.n	800696e <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3748      	adds	r7, #72	; 0x48
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	24000728 	.word	0x24000728

0800697c <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b092      	sub	sp, #72	; 0x48
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006988:	f241 3088 	movw	r0, #5000	; 0x1388
 800698c:	f7ff fe96 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8006996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800699a:	e045      	b.n	8006a28 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 800699c:	f7ff fec2 	bl	8006724 <QSPI_W25Q64JV_WriteEnable>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069aa:	e03d      	b.n	8006a28 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 80069ac:	f107 0310 	add.w	r3, r7, #16
 80069b0:	2238      	movs	r2, #56	; 0x38
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f00d ffcf 	bl	8014958 <memset>
 80069ba:	2302      	movs	r3, #2
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80069de:	f107 0310 	add.w	r3, r7, #16
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4619      	mov	r1, r3
 80069e8:	4811      	ldr	r0, [pc, #68]	; (8006a30 <QSPI_W25Q64JV_PageProgram+0xb4>)
 80069ea:	f005 f9c9 	bl	800bd80 <HAL_QSPI_Command>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 80069f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f8:	e016      	b.n	8006a28 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80069fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	480b      	ldr	r0, [pc, #44]	; (8006a30 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8006a02:	f005 fa1b 	bl	800be3c <HAL_QSPI_Transmit>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a10:	e00a      	b.n	8006a28 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8006a12:	f241 3088 	movw	r0, #5000	; 0x1388
 8006a16:	f7ff fe51 	bl	80066bc <QSPI_W25Q64JV_AutoPollingMemReady>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8006a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a24:	e000      	b.n	8006a28 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3748      	adds	r7, #72	; 0x48
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	24000728 	.word	0x24000728

08006a34 <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a4c:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d801      	bhi.n	8006a5a <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ff8c 	bl	800697c <QSPI_W25Q64JV_PageProgram>
 8006a64:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d117      	bne.n	8006a9c <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d013      	beq.n	8006a9c <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a92:	bf28      	it	cs
 8006a94:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006a98:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8006a9a:	e7de      	b.n	8006a5a <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8006a9c:	693b      	ldr	r3, [r7, #16]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	0b1b      	lsrs	r3, r3, #12
 8006abc:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac6:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
 8006aca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8006ace:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8006ad0:	8abb      	ldrh	r3, [r7, #20]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d801      	bhi.n	8006adc <QSPI_W25Q64JV_Write+0x34>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	031b      	lsls	r3, r3, #12
 8006ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4835      	ldr	r0, [pc, #212]	; (8006bbc <QSPI_W25Q64JV_Write+0x114>)
 8006ae8:	f7ff feec 	bl	80068c4 <QSPI_W25Q64JV_Read>
 8006aec:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d157      	bne.n	8006ba4 <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e009      	b.n	8006b0e <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8006afa:	8afa      	ldrh	r2, [r7, #22]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	4a2e      	ldr	r2, [pc, #184]	; (8006bbc <QSPI_W25Q64JV_Write+0x114>)
 8006b02:	5cd3      	ldrb	r3, [r2, r3]
 8006b04:	2bff      	cmp	r3, #255	; 0xff
 8006b06:	d107      	bne.n	8006b18 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	8abb      	ldrh	r3, [r7, #20]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3f1      	bcc.n	8006afa <QSPI_W25Q64JV_Write+0x52>
 8006b16:	e000      	b.n	8006b1a <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8006b18:	bf00      	nop
        }
        if (i < secremain) {
 8006b1a:	8abb      	ldrh	r3, [r7, #20]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d21d      	bcs.n	8006b5e <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fe8c 	bl	8006844 <QSPI_W25Q64JV_EraseSector>
 8006b2c:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d139      	bne.n	8006ba8 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8006b34:	8afb      	ldrh	r3, [r7, #22]
 8006b36:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <QSPI_W25Q64JV_Write+0x114>)
 8006b38:	4413      	add	r3, r2
 8006b3a:	8aba      	ldrh	r2, [r7, #20]
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f00d ff92 	bl	8014a68 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	031b      	lsls	r3, r3, #12
 8006b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	481b      	ldr	r0, [pc, #108]	; (8006bbc <QSPI_W25Q64JV_Write+0x114>)
 8006b50:	f7ff ff70 	bl	8006a34 <QSPI_W25Q64JV_Write_NoCheck>
 8006b54:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <QSPI_W25Q64JV_Write+0xca>
 8006b5c:	e029      	b.n	8006bb2 <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 8006b5e:	8abb      	ldrh	r3, [r7, #20]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff65 	bl	8006a34 <QSPI_W25Q64JV_Write_NoCheck>
 8006b6a:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d11c      	bne.n	8006bac <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 8006b72:	8abb      	ldrh	r3, [r7, #20]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d01a      	beq.n	8006bb0 <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 8006b84:	8abb      	ldrh	r3, [r7, #20]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8006b8c:	8abb      	ldrh	r3, [r7, #20]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 8006b94:	8abb      	ldrh	r3, [r7, #20]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8006b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba0:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 8006ba2:	e795      	b.n	8006ad0 <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 8006ba4:	bf00      	nop
 8006ba6:	e004      	b.n	8006bb2 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8006ba8:	bf00      	nop
 8006baa:	e002      	b.n	8006bb2 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 8006bb0:	bf00      	nop
    }
    return ret;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	24001ae4 	.word	0x24001ae4

08006bc0 <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	; 0x40
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	2238      	movs	r2, #56	; 0x38
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f00d fec1 	bl	8014958 <memset>
 8006bd6:	2390      	movs	r3, #144	; 0x90
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
 8006bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006bf6:	f107 0308 	add.w	r3, r7, #8
 8006bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfe:	4619      	mov	r1, r3
 8006c00:	480c      	ldr	r0, [pc, #48]	; (8006c34 <QSPI_W25Q64JV_DeviceID+0x74>)
 8006c02:	f005 f8bd 	bl	800bd80 <HAL_QSPI_Command>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 8006c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c10:	e00c      	b.n	8006c2c <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4806      	ldr	r0, [pc, #24]	; (8006c34 <QSPI_W25Q64JV_DeviceID+0x74>)
 8006c1a:	f005 f9a1 	bl	800bf60 <HAL_QSPI_Receive>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c28:	e000      	b.n	8006c2c <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3740      	adds	r7, #64	; 0x40
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	24000728 	.word	0x24000728

08006c38 <Reset_Handler>:
 8006c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c70 <LoopFillZerobss+0xe>
 8006c3c:	f7ff fc8a 	bl	8006554 <SystemInit>
 8006c40:	480c      	ldr	r0, [pc, #48]	; (8006c74 <LoopFillZerobss+0x12>)
 8006c42:	490d      	ldr	r1, [pc, #52]	; (8006c78 <LoopFillZerobss+0x16>)
 8006c44:	4a0d      	ldr	r2, [pc, #52]	; (8006c7c <LoopFillZerobss+0x1a>)
 8006c46:	2300      	movs	r3, #0
 8006c48:	e002      	b.n	8006c50 <LoopCopyDataInit>

08006c4a <CopyDataInit>:
 8006c4a:	58d4      	ldr	r4, [r2, r3]
 8006c4c:	50c4      	str	r4, [r0, r3]
 8006c4e:	3304      	adds	r3, #4

08006c50 <LoopCopyDataInit>:
 8006c50:	18c4      	adds	r4, r0, r3
 8006c52:	428c      	cmp	r4, r1
 8006c54:	d3f9      	bcc.n	8006c4a <CopyDataInit>
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <LoopFillZerobss+0x1e>)
 8006c58:	4c0a      	ldr	r4, [pc, #40]	; (8006c84 <LoopFillZerobss+0x22>)
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e001      	b.n	8006c62 <LoopFillZerobss>

08006c5e <FillZerobss>:
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	3204      	adds	r2, #4

08006c62 <LoopFillZerobss>:
 8006c62:	42a2      	cmp	r2, r4
 8006c64:	d3fb      	bcc.n	8006c5e <FillZerobss>
 8006c66:	f00d fed9 	bl	8014a1c <__libc_init_array>
 8006c6a:	f7f9 fd0f 	bl	800068c <main>
 8006c6e:	4770      	bx	lr
 8006c70:	24080000 	.word	0x24080000
 8006c74:	24000000 	.word	0x24000000
 8006c78:	240000a0 	.word	0x240000a0
 8006c7c:	080156e4 	.word	0x080156e4
 8006c80:	240000a0 	.word	0x240000a0
 8006c84:	24002c34 	.word	0x24002c34

08006c88 <ADC3_IRQHandler>:
 8006c88:	e7fe      	b.n	8006c88 <ADC3_IRQHandler>
	...

08006c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c92:	2003      	movs	r0, #3
 8006c94:	f001 fce6 	bl	8008664 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c98:	f006 fa52 	bl	800d140 <HAL_RCC_GetSysClockFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_Init+0x68>)
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	4913      	ldr	r1, [pc, #76]	; (8006cf8 <HAL_Init+0x6c>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb6:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <HAL_Init+0x68>)
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <HAL_Init+0x6c>)
 8006cc0:	5cd3      	ldrb	r3, [r2, r3]
 8006cc2:	f003 031f 	and.w	r3, r3, #31
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <HAL_Init+0x70>)
 8006cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <HAL_Init+0x74>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006cd6:	200f      	movs	r0, #15
 8006cd8:	f000 f814 	bl	8006d04 <HAL_InitTick>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e002      	b.n	8006cec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006ce6:	f7fe fb5f 	bl	80053a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	0801565c 	.word	0x0801565c
 8006cfc:	24000044 	.word	0x24000044
 8006d00:	24000040 	.word	0x24000040

08006d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006d0c:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <HAL_InitTick+0x60>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e021      	b.n	8006d5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006d18:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <HAL_InitTick+0x64>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <HAL_InitTick+0x60>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	4619      	mov	r1, r3
 8006d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fccb 	bl	80086ca <HAL_SYSTICK_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e00e      	b.n	8006d5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d80a      	bhi.n	8006d5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d44:	2200      	movs	r2, #0
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d4c:	f001 fc95 	bl	800867a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d50:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <HAL_InitTick+0x68>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	2400004c 	.word	0x2400004c
 8006d68:	24000040 	.word	0x24000040
 8006d6c:	24000048 	.word	0x24000048

08006d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d74:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <HAL_IncTick+0x20>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <HAL_IncTick+0x24>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4413      	add	r3, r2
 8006d80:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <HAL_IncTick+0x24>)
 8006d82:	6013      	str	r3, [r2, #0]
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	2400004c 	.word	0x2400004c
 8006d94:	24002ae4 	.word	0x24002ae4

08006d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d9c:	4b03      	ldr	r3, [pc, #12]	; (8006dac <HAL_GetTick+0x14>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	24002ae4 	.word	0x24002ae4

08006db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006db8:	f7ff ffee 	bl	8006d98 <HAL_GetTick>
 8006dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc8:	d005      	beq.n	8006dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <HAL_Delay+0x44>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dd6:	bf00      	nop
 8006dd8:	f7ff ffde 	bl	8006d98 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d8f7      	bhi.n	8006dd8 <HAL_Delay+0x28>
  {
  }
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	2400004c 	.word	0x2400004c

08006df8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <HAL_GetREVID+0x14>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	0c1b      	lsrs	r3, r3, #16
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	5c001000 	.word	0x5c001000

08006e10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	609a      	str	r2, [r3, #8]
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3360      	adds	r3, #96	; 0x60
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	611a      	str	r2, [r3, #16]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3360      	adds	r3, #96	; 0x60
 8006efa:	461a      	mov	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	601a      	str	r2, [r3, #0]
  }
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3330      	adds	r3, #48	; 0x30
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	4413      	add	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	211f      	movs	r1, #31
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	43db      	mvns	r3, r3
 8006f78:	401a      	ands	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	0e9b      	lsrs	r3, r3, #26
 8006f7e:	f003 011f 	and.w	r1, r3, #31
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	0e5b      	lsrs	r3, r3, #25
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	0d1b      	lsrs	r3, r3, #20
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2107      	movs	r1, #7
 8006ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	401a      	ands	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	0d1b      	lsrs	r3, r3, #20
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	fa01 f303 	lsl.w	r3, r1, r3
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007034:	43db      	mvns	r3, r3
 8007036:	401a      	ands	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0318 	and.w	r3, r3, #24
 800703e:	4908      	ldr	r1, [pc, #32]	; (8007060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007040:	40d9      	lsrs	r1, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	400b      	ands	r3, r1
 8007046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704a:	431a      	orrs	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	000fffff 	.word	0x000fffff

08007064 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 031f 	and.w	r3, r3, #31
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6093      	str	r3, [r2, #8]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	5fffffc0 	.word	0x5fffffc0

080070c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d4:	d101      	bne.n	80070da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <LL_ADC_EnableInternalRegulator+0x24>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	6fffffc0 	.word	0x6fffffc0

08007110 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007124:	d101      	bne.n	800712a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <LL_ADC_IsEnabled+0x18>
 800714c:	2301      	movs	r3, #1
 800714e:	e000      	b.n	8007152 <LL_ADC_IsEnabled+0x1a>
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b04      	cmp	r3, #4
 8007170:	d101      	bne.n	8007176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d101      	bne.n	800719c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b089      	sub	sp, #36	; 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e18f      	b.n	80074e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7fe f901 	bl	80053dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff67 	bl	80070c0 <LL_ADC_IsDeepPowerDownEnabled>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff4d 	bl	800709c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff ff82 	bl	8007110 <LL_ADC_IsInternalRegulatorEnabled>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d114      	bne.n	800723c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff ff66 	bl	80070e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800721c:	4b87      	ldr	r3, [pc, #540]	; (800743c <HAL_ADC_Init+0x290>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	099b      	lsrs	r3, r3, #6
 8007222:	4a87      	ldr	r2, [pc, #540]	; (8007440 <HAL_ADC_Init+0x294>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	099b      	lsrs	r3, r3, #6
 800722a:	3301      	adds	r3, #1
 800722c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800722e:	e002      	b.n	8007236 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	3b01      	subs	r3, #1
 8007234:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f9      	bne.n	8007230 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff ff65 	bl	8007110 <LL_ADC_IsInternalRegulatorEnabled>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	f043 0210 	orr.w	r2, r3, #16
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f043 0201 	orr.w	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ff76 	bl	800715e <LL_ADC_REG_IsConversionOngoing>
 8007272:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	f040 8129 	bne.w	80074d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 8125 	bne.w	80074d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007292:	f043 0202 	orr.w	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ff4a 	bl	8007138 <LL_ADC_IsEnabled>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d136      	bne.n	8007318 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a65      	ldr	r2, [pc, #404]	; (8007444 <HAL_ADC_Init+0x298>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_ADC_Init+0x112>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a63      	ldr	r2, [pc, #396]	; (8007448 <HAL_ADC_Init+0x29c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d10e      	bne.n	80072dc <HAL_ADC_Init+0x130>
 80072be:	4861      	ldr	r0, [pc, #388]	; (8007444 <HAL_ADC_Init+0x298>)
 80072c0:	f7ff ff3a 	bl	8007138 <LL_ADC_IsEnabled>
 80072c4:	4604      	mov	r4, r0
 80072c6:	4860      	ldr	r0, [pc, #384]	; (8007448 <HAL_ADC_Init+0x29c>)
 80072c8:	f7ff ff36 	bl	8007138 <LL_ADC_IsEnabled>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4323      	orrs	r3, r4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bf0c      	ite	eq
 80072d4:	2301      	moveq	r3, #1
 80072d6:	2300      	movne	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	e008      	b.n	80072ee <HAL_ADC_Init+0x142>
 80072dc:	485b      	ldr	r0, [pc, #364]	; (800744c <HAL_ADC_Init+0x2a0>)
 80072de:	f7ff ff2b 	bl	8007138 <LL_ADC_IsEnabled>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf0c      	ite	eq
 80072e8:	2301      	moveq	r3, #1
 80072ea:	2300      	movne	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d012      	beq.n	8007318 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a53      	ldr	r2, [pc, #332]	; (8007444 <HAL_ADC_Init+0x298>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_ADC_Init+0x15a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a51      	ldr	r2, [pc, #324]	; (8007448 <HAL_ADC_Init+0x29c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <HAL_ADC_Init+0x15e>
 8007306:	4a52      	ldr	r2, [pc, #328]	; (8007450 <HAL_ADC_Init+0x2a4>)
 8007308:	e000      	b.n	800730c <HAL_ADC_Init+0x160>
 800730a:	4a52      	ldr	r2, [pc, #328]	; (8007454 <HAL_ADC_Init+0x2a8>)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7ff fd7c 	bl	8006e10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007318:	f7ff fd6e 	bl	8006df8 <HAL_GetREVID>
 800731c:	4603      	mov	r3, r0
 800731e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007322:	4293      	cmp	r3, r2
 8007324:	d914      	bls.n	8007350 <HAL_ADC_Init+0x1a4>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b10      	cmp	r3, #16
 800732c:	d110      	bne.n	8007350 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7d5b      	ldrb	r3, [r3, #21]
 8007332:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007338:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800733e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7f1b      	ldrb	r3, [r3, #28]
 8007344:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007346:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007348:	f043 030c 	orr.w	r3, r3, #12
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e00d      	b.n	800736c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	7d5b      	ldrb	r3, [r3, #21]
 8007354:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800735a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007360:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7f1b      	ldrb	r3, [r3, #28]
 8007366:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007368:	4313      	orrs	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7f1b      	ldrb	r3, [r3, #28]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d106      	bne.n	8007382 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	3b01      	subs	r3, #1
 800737a:	045b      	lsls	r3, r3, #17
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	4313      	orrs	r3, r2
 8007380:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4313      	orrs	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <HAL_ADC_Init+0x2ac>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	69b9      	ldr	r1, [r7, #24]
 80073ae:	430b      	orrs	r3, r1
 80073b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fed1 	bl	800715e <LL_ADC_REG_IsConversionOngoing>
 80073bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fede 	bl	8007184 <LL_ADC_INJ_IsConversionOngoing>
 80073c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d15f      	bne.n	8007490 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d15c      	bne.n	8007490 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7d1b      	ldrb	r3, [r3, #20]
 80073da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	4b1c      	ldr	r3, [pc, #112]	; (800745c <HAL_ADC_Init+0x2b0>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d130      	bne.n	8007464 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <HAL_ADC_Init+0x2b4>)
 8007410:	4013      	ands	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007416:	3a01      	subs	r2, #1
 8007418:	0411      	lsls	r1, r2, #16
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800741e:	4311      	orrs	r1, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007424:	4311      	orrs	r1, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800742a:	430a      	orrs	r2, r1
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	611a      	str	r2, [r3, #16]
 8007438:	e01c      	b.n	8007474 <HAL_ADC_Init+0x2c8>
 800743a:	bf00      	nop
 800743c:	24000040 	.word	0x24000040
 8007440:	053e2d63 	.word	0x053e2d63
 8007444:	40022000 	.word	0x40022000
 8007448:	40022100 	.word	0x40022100
 800744c:	58026000 	.word	0x58026000
 8007450:	40022300 	.word	0x40022300
 8007454:	58026300 	.word	0x58026300
 8007458:	fff0c003 	.word	0xfff0c003
 800745c:	ffffbffc 	.word	0xffffbffc
 8007460:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fdd8 	bl	8008040 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10c      	bne.n	80074b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f023 010f 	bic.w	r1, r3, #15
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
 80074b0:	e007      	b.n	80074c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 020f 	bic.w	r2, r2, #15
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	f043 0201 	orr.w	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
 80074d2:	e007      	b.n	80074e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d8:	f043 0210 	orr.w	r2, r3, #16
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80074e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3724      	adds	r7, #36	; 0x24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd90      	pop	{r4, r7, pc}
 80074ee:	bf00      	nop

080074f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a87      	ldr	r2, [pc, #540]	; (8007730 <HAL_ADC_IRQHandler+0x240>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <HAL_ADC_IRQHandler+0x30>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a86      	ldr	r2, [pc, #536]	; (8007734 <HAL_ADC_IRQHandler+0x244>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <HAL_ADC_IRQHandler+0x34>
 8007520:	4b85      	ldr	r3, [pc, #532]	; (8007738 <HAL_ADC_IRQHandler+0x248>)
 8007522:	e000      	b.n	8007526 <HAL_ADC_IRQHandler+0x36>
 8007524:	4b85      	ldr	r3, [pc, #532]	; (800773c <HAL_ADC_IRQHandler+0x24c>)
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fd9c 	bl	8007064 <LL_ADC_GetMultimode>
 800752c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <HAL_ADC_IRQHandler+0x78>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d012      	beq.n	8007568 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 feca 	bl	80082f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2202      	movs	r2, #2
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <HAL_ADC_IRQHandler+0x8c>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8083 	beq.w	800768e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d07d      	beq.n	800768e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d105      	bne.n	80075aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fcb6 	bl	8006f20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d062      	beq.n	8007680 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a5d      	ldr	r2, [pc, #372]	; (8007734 <HAL_ADC_IRQHandler+0x244>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d002      	beq.n	80075ca <HAL_ADC_IRQHandler+0xda>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	e000      	b.n	80075cc <HAL_ADC_IRQHandler+0xdc>
 80075ca:	4b59      	ldr	r3, [pc, #356]	; (8007730 <HAL_ADC_IRQHandler+0x240>)
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d008      	beq.n	80075e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b05      	cmp	r3, #5
 80075de:	d002      	beq.n	80075e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d104      	bne.n	80075f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	623b      	str	r3, [r7, #32]
 80075ee:	e00c      	b.n	800760a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <HAL_ADC_IRQHandler+0x244>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d002      	beq.n	8007600 <HAL_ADC_IRQHandler+0x110>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	e000      	b.n	8007602 <HAL_ADC_IRQHandler+0x112>
 8007600:	4b4b      	ldr	r3, [pc, #300]	; (8007730 <HAL_ADC_IRQHandler+0x240>)
 8007602:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d135      	bne.n	8007680 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b08      	cmp	r3, #8
 8007620:	d12e      	bne.n	8007680 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fd99 	bl	800715e <LL_ADC_REG_IsConversionOngoing>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d11a      	bne.n	8007668 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 020c 	bic.w	r2, r2, #12
 8007640:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d112      	bne.n	8007680 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	f043 0201 	orr.w	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	655a      	str	r2, [r3, #84]	; 0x54
 8007666:	e00b      	b.n	8007680 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766c:	f043 0210 	orr.w	r2, r3, #16
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f96f 	bl	8007964 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	220c      	movs	r2, #12
 800768c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f003 0320 	and.w	r3, r3, #32
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <HAL_ADC_IRQHandler+0x1b2>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80a0 	beq.w	80077ee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 809a 	beq.w	80077ee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fc61 	bl	8006f9e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80076dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fc1c 	bl	8006f20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80076e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a11      	ldr	r2, [pc, #68]	; (8007734 <HAL_ADC_IRQHandler+0x244>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d002      	beq.n	80076fa <HAL_ADC_IRQHandler+0x20a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	e000      	b.n	80076fc <HAL_ADC_IRQHandler+0x20c>
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <HAL_ADC_IRQHandler+0x240>)
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	4293      	cmp	r3, r2
 8007702:	d008      	beq.n	8007716 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b06      	cmp	r3, #6
 800770e:	d002      	beq.n	8007716 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b07      	cmp	r3, #7
 8007714:	d104      	bne.n	8007720 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	e014      	b.n	800774a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a03      	ldr	r2, [pc, #12]	; (8007734 <HAL_ADC_IRQHandler+0x244>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00a      	beq.n	8007740 <HAL_ADC_IRQHandler+0x250>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	e008      	b.n	8007742 <HAL_ADC_IRQHandler+0x252>
 8007730:	40022000 	.word	0x40022000
 8007734:	40022100 	.word	0x40022100
 8007738:	40022300 	.word	0x40022300
 800773c:	58026300 	.word	0x58026300
 8007740:	4b84      	ldr	r3, [pc, #528]	; (8007954 <HAL_ADC_IRQHandler+0x464>)
 8007742:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d047      	beq.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_ADC_IRQHandler+0x27a>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d03f      	beq.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007766:	2b00      	cmp	r3, #0
 8007768:	d13a      	bne.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	d133      	bne.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d12e      	bne.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff fcfc 	bl	8007184 <LL_ADC_INJ_IsConversionOngoing>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d11a      	bne.n	80077c8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d112      	bne.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	f043 0201 	orr.w	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	655a      	str	r2, [r3, #84]	; 0x54
 80077c6:	e00b      	b.n	80077e0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	f043 0210 	orr.w	r2, r3, #16
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f043 0201 	orr.w	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fd5f 	bl	80082a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2260      	movs	r2, #96	; 0x60
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d011      	beq.n	800781c <HAL_ADC_IRQHandler+0x32c>
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8b2 	bl	8007978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2280      	movs	r2, #128	; 0x80
 800781a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	2b00      	cmp	r3, #0
 8007824:	d012      	beq.n	800784c <HAL_ADC_IRQHandler+0x35c>
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00d      	beq.n	800784c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007834:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fd45 	bl	80082cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800784a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007852:	2b00      	cmp	r3, #0
 8007854:	d012      	beq.n	800787c <HAL_ADC_IRQHandler+0x38c>
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00d      	beq.n	800787c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007864:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fd37 	bl	80082e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	d043      	beq.n	800790e <HAL_ADC_IRQHandler+0x41e>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f003 0310 	and.w	r3, r3, #16
 800788c:	2b00      	cmp	r3, #0
 800788e:	d03e      	beq.n	800790e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007898:	2301      	movs	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
 800789c:	e021      	b.n	80078e2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d015      	beq.n	80078d0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <HAL_ADC_IRQHandler+0x464>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_ADC_IRQHandler+0x3c8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a29      	ldr	r2, [pc, #164]	; (8007958 <HAL_ADC_IRQHandler+0x468>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <HAL_ADC_IRQHandler+0x3cc>
 80078b8:	4b28      	ldr	r3, [pc, #160]	; (800795c <HAL_ADC_IRQHandler+0x46c>)
 80078ba:	e000      	b.n	80078be <HAL_ADC_IRQHandler+0x3ce>
 80078bc:	4b28      	ldr	r3, [pc, #160]	; (8007960 <HAL_ADC_IRQHandler+0x470>)
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fbde 	bl	8007080 <LL_ADC_GetMultiDMATransfer>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80078ca:	2301      	movs	r3, #1
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	e008      	b.n	80078e2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80078de:	2301      	movs	r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d10e      	bne.n	8007906 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f043 0202 	orr.w	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f843 	bl	800798c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2210      	movs	r2, #16
 800790c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007914:	2b00      	cmp	r3, #0
 8007916:	d018      	beq.n	800794a <HAL_ADC_IRQHandler+0x45a>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	f043 0208 	orr.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007942:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fcb7 	bl	80082b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800794a:	bf00      	nop
 800794c:	3728      	adds	r7, #40	; 0x28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40022000 	.word	0x40022000
 8007958:	40022100 	.word	0x40022100
 800795c:	40022300 	.word	0x40022300
 8007960:	58026300 	.word	0x58026300

08007964 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b0a1      	sub	sp, #132	; 0x84
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	4a9d      	ldr	r2, [pc, #628]	; (8007c30 <HAL_ADC_ConfigChannel+0x290>)
 80079ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_ADC_ConfigChannel+0x2a>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e321      	b.n	800800e <HAL_ADC_ConfigChannel+0x66e>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fbc1 	bl	800715e <LL_ADC_REG_IsConversionOngoing>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8306 	bne.w	8007ff0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d108      	bne.n	8007a02 <HAL_ADC_ConfigChannel+0x62>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	0e9b      	lsrs	r3, r3, #26
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2201      	movs	r2, #1
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	e016      	b.n	8007a30 <HAL_ADC_ConfigChannel+0x90>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a0a:	fa93 f3a3 	rbit	r3, r3
 8007a0e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a12:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8007a1a:	2320      	movs	r3, #32
 8007a1c:	e003      	b.n	8007a26 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8007a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a20:	fab3 f383 	clz	r3, r3
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	69d1      	ldr	r1, [r2, #28]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7ff fa7b 	bl	8006f46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fb82 	bl	800715e <LL_ADC_REG_IsConversionOngoing>
 8007a5a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fb8f 	bl	8007184 <LL_ADC_INJ_IsConversionOngoing>
 8007a66:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 80b3 	bne.w	8007bd6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f040 80af 	bne.w	8007bd6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	461a      	mov	r2, r3
 8007a86:	f7ff fa9d 	bl	8006fc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007a8a:	4b6a      	ldr	r3, [pc, #424]	; (8007c34 <HAL_ADC_ConfigChannel+0x294>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a96:	d10b      	bne.n	8007ab0 <HAL_ADC_ConfigChannel+0x110>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	089b      	lsrs	r3, r3, #2
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	e01d      	b.n	8007aec <HAL_ADC_ConfigChannel+0x14c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_ADC_ConfigChannel+0x136>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	089b      	lsrs	r3, r3, #2
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	e00a      	b.n	8007aec <HAL_ADC_ConfigChannel+0x14c>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d027      	beq.n	8007b46 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6919      	ldr	r1, [r3, #16]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b04:	f7ff f9b8 	bl	8006e78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6919      	ldr	r1, [r3, #16]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	7e5b      	ldrb	r3, [r3, #25]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d102      	bne.n	8007b1e <HAL_ADC_ConfigChannel+0x17e>
 8007b18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b1c:	e000      	b.n	8007b20 <HAL_ADC_ConfigChannel+0x180>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	461a      	mov	r2, r3
 8007b22:	f7ff f9e2 	bl	8006eea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6919      	ldr	r1, [r3, #16]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	7e1b      	ldrb	r3, [r3, #24]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d102      	bne.n	8007b3c <HAL_ADC_ConfigChannel+0x19c>
 8007b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b3a:	e000      	b.n	8007b3e <HAL_ADC_ConfigChannel+0x19e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7ff f9ba 	bl	8006eb8 <LL_ADC_SetDataRightShift>
 8007b44:	e047      	b.n	8007bd6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	069b      	lsls	r3, r3, #26
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d107      	bne.n	8007b6a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007b68:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	069b      	lsls	r3, r3, #26
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d107      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	069b      	lsls	r3, r3, #26
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d107      	bne.n	8007bb2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007bb0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	069b      	lsls	r3, r3, #26
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d107      	bne.n	8007bd6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007bd4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff faac 	bl	8007138 <LL_ADC_IsEnabled>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 820d 	bne.w	8008002 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f7ff fa11 	bl	800701c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <HAL_ADC_ConfigChannel+0x290>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f040 8133 	bne.w	8007e6c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d110      	bne.n	8007c38 <HAL_ADC_ConfigChannel+0x298>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	0e9b      	lsrs	r3, r3, #26
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	f003 031f 	and.w	r3, r3, #31
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	bf94      	ite	ls
 8007c26:	2301      	movls	r3, #1
 8007c28:	2300      	movhi	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	e01e      	b.n	8007c6c <HAL_ADC_ConfigChannel+0x2cc>
 8007c2e:	bf00      	nop
 8007c30:	47ff0000 	.word	0x47ff0000
 8007c34:	5c001000 	.word	0x5c001000
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c40:	fa93 f3a3 	rbit	r3, r3
 8007c44:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8007c50:	2320      	movs	r3, #32
 8007c52:	e003      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c56:	fab3 f383 	clz	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	bf94      	ite	ls
 8007c66:	2301      	movls	r3, #1
 8007c68:	2300      	movhi	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d079      	beq.n	8007d64 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d107      	bne.n	8007c8c <HAL_ADC_ConfigChannel+0x2ec>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	0e9b      	lsrs	r3, r3, #26
 8007c82:	3301      	adds	r3, #1
 8007c84:	069b      	lsls	r3, r3, #26
 8007c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c8a:	e015      	b.n	8007cb8 <HAL_ADC_ConfigChannel+0x318>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c94:	fa93 f3a3 	rbit	r3, r3
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	e003      	b.n	8007cb0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007caa:	fab3 f383 	clz	r3, r3
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	069b      	lsls	r3, r3, #26
 8007cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d109      	bne.n	8007cd8 <HAL_ADC_ConfigChannel+0x338>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	0e9b      	lsrs	r3, r3, #26
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	e017      	b.n	8007d08 <HAL_ADC_ConfigChannel+0x368>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce0:	fa93 f3a3 	rbit	r3, r3
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8007cf0:	2320      	movs	r3, #32
 8007cf2:	e003      	b.n	8007cfc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8007cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf6:	fab3 f383 	clz	r3, r3
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	f003 031f 	and.w	r3, r3, #31
 8007d02:	2101      	movs	r1, #1
 8007d04:	fa01 f303 	lsl.w	r3, r1, r3
 8007d08:	ea42 0103 	orr.w	r1, r2, r3
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <HAL_ADC_ConfigChannel+0x38e>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	0e9b      	lsrs	r3, r3, #26
 8007d1e:	3301      	adds	r3, #1
 8007d20:	f003 021f 	and.w	r2, r3, #31
 8007d24:	4613      	mov	r3, r2
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	4413      	add	r3, r2
 8007d2a:	051b      	lsls	r3, r3, #20
 8007d2c:	e018      	b.n	8007d60 <HAL_ADC_ConfigChannel+0x3c0>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d36:	fa93 f3a3 	rbit	r3, r3
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8007d46:	2320      	movs	r3, #32
 8007d48:	e003      	b.n	8007d52 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	fab3 f383 	clz	r3, r3
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	3301      	adds	r3, #1
 8007d54:	f003 021f 	and.w	r2, r3, #31
 8007d58:	4613      	mov	r3, r2
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	4413      	add	r3, r2
 8007d5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d60:	430b      	orrs	r3, r1
 8007d62:	e07e      	b.n	8007e62 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d107      	bne.n	8007d80 <HAL_ADC_ConfigChannel+0x3e0>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	0e9b      	lsrs	r3, r3, #26
 8007d76:	3301      	adds	r3, #1
 8007d78:	069b      	lsls	r3, r3, #26
 8007d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007d7e:	e015      	b.n	8007dac <HAL_ADC_ConfigChannel+0x40c>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	fa93 f3a3 	rbit	r3, r3
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007d98:	2320      	movs	r3, #32
 8007d9a:	e003      	b.n	8007da4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	fab3 f383 	clz	r3, r3
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	3301      	adds	r3, #1
 8007da6:	069b      	lsls	r3, r3, #26
 8007da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_ADC_ConfigChannel+0x42c>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	0e9b      	lsrs	r3, r3, #26
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dca:	e017      	b.n	8007dfc <HAL_ADC_ConfigChannel+0x45c>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	61bb      	str	r3, [r7, #24]
  return result;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8007de4:	2320      	movs	r3, #32
 8007de6:	e003      	b.n	8007df0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	fab3 f383 	clz	r3, r3
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	3301      	adds	r3, #1
 8007df2:	f003 031f 	and.w	r3, r3, #31
 8007df6:	2101      	movs	r1, #1
 8007df8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfc:	ea42 0103 	orr.w	r1, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10d      	bne.n	8007e28 <HAL_ADC_ConfigChannel+0x488>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	0e9b      	lsrs	r3, r3, #26
 8007e12:	3301      	adds	r3, #1
 8007e14:	f003 021f 	and.w	r2, r3, #31
 8007e18:	4613      	mov	r3, r2
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3b1e      	subs	r3, #30
 8007e20:	051b      	lsls	r3, r3, #20
 8007e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e26:	e01b      	b.n	8007e60 <HAL_ADC_ConfigChannel+0x4c0>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	fa93 f3a3 	rbit	r3, r3
 8007e34:	60fb      	str	r3, [r7, #12]
  return result;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8007e40:	2320      	movs	r3, #32
 8007e42:	e003      	b.n	8007e4c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	fab3 f383 	clz	r3, r3
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	f003 021f 	and.w	r2, r3, #31
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	3b1e      	subs	r3, #30
 8007e5a:	051b      	lsls	r3, r3, #20
 8007e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e60:	430b      	orrs	r3, r1
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	6892      	ldr	r2, [r2, #8]
 8007e66:	4619      	mov	r1, r3
 8007e68:	f7ff f8ac 	bl	8006fc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f280 80c6 	bge.w	8008002 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a67      	ldr	r2, [pc, #412]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_ADC_ConfigChannel+0x4ea>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a65      	ldr	r2, [pc, #404]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <HAL_ADC_ConfigChannel+0x4ee>
 8007e8a:	4b65      	ldr	r3, [pc, #404]	; (8008020 <HAL_ADC_ConfigChannel+0x680>)
 8007e8c:	e000      	b.n	8007e90 <HAL_ADC_ConfigChannel+0x4f0>
 8007e8e:	4b65      	ldr	r3, [pc, #404]	; (8008024 <HAL_ADC_ConfigChannel+0x684>)
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe ffe3 	bl	8006e5c <LL_ADC_GetCommonPathInternalCh>
 8007e96:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a5e      	ldr	r2, [pc, #376]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_ADC_ConfigChannel+0x50c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a5d      	ldr	r2, [pc, #372]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d10e      	bne.n	8007eca <HAL_ADC_ConfigChannel+0x52a>
 8007eac:	485a      	ldr	r0, [pc, #360]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007eae:	f7ff f943 	bl	8007138 <LL_ADC_IsEnabled>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4859      	ldr	r0, [pc, #356]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007eb6:	f7ff f93f 	bl	8007138 <LL_ADC_IsEnabled>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4323      	orrs	r3, r4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bf0c      	ite	eq
 8007ec2:	2301      	moveq	r3, #1
 8007ec4:	2300      	movne	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	e008      	b.n	8007edc <HAL_ADC_ConfigChannel+0x53c>
 8007eca:	4857      	ldr	r0, [pc, #348]	; (8008028 <HAL_ADC_ConfigChannel+0x688>)
 8007ecc:	f7ff f934 	bl	8007138 <LL_ADC_IsEnabled>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d07d      	beq.n	8007fdc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a51      	ldr	r2, [pc, #324]	; (800802c <HAL_ADC_ConfigChannel+0x68c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d130      	bne.n	8007f4c <HAL_ADC_ConfigChannel+0x5ac>
 8007eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d12b      	bne.n	8007f4c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a4b      	ldr	r2, [pc, #300]	; (8008028 <HAL_ADC_ConfigChannel+0x688>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	f040 8081 	bne.w	8008002 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a44      	ldr	r2, [pc, #272]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <HAL_ADC_ConfigChannel+0x574>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a43      	ldr	r2, [pc, #268]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d101      	bne.n	8007f18 <HAL_ADC_ConfigChannel+0x578>
 8007f14:	4a42      	ldr	r2, [pc, #264]	; (8008020 <HAL_ADC_ConfigChannel+0x680>)
 8007f16:	e000      	b.n	8007f1a <HAL_ADC_ConfigChannel+0x57a>
 8007f18:	4a42      	ldr	r2, [pc, #264]	; (8008024 <HAL_ADC_ConfigChannel+0x684>)
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7fe ff87 	bl	8006e36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f28:	4b41      	ldr	r3, [pc, #260]	; (8008030 <HAL_ADC_ConfigChannel+0x690>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	099b      	lsrs	r3, r3, #6
 8007f2e:	4a41      	ldr	r2, [pc, #260]	; (8008034 <HAL_ADC_ConfigChannel+0x694>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	099b      	lsrs	r3, r3, #6
 8007f36:	3301      	adds	r3, #1
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f3c:	e002      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f9      	bne.n	8007f3e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f4a:	e05a      	b.n	8008002 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a39      	ldr	r2, [pc, #228]	; (8008038 <HAL_ADC_ConfigChannel+0x698>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d11e      	bne.n	8007f94 <HAL_ADC_ConfigChannel+0x5f4>
 8007f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d119      	bne.n	8007f94 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a30      	ldr	r2, [pc, #192]	; (8008028 <HAL_ADC_ConfigChannel+0x688>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d14b      	bne.n	8008002 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_ADC_ConfigChannel+0x5de>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a28      	ldr	r2, [pc, #160]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d101      	bne.n	8007f82 <HAL_ADC_ConfigChannel+0x5e2>
 8007f7e:	4a28      	ldr	r2, [pc, #160]	; (8008020 <HAL_ADC_ConfigChannel+0x680>)
 8007f80:	e000      	b.n	8007f84 <HAL_ADC_ConfigChannel+0x5e4>
 8007f82:	4a28      	ldr	r2, [pc, #160]	; (8008024 <HAL_ADC_ConfigChannel+0x684>)
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7fe ff52 	bl	8006e36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f92:	e036      	b.n	8008002 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a28      	ldr	r2, [pc, #160]	; (800803c <HAL_ADC_ConfigChannel+0x69c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d131      	bne.n	8008002 <HAL_ADC_ConfigChannel+0x662>
 8007f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d12c      	bne.n	8008002 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <HAL_ADC_ConfigChannel+0x688>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d127      	bne.n	8008002 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a18      	ldr	r2, [pc, #96]	; (8008018 <HAL_ADC_ConfigChannel+0x678>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_ADC_ConfigChannel+0x626>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_ADC_ConfigChannel+0x67c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d101      	bne.n	8007fca <HAL_ADC_ConfigChannel+0x62a>
 8007fc6:	4a16      	ldr	r2, [pc, #88]	; (8008020 <HAL_ADC_ConfigChannel+0x680>)
 8007fc8:	e000      	b.n	8007fcc <HAL_ADC_ConfigChannel+0x62c>
 8007fca:	4a16      	ldr	r2, [pc, #88]	; (8008024 <HAL_ADC_ConfigChannel+0x684>)
 8007fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7fe ff2e 	bl	8006e36 <LL_ADC_SetCommonPathInternalCh>
 8007fda:	e012      	b.n	8008002 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007fee:	e008      	b.n	8008002 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff4:	f043 0220 	orr.w	r2, r3, #32
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800800a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800800e:	4618      	mov	r0, r3
 8008010:	3784      	adds	r7, #132	; 0x84
 8008012:	46bd      	mov	sp, r7
 8008014:	bd90      	pop	{r4, r7, pc}
 8008016:	bf00      	nop
 8008018:	40022000 	.word	0x40022000
 800801c:	40022100 	.word	0x40022100
 8008020:	40022300 	.word	0x40022300
 8008024:	58026300 	.word	0x58026300
 8008028:	58026000 	.word	0x58026000
 800802c:	cb840000 	.word	0xcb840000
 8008030:	24000040 	.word	0x24000040
 8008034:	053e2d63 	.word	0x053e2d63
 8008038:	c7520000 	.word	0xc7520000
 800803c:	cfb80000 	.word	0xcfb80000

08008040 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a7a      	ldr	r2, [pc, #488]	; (8008238 <ADC_ConfigureBoostMode+0x1f8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <ADC_ConfigureBoostMode+0x1c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a79      	ldr	r2, [pc, #484]	; (800823c <ADC_ConfigureBoostMode+0x1fc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d109      	bne.n	8008070 <ADC_ConfigureBoostMode+0x30>
 800805c:	4b78      	ldr	r3, [pc, #480]	; (8008240 <ADC_ConfigureBoostMode+0x200>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	e008      	b.n	8008082 <ADC_ConfigureBoostMode+0x42>
 8008070:	4b74      	ldr	r3, [pc, #464]	; (8008244 <ADC_ConfigureBoostMode+0x204>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01c      	beq.n	80080c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008086:	f005 f9d5 	bl	800d434 <HAL_RCC_GetHCLKFreq>
 800808a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008094:	d010      	beq.n	80080b8 <ADC_ConfigureBoostMode+0x78>
 8008096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800809a:	d873      	bhi.n	8008184 <ADC_ConfigureBoostMode+0x144>
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d002      	beq.n	80080a8 <ADC_ConfigureBoostMode+0x68>
 80080a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a6:	d16d      	bne.n	8008184 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	60fb      	str	r3, [r7, #12]
        break;
 80080b6:	e068      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	089b      	lsrs	r3, r3, #2
 80080bc:	60fb      	str	r3, [r7, #12]
        break;
 80080be:	e064      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80080c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80080c4:	f04f 0100 	mov.w	r1, #0
 80080c8:	f006 fc1a 	bl	800e900 <HAL_RCCEx_GetPeriphCLKFreq>
 80080cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80080d6:	d051      	beq.n	800817c <ADC_ConfigureBoostMode+0x13c>
 80080d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80080dc:	d854      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 80080de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80080e2:	d047      	beq.n	8008174 <ADC_ConfigureBoostMode+0x134>
 80080e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80080e8:	d84e      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 80080ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80080ee:	d03d      	beq.n	800816c <ADC_ConfigureBoostMode+0x12c>
 80080f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80080f4:	d848      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 80080f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080fa:	d033      	beq.n	8008164 <ADC_ConfigureBoostMode+0x124>
 80080fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008100:	d842      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 8008102:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008106:	d029      	beq.n	800815c <ADC_ConfigureBoostMode+0x11c>
 8008108:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800810c:	d83c      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 800810e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008112:	d01a      	beq.n	800814a <ADC_ConfigureBoostMode+0x10a>
 8008114:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008118:	d836      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 800811a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800811e:	d014      	beq.n	800814a <ADC_ConfigureBoostMode+0x10a>
 8008120:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008124:	d830      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 8008126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812a:	d00e      	beq.n	800814a <ADC_ConfigureBoostMode+0x10a>
 800812c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008130:	d82a      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 8008132:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008136:	d008      	beq.n	800814a <ADC_ConfigureBoostMode+0x10a>
 8008138:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800813c:	d824      	bhi.n	8008188 <ADC_ConfigureBoostMode+0x148>
 800813e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008142:	d002      	beq.n	800814a <ADC_ConfigureBoostMode+0x10a>
 8008144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008148:	d11e      	bne.n	8008188 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	0c9b      	lsrs	r3, r3, #18
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	60fb      	str	r3, [r7, #12]
        break;
 800815a:	e016      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	091b      	lsrs	r3, r3, #4
 8008160:	60fb      	str	r3, [r7, #12]
        break;
 8008162:	e012      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	60fb      	str	r3, [r7, #12]
        break;
 800816a:	e00e      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	099b      	lsrs	r3, r3, #6
 8008170:	60fb      	str	r3, [r7, #12]
        break;
 8008172:	e00a      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	09db      	lsrs	r3, r3, #7
 8008178:	60fb      	str	r3, [r7, #12]
        break;
 800817a:	e006      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	60fb      	str	r3, [r7, #12]
        break;
 8008182:	e002      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
        break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008188:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800818a:	f7fe fe35 	bl	8006df8 <HAL_GetREVID>
 800818e:	4603      	mov	r3, r0
 8008190:	f241 0203 	movw	r2, #4099	; 0x1003
 8008194:	4293      	cmp	r3, r2
 8008196:	d815      	bhi.n	80081c4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <ADC_ConfigureBoostMode+0x208>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d908      	bls.n	80081b2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80081b0:	e03e      	b.n	8008230 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081c0:	609a      	str	r2, [r3, #8]
}
 80081c2:	e035      	b.n	8008230 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4a1f      	ldr	r2, [pc, #124]	; (800824c <ADC_ConfigureBoostMode+0x20c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d808      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80081e0:	609a      	str	r2, [r3, #8]
}
 80081e2:	e025      	b.n	8008230 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <ADC_ConfigureBoostMode+0x210>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d80a      	bhi.n	8008202 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081fe:	609a      	str	r2, [r3, #8]
}
 8008200:	e016      	b.n	8008230 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4a13      	ldr	r2, [pc, #76]	; (8008254 <ADC_ConfigureBoostMode+0x214>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d80a      	bhi.n	8008220 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821c:	609a      	str	r2, [r3, #8]
}
 800821e:	e007      	b.n	8008230 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800822e:	609a      	str	r2, [r3, #8]
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40022000 	.word	0x40022000
 800823c:	40022100 	.word	0x40022100
 8008240:	40022300 	.word	0x40022300
 8008244:	58026300 	.word	0x58026300
 8008248:	01312d00 	.word	0x01312d00
 800824c:	005f5e10 	.word	0x005f5e10
 8008250:	00bebc20 	.word	0x00bebc20
 8008254:	017d7840 	.word	0x017d7840

08008258 <LL_ADC_IsEnabled>:
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <LL_ADC_IsEnabled+0x18>
 800826c:	2301      	movs	r3, #1
 800826e:	e000      	b.n	8008272 <LL_ADC_IsEnabled+0x1a>
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <LL_ADC_REG_IsConversionOngoing>:
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b04      	cmp	r3, #4
 8008290:	d101      	bne.n	8008296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b09f      	sub	sp, #124	; 0x7c
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008322:	2302      	movs	r3, #2
 8008324:	e0be      	b.n	80084a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800832e:	2300      	movs	r3, #0
 8008330:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008332:	2300      	movs	r3, #0
 8008334:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a5c      	ldr	r2, [pc, #368]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d102      	bne.n	8008346 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008340:	4b5b      	ldr	r3, [pc, #364]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	e001      	b.n	800834a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008354:	f043 0220 	orr.w	r2, r3, #32
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e09d      	b.n	80084a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff ff87 	bl	800827e <LL_ADC_REG_IsConversionOngoing>
 8008370:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff ff81 	bl	800827e <LL_ADC_REG_IsConversionOngoing>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d17f      	bne.n	8008482 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008384:	2b00      	cmp	r3, #0
 8008386:	d17c      	bne.n	8008482 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a47      	ldr	r2, [pc, #284]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a46      	ldr	r2, [pc, #280]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d101      	bne.n	80083a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800839c:	4b45      	ldr	r3, [pc, #276]	; (80084b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800839e:	e000      	b.n	80083a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80083a0:	4b45      	ldr	r3, [pc, #276]	; (80084b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80083a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d039      	beq.n	8008420 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80083ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a3a      	ldr	r2, [pc, #232]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a38      	ldr	r2, [pc, #224]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d10e      	bne.n	80083f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80083d2:	4836      	ldr	r0, [pc, #216]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80083d4:	f7ff ff40 	bl	8008258 <LL_ADC_IsEnabled>
 80083d8:	4604      	mov	r4, r0
 80083da:	4835      	ldr	r0, [pc, #212]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80083dc:	f7ff ff3c 	bl	8008258 <LL_ADC_IsEnabled>
 80083e0:	4603      	mov	r3, r0
 80083e2:	4323      	orrs	r3, r4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e008      	b.n	8008402 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80083f0:	4832      	ldr	r0, [pc, #200]	; (80084bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80083f2:	f7ff ff31 	bl	8008258 <LL_ADC_IsEnabled>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d047      	beq.n	8008496 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	4b2d      	ldr	r3, [pc, #180]	; (80084c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800840c:	4013      	ands	r3, r2
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	6811      	ldr	r1, [r2, #0]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6892      	ldr	r2, [r2, #8]
 8008416:	430a      	orrs	r2, r1
 8008418:	431a      	orrs	r2, r3
 800841a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800841e:	e03a      	b.n	8008496 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10e      	bne.n	800845e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008440:	481a      	ldr	r0, [pc, #104]	; (80084ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008442:	f7ff ff09 	bl	8008258 <LL_ADC_IsEnabled>
 8008446:	4604      	mov	r4, r0
 8008448:	4819      	ldr	r0, [pc, #100]	; (80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800844a:	f7ff ff05 	bl	8008258 <LL_ADC_IsEnabled>
 800844e:	4603      	mov	r3, r0
 8008450:	4323      	orrs	r3, r4
 8008452:	2b00      	cmp	r3, #0
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	e008      	b.n	8008470 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800845e:	4817      	ldr	r0, [pc, #92]	; (80084bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008460:	f7ff fefa 	bl	8008258 <LL_ADC_IsEnabled>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	bf0c      	ite	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	2300      	movne	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800847a:	4013      	ands	r3, r2
 800847c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800847e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008480:	e009      	b.n	8008496 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f043 0220 	orr.w	r2, r3, #32
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008494:	e000      	b.n	8008498 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008496:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80084a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	377c      	adds	r7, #124	; 0x7c
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}
 80084ac:	40022000 	.word	0x40022000
 80084b0:	40022100 	.word	0x40022100
 80084b4:	40022300 	.word	0x40022300
 80084b8:	58026300 	.word	0x58026300
 80084bc:	58026000 	.word	0x58026000
 80084c0:	fffff0e0 	.word	0xfffff0e0

080084c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084d4:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <__NVIC_SetPriorityGrouping+0x40>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80084e0:	4013      	ands	r3, r2
 80084e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <__NVIC_SetPriorityGrouping+0x44>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80084f2:	4a04      	ldr	r2, [pc, #16]	; (8008504 <__NVIC_SetPriorityGrouping+0x40>)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	60d3      	str	r3, [r2, #12]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	e000ed00 	.word	0xe000ed00
 8008508:	05fa0000 	.word	0x05fa0000

0800850c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008510:	4b04      	ldr	r3, [pc, #16]	; (8008524 <__NVIC_GetPriorityGrouping+0x18>)
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	f003 0307 	and.w	r3, r3, #7
}
 800851a:	4618      	mov	r0, r3
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	e000ed00 	.word	0xe000ed00

08008528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008536:	2b00      	cmp	r3, #0
 8008538:	db0b      	blt.n	8008552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	f003 021f 	and.w	r2, r3, #31
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <__NVIC_EnableIRQ+0x38>)
 8008542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	2001      	movs	r0, #1
 800854a:	fa00 f202 	lsl.w	r2, r0, r2
 800854e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	e000e100 	.word	0xe000e100

08008564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008574:	2b00      	cmp	r3, #0
 8008576:	db0a      	blt.n	800858e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	490c      	ldr	r1, [pc, #48]	; (80085b0 <__NVIC_SetPriority+0x4c>)
 800857e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008582:	0112      	lsls	r2, r2, #4
 8008584:	b2d2      	uxtb	r2, r2
 8008586:	440b      	add	r3, r1
 8008588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800858c:	e00a      	b.n	80085a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	4908      	ldr	r1, [pc, #32]	; (80085b4 <__NVIC_SetPriority+0x50>)
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	3b04      	subs	r3, #4
 800859c:	0112      	lsls	r2, r2, #4
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	440b      	add	r3, r1
 80085a2:	761a      	strb	r2, [r3, #24]
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	e000e100 	.word	0xe000e100
 80085b4:	e000ed00 	.word	0xe000ed00

080085b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b089      	sub	sp, #36	; 0x24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f1c3 0307 	rsb	r3, r3, #7
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	bf28      	it	cs
 80085d6:	2304      	movcs	r3, #4
 80085d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	3304      	adds	r3, #4
 80085de:	2b06      	cmp	r3, #6
 80085e0:	d902      	bls.n	80085e8 <NVIC_EncodePriority+0x30>
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3b03      	subs	r3, #3
 80085e6:	e000      	b.n	80085ea <NVIC_EncodePriority+0x32>
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43da      	mvns	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	401a      	ands	r2, r3
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	fa01 f303 	lsl.w	r3, r1, r3
 800860a:	43d9      	mvns	r1, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008610:	4313      	orrs	r3, r2
         );
}
 8008612:	4618      	mov	r0, r3
 8008614:	3724      	adds	r7, #36	; 0x24
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
	...

08008620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3b01      	subs	r3, #1
 800862c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008630:	d301      	bcc.n	8008636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008632:	2301      	movs	r3, #1
 8008634:	e00f      	b.n	8008656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008636:	4a0a      	ldr	r2, [pc, #40]	; (8008660 <SysTick_Config+0x40>)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3b01      	subs	r3, #1
 800863c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800863e:	210f      	movs	r1, #15
 8008640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008644:	f7ff ff8e 	bl	8008564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <SysTick_Config+0x40>)
 800864a:	2200      	movs	r2, #0
 800864c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <SysTick_Config+0x40>)
 8008650:	2207      	movs	r2, #7
 8008652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	e000e010 	.word	0xe000e010

08008664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ff29 	bl	80084c4 <__NVIC_SetPriorityGrouping>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b086      	sub	sp, #24
 800867e:	af00      	add	r7, sp, #0
 8008680:	4603      	mov	r3, r0
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008688:	f7ff ff40 	bl	800850c <__NVIC_GetPriorityGrouping>
 800868c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	68b9      	ldr	r1, [r7, #8]
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f7ff ff90 	bl	80085b8 <NVIC_EncodePriority>
 8008698:	4602      	mov	r2, r0
 800869a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff ff5f 	bl	8008564 <__NVIC_SetPriority>
}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	4603      	mov	r3, r0
 80086b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80086b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff ff33 	bl	8008528 <__NVIC_EnableIRQ>
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ffa4 	bl	8008620 <SysTick_Config>
 80086d8:	4603      	mov	r3, r0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80086ec:	f7fe fb54 	bl	8006d98 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e316      	b.n	8008d2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a66      	ldr	r2, [pc, #408]	; (800889c <HAL_DMA_Init+0x1b8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d04a      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a65      	ldr	r2, [pc, #404]	; (80088a0 <HAL_DMA_Init+0x1bc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d045      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a63      	ldr	r2, [pc, #396]	; (80088a4 <HAL_DMA_Init+0x1c0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d040      	beq.n	800879c <HAL_DMA_Init+0xb8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a62      	ldr	r2, [pc, #392]	; (80088a8 <HAL_DMA_Init+0x1c4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d03b      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a60      	ldr	r2, [pc, #384]	; (80088ac <HAL_DMA_Init+0x1c8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d036      	beq.n	800879c <HAL_DMA_Init+0xb8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a5f      	ldr	r2, [pc, #380]	; (80088b0 <HAL_DMA_Init+0x1cc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d031      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a5d      	ldr	r2, [pc, #372]	; (80088b4 <HAL_DMA_Init+0x1d0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d02c      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a5c      	ldr	r2, [pc, #368]	; (80088b8 <HAL_DMA_Init+0x1d4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d027      	beq.n	800879c <HAL_DMA_Init+0xb8>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a5a      	ldr	r2, [pc, #360]	; (80088bc <HAL_DMA_Init+0x1d8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d022      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a59      	ldr	r2, [pc, #356]	; (80088c0 <HAL_DMA_Init+0x1dc>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d01d      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a57      	ldr	r2, [pc, #348]	; (80088c4 <HAL_DMA_Init+0x1e0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d018      	beq.n	800879c <HAL_DMA_Init+0xb8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a56      	ldr	r2, [pc, #344]	; (80088c8 <HAL_DMA_Init+0x1e4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a54      	ldr	r2, [pc, #336]	; (80088cc <HAL_DMA_Init+0x1e8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00e      	beq.n	800879c <HAL_DMA_Init+0xb8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a53      	ldr	r2, [pc, #332]	; (80088d0 <HAL_DMA_Init+0x1ec>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d009      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a51      	ldr	r2, [pc, #324]	; (80088d4 <HAL_DMA_Init+0x1f0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d004      	beq.n	800879c <HAL_DMA_Init+0xb8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a50      	ldr	r2, [pc, #320]	; (80088d8 <HAL_DMA_Init+0x1f4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d101      	bne.n	80087a0 <HAL_DMA_Init+0xbc>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <HAL_DMA_Init+0xbe>
 80087a0:	2300      	movs	r3, #0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 813b 	beq.w	8008a1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <HAL_DMA_Init+0x1b8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d04a      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a36      	ldr	r2, [pc, #216]	; (80088a0 <HAL_DMA_Init+0x1bc>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d045      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a34      	ldr	r2, [pc, #208]	; (80088a4 <HAL_DMA_Init+0x1c0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d040      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a33      	ldr	r2, [pc, #204]	; (80088a8 <HAL_DMA_Init+0x1c4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d03b      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a31      	ldr	r2, [pc, #196]	; (80088ac <HAL_DMA_Init+0x1c8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d036      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a30      	ldr	r2, [pc, #192]	; (80088b0 <HAL_DMA_Init+0x1cc>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d031      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	; (80088b4 <HAL_DMA_Init+0x1d0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d02c      	beq.n	8008858 <HAL_DMA_Init+0x174>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2d      	ldr	r2, [pc, #180]	; (80088b8 <HAL_DMA_Init+0x1d4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d027      	beq.n	8008858 <HAL_DMA_Init+0x174>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2b      	ldr	r2, [pc, #172]	; (80088bc <HAL_DMA_Init+0x1d8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_DMA_Init+0x174>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <HAL_DMA_Init+0x1dc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d01d      	beq.n	8008858 <HAL_DMA_Init+0x174>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a28      	ldr	r2, [pc, #160]	; (80088c4 <HAL_DMA_Init+0x1e0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_DMA_Init+0x174>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a27      	ldr	r2, [pc, #156]	; (80088c8 <HAL_DMA_Init+0x1e4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_DMA_Init+0x174>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a25      	ldr	r2, [pc, #148]	; (80088cc <HAL_DMA_Init+0x1e8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_DMA_Init+0x174>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <HAL_DMA_Init+0x1ec>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_DMA_Init+0x174>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a22      	ldr	r2, [pc, #136]	; (80088d4 <HAL_DMA_Init+0x1f0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_DMA_Init+0x174>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <HAL_DMA_Init+0x1f4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d108      	bne.n	800886a <HAL_DMA_Init+0x186>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e007      	b.n	800887a <HAL_DMA_Init+0x196>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0201 	bic.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800887a:	e02f      	b.n	80088dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800887c:	f7fe fa8c 	bl	8006d98 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b05      	cmp	r3, #5
 8008888:	d928      	bls.n	80088dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2203      	movs	r2, #3
 8008894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e246      	b.n	8008d2a <HAL_DMA_Init+0x646>
 800889c:	40020010 	.word	0x40020010
 80088a0:	40020028 	.word	0x40020028
 80088a4:	40020040 	.word	0x40020040
 80088a8:	40020058 	.word	0x40020058
 80088ac:	40020070 	.word	0x40020070
 80088b0:	40020088 	.word	0x40020088
 80088b4:	400200a0 	.word	0x400200a0
 80088b8:	400200b8 	.word	0x400200b8
 80088bc:	40020410 	.word	0x40020410
 80088c0:	40020428 	.word	0x40020428
 80088c4:	40020440 	.word	0x40020440
 80088c8:	40020458 	.word	0x40020458
 80088cc:	40020470 	.word	0x40020470
 80088d0:	40020488 	.word	0x40020488
 80088d4:	400204a0 	.word	0x400204a0
 80088d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1c8      	bne.n	800887c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4b83      	ldr	r3, [pc, #524]	; (8008b04 <HAL_DMA_Init+0x420>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008902:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800890e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800891a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b04      	cmp	r3, #4
 800892e:	d107      	bne.n	8008940 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	4313      	orrs	r3, r2
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008940:	4b71      	ldr	r3, [pc, #452]	; (8008b08 <HAL_DMA_Init+0x424>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b71      	ldr	r3, [pc, #452]	; (8008b0c <HAL_DMA_Init+0x428>)
 8008946:	4013      	ands	r3, r2
 8008948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800894c:	d328      	bcc.n	80089a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b28      	cmp	r3, #40	; 0x28
 8008954:	d903      	bls.n	800895e <HAL_DMA_Init+0x27a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b2e      	cmp	r3, #46	; 0x2e
 800895c:	d917      	bls.n	800898e <HAL_DMA_Init+0x2aa>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b3e      	cmp	r3, #62	; 0x3e
 8008964:	d903      	bls.n	800896e <HAL_DMA_Init+0x28a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b42      	cmp	r3, #66	; 0x42
 800896c:	d90f      	bls.n	800898e <HAL_DMA_Init+0x2aa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b46      	cmp	r3, #70	; 0x46
 8008974:	d903      	bls.n	800897e <HAL_DMA_Init+0x29a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b48      	cmp	r3, #72	; 0x48
 800897c:	d907      	bls.n	800898e <HAL_DMA_Init+0x2aa>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b4e      	cmp	r3, #78	; 0x4e
 8008984:	d905      	bls.n	8008992 <HAL_DMA_Init+0x2ae>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b52      	cmp	r3, #82	; 0x52
 800898c:	d801      	bhi.n	8008992 <HAL_DMA_Init+0x2ae>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <HAL_DMA_Init+0x2b0>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800899e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d117      	bne.n	80089fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f002 fb33 	bl	800b048 <DMA_CheckFifoParam>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e197      	b.n	8008d2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f002 fa6e 	bl	800aee4 <DMA_CalcBaseAndBitshift>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	223f      	movs	r2, #63	; 0x3f
 8008a16:	409a      	lsls	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	e0cd      	b.n	8008bba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a3b      	ldr	r2, [pc, #236]	; (8008b10 <HAL_DMA_Init+0x42c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a39      	ldr	r2, [pc, #228]	; (8008b14 <HAL_DMA_Init+0x430>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a38      	ldr	r2, [pc, #224]	; (8008b18 <HAL_DMA_Init+0x434>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a36      	ldr	r2, [pc, #216]	; (8008b1c <HAL_DMA_Init+0x438>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a35      	ldr	r2, [pc, #212]	; (8008b20 <HAL_DMA_Init+0x43c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a33      	ldr	r2, [pc, #204]	; (8008b24 <HAL_DMA_Init+0x440>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a32      	ldr	r2, [pc, #200]	; (8008b28 <HAL_DMA_Init+0x444>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_Init+0x38a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a30      	ldr	r2, [pc, #192]	; (8008b2c <HAL_DMA_Init+0x448>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d101      	bne.n	8008a72 <HAL_DMA_Init+0x38e>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <HAL_DMA_Init+0x390>
 8008a72:	2300      	movs	r3, #0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8097 	beq.w	8008ba8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a24      	ldr	r2, [pc, #144]	; (8008b10 <HAL_DMA_Init+0x42c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d021      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <HAL_DMA_Init+0x430>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01c      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <HAL_DMA_Init+0x434>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d017      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1f      	ldr	r2, [pc, #124]	; (8008b1c <HAL_DMA_Init+0x438>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d012      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <HAL_DMA_Init+0x43c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00d      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	; (8008b24 <HAL_DMA_Init+0x440>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d008      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <HAL_DMA_Init+0x444>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d003      	beq.n	8008ac8 <HAL_DMA_Init+0x3e4>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <HAL_DMA_Init+0x448>)
 8008ac6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <HAL_DMA_Init+0x44c>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d021      	beq.n	8008b34 <HAL_DMA_Init+0x450>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d102      	bne.n	8008afe <HAL_DMA_Init+0x41a>
 8008af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008afc:	e01b      	b.n	8008b36 <HAL_DMA_Init+0x452>
 8008afe:	2300      	movs	r3, #0
 8008b00:	e019      	b.n	8008b36 <HAL_DMA_Init+0x452>
 8008b02:	bf00      	nop
 8008b04:	fe10803f 	.word	0xfe10803f
 8008b08:	5c001000 	.word	0x5c001000
 8008b0c:	ffff0000 	.word	0xffff0000
 8008b10:	58025408 	.word	0x58025408
 8008b14:	5802541c 	.word	0x5802541c
 8008b18:	58025430 	.word	0x58025430
 8008b1c:	58025444 	.word	0x58025444
 8008b20:	58025458 	.word	0x58025458
 8008b24:	5802546c 	.word	0x5802546c
 8008b28:	58025480 	.word	0x58025480
 8008b2c:	58025494 	.word	0x58025494
 8008b30:	fffe000f 	.word	0xfffe000f
 8008b34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68d2      	ldr	r2, [r2, #12]
 8008b3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008b44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008b64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4b6e      	ldr	r3, [pc, #440]	; (8008d34 <HAL_DMA_Init+0x650>)
 8008b7c:	4413      	add	r3, r2
 8008b7e:	4a6e      	ldr	r2, [pc, #440]	; (8008d38 <HAL_DMA_Init+0x654>)
 8008b80:	fba2 2303 	umull	r2, r3, r2, r3
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	009a      	lsls	r2, r3, #2
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f002 f9a9 	bl	800aee4 <DMA_CalcBaseAndBitshift>
 8008b92:	4603      	mov	r3, r0
 8008b94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9a:	f003 031f 	and.w	r3, r3, #31
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	409a      	lsls	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	e008      	b.n	8008bba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2240      	movs	r2, #64	; 0x40
 8008bac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e0b7      	b.n	8008d2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a5f      	ldr	r2, [pc, #380]	; (8008d3c <HAL_DMA_Init+0x658>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d072      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a5d      	ldr	r2, [pc, #372]	; (8008d40 <HAL_DMA_Init+0x65c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d06d      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a5c      	ldr	r2, [pc, #368]	; (8008d44 <HAL_DMA_Init+0x660>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d068      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a5a      	ldr	r2, [pc, #360]	; (8008d48 <HAL_DMA_Init+0x664>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d063      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a59      	ldr	r2, [pc, #356]	; (8008d4c <HAL_DMA_Init+0x668>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d05e      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a57      	ldr	r2, [pc, #348]	; (8008d50 <HAL_DMA_Init+0x66c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d059      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a56      	ldr	r2, [pc, #344]	; (8008d54 <HAL_DMA_Init+0x670>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d054      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a54      	ldr	r2, [pc, #336]	; (8008d58 <HAL_DMA_Init+0x674>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d04f      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a53      	ldr	r2, [pc, #332]	; (8008d5c <HAL_DMA_Init+0x678>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d04a      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a51      	ldr	r2, [pc, #324]	; (8008d60 <HAL_DMA_Init+0x67c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d045      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a50      	ldr	r2, [pc, #320]	; (8008d64 <HAL_DMA_Init+0x680>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d040      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a4e      	ldr	r2, [pc, #312]	; (8008d68 <HAL_DMA_Init+0x684>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d03b      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a4d      	ldr	r2, [pc, #308]	; (8008d6c <HAL_DMA_Init+0x688>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d036      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a4b      	ldr	r2, [pc, #300]	; (8008d70 <HAL_DMA_Init+0x68c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d031      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a4a      	ldr	r2, [pc, #296]	; (8008d74 <HAL_DMA_Init+0x690>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d02c      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a48      	ldr	r2, [pc, #288]	; (8008d78 <HAL_DMA_Init+0x694>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d027      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a47      	ldr	r2, [pc, #284]	; (8008d7c <HAL_DMA_Init+0x698>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d022      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a45      	ldr	r2, [pc, #276]	; (8008d80 <HAL_DMA_Init+0x69c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01d      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a44      	ldr	r2, [pc, #272]	; (8008d84 <HAL_DMA_Init+0x6a0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d018      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a42      	ldr	r2, [pc, #264]	; (8008d88 <HAL_DMA_Init+0x6a4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d013      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a41      	ldr	r2, [pc, #260]	; (8008d8c <HAL_DMA_Init+0x6a8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00e      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a3f      	ldr	r2, [pc, #252]	; (8008d90 <HAL_DMA_Init+0x6ac>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d009      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a3e      	ldr	r2, [pc, #248]	; (8008d94 <HAL_DMA_Init+0x6b0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d004      	beq.n	8008caa <HAL_DMA_Init+0x5c6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a3c      	ldr	r2, [pc, #240]	; (8008d98 <HAL_DMA_Init+0x6b4>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d101      	bne.n	8008cae <HAL_DMA_Init+0x5ca>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <HAL_DMA_Init+0x5cc>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d032      	beq.n	8008d1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f002 fa43 	bl	800b140 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b80      	cmp	r3, #128	; 0x80
 8008cc0:	d102      	bne.n	8008cc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008cdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d010      	beq.n	8008d08 <HAL_DMA_Init+0x624>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d80c      	bhi.n	8008d08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f002 fac0 	bl	800b274 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	e008      	b.n	8008d1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	a7fdabf8 	.word	0xa7fdabf8
 8008d38:	cccccccd 	.word	0xcccccccd
 8008d3c:	40020010 	.word	0x40020010
 8008d40:	40020028 	.word	0x40020028
 8008d44:	40020040 	.word	0x40020040
 8008d48:	40020058 	.word	0x40020058
 8008d4c:	40020070 	.word	0x40020070
 8008d50:	40020088 	.word	0x40020088
 8008d54:	400200a0 	.word	0x400200a0
 8008d58:	400200b8 	.word	0x400200b8
 8008d5c:	40020410 	.word	0x40020410
 8008d60:	40020428 	.word	0x40020428
 8008d64:	40020440 	.word	0x40020440
 8008d68:	40020458 	.word	0x40020458
 8008d6c:	40020470 	.word	0x40020470
 8008d70:	40020488 	.word	0x40020488
 8008d74:	400204a0 	.word	0x400204a0
 8008d78:	400204b8 	.word	0x400204b8
 8008d7c:	58025408 	.word	0x58025408
 8008d80:	5802541c 	.word	0x5802541c
 8008d84:	58025430 	.word	0x58025430
 8008d88:	58025444 	.word	0x58025444
 8008d8c:	58025458 	.word	0x58025458
 8008d90:	5802546c 	.word	0x5802546c
 8008d94:	58025480 	.word	0x58025480
 8008d98:	58025494 	.word	0x58025494

08008d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e226      	b.n	8009206 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_DMA_Start_IT+0x2a>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e21f      	b.n	8009206 <HAL_DMA_Start_IT+0x46a>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	f040 820a 	bne.w	80091f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a68      	ldr	r2, [pc, #416]	; (8008f90 <HAL_DMA_Start_IT+0x1f4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d04a      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a66      	ldr	r2, [pc, #408]	; (8008f94 <HAL_DMA_Start_IT+0x1f8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d045      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a65      	ldr	r2, [pc, #404]	; (8008f98 <HAL_DMA_Start_IT+0x1fc>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d040      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a63      	ldr	r2, [pc, #396]	; (8008f9c <HAL_DMA_Start_IT+0x200>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d03b      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a62      	ldr	r2, [pc, #392]	; (8008fa0 <HAL_DMA_Start_IT+0x204>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d036      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a60      	ldr	r2, [pc, #384]	; (8008fa4 <HAL_DMA_Start_IT+0x208>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d031      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a5f      	ldr	r2, [pc, #380]	; (8008fa8 <HAL_DMA_Start_IT+0x20c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d02c      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a5d      	ldr	r2, [pc, #372]	; (8008fac <HAL_DMA_Start_IT+0x210>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d027      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a5c      	ldr	r2, [pc, #368]	; (8008fb0 <HAL_DMA_Start_IT+0x214>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d022      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a5a      	ldr	r2, [pc, #360]	; (8008fb4 <HAL_DMA_Start_IT+0x218>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d01d      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a59      	ldr	r2, [pc, #356]	; (8008fb8 <HAL_DMA_Start_IT+0x21c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d018      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a57      	ldr	r2, [pc, #348]	; (8008fbc <HAL_DMA_Start_IT+0x220>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a56      	ldr	r2, [pc, #344]	; (8008fc0 <HAL_DMA_Start_IT+0x224>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00e      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a54      	ldr	r2, [pc, #336]	; (8008fc4 <HAL_DMA_Start_IT+0x228>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d009      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a53      	ldr	r2, [pc, #332]	; (8008fc8 <HAL_DMA_Start_IT+0x22c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_DMA_Start_IT+0xee>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a51      	ldr	r2, [pc, #324]	; (8008fcc <HAL_DMA_Start_IT+0x230>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <HAL_DMA_Start_IT+0x100>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e007      	b.n	8008eac <HAL_DMA_Start_IT+0x110>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0201 	bic.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f001 fe6a 	bl	800ab8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a34      	ldr	r2, [pc, #208]	; (8008f90 <HAL_DMA_Start_IT+0x1f4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d04a      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a33      	ldr	r2, [pc, #204]	; (8008f94 <HAL_DMA_Start_IT+0x1f8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d045      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a31      	ldr	r2, [pc, #196]	; (8008f98 <HAL_DMA_Start_IT+0x1fc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d040      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a30      	ldr	r2, [pc, #192]	; (8008f9c <HAL_DMA_Start_IT+0x200>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d03b      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a2e      	ldr	r2, [pc, #184]	; (8008fa0 <HAL_DMA_Start_IT+0x204>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d036      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <HAL_DMA_Start_IT+0x208>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d031      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a2b      	ldr	r2, [pc, #172]	; (8008fa8 <HAL_DMA_Start_IT+0x20c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d02c      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <HAL_DMA_Start_IT+0x210>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d027      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a28      	ldr	r2, [pc, #160]	; (8008fb0 <HAL_DMA_Start_IT+0x214>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d022      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a27      	ldr	r2, [pc, #156]	; (8008fb4 <HAL_DMA_Start_IT+0x218>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01d      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a25      	ldr	r2, [pc, #148]	; (8008fb8 <HAL_DMA_Start_IT+0x21c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d018      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a24      	ldr	r2, [pc, #144]	; (8008fbc <HAL_DMA_Start_IT+0x220>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d013      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <HAL_DMA_Start_IT+0x224>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00e      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a21      	ldr	r2, [pc, #132]	; (8008fc4 <HAL_DMA_Start_IT+0x228>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d009      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a1f      	ldr	r2, [pc, #124]	; (8008fc8 <HAL_DMA_Start_IT+0x22c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d004      	beq.n	8008f58 <HAL_DMA_Start_IT+0x1bc>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <HAL_DMA_Start_IT+0x230>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d101      	bne.n	8008f5c <HAL_DMA_Start_IT+0x1c0>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e000      	b.n	8008f5e <HAL_DMA_Start_IT+0x1c2>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d036      	beq.n	8008fd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f023 021e 	bic.w	r2, r3, #30
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0216 	orr.w	r2, r2, #22
 8008f74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d03e      	beq.n	8008ffc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0208 	orr.w	r2, r2, #8
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	e035      	b.n	8008ffc <HAL_DMA_Start_IT+0x260>
 8008f90:	40020010 	.word	0x40020010
 8008f94:	40020028 	.word	0x40020028
 8008f98:	40020040 	.word	0x40020040
 8008f9c:	40020058 	.word	0x40020058
 8008fa0:	40020070 	.word	0x40020070
 8008fa4:	40020088 	.word	0x40020088
 8008fa8:	400200a0 	.word	0x400200a0
 8008fac:	400200b8 	.word	0x400200b8
 8008fb0:	40020410 	.word	0x40020410
 8008fb4:	40020428 	.word	0x40020428
 8008fb8:	40020440 	.word	0x40020440
 8008fbc:	40020458 	.word	0x40020458
 8008fc0:	40020470 	.word	0x40020470
 8008fc4:	40020488 	.word	0x40020488
 8008fc8:	400204a0 	.word	0x400204a0
 8008fcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f023 020e 	bic.w	r2, r3, #14
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 020a 	orr.w	r2, r2, #10
 8008fe2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0204 	orr.w	r2, r2, #4
 8008ffa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a83      	ldr	r2, [pc, #524]	; (8009210 <HAL_DMA_Start_IT+0x474>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d072      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a82      	ldr	r2, [pc, #520]	; (8009214 <HAL_DMA_Start_IT+0x478>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d06d      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a80      	ldr	r2, [pc, #512]	; (8009218 <HAL_DMA_Start_IT+0x47c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d068      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a7f      	ldr	r2, [pc, #508]	; (800921c <HAL_DMA_Start_IT+0x480>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d063      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a7d      	ldr	r2, [pc, #500]	; (8009220 <HAL_DMA_Start_IT+0x484>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d05e      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a7c      	ldr	r2, [pc, #496]	; (8009224 <HAL_DMA_Start_IT+0x488>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d059      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a7a      	ldr	r2, [pc, #488]	; (8009228 <HAL_DMA_Start_IT+0x48c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d054      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a79      	ldr	r2, [pc, #484]	; (800922c <HAL_DMA_Start_IT+0x490>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d04f      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a77      	ldr	r2, [pc, #476]	; (8009230 <HAL_DMA_Start_IT+0x494>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d04a      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a76      	ldr	r2, [pc, #472]	; (8009234 <HAL_DMA_Start_IT+0x498>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d045      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a74      	ldr	r2, [pc, #464]	; (8009238 <HAL_DMA_Start_IT+0x49c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d040      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a73      	ldr	r2, [pc, #460]	; (800923c <HAL_DMA_Start_IT+0x4a0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d03b      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a71      	ldr	r2, [pc, #452]	; (8009240 <HAL_DMA_Start_IT+0x4a4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d036      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a70      	ldr	r2, [pc, #448]	; (8009244 <HAL_DMA_Start_IT+0x4a8>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d031      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a6e      	ldr	r2, [pc, #440]	; (8009248 <HAL_DMA_Start_IT+0x4ac>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d02c      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a6d      	ldr	r2, [pc, #436]	; (800924c <HAL_DMA_Start_IT+0x4b0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d027      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a6b      	ldr	r2, [pc, #428]	; (8009250 <HAL_DMA_Start_IT+0x4b4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d022      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a6a      	ldr	r2, [pc, #424]	; (8009254 <HAL_DMA_Start_IT+0x4b8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d01d      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a68      	ldr	r2, [pc, #416]	; (8009258 <HAL_DMA_Start_IT+0x4bc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d018      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a67      	ldr	r2, [pc, #412]	; (800925c <HAL_DMA_Start_IT+0x4c0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d013      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a65      	ldr	r2, [pc, #404]	; (8009260 <HAL_DMA_Start_IT+0x4c4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00e      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a64      	ldr	r2, [pc, #400]	; (8009264 <HAL_DMA_Start_IT+0x4c8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d009      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a62      	ldr	r2, [pc, #392]	; (8009268 <HAL_DMA_Start_IT+0x4cc>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d004      	beq.n	80090ec <HAL_DMA_Start_IT+0x350>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a61      	ldr	r2, [pc, #388]	; (800926c <HAL_DMA_Start_IT+0x4d0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d101      	bne.n	80090f0 <HAL_DMA_Start_IT+0x354>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e000      	b.n	80090f2 <HAL_DMA_Start_IT+0x356>
 80090f0:	2300      	movs	r3, #0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01a      	beq.n	800912c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009112:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800912a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a37      	ldr	r2, [pc, #220]	; (8009210 <HAL_DMA_Start_IT+0x474>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d04a      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a36      	ldr	r2, [pc, #216]	; (8009214 <HAL_DMA_Start_IT+0x478>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d045      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a34      	ldr	r2, [pc, #208]	; (8009218 <HAL_DMA_Start_IT+0x47c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d040      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a33      	ldr	r2, [pc, #204]	; (800921c <HAL_DMA_Start_IT+0x480>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d03b      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a31      	ldr	r2, [pc, #196]	; (8009220 <HAL_DMA_Start_IT+0x484>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d036      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a30      	ldr	r2, [pc, #192]	; (8009224 <HAL_DMA_Start_IT+0x488>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d031      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a2e      	ldr	r2, [pc, #184]	; (8009228 <HAL_DMA_Start_IT+0x48c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d02c      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a2d      	ldr	r2, [pc, #180]	; (800922c <HAL_DMA_Start_IT+0x490>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d027      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a2b      	ldr	r2, [pc, #172]	; (8009230 <HAL_DMA_Start_IT+0x494>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d022      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a2a      	ldr	r2, [pc, #168]	; (8009234 <HAL_DMA_Start_IT+0x498>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d01d      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a28      	ldr	r2, [pc, #160]	; (8009238 <HAL_DMA_Start_IT+0x49c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d018      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a27      	ldr	r2, [pc, #156]	; (800923c <HAL_DMA_Start_IT+0x4a0>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d013      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a25      	ldr	r2, [pc, #148]	; (8009240 <HAL_DMA_Start_IT+0x4a4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00e      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a24      	ldr	r2, [pc, #144]	; (8009244 <HAL_DMA_Start_IT+0x4a8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d009      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a22      	ldr	r2, [pc, #136]	; (8009248 <HAL_DMA_Start_IT+0x4ac>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d004      	beq.n	80091cc <HAL_DMA_Start_IT+0x430>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a21      	ldr	r2, [pc, #132]	; (800924c <HAL_DMA_Start_IT+0x4b0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d108      	bne.n	80091de <HAL_DMA_Start_IT+0x442>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e012      	b.n	8009204 <HAL_DMA_Start_IT+0x468>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	e009      	b.n	8009204 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40020010 	.word	0x40020010
 8009214:	40020028 	.word	0x40020028
 8009218:	40020040 	.word	0x40020040
 800921c:	40020058 	.word	0x40020058
 8009220:	40020070 	.word	0x40020070
 8009224:	40020088 	.word	0x40020088
 8009228:	400200a0 	.word	0x400200a0
 800922c:	400200b8 	.word	0x400200b8
 8009230:	40020410 	.word	0x40020410
 8009234:	40020428 	.word	0x40020428
 8009238:	40020440 	.word	0x40020440
 800923c:	40020458 	.word	0x40020458
 8009240:	40020470 	.word	0x40020470
 8009244:	40020488 	.word	0x40020488
 8009248:	400204a0 	.word	0x400204a0
 800924c:	400204b8 	.word	0x400204b8
 8009250:	58025408 	.word	0x58025408
 8009254:	5802541c 	.word	0x5802541c
 8009258:	58025430 	.word	0x58025430
 800925c:	58025444 	.word	0x58025444
 8009260:	58025458 	.word	0x58025458
 8009264:	5802546c 	.word	0x5802546c
 8009268:	58025480 	.word	0x58025480
 800926c:	58025494 	.word	0x58025494

08009270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009278:	f7fd fd8e 	bl	8006d98 <HAL_GetTick>
 800927c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e2dc      	b.n	8009842 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d008      	beq.n	80092a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2280      	movs	r2, #128	; 0x80
 8009298:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e2cd      	b.n	8009842 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a76      	ldr	r2, [pc, #472]	; (8009484 <HAL_DMA_Abort+0x214>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d04a      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a74      	ldr	r2, [pc, #464]	; (8009488 <HAL_DMA_Abort+0x218>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d045      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a73      	ldr	r2, [pc, #460]	; (800948c <HAL_DMA_Abort+0x21c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d040      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a71      	ldr	r2, [pc, #452]	; (8009490 <HAL_DMA_Abort+0x220>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d03b      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a70      	ldr	r2, [pc, #448]	; (8009494 <HAL_DMA_Abort+0x224>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d036      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a6e      	ldr	r2, [pc, #440]	; (8009498 <HAL_DMA_Abort+0x228>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d031      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a6d      	ldr	r2, [pc, #436]	; (800949c <HAL_DMA_Abort+0x22c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d02c      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a6b      	ldr	r2, [pc, #428]	; (80094a0 <HAL_DMA_Abort+0x230>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d027      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a6a      	ldr	r2, [pc, #424]	; (80094a4 <HAL_DMA_Abort+0x234>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d022      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a68      	ldr	r2, [pc, #416]	; (80094a8 <HAL_DMA_Abort+0x238>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d01d      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a67      	ldr	r2, [pc, #412]	; (80094ac <HAL_DMA_Abort+0x23c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d018      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a65      	ldr	r2, [pc, #404]	; (80094b0 <HAL_DMA_Abort+0x240>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d013      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a64      	ldr	r2, [pc, #400]	; (80094b4 <HAL_DMA_Abort+0x244>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00e      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a62      	ldr	r2, [pc, #392]	; (80094b8 <HAL_DMA_Abort+0x248>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d009      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a61      	ldr	r2, [pc, #388]	; (80094bc <HAL_DMA_Abort+0x24c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d004      	beq.n	8009346 <HAL_DMA_Abort+0xd6>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a5f      	ldr	r2, [pc, #380]	; (80094c0 <HAL_DMA_Abort+0x250>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d101      	bne.n	800934a <HAL_DMA_Abort+0xda>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <HAL_DMA_Abort+0xdc>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d013      	beq.n	8009378 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 021e 	bic.w	r2, r2, #30
 800935e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800936e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e00a      	b.n	800938e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f022 020e 	bic.w	r2, r2, #14
 8009386:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a3c      	ldr	r2, [pc, #240]	; (8009484 <HAL_DMA_Abort+0x214>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d072      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a3a      	ldr	r2, [pc, #232]	; (8009488 <HAL_DMA_Abort+0x218>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d06d      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a39      	ldr	r2, [pc, #228]	; (800948c <HAL_DMA_Abort+0x21c>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d068      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a37      	ldr	r2, [pc, #220]	; (8009490 <HAL_DMA_Abort+0x220>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d063      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a36      	ldr	r2, [pc, #216]	; (8009494 <HAL_DMA_Abort+0x224>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d05e      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a34      	ldr	r2, [pc, #208]	; (8009498 <HAL_DMA_Abort+0x228>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d059      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a33      	ldr	r2, [pc, #204]	; (800949c <HAL_DMA_Abort+0x22c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d054      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a31      	ldr	r2, [pc, #196]	; (80094a0 <HAL_DMA_Abort+0x230>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d04f      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a30      	ldr	r2, [pc, #192]	; (80094a4 <HAL_DMA_Abort+0x234>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d04a      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2e      	ldr	r2, [pc, #184]	; (80094a8 <HAL_DMA_Abort+0x238>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d045      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2d      	ldr	r2, [pc, #180]	; (80094ac <HAL_DMA_Abort+0x23c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d040      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a2b      	ldr	r2, [pc, #172]	; (80094b0 <HAL_DMA_Abort+0x240>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d03b      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <HAL_DMA_Abort+0x244>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d036      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a28      	ldr	r2, [pc, #160]	; (80094b8 <HAL_DMA_Abort+0x248>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d031      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a27      	ldr	r2, [pc, #156]	; (80094bc <HAL_DMA_Abort+0x24c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d02c      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a25      	ldr	r2, [pc, #148]	; (80094c0 <HAL_DMA_Abort+0x250>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d027      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a24      	ldr	r2, [pc, #144]	; (80094c4 <HAL_DMA_Abort+0x254>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d022      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a22      	ldr	r2, [pc, #136]	; (80094c8 <HAL_DMA_Abort+0x258>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01d      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a21      	ldr	r2, [pc, #132]	; (80094cc <HAL_DMA_Abort+0x25c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d018      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <HAL_DMA_Abort+0x260>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d013      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <HAL_DMA_Abort+0x264>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00e      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1c      	ldr	r2, [pc, #112]	; (80094d8 <HAL_DMA_Abort+0x268>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1b      	ldr	r2, [pc, #108]	; (80094dc <HAL_DMA_Abort+0x26c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_DMA_Abort+0x20e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a19      	ldr	r2, [pc, #100]	; (80094e0 <HAL_DMA_Abort+0x270>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d132      	bne.n	80094e4 <HAL_DMA_Abort+0x274>
 800947e:	2301      	movs	r3, #1
 8009480:	e031      	b.n	80094e6 <HAL_DMA_Abort+0x276>
 8009482:	bf00      	nop
 8009484:	40020010 	.word	0x40020010
 8009488:	40020028 	.word	0x40020028
 800948c:	40020040 	.word	0x40020040
 8009490:	40020058 	.word	0x40020058
 8009494:	40020070 	.word	0x40020070
 8009498:	40020088 	.word	0x40020088
 800949c:	400200a0 	.word	0x400200a0
 80094a0:	400200b8 	.word	0x400200b8
 80094a4:	40020410 	.word	0x40020410
 80094a8:	40020428 	.word	0x40020428
 80094ac:	40020440 	.word	0x40020440
 80094b0:	40020458 	.word	0x40020458
 80094b4:	40020470 	.word	0x40020470
 80094b8:	40020488 	.word	0x40020488
 80094bc:	400204a0 	.word	0x400204a0
 80094c0:	400204b8 	.word	0x400204b8
 80094c4:	58025408 	.word	0x58025408
 80094c8:	5802541c 	.word	0x5802541c
 80094cc:	58025430 	.word	0x58025430
 80094d0:	58025444 	.word	0x58025444
 80094d4:	58025458 	.word	0x58025458
 80094d8:	5802546c 	.word	0x5802546c
 80094dc:	58025480 	.word	0x58025480
 80094e0:	58025494 	.word	0x58025494
 80094e4:	2300      	movs	r3, #0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a6d      	ldr	r2, [pc, #436]	; (80096b4 <HAL_DMA_Abort+0x444>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d04a      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a6b      	ldr	r2, [pc, #428]	; (80096b8 <HAL_DMA_Abort+0x448>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d045      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a6a      	ldr	r2, [pc, #424]	; (80096bc <HAL_DMA_Abort+0x44c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d040      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a68      	ldr	r2, [pc, #416]	; (80096c0 <HAL_DMA_Abort+0x450>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d03b      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a67      	ldr	r2, [pc, #412]	; (80096c4 <HAL_DMA_Abort+0x454>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d036      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a65      	ldr	r2, [pc, #404]	; (80096c8 <HAL_DMA_Abort+0x458>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d031      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a64      	ldr	r2, [pc, #400]	; (80096cc <HAL_DMA_Abort+0x45c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d02c      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a62      	ldr	r2, [pc, #392]	; (80096d0 <HAL_DMA_Abort+0x460>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d027      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a61      	ldr	r2, [pc, #388]	; (80096d4 <HAL_DMA_Abort+0x464>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d022      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a5f      	ldr	r2, [pc, #380]	; (80096d8 <HAL_DMA_Abort+0x468>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01d      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a5e      	ldr	r2, [pc, #376]	; (80096dc <HAL_DMA_Abort+0x46c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d018      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a5c      	ldr	r2, [pc, #368]	; (80096e0 <HAL_DMA_Abort+0x470>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a5b      	ldr	r2, [pc, #364]	; (80096e4 <HAL_DMA_Abort+0x474>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00e      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a59      	ldr	r2, [pc, #356]	; (80096e8 <HAL_DMA_Abort+0x478>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d009      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a58      	ldr	r2, [pc, #352]	; (80096ec <HAL_DMA_Abort+0x47c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d004      	beq.n	800959a <HAL_DMA_Abort+0x32a>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a56      	ldr	r2, [pc, #344]	; (80096f0 <HAL_DMA_Abort+0x480>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d108      	bne.n	80095ac <HAL_DMA_Abort+0x33c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e007      	b.n	80095bc <HAL_DMA_Abort+0x34c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80095bc:	e013      	b.n	80095e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80095be:	f7fd fbeb 	bl	8006d98 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	d90c      	bls.n	80095e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2203      	movs	r2, #3
 80095d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e12d      	b.n	8009842 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a2f      	ldr	r2, [pc, #188]	; (80096b4 <HAL_DMA_Abort+0x444>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d04a      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a2d      	ldr	r2, [pc, #180]	; (80096b8 <HAL_DMA_Abort+0x448>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d045      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a2c      	ldr	r2, [pc, #176]	; (80096bc <HAL_DMA_Abort+0x44c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d040      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a2a      	ldr	r2, [pc, #168]	; (80096c0 <HAL_DMA_Abort+0x450>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d03b      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a29      	ldr	r2, [pc, #164]	; (80096c4 <HAL_DMA_Abort+0x454>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d036      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a27      	ldr	r2, [pc, #156]	; (80096c8 <HAL_DMA_Abort+0x458>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d031      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a26      	ldr	r2, [pc, #152]	; (80096cc <HAL_DMA_Abort+0x45c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d02c      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a24      	ldr	r2, [pc, #144]	; (80096d0 <HAL_DMA_Abort+0x460>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d027      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a23      	ldr	r2, [pc, #140]	; (80096d4 <HAL_DMA_Abort+0x464>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d022      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a21      	ldr	r2, [pc, #132]	; (80096d8 <HAL_DMA_Abort+0x468>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01d      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a20      	ldr	r2, [pc, #128]	; (80096dc <HAL_DMA_Abort+0x46c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d018      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1e      	ldr	r2, [pc, #120]	; (80096e0 <HAL_DMA_Abort+0x470>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d013      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <HAL_DMA_Abort+0x474>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00e      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a1b      	ldr	r2, [pc, #108]	; (80096e8 <HAL_DMA_Abort+0x478>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d009      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a1a      	ldr	r2, [pc, #104]	; (80096ec <HAL_DMA_Abort+0x47c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <HAL_DMA_Abort+0x422>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a18      	ldr	r2, [pc, #96]	; (80096f0 <HAL_DMA_Abort+0x480>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d101      	bne.n	8009696 <HAL_DMA_Abort+0x426>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <HAL_DMA_Abort+0x428>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d02b      	beq.n	80096f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a6:	f003 031f 	and.w	r3, r3, #31
 80096aa:	223f      	movs	r2, #63	; 0x3f
 80096ac:	409a      	lsls	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	609a      	str	r2, [r3, #8]
 80096b2:	e02a      	b.n	800970a <HAL_DMA_Abort+0x49a>
 80096b4:	40020010 	.word	0x40020010
 80096b8:	40020028 	.word	0x40020028
 80096bc:	40020040 	.word	0x40020040
 80096c0:	40020058 	.word	0x40020058
 80096c4:	40020070 	.word	0x40020070
 80096c8:	40020088 	.word	0x40020088
 80096cc:	400200a0 	.word	0x400200a0
 80096d0:	400200b8 	.word	0x400200b8
 80096d4:	40020410 	.word	0x40020410
 80096d8:	40020428 	.word	0x40020428
 80096dc:	40020440 	.word	0x40020440
 80096e0:	40020458 	.word	0x40020458
 80096e4:	40020470 	.word	0x40020470
 80096e8:	40020488 	.word	0x40020488
 80096ec:	400204a0 	.word	0x400204a0
 80096f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fe:	f003 031f 	and.w	r3, r3, #31
 8009702:	2201      	movs	r2, #1
 8009704:	409a      	lsls	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a4f      	ldr	r2, [pc, #316]	; (800984c <HAL_DMA_Abort+0x5dc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d072      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a4d      	ldr	r2, [pc, #308]	; (8009850 <HAL_DMA_Abort+0x5e0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d06d      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a4c      	ldr	r2, [pc, #304]	; (8009854 <HAL_DMA_Abort+0x5e4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d068      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a4a      	ldr	r2, [pc, #296]	; (8009858 <HAL_DMA_Abort+0x5e8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d063      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a49      	ldr	r2, [pc, #292]	; (800985c <HAL_DMA_Abort+0x5ec>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d05e      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a47      	ldr	r2, [pc, #284]	; (8009860 <HAL_DMA_Abort+0x5f0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d059      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a46      	ldr	r2, [pc, #280]	; (8009864 <HAL_DMA_Abort+0x5f4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d054      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a44      	ldr	r2, [pc, #272]	; (8009868 <HAL_DMA_Abort+0x5f8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d04f      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a43      	ldr	r2, [pc, #268]	; (800986c <HAL_DMA_Abort+0x5fc>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d04a      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a41      	ldr	r2, [pc, #260]	; (8009870 <HAL_DMA_Abort+0x600>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d045      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a40      	ldr	r2, [pc, #256]	; (8009874 <HAL_DMA_Abort+0x604>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d040      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a3e      	ldr	r2, [pc, #248]	; (8009878 <HAL_DMA_Abort+0x608>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d03b      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a3d      	ldr	r2, [pc, #244]	; (800987c <HAL_DMA_Abort+0x60c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d036      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a3b      	ldr	r2, [pc, #236]	; (8009880 <HAL_DMA_Abort+0x610>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d031      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3a      	ldr	r2, [pc, #232]	; (8009884 <HAL_DMA_Abort+0x614>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d02c      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a38      	ldr	r2, [pc, #224]	; (8009888 <HAL_DMA_Abort+0x618>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d027      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a37      	ldr	r2, [pc, #220]	; (800988c <HAL_DMA_Abort+0x61c>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d022      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a35      	ldr	r2, [pc, #212]	; (8009890 <HAL_DMA_Abort+0x620>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d01d      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a34      	ldr	r2, [pc, #208]	; (8009894 <HAL_DMA_Abort+0x624>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d018      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a32      	ldr	r2, [pc, #200]	; (8009898 <HAL_DMA_Abort+0x628>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d013      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a31      	ldr	r2, [pc, #196]	; (800989c <HAL_DMA_Abort+0x62c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00e      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a2f      	ldr	r2, [pc, #188]	; (80098a0 <HAL_DMA_Abort+0x630>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d009      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a2e      	ldr	r2, [pc, #184]	; (80098a4 <HAL_DMA_Abort+0x634>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d004      	beq.n	80097fa <HAL_DMA_Abort+0x58a>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a2c      	ldr	r2, [pc, #176]	; (80098a8 <HAL_DMA_Abort+0x638>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d101      	bne.n	80097fe <HAL_DMA_Abort+0x58e>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <HAL_DMA_Abort+0x590>
 80097fe:	2300      	movs	r3, #0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d015      	beq.n	8009830 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800980c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00c      	beq.n	8009830 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009824:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800982e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40020010 	.word	0x40020010
 8009850:	40020028 	.word	0x40020028
 8009854:	40020040 	.word	0x40020040
 8009858:	40020058 	.word	0x40020058
 800985c:	40020070 	.word	0x40020070
 8009860:	40020088 	.word	0x40020088
 8009864:	400200a0 	.word	0x400200a0
 8009868:	400200b8 	.word	0x400200b8
 800986c:	40020410 	.word	0x40020410
 8009870:	40020428 	.word	0x40020428
 8009874:	40020440 	.word	0x40020440
 8009878:	40020458 	.word	0x40020458
 800987c:	40020470 	.word	0x40020470
 8009880:	40020488 	.word	0x40020488
 8009884:	400204a0 	.word	0x400204a0
 8009888:	400204b8 	.word	0x400204b8
 800988c:	58025408 	.word	0x58025408
 8009890:	5802541c 	.word	0x5802541c
 8009894:	58025430 	.word	0x58025430
 8009898:	58025444 	.word	0x58025444
 800989c:	58025458 	.word	0x58025458
 80098a0:	5802546c 	.word	0x5802546c
 80098a4:	58025480 	.word	0x58025480
 80098a8:	58025494 	.word	0x58025494

080098ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e237      	b.n	8009d2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d004      	beq.n	80098d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2280      	movs	r2, #128	; 0x80
 80098ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e22c      	b.n	8009d2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a5c      	ldr	r2, [pc, #368]	; (8009a4c <HAL_DMA_Abort_IT+0x1a0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d04a      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a5b      	ldr	r2, [pc, #364]	; (8009a50 <HAL_DMA_Abort_IT+0x1a4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d045      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a59      	ldr	r2, [pc, #356]	; (8009a54 <HAL_DMA_Abort_IT+0x1a8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d040      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a58      	ldr	r2, [pc, #352]	; (8009a58 <HAL_DMA_Abort_IT+0x1ac>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d03b      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a56      	ldr	r2, [pc, #344]	; (8009a5c <HAL_DMA_Abort_IT+0x1b0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d036      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a55      	ldr	r2, [pc, #340]	; (8009a60 <HAL_DMA_Abort_IT+0x1b4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d031      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a53      	ldr	r2, [pc, #332]	; (8009a64 <HAL_DMA_Abort_IT+0x1b8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d02c      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a52      	ldr	r2, [pc, #328]	; (8009a68 <HAL_DMA_Abort_IT+0x1bc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d027      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a50      	ldr	r2, [pc, #320]	; (8009a6c <HAL_DMA_Abort_IT+0x1c0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d022      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a4f      	ldr	r2, [pc, #316]	; (8009a70 <HAL_DMA_Abort_IT+0x1c4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d01d      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a4d      	ldr	r2, [pc, #308]	; (8009a74 <HAL_DMA_Abort_IT+0x1c8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d018      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a4c      	ldr	r2, [pc, #304]	; (8009a78 <HAL_DMA_Abort_IT+0x1cc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d013      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a4a      	ldr	r2, [pc, #296]	; (8009a7c <HAL_DMA_Abort_IT+0x1d0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00e      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a49      	ldr	r2, [pc, #292]	; (8009a80 <HAL_DMA_Abort_IT+0x1d4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d009      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a47      	ldr	r2, [pc, #284]	; (8009a84 <HAL_DMA_Abort_IT+0x1d8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_DMA_Abort_IT+0xc8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a46      	ldr	r2, [pc, #280]	; (8009a88 <HAL_DMA_Abort_IT+0x1dc>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d101      	bne.n	8009978 <HAL_DMA_Abort_IT+0xcc>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <HAL_DMA_Abort_IT+0xce>
 8009978:	2300      	movs	r3, #0
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8086 	beq.w	8009a8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2204      	movs	r2, #4
 8009984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a2f      	ldr	r2, [pc, #188]	; (8009a4c <HAL_DMA_Abort_IT+0x1a0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d04a      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2e      	ldr	r2, [pc, #184]	; (8009a50 <HAL_DMA_Abort_IT+0x1a4>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d045      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a2c      	ldr	r2, [pc, #176]	; (8009a54 <HAL_DMA_Abort_IT+0x1a8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d040      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2b      	ldr	r2, [pc, #172]	; (8009a58 <HAL_DMA_Abort_IT+0x1ac>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d03b      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a29      	ldr	r2, [pc, #164]	; (8009a5c <HAL_DMA_Abort_IT+0x1b0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d036      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a28      	ldr	r2, [pc, #160]	; (8009a60 <HAL_DMA_Abort_IT+0x1b4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d031      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <HAL_DMA_Abort_IT+0x1b8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d02c      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a25      	ldr	r2, [pc, #148]	; (8009a68 <HAL_DMA_Abort_IT+0x1bc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d027      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a23      	ldr	r2, [pc, #140]	; (8009a6c <HAL_DMA_Abort_IT+0x1c0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d022      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a22      	ldr	r2, [pc, #136]	; (8009a70 <HAL_DMA_Abort_IT+0x1c4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d01d      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a20      	ldr	r2, [pc, #128]	; (8009a74 <HAL_DMA_Abort_IT+0x1c8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d018      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <HAL_DMA_Abort_IT+0x1cc>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1d      	ldr	r2, [pc, #116]	; (8009a7c <HAL_DMA_Abort_IT+0x1d0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00e      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <HAL_DMA_Abort_IT+0x1d4>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <HAL_DMA_Abort_IT+0x1d8>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <HAL_DMA_Abort_IT+0x17c>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a19      	ldr	r2, [pc, #100]	; (8009a88 <HAL_DMA_Abort_IT+0x1dc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d108      	bne.n	8009a3a <HAL_DMA_Abort_IT+0x18e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e178      	b.n	8009d2c <HAL_DMA_Abort_IT+0x480>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0201 	bic.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	e16f      	b.n	8009d2c <HAL_DMA_Abort_IT+0x480>
 8009a4c:	40020010 	.word	0x40020010
 8009a50:	40020028 	.word	0x40020028
 8009a54:	40020040 	.word	0x40020040
 8009a58:	40020058 	.word	0x40020058
 8009a5c:	40020070 	.word	0x40020070
 8009a60:	40020088 	.word	0x40020088
 8009a64:	400200a0 	.word	0x400200a0
 8009a68:	400200b8 	.word	0x400200b8
 8009a6c:	40020410 	.word	0x40020410
 8009a70:	40020428 	.word	0x40020428
 8009a74:	40020440 	.word	0x40020440
 8009a78:	40020458 	.word	0x40020458
 8009a7c:	40020470 	.word	0x40020470
 8009a80:	40020488 	.word	0x40020488
 8009a84:	400204a0 	.word	0x400204a0
 8009a88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 020e 	bic.w	r2, r2, #14
 8009a9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a6c      	ldr	r2, [pc, #432]	; (8009c54 <HAL_DMA_Abort_IT+0x3a8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d04a      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a6b      	ldr	r2, [pc, #428]	; (8009c58 <HAL_DMA_Abort_IT+0x3ac>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d045      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a69      	ldr	r2, [pc, #420]	; (8009c5c <HAL_DMA_Abort_IT+0x3b0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d040      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a68      	ldr	r2, [pc, #416]	; (8009c60 <HAL_DMA_Abort_IT+0x3b4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d03b      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a66      	ldr	r2, [pc, #408]	; (8009c64 <HAL_DMA_Abort_IT+0x3b8>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d036      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a65      	ldr	r2, [pc, #404]	; (8009c68 <HAL_DMA_Abort_IT+0x3bc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d031      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a63      	ldr	r2, [pc, #396]	; (8009c6c <HAL_DMA_Abort_IT+0x3c0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d02c      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a62      	ldr	r2, [pc, #392]	; (8009c70 <HAL_DMA_Abort_IT+0x3c4>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d027      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a60      	ldr	r2, [pc, #384]	; (8009c74 <HAL_DMA_Abort_IT+0x3c8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d022      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a5f      	ldr	r2, [pc, #380]	; (8009c78 <HAL_DMA_Abort_IT+0x3cc>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d01d      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a5d      	ldr	r2, [pc, #372]	; (8009c7c <HAL_DMA_Abort_IT+0x3d0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d018      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a5c      	ldr	r2, [pc, #368]	; (8009c80 <HAL_DMA_Abort_IT+0x3d4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d013      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a5a      	ldr	r2, [pc, #360]	; (8009c84 <HAL_DMA_Abort_IT+0x3d8>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00e      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a59      	ldr	r2, [pc, #356]	; (8009c88 <HAL_DMA_Abort_IT+0x3dc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d009      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a57      	ldr	r2, [pc, #348]	; (8009c8c <HAL_DMA_Abort_IT+0x3e0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d004      	beq.n	8009b3c <HAL_DMA_Abort_IT+0x290>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a56      	ldr	r2, [pc, #344]	; (8009c90 <HAL_DMA_Abort_IT+0x3e4>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d108      	bne.n	8009b4e <HAL_DMA_Abort_IT+0x2a2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0201 	bic.w	r2, r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e007      	b.n	8009b5e <HAL_DMA_Abort_IT+0x2b2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0201 	bic.w	r2, r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a3c      	ldr	r2, [pc, #240]	; (8009c54 <HAL_DMA_Abort_IT+0x3a8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d072      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a3a      	ldr	r2, [pc, #232]	; (8009c58 <HAL_DMA_Abort_IT+0x3ac>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d06d      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a39      	ldr	r2, [pc, #228]	; (8009c5c <HAL_DMA_Abort_IT+0x3b0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d068      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a37      	ldr	r2, [pc, #220]	; (8009c60 <HAL_DMA_Abort_IT+0x3b4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d063      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a36      	ldr	r2, [pc, #216]	; (8009c64 <HAL_DMA_Abort_IT+0x3b8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d05e      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a34      	ldr	r2, [pc, #208]	; (8009c68 <HAL_DMA_Abort_IT+0x3bc>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d059      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a33      	ldr	r2, [pc, #204]	; (8009c6c <HAL_DMA_Abort_IT+0x3c0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d054      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a31      	ldr	r2, [pc, #196]	; (8009c70 <HAL_DMA_Abort_IT+0x3c4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d04f      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a30      	ldr	r2, [pc, #192]	; (8009c74 <HAL_DMA_Abort_IT+0x3c8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d04a      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a2e      	ldr	r2, [pc, #184]	; (8009c78 <HAL_DMA_Abort_IT+0x3cc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d045      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2d      	ldr	r2, [pc, #180]	; (8009c7c <HAL_DMA_Abort_IT+0x3d0>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d040      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2b      	ldr	r2, [pc, #172]	; (8009c80 <HAL_DMA_Abort_IT+0x3d4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d03b      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a2a      	ldr	r2, [pc, #168]	; (8009c84 <HAL_DMA_Abort_IT+0x3d8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d036      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a28      	ldr	r2, [pc, #160]	; (8009c88 <HAL_DMA_Abort_IT+0x3dc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d031      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a27      	ldr	r2, [pc, #156]	; (8009c8c <HAL_DMA_Abort_IT+0x3e0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d02c      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a25      	ldr	r2, [pc, #148]	; (8009c90 <HAL_DMA_Abort_IT+0x3e4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d027      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a24      	ldr	r2, [pc, #144]	; (8009c94 <HAL_DMA_Abort_IT+0x3e8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d022      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a22      	ldr	r2, [pc, #136]	; (8009c98 <HAL_DMA_Abort_IT+0x3ec>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d01d      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a21      	ldr	r2, [pc, #132]	; (8009c9c <HAL_DMA_Abort_IT+0x3f0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d018      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <HAL_DMA_Abort_IT+0x3f4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d013      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a1e      	ldr	r2, [pc, #120]	; (8009ca4 <HAL_DMA_Abort_IT+0x3f8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d00e      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <HAL_DMA_Abort_IT+0x3fc>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d009      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <HAL_DMA_Abort_IT+0x400>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d004      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x3a2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <HAL_DMA_Abort_IT+0x404>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d132      	bne.n	8009cb4 <HAL_DMA_Abort_IT+0x408>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e031      	b.n	8009cb6 <HAL_DMA_Abort_IT+0x40a>
 8009c52:	bf00      	nop
 8009c54:	40020010 	.word	0x40020010
 8009c58:	40020028 	.word	0x40020028
 8009c5c:	40020040 	.word	0x40020040
 8009c60:	40020058 	.word	0x40020058
 8009c64:	40020070 	.word	0x40020070
 8009c68:	40020088 	.word	0x40020088
 8009c6c:	400200a0 	.word	0x400200a0
 8009c70:	400200b8 	.word	0x400200b8
 8009c74:	40020410 	.word	0x40020410
 8009c78:	40020428 	.word	0x40020428
 8009c7c:	40020440 	.word	0x40020440
 8009c80:	40020458 	.word	0x40020458
 8009c84:	40020470 	.word	0x40020470
 8009c88:	40020488 	.word	0x40020488
 8009c8c:	400204a0 	.word	0x400204a0
 8009c90:	400204b8 	.word	0x400204b8
 8009c94:	58025408 	.word	0x58025408
 8009c98:	5802541c 	.word	0x5802541c
 8009c9c:	58025430 	.word	0x58025430
 8009ca0:	58025444 	.word	0x58025444
 8009ca4:	58025458 	.word	0x58025458
 8009ca8:	5802546c 	.word	0x5802546c
 8009cac:	58025480 	.word	0x58025480
 8009cb0:	58025494 	.word	0x58025494
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d028      	beq.n	8009d0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	2201      	movs	r2, #1
 8009cda:	409a      	lsls	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ce8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop

08009d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009d44:	4b67      	ldr	r3, [pc, #412]	; (8009ee4 <HAL_DMA_IRQHandler+0x1ac>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a67      	ldr	r2, [pc, #412]	; (8009ee8 <HAL_DMA_IRQHandler+0x1b0>)
 8009d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4e:	0a9b      	lsrs	r3, r3, #10
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a5f      	ldr	r2, [pc, #380]	; (8009eec <HAL_DMA_IRQHandler+0x1b4>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d04a      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a5d      	ldr	r2, [pc, #372]	; (8009ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d045      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a5c      	ldr	r2, [pc, #368]	; (8009ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d040      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a5a      	ldr	r2, [pc, #360]	; (8009ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d03b      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a59      	ldr	r2, [pc, #356]	; (8009efc <HAL_DMA_IRQHandler+0x1c4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d036      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a57      	ldr	r2, [pc, #348]	; (8009f00 <HAL_DMA_IRQHandler+0x1c8>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d031      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a56      	ldr	r2, [pc, #344]	; (8009f04 <HAL_DMA_IRQHandler+0x1cc>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d02c      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a54      	ldr	r2, [pc, #336]	; (8009f08 <HAL_DMA_IRQHandler+0x1d0>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d027      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a53      	ldr	r2, [pc, #332]	; (8009f0c <HAL_DMA_IRQHandler+0x1d4>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d022      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a51      	ldr	r2, [pc, #324]	; (8009f10 <HAL_DMA_IRQHandler+0x1d8>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d01d      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a50      	ldr	r2, [pc, #320]	; (8009f14 <HAL_DMA_IRQHandler+0x1dc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d018      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a4e      	ldr	r2, [pc, #312]	; (8009f18 <HAL_DMA_IRQHandler+0x1e0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d013      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a4d      	ldr	r2, [pc, #308]	; (8009f1c <HAL_DMA_IRQHandler+0x1e4>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00e      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a4b      	ldr	r2, [pc, #300]	; (8009f20 <HAL_DMA_IRQHandler+0x1e8>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d009      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a4a      	ldr	r2, [pc, #296]	; (8009f24 <HAL_DMA_IRQHandler+0x1ec>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d004      	beq.n	8009e0a <HAL_DMA_IRQHandler+0xd2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a48      	ldr	r2, [pc, #288]	; (8009f28 <HAL_DMA_IRQHandler+0x1f0>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d101      	bne.n	8009e0e <HAL_DMA_IRQHandler+0xd6>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e000      	b.n	8009e10 <HAL_DMA_IRQHandler+0xd8>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 842b 	beq.w	800a66c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1a:	f003 031f 	and.w	r3, r3, #31
 8009e1e:	2208      	movs	r2, #8
 8009e20:	409a      	lsls	r2, r3
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	4013      	ands	r3, r2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80a2 	beq.w	8009f70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a2e      	ldr	r2, [pc, #184]	; (8009eec <HAL_DMA_IRQHandler+0x1b4>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d04a      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a2d      	ldr	r2, [pc, #180]	; (8009ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d045      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a2b      	ldr	r2, [pc, #172]	; (8009ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d040      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d03b      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a28      	ldr	r2, [pc, #160]	; (8009efc <HAL_DMA_IRQHandler+0x1c4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d036      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a27      	ldr	r2, [pc, #156]	; (8009f00 <HAL_DMA_IRQHandler+0x1c8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d031      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a25      	ldr	r2, [pc, #148]	; (8009f04 <HAL_DMA_IRQHandler+0x1cc>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d02c      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a24      	ldr	r2, [pc, #144]	; (8009f08 <HAL_DMA_IRQHandler+0x1d0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d027      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a22      	ldr	r2, [pc, #136]	; (8009f0c <HAL_DMA_IRQHandler+0x1d4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d022      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a21      	ldr	r2, [pc, #132]	; (8009f10 <HAL_DMA_IRQHandler+0x1d8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d01d      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1f      	ldr	r2, [pc, #124]	; (8009f14 <HAL_DMA_IRQHandler+0x1dc>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d018      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1e      	ldr	r2, [pc, #120]	; (8009f18 <HAL_DMA_IRQHandler+0x1e0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d013      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1c      	ldr	r2, [pc, #112]	; (8009f1c <HAL_DMA_IRQHandler+0x1e4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00e      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a1b      	ldr	r2, [pc, #108]	; (8009f20 <HAL_DMA_IRQHandler+0x1e8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d009      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a19      	ldr	r2, [pc, #100]	; (8009f24 <HAL_DMA_IRQHandler+0x1ec>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x194>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <HAL_DMA_IRQHandler+0x1f0>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d12f      	bne.n	8009f2c <HAL_DMA_IRQHandler+0x1f4>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bf14      	ite	ne
 8009eda:	2301      	movne	r3, #1
 8009edc:	2300      	moveq	r3, #0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	e02e      	b.n	8009f40 <HAL_DMA_IRQHandler+0x208>
 8009ee2:	bf00      	nop
 8009ee4:	24000040 	.word	0x24000040
 8009ee8:	1b4e81b5 	.word	0x1b4e81b5
 8009eec:	40020010 	.word	0x40020010
 8009ef0:	40020028 	.word	0x40020028
 8009ef4:	40020040 	.word	0x40020040
 8009ef8:	40020058 	.word	0x40020058
 8009efc:	40020070 	.word	0x40020070
 8009f00:	40020088 	.word	0x40020088
 8009f04:	400200a0 	.word	0x400200a0
 8009f08:	400200b8 	.word	0x400200b8
 8009f0c:	40020410 	.word	0x40020410
 8009f10:	40020428 	.word	0x40020428
 8009f14:	40020440 	.word	0x40020440
 8009f18:	40020458 	.word	0x40020458
 8009f1c:	40020470 	.word	0x40020470
 8009f20:	40020488 	.word	0x40020488
 8009f24:	400204a0 	.word	0x400204a0
 8009f28:	400204b8 	.word	0x400204b8
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0308 	and.w	r3, r3, #8
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	bf14      	ite	ne
 8009f3a:	2301      	movne	r3, #1
 8009f3c:	2300      	moveq	r3, #0
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d015      	beq.n	8009f70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 0204 	bic.w	r2, r2, #4
 8009f52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f58:	f003 031f 	and.w	r3, r3, #31
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	409a      	lsls	r2, r3
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f68:	f043 0201 	orr.w	r2, r3, #1
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d06e      	beq.n	800a064 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a69      	ldr	r2, [pc, #420]	; (800a130 <HAL_DMA_IRQHandler+0x3f8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d04a      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a67      	ldr	r2, [pc, #412]	; (800a134 <HAL_DMA_IRQHandler+0x3fc>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d045      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a66      	ldr	r2, [pc, #408]	; (800a138 <HAL_DMA_IRQHandler+0x400>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d040      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a64      	ldr	r2, [pc, #400]	; (800a13c <HAL_DMA_IRQHandler+0x404>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d03b      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a63      	ldr	r2, [pc, #396]	; (800a140 <HAL_DMA_IRQHandler+0x408>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d036      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a61      	ldr	r2, [pc, #388]	; (800a144 <HAL_DMA_IRQHandler+0x40c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d031      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a60      	ldr	r2, [pc, #384]	; (800a148 <HAL_DMA_IRQHandler+0x410>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d02c      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a5e      	ldr	r2, [pc, #376]	; (800a14c <HAL_DMA_IRQHandler+0x414>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d027      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a5d      	ldr	r2, [pc, #372]	; (800a150 <HAL_DMA_IRQHandler+0x418>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d022      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a5b      	ldr	r2, [pc, #364]	; (800a154 <HAL_DMA_IRQHandler+0x41c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01d      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a5a      	ldr	r2, [pc, #360]	; (800a158 <HAL_DMA_IRQHandler+0x420>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d018      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a58      	ldr	r2, [pc, #352]	; (800a15c <HAL_DMA_IRQHandler+0x424>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d013      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a57      	ldr	r2, [pc, #348]	; (800a160 <HAL_DMA_IRQHandler+0x428>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00e      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a55      	ldr	r2, [pc, #340]	; (800a164 <HAL_DMA_IRQHandler+0x42c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d009      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a54      	ldr	r2, [pc, #336]	; (800a168 <HAL_DMA_IRQHandler+0x430>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d004      	beq.n	800a026 <HAL_DMA_IRQHandler+0x2ee>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a52      	ldr	r2, [pc, #328]	; (800a16c <HAL_DMA_IRQHandler+0x434>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d10a      	bne.n	800a03c <HAL_DMA_IRQHandler+0x304>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a030:	2b00      	cmp	r3, #0
 800a032:	bf14      	ite	ne
 800a034:	2301      	movne	r3, #1
 800a036:	2300      	moveq	r3, #0
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	e003      	b.n	800a044 <HAL_DMA_IRQHandler+0x30c>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00d      	beq.n	800a064 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04c:	f003 031f 	and.w	r3, r3, #31
 800a050:	2201      	movs	r2, #1
 800a052:	409a      	lsls	r2, r3
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05c:	f043 0202 	orr.w	r2, r3, #2
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	2204      	movs	r2, #4
 800a06e:	409a      	lsls	r2, r3
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 808f 	beq.w	800a198 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a2c      	ldr	r2, [pc, #176]	; (800a130 <HAL_DMA_IRQHandler+0x3f8>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d04a      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <HAL_DMA_IRQHandler+0x3fc>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d045      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a29      	ldr	r2, [pc, #164]	; (800a138 <HAL_DMA_IRQHandler+0x400>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d040      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a27      	ldr	r2, [pc, #156]	; (800a13c <HAL_DMA_IRQHandler+0x404>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d03b      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <HAL_DMA_IRQHandler+0x408>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d036      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a24      	ldr	r2, [pc, #144]	; (800a144 <HAL_DMA_IRQHandler+0x40c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d031      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a23      	ldr	r2, [pc, #140]	; (800a148 <HAL_DMA_IRQHandler+0x410>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d02c      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a21      	ldr	r2, [pc, #132]	; (800a14c <HAL_DMA_IRQHandler+0x414>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d027      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a20      	ldr	r2, [pc, #128]	; (800a150 <HAL_DMA_IRQHandler+0x418>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d022      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <HAL_DMA_IRQHandler+0x41c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d01d      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <HAL_DMA_IRQHandler+0x420>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d018      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a1b      	ldr	r2, [pc, #108]	; (800a15c <HAL_DMA_IRQHandler+0x424>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d013      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a1a      	ldr	r2, [pc, #104]	; (800a160 <HAL_DMA_IRQHandler+0x428>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00e      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a18      	ldr	r2, [pc, #96]	; (800a164 <HAL_DMA_IRQHandler+0x42c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d009      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a17      	ldr	r2, [pc, #92]	; (800a168 <HAL_DMA_IRQHandler+0x430>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d004      	beq.n	800a11a <HAL_DMA_IRQHandler+0x3e2>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a15      	ldr	r2, [pc, #84]	; (800a16c <HAL_DMA_IRQHandler+0x434>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d12a      	bne.n	800a170 <HAL_DMA_IRQHandler+0x438>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	e023      	b.n	800a178 <HAL_DMA_IRQHandler+0x440>
 800a130:	40020010 	.word	0x40020010
 800a134:	40020028 	.word	0x40020028
 800a138:	40020040 	.word	0x40020040
 800a13c:	40020058 	.word	0x40020058
 800a140:	40020070 	.word	0x40020070
 800a144:	40020088 	.word	0x40020088
 800a148:	400200a0 	.word	0x400200a0
 800a14c:	400200b8 	.word	0x400200b8
 800a150:	40020410 	.word	0x40020410
 800a154:	40020428 	.word	0x40020428
 800a158:	40020440 	.word	0x40020440
 800a15c:	40020458 	.word	0x40020458
 800a160:	40020470 	.word	0x40020470
 800a164:	40020488 	.word	0x40020488
 800a168:	400204a0 	.word	0x400204a0
 800a16c:	400204b8 	.word	0x400204b8
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	2204      	movs	r2, #4
 800a186:	409a      	lsls	r2, r3
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a190:	f043 0204 	orr.w	r2, r3, #4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	2210      	movs	r2, #16
 800a1a2:	409a      	lsls	r2, r3
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 80a6 	beq.w	800a2fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a85      	ldr	r2, [pc, #532]	; (800a3c8 <HAL_DMA_IRQHandler+0x690>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d04a      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a83      	ldr	r2, [pc, #524]	; (800a3cc <HAL_DMA_IRQHandler+0x694>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d045      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a82      	ldr	r2, [pc, #520]	; (800a3d0 <HAL_DMA_IRQHandler+0x698>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d040      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a80      	ldr	r2, [pc, #512]	; (800a3d4 <HAL_DMA_IRQHandler+0x69c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d03b      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a7f      	ldr	r2, [pc, #508]	; (800a3d8 <HAL_DMA_IRQHandler+0x6a0>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d036      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a7d      	ldr	r2, [pc, #500]	; (800a3dc <HAL_DMA_IRQHandler+0x6a4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d031      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a7c      	ldr	r2, [pc, #496]	; (800a3e0 <HAL_DMA_IRQHandler+0x6a8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d02c      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a7a      	ldr	r2, [pc, #488]	; (800a3e4 <HAL_DMA_IRQHandler+0x6ac>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d027      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a79      	ldr	r2, [pc, #484]	; (800a3e8 <HAL_DMA_IRQHandler+0x6b0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d022      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a77      	ldr	r2, [pc, #476]	; (800a3ec <HAL_DMA_IRQHandler+0x6b4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d01d      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a76      	ldr	r2, [pc, #472]	; (800a3f0 <HAL_DMA_IRQHandler+0x6b8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d018      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a74      	ldr	r2, [pc, #464]	; (800a3f4 <HAL_DMA_IRQHandler+0x6bc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a73      	ldr	r2, [pc, #460]	; (800a3f8 <HAL_DMA_IRQHandler+0x6c0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00e      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a71      	ldr	r2, [pc, #452]	; (800a3fc <HAL_DMA_IRQHandler+0x6c4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d009      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a70      	ldr	r2, [pc, #448]	; (800a400 <HAL_DMA_IRQHandler+0x6c8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d004      	beq.n	800a24e <HAL_DMA_IRQHandler+0x516>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a6e      	ldr	r2, [pc, #440]	; (800a404 <HAL_DMA_IRQHandler+0x6cc>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d10a      	bne.n	800a264 <HAL_DMA_IRQHandler+0x52c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0308 	and.w	r3, r3, #8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bf14      	ite	ne
 800a25c:	2301      	movne	r3, #1
 800a25e:	2300      	moveq	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	e009      	b.n	800a278 <HAL_DMA_IRQHandler+0x540>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bf14      	ite	ne
 800a272:	2301      	movne	r3, #1
 800a274:	2300      	moveq	r3, #0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d03e      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a280:	f003 031f 	and.w	r3, r3, #31
 800a284:	2210      	movs	r2, #16
 800a286:	409a      	lsls	r2, r3
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d018      	beq.n	800a2cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d108      	bne.n	800a2ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d024      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	4798      	blx	r3
 800a2b8:	e01f      	b.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01b      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	4798      	blx	r3
 800a2ca:	e016      	b.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0208 	bic.w	r2, r2, #8
 800a2e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fe:	f003 031f 	and.w	r3, r3, #31
 800a302:	2220      	movs	r2, #32
 800a304:	409a      	lsls	r2, r3
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	4013      	ands	r3, r2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8110 	beq.w	800a530 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a2c      	ldr	r2, [pc, #176]	; (800a3c8 <HAL_DMA_IRQHandler+0x690>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d04a      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a2b      	ldr	r2, [pc, #172]	; (800a3cc <HAL_DMA_IRQHandler+0x694>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d045      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a29      	ldr	r2, [pc, #164]	; (800a3d0 <HAL_DMA_IRQHandler+0x698>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d040      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a28      	ldr	r2, [pc, #160]	; (800a3d4 <HAL_DMA_IRQHandler+0x69c>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d03b      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a26      	ldr	r2, [pc, #152]	; (800a3d8 <HAL_DMA_IRQHandler+0x6a0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d036      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a25      	ldr	r2, [pc, #148]	; (800a3dc <HAL_DMA_IRQHandler+0x6a4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d031      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a23      	ldr	r2, [pc, #140]	; (800a3e0 <HAL_DMA_IRQHandler+0x6a8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d02c      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a22      	ldr	r2, [pc, #136]	; (800a3e4 <HAL_DMA_IRQHandler+0x6ac>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d027      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a20      	ldr	r2, [pc, #128]	; (800a3e8 <HAL_DMA_IRQHandler+0x6b0>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d022      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1f      	ldr	r2, [pc, #124]	; (800a3ec <HAL_DMA_IRQHandler+0x6b4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d01d      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a1d      	ldr	r2, [pc, #116]	; (800a3f0 <HAL_DMA_IRQHandler+0x6b8>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d018      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a1c      	ldr	r2, [pc, #112]	; (800a3f4 <HAL_DMA_IRQHandler+0x6bc>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d013      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a1a      	ldr	r2, [pc, #104]	; (800a3f8 <HAL_DMA_IRQHandler+0x6c0>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00e      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a19      	ldr	r2, [pc, #100]	; (800a3fc <HAL_DMA_IRQHandler+0x6c4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d009      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a17      	ldr	r2, [pc, #92]	; (800a400 <HAL_DMA_IRQHandler+0x6c8>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d004      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x678>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a16      	ldr	r2, [pc, #88]	; (800a404 <HAL_DMA_IRQHandler+0x6cc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d12b      	bne.n	800a408 <HAL_DMA_IRQHandler+0x6d0>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	bf14      	ite	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	2300      	moveq	r3, #0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	e02a      	b.n	800a41c <HAL_DMA_IRQHandler+0x6e4>
 800a3c6:	bf00      	nop
 800a3c8:	40020010 	.word	0x40020010
 800a3cc:	40020028 	.word	0x40020028
 800a3d0:	40020040 	.word	0x40020040
 800a3d4:	40020058 	.word	0x40020058
 800a3d8:	40020070 	.word	0x40020070
 800a3dc:	40020088 	.word	0x40020088
 800a3e0:	400200a0 	.word	0x400200a0
 800a3e4:	400200b8 	.word	0x400200b8
 800a3e8:	40020410 	.word	0x40020410
 800a3ec:	40020428 	.word	0x40020428
 800a3f0:	40020440 	.word	0x40020440
 800a3f4:	40020458 	.word	0x40020458
 800a3f8:	40020470 	.word	0x40020470
 800a3fc:	40020488 	.word	0x40020488
 800a400:	400204a0 	.word	0x400204a0
 800a404:	400204b8 	.word	0x400204b8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0302 	and.w	r3, r3, #2
 800a412:	2b00      	cmp	r3, #0
 800a414:	bf14      	ite	ne
 800a416:	2301      	movne	r3, #1
 800a418:	2300      	moveq	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 8087 	beq.w	800a530 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a426:	f003 031f 	and.w	r3, r3, #31
 800a42a:	2220      	movs	r2, #32
 800a42c:	409a      	lsls	r2, r3
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d139      	bne.n	800a4b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0216 	bic.w	r2, r2, #22
 800a44c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695a      	ldr	r2, [r3, #20]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a45c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <HAL_DMA_IRQHandler+0x736>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d007      	beq.n	800a47e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0208 	bic.w	r2, r2, #8
 800a47c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a482:	f003 031f 	and.w	r3, r3, #31
 800a486:	223f      	movs	r2, #63	; 0x3f
 800a488:	409a      	lsls	r2, r3
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 834a 	beq.w	800ab3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	4798      	blx	r3
          }
          return;
 800a4b0:	e344      	b.n	800ab3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d018      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d108      	bne.n	800a4e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d02c      	beq.n	800a530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	4798      	blx	r3
 800a4de:	e027      	b.n	800a530 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d023      	beq.n	800a530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
 800a4f0:	e01e      	b.n	800a530 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10f      	bne.n	800a520 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0210 	bic.w	r2, r2, #16
 800a50e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8306 	beq.w	800ab46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 8088 	beq.w	800a658 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2204      	movs	r2, #4
 800a54c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a7a      	ldr	r2, [pc, #488]	; (800a740 <HAL_DMA_IRQHandler+0xa08>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d04a      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a79      	ldr	r2, [pc, #484]	; (800a744 <HAL_DMA_IRQHandler+0xa0c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d045      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a77      	ldr	r2, [pc, #476]	; (800a748 <HAL_DMA_IRQHandler+0xa10>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d040      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a76      	ldr	r2, [pc, #472]	; (800a74c <HAL_DMA_IRQHandler+0xa14>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d03b      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a74      	ldr	r2, [pc, #464]	; (800a750 <HAL_DMA_IRQHandler+0xa18>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d036      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a73      	ldr	r2, [pc, #460]	; (800a754 <HAL_DMA_IRQHandler+0xa1c>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d031      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a71      	ldr	r2, [pc, #452]	; (800a758 <HAL_DMA_IRQHandler+0xa20>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d02c      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a70      	ldr	r2, [pc, #448]	; (800a75c <HAL_DMA_IRQHandler+0xa24>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d027      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a6e      	ldr	r2, [pc, #440]	; (800a760 <HAL_DMA_IRQHandler+0xa28>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d022      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a6d      	ldr	r2, [pc, #436]	; (800a764 <HAL_DMA_IRQHandler+0xa2c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d01d      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a6b      	ldr	r2, [pc, #428]	; (800a768 <HAL_DMA_IRQHandler+0xa30>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d018      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a6a      	ldr	r2, [pc, #424]	; (800a76c <HAL_DMA_IRQHandler+0xa34>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d013      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a68      	ldr	r2, [pc, #416]	; (800a770 <HAL_DMA_IRQHandler+0xa38>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00e      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a67      	ldr	r2, [pc, #412]	; (800a774 <HAL_DMA_IRQHandler+0xa3c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d009      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a65      	ldr	r2, [pc, #404]	; (800a778 <HAL_DMA_IRQHandler+0xa40>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x8b8>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a64      	ldr	r2, [pc, #400]	; (800a77c <HAL_DMA_IRQHandler+0xa44>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d108      	bne.n	800a602 <HAL_DMA_IRQHandler+0x8ca>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f022 0201 	bic.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e007      	b.n	800a612 <HAL_DMA_IRQHandler+0x8da>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0201 	bic.w	r2, r2, #1
 800a610:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3301      	adds	r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d307      	bcc.n	800a62e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f2      	bne.n	800a612 <HAL_DMA_IRQHandler+0x8da>
 800a62c:	e000      	b.n	800a630 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a62e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2203      	movs	r2, #3
 800a642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a646:	e003      	b.n	800a650 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 8272 	beq.w	800ab46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
 800a66a:	e26c      	b.n	800ab46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a43      	ldr	r2, [pc, #268]	; (800a780 <HAL_DMA_IRQHandler+0xa48>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d022      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a42      	ldr	r2, [pc, #264]	; (800a784 <HAL_DMA_IRQHandler+0xa4c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d01d      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a40      	ldr	r2, [pc, #256]	; (800a788 <HAL_DMA_IRQHandler+0xa50>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d018      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a3f      	ldr	r2, [pc, #252]	; (800a78c <HAL_DMA_IRQHandler+0xa54>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d013      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a3d      	ldr	r2, [pc, #244]	; (800a790 <HAL_DMA_IRQHandler+0xa58>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00e      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a3c      	ldr	r2, [pc, #240]	; (800a794 <HAL_DMA_IRQHandler+0xa5c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d009      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a3a      	ldr	r2, [pc, #232]	; (800a798 <HAL_DMA_IRQHandler+0xa60>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d004      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x984>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a39      	ldr	r2, [pc, #228]	; (800a79c <HAL_DMA_IRQHandler+0xa64>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d101      	bne.n	800a6c0 <HAL_DMA_IRQHandler+0x988>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e000      	b.n	800a6c2 <HAL_DMA_IRQHandler+0x98a>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 823f 	beq.w	800ab46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d4:	f003 031f 	and.w	r3, r3, #31
 800a6d8:	2204      	movs	r2, #4
 800a6da:	409a      	lsls	r2, r3
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 80cd 	beq.w	800a880 <HAL_DMA_IRQHandler+0xb48>
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80c7 	beq.w	800a880 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f6:	f003 031f 	and.w	r3, r3, #31
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	409a      	lsls	r2, r3
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d049      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 8210 	beq.w	800ab40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a728:	e20a      	b.n	800ab40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 8206 	beq.w	800ab40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a73c:	e200      	b.n	800ab40 <HAL_DMA_IRQHandler+0xe08>
 800a73e:	bf00      	nop
 800a740:	40020010 	.word	0x40020010
 800a744:	40020028 	.word	0x40020028
 800a748:	40020040 	.word	0x40020040
 800a74c:	40020058 	.word	0x40020058
 800a750:	40020070 	.word	0x40020070
 800a754:	40020088 	.word	0x40020088
 800a758:	400200a0 	.word	0x400200a0
 800a75c:	400200b8 	.word	0x400200b8
 800a760:	40020410 	.word	0x40020410
 800a764:	40020428 	.word	0x40020428
 800a768:	40020440 	.word	0x40020440
 800a76c:	40020458 	.word	0x40020458
 800a770:	40020470 	.word	0x40020470
 800a774:	40020488 	.word	0x40020488
 800a778:	400204a0 	.word	0x400204a0
 800a77c:	400204b8 	.word	0x400204b8
 800a780:	58025408 	.word	0x58025408
 800a784:	5802541c 	.word	0x5802541c
 800a788:	58025430 	.word	0x58025430
 800a78c:	58025444 	.word	0x58025444
 800a790:	58025458 	.word	0x58025458
 800a794:	5802546c 	.word	0x5802546c
 800a798:	58025480 	.word	0x58025480
 800a79c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f003 0320 	and.w	r3, r3, #32
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d160      	bne.n	800a86c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a7f      	ldr	r2, [pc, #508]	; (800a9ac <HAL_DMA_IRQHandler+0xc74>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d04a      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a7d      	ldr	r2, [pc, #500]	; (800a9b0 <HAL_DMA_IRQHandler+0xc78>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d045      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a7c      	ldr	r2, [pc, #496]	; (800a9b4 <HAL_DMA_IRQHandler+0xc7c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d040      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a7a      	ldr	r2, [pc, #488]	; (800a9b8 <HAL_DMA_IRQHandler+0xc80>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d03b      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a79      	ldr	r2, [pc, #484]	; (800a9bc <HAL_DMA_IRQHandler+0xc84>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d036      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a77      	ldr	r2, [pc, #476]	; (800a9c0 <HAL_DMA_IRQHandler+0xc88>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d031      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a76      	ldr	r2, [pc, #472]	; (800a9c4 <HAL_DMA_IRQHandler+0xc8c>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d02c      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a74      	ldr	r2, [pc, #464]	; (800a9c8 <HAL_DMA_IRQHandler+0xc90>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d027      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a73      	ldr	r2, [pc, #460]	; (800a9cc <HAL_DMA_IRQHandler+0xc94>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d022      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a71      	ldr	r2, [pc, #452]	; (800a9d0 <HAL_DMA_IRQHandler+0xc98>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d01d      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a70      	ldr	r2, [pc, #448]	; (800a9d4 <HAL_DMA_IRQHandler+0xc9c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d018      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a6e      	ldr	r2, [pc, #440]	; (800a9d8 <HAL_DMA_IRQHandler+0xca0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d013      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a6d      	ldr	r2, [pc, #436]	; (800a9dc <HAL_DMA_IRQHandler+0xca4>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00e      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a6b      	ldr	r2, [pc, #428]	; (800a9e0 <HAL_DMA_IRQHandler+0xca8>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d009      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a6a      	ldr	r2, [pc, #424]	; (800a9e4 <HAL_DMA_IRQHandler+0xcac>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d004      	beq.n	800a84a <HAL_DMA_IRQHandler+0xb12>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a68      	ldr	r2, [pc, #416]	; (800a9e8 <HAL_DMA_IRQHandler+0xcb0>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d108      	bne.n	800a85c <HAL_DMA_IRQHandler+0xb24>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f022 0208 	bic.w	r2, r2, #8
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	e007      	b.n	800a86c <HAL_DMA_IRQHandler+0xb34>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0204 	bic.w	r2, r2, #4
 800a86a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 8165 	beq.w	800ab40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a87e:	e15f      	b.n	800ab40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a884:	f003 031f 	and.w	r3, r3, #31
 800a888:	2202      	movs	r2, #2
 800a88a:	409a      	lsls	r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	4013      	ands	r3, r2
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80c5 	beq.w	800aa20 <HAL_DMA_IRQHandler+0xce8>
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f003 0302 	and.w	r3, r3, #2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80bf 	beq.w	800aa20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	409a      	lsls	r2, r3
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d018      	beq.n	800a8ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 813a 	beq.w	800ab44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a8d8:	e134      	b.n	800ab44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 8130 	beq.w	800ab44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a8ec:	e12a      	b.n	800ab44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 8089 	bne.w	800aa0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a2b      	ldr	r2, [pc, #172]	; (800a9ac <HAL_DMA_IRQHandler+0xc74>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d04a      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a29      	ldr	r2, [pc, #164]	; (800a9b0 <HAL_DMA_IRQHandler+0xc78>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d045      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a28      	ldr	r2, [pc, #160]	; (800a9b4 <HAL_DMA_IRQHandler+0xc7c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d040      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a26      	ldr	r2, [pc, #152]	; (800a9b8 <HAL_DMA_IRQHandler+0xc80>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d03b      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <HAL_DMA_IRQHandler+0xc84>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d036      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a23      	ldr	r2, [pc, #140]	; (800a9c0 <HAL_DMA_IRQHandler+0xc88>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d031      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a22      	ldr	r2, [pc, #136]	; (800a9c4 <HAL_DMA_IRQHandler+0xc8c>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d02c      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a20      	ldr	r2, [pc, #128]	; (800a9c8 <HAL_DMA_IRQHandler+0xc90>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d027      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a1f      	ldr	r2, [pc, #124]	; (800a9cc <HAL_DMA_IRQHandler+0xc94>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d022      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1d      	ldr	r2, [pc, #116]	; (800a9d0 <HAL_DMA_IRQHandler+0xc98>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d01d      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1c      	ldr	r2, [pc, #112]	; (800a9d4 <HAL_DMA_IRQHandler+0xc9c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d018      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1a      	ldr	r2, [pc, #104]	; (800a9d8 <HAL_DMA_IRQHandler+0xca0>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d013      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a19      	ldr	r2, [pc, #100]	; (800a9dc <HAL_DMA_IRQHandler+0xca4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00e      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a17      	ldr	r2, [pc, #92]	; (800a9e0 <HAL_DMA_IRQHandler+0xca8>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d009      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a16      	ldr	r2, [pc, #88]	; (800a9e4 <HAL_DMA_IRQHandler+0xcac>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d004      	beq.n	800a99a <HAL_DMA_IRQHandler+0xc62>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a14      	ldr	r2, [pc, #80]	; (800a9e8 <HAL_DMA_IRQHandler+0xcb0>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d128      	bne.n	800a9ec <HAL_DMA_IRQHandler+0xcb4>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0214 	bic.w	r2, r2, #20
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	e027      	b.n	800a9fc <HAL_DMA_IRQHandler+0xcc4>
 800a9ac:	40020010 	.word	0x40020010
 800a9b0:	40020028 	.word	0x40020028
 800a9b4:	40020040 	.word	0x40020040
 800a9b8:	40020058 	.word	0x40020058
 800a9bc:	40020070 	.word	0x40020070
 800a9c0:	40020088 	.word	0x40020088
 800a9c4:	400200a0 	.word	0x400200a0
 800a9c8:	400200b8 	.word	0x400200b8
 800a9cc:	40020410 	.word	0x40020410
 800a9d0:	40020428 	.word	0x40020428
 800a9d4:	40020440 	.word	0x40020440
 800a9d8:	40020458 	.word	0x40020458
 800a9dc:	40020470 	.word	0x40020470
 800a9e0:	40020488 	.word	0x40020488
 800a9e4:	400204a0 	.word	0x400204a0
 800a9e8:	400204b8 	.word	0x400204b8
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 020a 	bic.w	r2, r2, #10
 800a9fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 8097 	beq.w	800ab44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa1e:	e091      	b.n	800ab44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa24:	f003 031f 	and.w	r3, r3, #31
 800aa28:	2208      	movs	r2, #8
 800aa2a:	409a      	lsls	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 8088 	beq.w	800ab46 <HAL_DMA_IRQHandler+0xe0e>
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f003 0308 	and.w	r3, r3, #8
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8082 	beq.w	800ab46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a41      	ldr	r2, [pc, #260]	; (800ab4c <HAL_DMA_IRQHandler+0xe14>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d04a      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a3f      	ldr	r2, [pc, #252]	; (800ab50 <HAL_DMA_IRQHandler+0xe18>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d045      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a3e      	ldr	r2, [pc, #248]	; (800ab54 <HAL_DMA_IRQHandler+0xe1c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d040      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a3c      	ldr	r2, [pc, #240]	; (800ab58 <HAL_DMA_IRQHandler+0xe20>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d03b      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a3b      	ldr	r2, [pc, #236]	; (800ab5c <HAL_DMA_IRQHandler+0xe24>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d036      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a39      	ldr	r2, [pc, #228]	; (800ab60 <HAL_DMA_IRQHandler+0xe28>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d031      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a38      	ldr	r2, [pc, #224]	; (800ab64 <HAL_DMA_IRQHandler+0xe2c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d02c      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a36      	ldr	r2, [pc, #216]	; (800ab68 <HAL_DMA_IRQHandler+0xe30>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d027      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a35      	ldr	r2, [pc, #212]	; (800ab6c <HAL_DMA_IRQHandler+0xe34>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d022      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a33      	ldr	r2, [pc, #204]	; (800ab70 <HAL_DMA_IRQHandler+0xe38>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d01d      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a32      	ldr	r2, [pc, #200]	; (800ab74 <HAL_DMA_IRQHandler+0xe3c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d018      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a30      	ldr	r2, [pc, #192]	; (800ab78 <HAL_DMA_IRQHandler+0xe40>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d013      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a2f      	ldr	r2, [pc, #188]	; (800ab7c <HAL_DMA_IRQHandler+0xe44>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00e      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a2d      	ldr	r2, [pc, #180]	; (800ab80 <HAL_DMA_IRQHandler+0xe48>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d009      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a2c      	ldr	r2, [pc, #176]	; (800ab84 <HAL_DMA_IRQHandler+0xe4c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d004      	beq.n	800aae2 <HAL_DMA_IRQHandler+0xdaa>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a2a      	ldr	r2, [pc, #168]	; (800ab88 <HAL_DMA_IRQHandler+0xe50>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d108      	bne.n	800aaf4 <HAL_DMA_IRQHandler+0xdbc>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 021c 	bic.w	r2, r2, #28
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	e007      	b.n	800ab04 <HAL_DMA_IRQHandler+0xdcc>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 020e 	bic.w	r2, r2, #14
 800ab02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab08:	f003 031f 	and.w	r3, r3, #31
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	409a      	lsls	r2, r3
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
 800ab3a:	e004      	b.n	800ab46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ab3c:	bf00      	nop
 800ab3e:	e002      	b.n	800ab46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab40:	bf00      	nop
 800ab42:	e000      	b.n	800ab46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ab46:	3728      	adds	r7, #40	; 0x28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40020010 	.word	0x40020010
 800ab50:	40020028 	.word	0x40020028
 800ab54:	40020040 	.word	0x40020040
 800ab58:	40020058 	.word	0x40020058
 800ab5c:	40020070 	.word	0x40020070
 800ab60:	40020088 	.word	0x40020088
 800ab64:	400200a0 	.word	0x400200a0
 800ab68:	400200b8 	.word	0x400200b8
 800ab6c:	40020410 	.word	0x40020410
 800ab70:	40020428 	.word	0x40020428
 800ab74:	40020440 	.word	0x40020440
 800ab78:	40020458 	.word	0x40020458
 800ab7c:	40020470 	.word	0x40020470
 800ab80:	40020488 	.word	0x40020488
 800ab84:	400204a0 	.word	0x400204a0
 800ab88:	400204b8 	.word	0x400204b8

0800ab8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a7f      	ldr	r2, [pc, #508]	; (800ada8 <DMA_SetConfig+0x21c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d072      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a7d      	ldr	r2, [pc, #500]	; (800adac <DMA_SetConfig+0x220>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d06d      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a7c      	ldr	r2, [pc, #496]	; (800adb0 <DMA_SetConfig+0x224>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d068      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a7a      	ldr	r2, [pc, #488]	; (800adb4 <DMA_SetConfig+0x228>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d063      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a79      	ldr	r2, [pc, #484]	; (800adb8 <DMA_SetConfig+0x22c>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d05e      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a77      	ldr	r2, [pc, #476]	; (800adbc <DMA_SetConfig+0x230>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d059      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a76      	ldr	r2, [pc, #472]	; (800adc0 <DMA_SetConfig+0x234>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d054      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a74      	ldr	r2, [pc, #464]	; (800adc4 <DMA_SetConfig+0x238>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d04f      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a73      	ldr	r2, [pc, #460]	; (800adc8 <DMA_SetConfig+0x23c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d04a      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a71      	ldr	r2, [pc, #452]	; (800adcc <DMA_SetConfig+0x240>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d045      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a70      	ldr	r2, [pc, #448]	; (800add0 <DMA_SetConfig+0x244>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d040      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a6e      	ldr	r2, [pc, #440]	; (800add4 <DMA_SetConfig+0x248>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d03b      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a6d      	ldr	r2, [pc, #436]	; (800add8 <DMA_SetConfig+0x24c>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d036      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a6b      	ldr	r2, [pc, #428]	; (800addc <DMA_SetConfig+0x250>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d031      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a6a      	ldr	r2, [pc, #424]	; (800ade0 <DMA_SetConfig+0x254>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d02c      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a68      	ldr	r2, [pc, #416]	; (800ade4 <DMA_SetConfig+0x258>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d027      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a67      	ldr	r2, [pc, #412]	; (800ade8 <DMA_SetConfig+0x25c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d022      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a65      	ldr	r2, [pc, #404]	; (800adec <DMA_SetConfig+0x260>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d01d      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a64      	ldr	r2, [pc, #400]	; (800adf0 <DMA_SetConfig+0x264>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d018      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a62      	ldr	r2, [pc, #392]	; (800adf4 <DMA_SetConfig+0x268>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d013      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a61      	ldr	r2, [pc, #388]	; (800adf8 <DMA_SetConfig+0x26c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00e      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a5f      	ldr	r2, [pc, #380]	; (800adfc <DMA_SetConfig+0x270>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d009      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a5e      	ldr	r2, [pc, #376]	; (800ae00 <DMA_SetConfig+0x274>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d004      	beq.n	800ac96 <DMA_SetConfig+0x10a>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a5c      	ldr	r2, [pc, #368]	; (800ae04 <DMA_SetConfig+0x278>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d101      	bne.n	800ac9a <DMA_SetConfig+0x10e>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <DMA_SetConfig+0x110>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00d      	beq.n	800acbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aca8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800acba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a39      	ldr	r2, [pc, #228]	; (800ada8 <DMA_SetConfig+0x21c>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d04a      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a38      	ldr	r2, [pc, #224]	; (800adac <DMA_SetConfig+0x220>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d045      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a36      	ldr	r2, [pc, #216]	; (800adb0 <DMA_SetConfig+0x224>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d040      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a35      	ldr	r2, [pc, #212]	; (800adb4 <DMA_SetConfig+0x228>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d03b      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a33      	ldr	r2, [pc, #204]	; (800adb8 <DMA_SetConfig+0x22c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d036      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a32      	ldr	r2, [pc, #200]	; (800adbc <DMA_SetConfig+0x230>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d031      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a30      	ldr	r2, [pc, #192]	; (800adc0 <DMA_SetConfig+0x234>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d02c      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a2f      	ldr	r2, [pc, #188]	; (800adc4 <DMA_SetConfig+0x238>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d027      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a2d      	ldr	r2, [pc, #180]	; (800adc8 <DMA_SetConfig+0x23c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d022      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a2c      	ldr	r2, [pc, #176]	; (800adcc <DMA_SetConfig+0x240>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d01d      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a2a      	ldr	r2, [pc, #168]	; (800add0 <DMA_SetConfig+0x244>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d018      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a29      	ldr	r2, [pc, #164]	; (800add4 <DMA_SetConfig+0x248>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d013      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a27      	ldr	r2, [pc, #156]	; (800add8 <DMA_SetConfig+0x24c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00e      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a26      	ldr	r2, [pc, #152]	; (800addc <DMA_SetConfig+0x250>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d009      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a24      	ldr	r2, [pc, #144]	; (800ade0 <DMA_SetConfig+0x254>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d004      	beq.n	800ad5c <DMA_SetConfig+0x1d0>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a23      	ldr	r2, [pc, #140]	; (800ade4 <DMA_SetConfig+0x258>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d101      	bne.n	800ad60 <DMA_SetConfig+0x1d4>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <DMA_SetConfig+0x1d6>
 800ad60:	2300      	movs	r3, #0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d059      	beq.n	800ae1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	223f      	movs	r2, #63	; 0x3f
 800ad70:	409a      	lsls	r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	2b40      	cmp	r3, #64	; 0x40
 800ad94:	d138      	bne.n	800ae08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ada6:	e086      	b.n	800aeb6 <DMA_SetConfig+0x32a>
 800ada8:	40020010 	.word	0x40020010
 800adac:	40020028 	.word	0x40020028
 800adb0:	40020040 	.word	0x40020040
 800adb4:	40020058 	.word	0x40020058
 800adb8:	40020070 	.word	0x40020070
 800adbc:	40020088 	.word	0x40020088
 800adc0:	400200a0 	.word	0x400200a0
 800adc4:	400200b8 	.word	0x400200b8
 800adc8:	40020410 	.word	0x40020410
 800adcc:	40020428 	.word	0x40020428
 800add0:	40020440 	.word	0x40020440
 800add4:	40020458 	.word	0x40020458
 800add8:	40020470 	.word	0x40020470
 800addc:	40020488 	.word	0x40020488
 800ade0:	400204a0 	.word	0x400204a0
 800ade4:	400204b8 	.word	0x400204b8
 800ade8:	58025408 	.word	0x58025408
 800adec:	5802541c 	.word	0x5802541c
 800adf0:	58025430 	.word	0x58025430
 800adf4:	58025444 	.word	0x58025444
 800adf8:	58025458 	.word	0x58025458
 800adfc:	5802546c 	.word	0x5802546c
 800ae00:	58025480 	.word	0x58025480
 800ae04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
}
 800ae18:	e04d      	b.n	800aeb6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a29      	ldr	r2, [pc, #164]	; (800aec4 <DMA_SetConfig+0x338>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d022      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a27      	ldr	r2, [pc, #156]	; (800aec8 <DMA_SetConfig+0x33c>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01d      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a26      	ldr	r2, [pc, #152]	; (800aecc <DMA_SetConfig+0x340>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d018      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a24      	ldr	r2, [pc, #144]	; (800aed0 <DMA_SetConfig+0x344>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d013      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a23      	ldr	r2, [pc, #140]	; (800aed4 <DMA_SetConfig+0x348>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00e      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a21      	ldr	r2, [pc, #132]	; (800aed8 <DMA_SetConfig+0x34c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d009      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a20      	ldr	r2, [pc, #128]	; (800aedc <DMA_SetConfig+0x350>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <DMA_SetConfig+0x2de>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a1e      	ldr	r2, [pc, #120]	; (800aee0 <DMA_SetConfig+0x354>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d101      	bne.n	800ae6e <DMA_SetConfig+0x2e2>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <DMA_SetConfig+0x2e4>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d020      	beq.n	800aeb6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae78:	f003 031f 	and.w	r3, r3, #31
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	409a      	lsls	r2, r3
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	2b40      	cmp	r3, #64	; 0x40
 800ae92:	d108      	bne.n	800aea6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	60da      	str	r2, [r3, #12]
}
 800aea4:	e007      	b.n	800aeb6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	60da      	str	r2, [r3, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	58025408 	.word	0x58025408
 800aec8:	5802541c 	.word	0x5802541c
 800aecc:	58025430 	.word	0x58025430
 800aed0:	58025444 	.word	0x58025444
 800aed4:	58025458 	.word	0x58025458
 800aed8:	5802546c 	.word	0x5802546c
 800aedc:	58025480 	.word	0x58025480
 800aee0:	58025494 	.word	0x58025494

0800aee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a42      	ldr	r2, [pc, #264]	; (800affc <DMA_CalcBaseAndBitshift+0x118>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d04a      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a41      	ldr	r2, [pc, #260]	; (800b000 <DMA_CalcBaseAndBitshift+0x11c>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d045      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a3f      	ldr	r2, [pc, #252]	; (800b004 <DMA_CalcBaseAndBitshift+0x120>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d040      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a3e      	ldr	r2, [pc, #248]	; (800b008 <DMA_CalcBaseAndBitshift+0x124>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d03b      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a3c      	ldr	r2, [pc, #240]	; (800b00c <DMA_CalcBaseAndBitshift+0x128>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d036      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a3b      	ldr	r2, [pc, #236]	; (800b010 <DMA_CalcBaseAndBitshift+0x12c>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d031      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a39      	ldr	r2, [pc, #228]	; (800b014 <DMA_CalcBaseAndBitshift+0x130>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d02c      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a38      	ldr	r2, [pc, #224]	; (800b018 <DMA_CalcBaseAndBitshift+0x134>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d027      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a36      	ldr	r2, [pc, #216]	; (800b01c <DMA_CalcBaseAndBitshift+0x138>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d022      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a35      	ldr	r2, [pc, #212]	; (800b020 <DMA_CalcBaseAndBitshift+0x13c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d01d      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a33      	ldr	r2, [pc, #204]	; (800b024 <DMA_CalcBaseAndBitshift+0x140>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d018      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a32      	ldr	r2, [pc, #200]	; (800b028 <DMA_CalcBaseAndBitshift+0x144>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d013      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a30      	ldr	r2, [pc, #192]	; (800b02c <DMA_CalcBaseAndBitshift+0x148>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00e      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a2f      	ldr	r2, [pc, #188]	; (800b030 <DMA_CalcBaseAndBitshift+0x14c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d009      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a2d      	ldr	r2, [pc, #180]	; (800b034 <DMA_CalcBaseAndBitshift+0x150>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d004      	beq.n	800af8c <DMA_CalcBaseAndBitshift+0xa8>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a2c      	ldr	r2, [pc, #176]	; (800b038 <DMA_CalcBaseAndBitshift+0x154>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d101      	bne.n	800af90 <DMA_CalcBaseAndBitshift+0xac>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <DMA_CalcBaseAndBitshift+0xae>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d024      	beq.n	800afe0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	3b10      	subs	r3, #16
 800af9e:	4a27      	ldr	r2, [pc, #156]	; (800b03c <DMA_CalcBaseAndBitshift+0x158>)
 800afa0:	fba2 2303 	umull	r2, r3, r2, r3
 800afa4:	091b      	lsrs	r3, r3, #4
 800afa6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f003 0307 	and.w	r3, r3, #7
 800afae:	4a24      	ldr	r2, [pc, #144]	; (800b040 <DMA_CalcBaseAndBitshift+0x15c>)
 800afb0:	5cd3      	ldrb	r3, [r2, r3]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d908      	bls.n	800afd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <DMA_CalcBaseAndBitshift+0x160>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	1d1a      	adds	r2, r3, #4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	659a      	str	r2, [r3, #88]	; 0x58
 800afce:	e00d      	b.n	800afec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b1b      	ldr	r3, [pc, #108]	; (800b044 <DMA_CalcBaseAndBitshift+0x160>)
 800afd8:	4013      	ands	r3, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6593      	str	r3, [r2, #88]	; 0x58
 800afde:	e005      	b.n	800afec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	40020010 	.word	0x40020010
 800b000:	40020028 	.word	0x40020028
 800b004:	40020040 	.word	0x40020040
 800b008:	40020058 	.word	0x40020058
 800b00c:	40020070 	.word	0x40020070
 800b010:	40020088 	.word	0x40020088
 800b014:	400200a0 	.word	0x400200a0
 800b018:	400200b8 	.word	0x400200b8
 800b01c:	40020410 	.word	0x40020410
 800b020:	40020428 	.word	0x40020428
 800b024:	40020440 	.word	0x40020440
 800b028:	40020458 	.word	0x40020458
 800b02c:	40020470 	.word	0x40020470
 800b030:	40020488 	.word	0x40020488
 800b034:	400204a0 	.word	0x400204a0
 800b038:	400204b8 	.word	0x400204b8
 800b03c:	aaaaaaab 	.word	0xaaaaaaab
 800b040:	0801566c 	.word	0x0801566c
 800b044:	fffffc00 	.word	0xfffffc00

0800b048 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d120      	bne.n	800b09e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b060:	2b03      	cmp	r3, #3
 800b062:	d858      	bhi.n	800b116 <DMA_CheckFifoParam+0xce>
 800b064:	a201      	add	r2, pc, #4	; (adr r2, 800b06c <DMA_CheckFifoParam+0x24>)
 800b066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06a:	bf00      	nop
 800b06c:	0800b07d 	.word	0x0800b07d
 800b070:	0800b08f 	.word	0x0800b08f
 800b074:	0800b07d 	.word	0x0800b07d
 800b078:	0800b117 	.word	0x0800b117
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d048      	beq.n	800b11a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b08c:	e045      	b.n	800b11a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b096:	d142      	bne.n	800b11e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b09c:	e03f      	b.n	800b11e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a6:	d123      	bne.n	800b0f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d838      	bhi.n	800b122 <DMA_CheckFifoParam+0xda>
 800b0b0:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <DMA_CheckFifoParam+0x70>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b0c9 	.word	0x0800b0c9
 800b0bc:	0800b0cf 	.word	0x0800b0cf
 800b0c0:	0800b0c9 	.word	0x0800b0c9
 800b0c4:	0800b0e1 	.word	0x0800b0e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
        break;
 800b0cc:	e030      	b.n	800b130 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d025      	beq.n	800b126 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b0de:	e022      	b.n	800b126 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0e8:	d11f      	bne.n	800b12a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b0ee:	e01c      	b.n	800b12a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d902      	bls.n	800b0fe <DMA_CheckFifoParam+0xb6>
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d003      	beq.n	800b104 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b0fc:	e018      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	73fb      	strb	r3, [r7, #15]
        break;
 800b102:	e015      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00e      	beq.n	800b12e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]
    break;
 800b114:	e00b      	b.n	800b12e <DMA_CheckFifoParam+0xe6>
        break;
 800b116:	bf00      	nop
 800b118:	e00a      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        break;
 800b11a:	bf00      	nop
 800b11c:	e008      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        break;
 800b11e:	bf00      	nop
 800b120:	e006      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        break;
 800b122:	bf00      	nop
 800b124:	e004      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        break;
 800b126:	bf00      	nop
 800b128:	e002      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
        break;
 800b12a:	bf00      	nop
 800b12c:	e000      	b.n	800b130 <DMA_CheckFifoParam+0xe8>
    break;
 800b12e:	bf00      	nop
    }
  }

  return status;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop

0800b140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a38      	ldr	r2, [pc, #224]	; (800b234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d022      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a36      	ldr	r2, [pc, #216]	; (800b238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d01d      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a35      	ldr	r2, [pc, #212]	; (800b23c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d018      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a33      	ldr	r2, [pc, #204]	; (800b240 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d013      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a32      	ldr	r2, [pc, #200]	; (800b244 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d00e      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a30      	ldr	r2, [pc, #192]	; (800b248 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d009      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a2f      	ldr	r2, [pc, #188]	; (800b24c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d004      	beq.n	800b19e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a2d      	ldr	r2, [pc, #180]	; (800b250 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d101      	bne.n	800b1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01a      	beq.n	800b1de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	3b08      	subs	r3, #8
 800b1b0:	4a28      	ldr	r2, [pc, #160]	; (800b254 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	091b      	lsrs	r3, r3, #4
 800b1b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	4b26      	ldr	r3, [pc, #152]	; (800b258 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a24      	ldr	r2, [pc, #144]	; (800b25c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b1cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f003 031f 	and.w	r3, r3, #31
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	409a      	lsls	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b1dc:	e024      	b.n	800b228 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	3b10      	subs	r3, #16
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ec:	091b      	lsrs	r3, r3, #4
 800b1ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4a1c      	ldr	r2, [pc, #112]	; (800b264 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d806      	bhi.n	800b206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	4a1b      	ldr	r2, [pc, #108]	; (800b268 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d902      	bls.n	800b206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	3308      	adds	r3, #8
 800b204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4b18      	ldr	r3, [pc, #96]	; (800b26c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	461a      	mov	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a16      	ldr	r2, [pc, #88]	; (800b270 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f003 031f 	and.w	r3, r3, #31
 800b220:	2201      	movs	r2, #1
 800b222:	409a      	lsls	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b228:	bf00      	nop
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	58025408 	.word	0x58025408
 800b238:	5802541c 	.word	0x5802541c
 800b23c:	58025430 	.word	0x58025430
 800b240:	58025444 	.word	0x58025444
 800b244:	58025458 	.word	0x58025458
 800b248:	5802546c 	.word	0x5802546c
 800b24c:	58025480 	.word	0x58025480
 800b250:	58025494 	.word	0x58025494
 800b254:	cccccccd 	.word	0xcccccccd
 800b258:	16009600 	.word	0x16009600
 800b25c:	58025880 	.word	0x58025880
 800b260:	aaaaaaab 	.word	0xaaaaaaab
 800b264:	400204b8 	.word	0x400204b8
 800b268:	4002040f 	.word	0x4002040f
 800b26c:	10008200 	.word	0x10008200
 800b270:	40020880 	.word	0x40020880

0800b274 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	b2db      	uxtb	r3, r3
 800b282:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d04a      	beq.n	800b320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d847      	bhi.n	800b320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a25      	ldr	r2, [pc, #148]	; (800b32c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d022      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a24      	ldr	r2, [pc, #144]	; (800b330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d01d      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a22      	ldr	r2, [pc, #136]	; (800b334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d018      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a21      	ldr	r2, [pc, #132]	; (800b338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d013      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1f      	ldr	r2, [pc, #124]	; (800b33c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00e      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d009      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a1c      	ldr	r2, [pc, #112]	; (800b344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d004      	beq.n	800b2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a1b      	ldr	r2, [pc, #108]	; (800b348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d101      	bne.n	800b2e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e000      	b.n	800b2e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4b17      	ldr	r3, [pc, #92]	; (800b34c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b2fc:	671a      	str	r2, [r3, #112]	; 0x70
 800b2fe:	e009      	b.n	800b314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4b14      	ldr	r3, [pc, #80]	; (800b354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	461a      	mov	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a11      	ldr	r2, [pc, #68]	; (800b358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b312:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3b01      	subs	r3, #1
 800b318:	2201      	movs	r2, #1
 800b31a:	409a      	lsls	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	58025408 	.word	0x58025408
 800b330:	5802541c 	.word	0x5802541c
 800b334:	58025430 	.word	0x58025430
 800b338:	58025444 	.word	0x58025444
 800b33c:	58025458 	.word	0x58025458
 800b340:	5802546c 	.word	0x5802546c
 800b344:	58025480 	.word	0x58025480
 800b348:	58025494 	.word	0x58025494
 800b34c:	1600963f 	.word	0x1600963f
 800b350:	58025940 	.word	0x58025940
 800b354:	1000823f 	.word	0x1000823f
 800b358:	40020940 	.word	0x40020940

0800b35c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b089      	sub	sp, #36	; 0x24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b366:	2300      	movs	r3, #0
 800b368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b36a:	4b89      	ldr	r3, [pc, #548]	; (800b590 <HAL_GPIO_Init+0x234>)
 800b36c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b36e:	e194      	b.n	800b69a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	2101      	movs	r1, #1
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	fa01 f303 	lsl.w	r3, r1, r3
 800b37c:	4013      	ands	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8186 	beq.w	800b694 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f003 0303 	and.w	r3, r3, #3
 800b390:	2b01      	cmp	r3, #1
 800b392:	d005      	beq.n	800b3a0 <HAL_GPIO_Init+0x44>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f003 0303 	and.w	r3, r3, #3
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d130      	bne.n	800b402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b0:	43db      	mvns	r3, r3
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	43db      	mvns	r3, r3
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	091b      	lsrs	r3, r3, #4
 800b3ec:	f003 0201 	and.w	r2, r3, #1
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d017      	beq.n	800b43e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	2203      	movs	r2, #3
 800b41a:	fa02 f303 	lsl.w	r3, r2, r3
 800b41e:	43db      	mvns	r3, r3
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	4013      	ands	r3, r2
 800b424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	4313      	orrs	r3, r2
 800b436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d123      	bne.n	800b492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	08da      	lsrs	r2, r3, #3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3208      	adds	r2, #8
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	220f      	movs	r2, #15
 800b462:	fa02 f303 	lsl.w	r3, r2, r3
 800b466:	43db      	mvns	r3, r3
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	4013      	ands	r3, r2
 800b46c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	691a      	ldr	r2, [r3, #16]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f003 0307 	and.w	r3, r3, #7
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	fa02 f303 	lsl.w	r3, r2, r3
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	4313      	orrs	r3, r2
 800b482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	08da      	lsrs	r2, r3, #3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3208      	adds	r2, #8
 800b48c:	69b9      	ldr	r1, [r7, #24]
 800b48e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	2203      	movs	r2, #3
 800b49e:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a2:	43db      	mvns	r3, r3
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f003 0203 	and.w	r2, r3, #3
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 80e0 	beq.w	800b694 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4d4:	4b2f      	ldr	r3, [pc, #188]	; (800b594 <HAL_GPIO_Init+0x238>)
 800b4d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4da:	4a2e      	ldr	r2, [pc, #184]	; (800b594 <HAL_GPIO_Init+0x238>)
 800b4dc:	f043 0302 	orr.w	r3, r3, #2
 800b4e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b4e4:	4b2b      	ldr	r3, [pc, #172]	; (800b594 <HAL_GPIO_Init+0x238>)
 800b4e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b4f2:	4a29      	ldr	r2, [pc, #164]	; (800b598 <HAL_GPIO_Init+0x23c>)
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	220f      	movs	r2, #15
 800b50a:	fa02 f303 	lsl.w	r3, r2, r3
 800b50e:	43db      	mvns	r3, r3
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	4013      	ands	r3, r2
 800b514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a20      	ldr	r2, [pc, #128]	; (800b59c <HAL_GPIO_Init+0x240>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d052      	beq.n	800b5c4 <HAL_GPIO_Init+0x268>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1f      	ldr	r2, [pc, #124]	; (800b5a0 <HAL_GPIO_Init+0x244>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d031      	beq.n	800b58a <HAL_GPIO_Init+0x22e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a1e      	ldr	r2, [pc, #120]	; (800b5a4 <HAL_GPIO_Init+0x248>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d02b      	beq.n	800b586 <HAL_GPIO_Init+0x22a>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a1d      	ldr	r2, [pc, #116]	; (800b5a8 <HAL_GPIO_Init+0x24c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d025      	beq.n	800b582 <HAL_GPIO_Init+0x226>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a1c      	ldr	r2, [pc, #112]	; (800b5ac <HAL_GPIO_Init+0x250>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d01f      	beq.n	800b57e <HAL_GPIO_Init+0x222>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a1b      	ldr	r2, [pc, #108]	; (800b5b0 <HAL_GPIO_Init+0x254>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d019      	beq.n	800b57a <HAL_GPIO_Init+0x21e>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a1a      	ldr	r2, [pc, #104]	; (800b5b4 <HAL_GPIO_Init+0x258>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d013      	beq.n	800b576 <HAL_GPIO_Init+0x21a>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a19      	ldr	r2, [pc, #100]	; (800b5b8 <HAL_GPIO_Init+0x25c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d00d      	beq.n	800b572 <HAL_GPIO_Init+0x216>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a18      	ldr	r2, [pc, #96]	; (800b5bc <HAL_GPIO_Init+0x260>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d007      	beq.n	800b56e <HAL_GPIO_Init+0x212>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <HAL_GPIO_Init+0x264>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d101      	bne.n	800b56a <HAL_GPIO_Init+0x20e>
 800b566:	2309      	movs	r3, #9
 800b568:	e02d      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b56a:	230a      	movs	r3, #10
 800b56c:	e02b      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b56e:	2308      	movs	r3, #8
 800b570:	e029      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b572:	2307      	movs	r3, #7
 800b574:	e027      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b576:	2306      	movs	r3, #6
 800b578:	e025      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b57a:	2305      	movs	r3, #5
 800b57c:	e023      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b57e:	2304      	movs	r3, #4
 800b580:	e021      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b582:	2303      	movs	r3, #3
 800b584:	e01f      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b586:	2302      	movs	r3, #2
 800b588:	e01d      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e01b      	b.n	800b5c6 <HAL_GPIO_Init+0x26a>
 800b58e:	bf00      	nop
 800b590:	58000080 	.word	0x58000080
 800b594:	58024400 	.word	0x58024400
 800b598:	58000400 	.word	0x58000400
 800b59c:	58020000 	.word	0x58020000
 800b5a0:	58020400 	.word	0x58020400
 800b5a4:	58020800 	.word	0x58020800
 800b5a8:	58020c00 	.word	0x58020c00
 800b5ac:	58021000 	.word	0x58021000
 800b5b0:	58021400 	.word	0x58021400
 800b5b4:	58021800 	.word	0x58021800
 800b5b8:	58021c00 	.word	0x58021c00
 800b5bc:	58022000 	.word	0x58022000
 800b5c0:	58022400 	.word	0x58022400
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	f002 0203 	and.w	r2, r2, #3
 800b5cc:	0092      	lsls	r2, r2, #2
 800b5ce:	4093      	lsls	r3, r2
 800b5d0:	69ba      	ldr	r2, [r7, #24]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b5d6:	4938      	ldr	r1, [pc, #224]	; (800b6b8 <HAL_GPIO_Init+0x35c>)
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	089b      	lsrs	r3, r3, #2
 800b5dc:	3302      	adds	r3, #2
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b5e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b602:	69ba      	ldr	r2, [r7, #24]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b60a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	43db      	mvns	r3, r3
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	4013      	ands	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d003      	beq.n	800b638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	4313      	orrs	r3, r2
 800b636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	43db      	mvns	r3, r3
 800b64a:	69ba      	ldr	r2, [r7, #24]
 800b64c:	4013      	ands	r3, r2
 800b64e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	69ba      	ldr	r2, [r7, #24]
 800b668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	43db      	mvns	r3, r3
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	4013      	ands	r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	3301      	adds	r3, #1
 800b698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f47f ae63 	bne.w	800b370 <HAL_GPIO_Init+0x14>
  }
}
 800b6aa:	bf00      	nop
 800b6ac:	bf00      	nop
 800b6ae:	3724      	adds	r7, #36	; 0x24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	58000400 	.word	0x58000400

0800b6bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	807b      	strh	r3, [r7, #2]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b6cc:	787b      	ldrb	r3, [r7, #1]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b6d2:	887a      	ldrh	r2, [r7, #2]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b6d8:	e003      	b.n	800b6e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b6da:	887b      	ldrh	r3, [r7, #2]
 800b6dc:	041a      	lsls	r2, r3, #16
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	619a      	str	r2, [r3, #24]
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b700:	887a      	ldrh	r2, [r7, #2]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4013      	ands	r3, r2
 800b706:	041a      	lsls	r2, r3, #16
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	43d9      	mvns	r1, r3
 800b70c:	887b      	ldrh	r3, [r7, #2]
 800b70e:	400b      	ands	r3, r1
 800b710:	431a      	orrs	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	619a      	str	r2, [r3, #24]
}
 800b716:	bf00      	nop
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e07f      	b.n	800b836 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d106      	bne.n	800b750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7f9 ff26 	bl	800559c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2224      	movs	r2, #36	; 0x24
 800b754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f022 0201 	bic.w	r2, r2, #1
 800b766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d107      	bne.n	800b79e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689a      	ldr	r2, [r3, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b79a:	609a      	str	r2, [r3, #8]
 800b79c:	e006      	b.n	800b7ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689a      	ldr	r2, [r3, #8]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b7aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d104      	bne.n	800b7be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6859      	ldr	r1, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <HAL_I2C_Init+0x11c>)
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68da      	ldr	r2, [r3, #12]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b7dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	691a      	ldr	r2, [r3, #16]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	69d9      	ldr	r1, [r3, #28]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a1a      	ldr	r2, [r3, #32]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f042 0201 	orr.w	r2, r2, #1
 800b816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2220      	movs	r2, #32
 800b822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	02008000 	.word	0x02008000

0800b844 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b20      	cmp	r3, #32
 800b858:	d138      	bne.n	800b8cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b864:	2302      	movs	r3, #2
 800b866:	e032      	b.n	800b8ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2224      	movs	r2, #36	; 0x24
 800b874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f022 0201 	bic.w	r2, r2, #1
 800b886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b896:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0201 	orr.w	r2, r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e000      	b.n	800b8ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b8cc:	2302      	movs	r3, #2
  }
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d139      	bne.n	800b964 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e033      	b.n	800b966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2224      	movs	r2, #36	; 0x24
 800b90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f022 0201 	bic.w	r2, r2, #1
 800b91c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b92c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2220      	movs	r2, #32
 800b954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	e000      	b.n	800b966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b964:	2302      	movs	r3, #2
  }
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b972:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b974:	b08f      	sub	sp, #60	; 0x3c
 800b976:	af0a      	add	r7, sp, #40	; 0x28
 800b978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e116      	b.n	800bbb2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d106      	bne.n	800b9a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7fa fc68 	bl	8006274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f008 fbfc 	bl	80141c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	687e      	ldr	r6, [r7, #4]
 800b9d0:	466d      	mov	r5, sp
 800b9d2:	f106 0410 	add.w	r4, r6, #16
 800b9d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b9e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800b9e6:	1d33      	adds	r3, r6, #4
 800b9e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9ea:	6838      	ldr	r0, [r7, #0]
 800b9ec:	f008 fb7a 	bl	80140e4 <USB_CoreInit>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d005      	beq.n	800ba02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e0d7      	b.n	800bbb2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f008 fbea 	bl	80141e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]
 800ba12:	e04a      	b.n	800baaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ba14:	7bfa      	ldrb	r2, [r7, #15]
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	333d      	adds	r3, #61	; 0x3d
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ba28:	7bfa      	ldrb	r2, [r7, #15]
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	4413      	add	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	440b      	add	r3, r1
 800ba36:	333c      	adds	r3, #60	; 0x3c
 800ba38:	7bfa      	ldrb	r2, [r7, #15]
 800ba3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ba3c:	7bfa      	ldrb	r2, [r7, #15]
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	b298      	uxth	r0, r3
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	4613      	mov	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	440b      	add	r3, r1
 800ba4e:	3356      	adds	r3, #86	; 0x56
 800ba50:	4602      	mov	r2, r0
 800ba52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ba54:	7bfa      	ldrb	r2, [r7, #15]
 800ba56:	6879      	ldr	r1, [r7, #4]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	440b      	add	r3, r1
 800ba62:	3340      	adds	r3, #64	; 0x40
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ba68:	7bfa      	ldrb	r2, [r7, #15]
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	440b      	add	r3, r1
 800ba76:	3344      	adds	r3, #68	; 0x44
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ba7c:	7bfa      	ldrb	r2, [r7, #15]
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	4613      	mov	r3, r2
 800ba82:	00db      	lsls	r3, r3, #3
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	440b      	add	r3, r1
 800ba8a:	3348      	adds	r3, #72	; 0x48
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ba90:	7bfa      	ldrb	r2, [r7, #15]
 800ba92:	6879      	ldr	r1, [r7, #4]
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	334c      	adds	r3, #76	; 0x4c
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	3301      	adds	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]
 800baaa:	7bfa      	ldrb	r2, [r7, #15]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d3af      	bcc.n	800ba14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
 800bab8:	e044      	b.n	800bb44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800baba:	7bfa      	ldrb	r2, [r7, #15]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	4613      	mov	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	440b      	add	r3, r1
 800bac8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800bacc:	2200      	movs	r2, #0
 800bace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bad0:	7bfa      	ldrb	r2, [r7, #15]
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800bae2:	7bfa      	ldrb	r2, [r7, #15]
 800bae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bae6:	7bfa      	ldrb	r2, [r7, #15]
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800baf8:	2200      	movs	r2, #0
 800bafa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bafc:	7bfa      	ldrb	r2, [r7, #15]
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	4613      	mov	r3, r2
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	440b      	add	r3, r1
 800bb0a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bb12:	7bfa      	ldrb	r2, [r7, #15]
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	440b      	add	r3, r1
 800bb20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bb28:	7bfa      	ldrb	r2, [r7, #15]
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4413      	add	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	440b      	add	r3, r1
 800bb36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	3301      	adds	r3, #1
 800bb42:	73fb      	strb	r3, [r7, #15]
 800bb44:	7bfa      	ldrb	r2, [r7, #15]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d3b5      	bcc.n	800baba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	687e      	ldr	r6, [r7, #4]
 800bb56:	466d      	mov	r5, sp
 800bb58:	f106 0410 	add.w	r4, r6, #16
 800bb5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb64:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb68:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb6c:	1d33      	adds	r3, r6, #4
 800bb6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb70:	6838      	ldr	r0, [r7, #0]
 800bb72:	f008 fb83 	bl	801427c <USB_DevInit>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e014      	b.n	800bbb2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d102      	bne.n	800bba6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f80b 	bl	800bbbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f008 fd41 	bl	8014632 <USB_DevDisconnect>

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bbbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <HAL_PCDEx_ActivateLPM+0x44>)
 800bbec:	4313      	orrs	r3, r2
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	10000003 	.word	0x10000003

0800bc04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bc0c:	4b19      	ldr	r3, [pc, #100]	; (800bc74 <HAL_PWREx_ConfigSupply+0x70>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0304 	and.w	r3, r3, #4
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d00a      	beq.n	800bc2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bc18:	4b16      	ldr	r3, [pc, #88]	; (800bc74 <HAL_PWREx_ConfigSupply+0x70>)
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f003 0307 	and.w	r3, r3, #7
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d001      	beq.n	800bc2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e01f      	b.n	800bc6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e01d      	b.n	800bc6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bc2e:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <HAL_PWREx_ConfigSupply+0x70>)
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f023 0207 	bic.w	r2, r3, #7
 800bc36:	490f      	ldr	r1, [pc, #60]	; (800bc74 <HAL_PWREx_ConfigSupply+0x70>)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bc3e:	f7fb f8ab 	bl	8006d98 <HAL_GetTick>
 800bc42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc44:	e009      	b.n	800bc5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bc46:	f7fb f8a7 	bl	8006d98 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc54:	d901      	bls.n	800bc5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e007      	b.n	800bc6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc5a:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <HAL_PWREx_ConfigSupply+0x70>)
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc66:	d1ee      	bne.n	800bc46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	58024800 	.word	0x58024800

0800bc78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc86:	60d3      	str	r3, [r2, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	58024800 	.word	0x58024800

0800bc98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bca0:	f7fb f87a 	bl	8006d98 <HAL_GetTick>
 800bca4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e05f      	b.n	800bd70 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d107      	bne.n	800bccc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fa f81d 	bl	8005cfc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bcc2:	f241 3188 	movw	r1, #5000	; 0x1388
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa5e 	bl	800c188 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	021a      	lsls	r2, r3, #8
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2120      	movs	r1, #32
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fa56 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d135      	bne.n	800bd6e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	4b1b      	ldr	r3, [pc, #108]	; (800bd78 <HAL_QSPI_Init+0xe0>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	6852      	ldr	r2, [r2, #4]
 800bd10:	0611      	lsls	r1, r2, #24
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	68d2      	ldr	r2, [r2, #12]
 800bd16:	4311      	orrs	r1, r2
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	69d2      	ldr	r2, [r2, #28]
 800bd1c:	4311      	orrs	r1, r2
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	6a12      	ldr	r2, [r2, #32]
 800bd22:	4311      	orrs	r1, r2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <HAL_QSPI_Init+0xe4>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	6912      	ldr	r2, [r2, #16]
 800bd3a:	0411      	lsls	r1, r2, #16
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6952      	ldr	r2, [r2, #20]
 800bd40:	4311      	orrs	r1, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6992      	ldr	r2, [r2, #24]
 800bd46:	4311      	orrs	r1, r2
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0201 	orr.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	00ffff2f 	.word	0x00ffff2f
 800bd7c:	ffe0f8fe 	.word	0xffe0f8fe

0800bd80 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bd8c:	f7fb f804 	bl	8006d98 <HAL_GetTick>
 800bd90:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d101      	bne.n	800bda2 <HAL_QSPI_Command+0x22>
 800bd9e:	2302      	movs	r3, #2
 800bda0:	e048      	b.n	800be34 <HAL_QSPI_Command+0xb4>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d137      	bne.n	800be26 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2120      	movs	r1, #32
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 f9e8 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d125      	bne.n	800be2a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bdde:	2200      	movs	r2, #0
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 fa15 	bl	800c212 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d115      	bne.n	800be1c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	2102      	movs	r1, #2
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f9d2 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10f      	bne.n	800be2a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2202      	movs	r2, #2
 800be10:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be1a:	e006      	b.n	800be2a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be24:	e001      	b.n	800be2a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800be26:	2302      	movs	r3, #2
 800be28:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800be32:	7dfb      	ldrb	r3, [r7, #23]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	; 0x28
 800be40:	af02      	add	r7, sp, #8
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be48:	2300      	movs	r3, #0
 800be4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800be4c:	f7fa ffa4 	bl	8006d98 <HAL_GetTick>
 800be50:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3320      	adds	r3, #32
 800be58:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b01      	cmp	r3, #1
 800be64:	d101      	bne.n	800be6a <HAL_QSPI_Transmit+0x2e>
 800be66:	2302      	movs	r3, #2
 800be68:	e076      	b.n	800bf58 <HAL_QSPI_Transmit+0x11c>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d165      	bne.n	800bf4a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d056      	beq.n	800bf38 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2212      	movs	r2, #18
 800be8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800bebe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800bec0:	e01b      	b.n	800befa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	2201      	movs	r2, #1
 800beca:	2104      	movs	r1, #4
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 f969 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800bed2:	4603      	mov	r3, r0
 800bed4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800bed6:	7ffb      	ldrb	r3, [r7, #31]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d113      	bne.n	800bf04 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1df      	bne.n	800bec2 <HAL_QSPI_Transmit+0x86>
 800bf02:	e000      	b.n	800bf06 <HAL_QSPI_Transmit+0xca>
          break;
 800bf04:	bf00      	nop
      }

      if (status == HAL_OK)
 800bf06:	7ffb      	ldrb	r3, [r7, #31]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d110      	bne.n	800bf2e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2201      	movs	r2, #1
 800bf14:	2102      	movs	r1, #2
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f944 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800bf20:	7ffb      	ldrb	r3, [r7, #31]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf36:	e00a      	b.n	800bf4e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3c:	f043 0208 	orr.w	r2, r3, #8
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	77fb      	strb	r3, [r7, #31]
 800bf48:	e001      	b.n	800bf4e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800bf56:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3720      	adds	r7, #32
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af02      	add	r7, sp, #8
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800bf70:	f7fa ff12 	bl	8006d98 <HAL_GetTick>
 800bf74:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3320      	adds	r3, #32
 800bf84:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d101      	bne.n	800bf96 <HAL_QSPI_Receive+0x36>
 800bf92:	2302      	movs	r3, #2
 800bf94:	e07d      	b.n	800c092 <HAL_QSPI_Receive+0x132>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d16c      	bne.n	800c084 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2200      	movs	r2, #0
 800bfae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d05d      	beq.n	800c072 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2222      	movs	r2, #34	; 0x22
 800bfba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bfee:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800bff8:	e01c      	b.n	800c034 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	2201      	movs	r2, #1
 800c002:	2106      	movs	r1, #6
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f000 f8cd 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800c00a:	4603      	mov	r3, r0
 800c00c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c00e:	7ffb      	ldrb	r3, [r7, #31]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d114      	bne.n	800c03e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02e:	1e5a      	subs	r2, r3, #1
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1de      	bne.n	800bffa <HAL_QSPI_Receive+0x9a>
 800c03c:	e000      	b.n	800c040 <HAL_QSPI_Receive+0xe0>
          break;
 800c03e:	bf00      	nop
      }

      if (status == HAL_OK)
 800c040:	7ffb      	ldrb	r3, [r7, #31]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d110      	bne.n	800c068 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	2201      	movs	r2, #1
 800c04e:	2102      	movs	r1, #2
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f8a7 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800c056:	4603      	mov	r3, r0
 800c058:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c05a:	7ffb      	ldrb	r3, [r7, #31]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d103      	bne.n	800c068 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2202      	movs	r2, #2
 800c066:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c070:	e00a      	b.n	800c088 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	f043 0208 	orr.w	r2, r3, #8
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	77fb      	strb	r3, [r7, #31]
 800c082:	e001      	b.n	800c088 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c084:	2302      	movs	r3, #2
 800c086:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c090:	7ffb      	ldrb	r3, [r7, #31]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3720      	adds	r7, #32
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b088      	sub	sp, #32
 800c09e:	af02      	add	r7, sp, #8
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
 800c0a6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c0a8:	f7fa fe76 	bl	8006d98 <HAL_GetTick>
 800c0ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d101      	bne.n	800c0be <HAL_QSPI_AutoPolling+0x24>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	e060      	b.n	800c180 <HAL_QSPI_AutoPolling+0xe6>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d14f      	bne.n	800c172 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2242      	movs	r2, #66	; 0x42
 800c0dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2120      	movs	r1, #32
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 f85a 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d13d      	bne.n	800c176 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	6812      	ldr	r2, [r2, #0]
 800c102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	6852      	ldr	r2, [r2, #4]
 800c10c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	6892      	ldr	r2, [r2, #8]
 800c116:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	431a      	orrs	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c130:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c13a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c13e:	68b9      	ldr	r1, [r7, #8]
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f000 f866 	bl	800c212 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2201      	movs	r2, #1
 800c14e:	2108      	movs	r1, #8
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f000 f827 	bl	800c1a4 <QSPI_WaitFlagStateUntilTimeout>
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2208      	movs	r2, #8
 800c166:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c170:	e001      	b.n	800c176 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c172:	2302      	movs	r3, #2
 800c174:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c1b4:	e01a      	b.n	800c1ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1bc:	d016      	beq.n	800c1ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1be:	f7fa fdeb 	bl	8006d98 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d302      	bcc.n	800c1d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10b      	bne.n	800c1ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e0:	f043 0201 	orr.w	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e00e      	b.n	800c20a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689a      	ldr	r2, [r3, #8]
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	bf14      	ite	ne
 800c1fa:	2301      	movne	r3, #1
 800c1fc:	2300      	moveq	r3, #0
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	461a      	mov	r2, r3
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	429a      	cmp	r2, r3
 800c206:	d1d6      	bne.n	800c1b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c222:	2b00      	cmp	r3, #0
 800c224:	d009      	beq.n	800c23a <QSPI_Config+0x28>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c22c:	d005      	beq.n	800c23a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3a01      	subs	r2, #1
 800c238:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 80b9 	beq.w	800c3b6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d05f      	beq.n	800c30c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	6892      	ldr	r2, [r2, #8]
 800c254:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d031      	beq.n	800c2c2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c266:	431a      	orrs	r2, r3
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26c:	431a      	orrs	r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	431a      	orrs	r2, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	049b      	lsls	r3, r3, #18
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	431a      	orrs	r2, r3
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	431a      	orrs	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	431a      	orrs	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	431a      	orrs	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	431a      	orrs	r2, r3
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	ea42 0103 	orr.w	r1, r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c2b2:	f000 812e 	beq.w	800c512 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	6852      	ldr	r2, [r2, #4]
 800c2be:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c2c0:	e127      	b.n	800c512 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	049b      	lsls	r3, r3, #18
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	ea42 0103 	orr.w	r1, r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	430a      	orrs	r2, r1
 800c308:	615a      	str	r2, [r3, #20]
}
 800c30a:	e102      	b.n	800c512 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	69db      	ldr	r3, [r3, #28]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d02e      	beq.n	800c372 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31c:	431a      	orrs	r2, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c322:	431a      	orrs	r2, r3
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	431a      	orrs	r2, r3
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	049b      	lsls	r3, r3, #18
 800c330:	431a      	orrs	r2, r3
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	431a      	orrs	r2, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	431a      	orrs	r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	69db      	ldr	r3, [r3, #28]
 800c342:	431a      	orrs	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	431a      	orrs	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	ea42 0103 	orr.w	r1, r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	430a      	orrs	r2, r1
 800c35a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c362:	f000 80d6 	beq.w	800c512 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	6852      	ldr	r2, [r2, #4]
 800c36e:	619a      	str	r2, [r3, #24]
}
 800c370:	e0cf      	b.n	800c512 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37a:	431a      	orrs	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c380:	431a      	orrs	r2, r3
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	431a      	orrs	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	049b      	lsls	r3, r3, #18
 800c38e:	431a      	orrs	r2, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	431a      	orrs	r2, r3
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	431a      	orrs	r2, r3
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	ea42 0103 	orr.w	r1, r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	430a      	orrs	r2, r1
 800c3b2:	615a      	str	r2, [r3, #20]
}
 800c3b4:	e0ad      	b.n	800c512 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d058      	beq.n	800c470 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	6892      	ldr	r2, [r2, #8]
 800c3c6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d02d      	beq.n	800c42c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	431a      	orrs	r2, r3
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	049b      	lsls	r3, r3, #18
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	431a      	orrs	r2, r3
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	431a      	orrs	r2, r3
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	ea42 0103 	orr.w	r1, r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	430a      	orrs	r2, r1
 800c416:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c41e:	d078      	beq.n	800c512 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	6852      	ldr	r2, [r2, #4]
 800c428:	619a      	str	r2, [r3, #24]
}
 800c42a:	e072      	b.n	800c512 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	431a      	orrs	r2, r3
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43a:	431a      	orrs	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	431a      	orrs	r2, r3
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	049b      	lsls	r3, r3, #18
 800c448:	431a      	orrs	r2, r3
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	431a      	orrs	r2, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	6a1b      	ldr	r3, [r3, #32]
 800c454:	431a      	orrs	r2, r3
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	431a      	orrs	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	ea42 0103 	orr.w	r1, r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	615a      	str	r2, [r3, #20]
}
 800c46e:	e050      	b.n	800c512 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d02a      	beq.n	800c4ce <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c480:	431a      	orrs	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c486:	431a      	orrs	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	431a      	orrs	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	049b      	lsls	r3, r3, #18
 800c494:	431a      	orrs	r2, r3
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	431a      	orrs	r2, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	ea42 0103 	orr.w	r1, r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c4c0:	d027      	beq.n	800c512 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	6852      	ldr	r2, [r2, #4]
 800c4ca:	619a      	str	r2, [r3, #24]
}
 800c4cc:	e021      	b.n	800c512 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d01d      	beq.n	800c512 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	049b      	lsls	r3, r3, #18
 800c4f2:	431a      	orrs	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	431a      	orrs	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	ea42 0103 	orr.w	r1, r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	430a      	orrs	r2, r1
 800c510:	615a      	str	r2, [r3, #20]
}
 800c512:	bf00      	nop
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
	...

0800c520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08c      	sub	sp, #48	; 0x30
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d102      	bne.n	800c534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	f000 bc48 	b.w	800cdc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 8088 	beq.w	800c652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c542:	4b99      	ldr	r3, [pc, #612]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c54c:	4b96      	ldr	r3, [pc, #600]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c554:	2b10      	cmp	r3, #16
 800c556:	d007      	beq.n	800c568 <HAL_RCC_OscConfig+0x48>
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	2b18      	cmp	r3, #24
 800c55c:	d111      	bne.n	800c582 <HAL_RCC_OscConfig+0x62>
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	f003 0303 	and.w	r3, r3, #3
 800c564:	2b02      	cmp	r3, #2
 800c566:	d10c      	bne.n	800c582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c568:	4b8f      	ldr	r3, [pc, #572]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c570:	2b00      	cmp	r3, #0
 800c572:	d06d      	beq.n	800c650 <HAL_RCC_OscConfig+0x130>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d169      	bne.n	800c650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	f000 bc21 	b.w	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58a:	d106      	bne.n	800c59a <HAL_RCC_OscConfig+0x7a>
 800c58c:	4b86      	ldr	r3, [pc, #536]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a85      	ldr	r2, [pc, #532]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	e02e      	b.n	800c5f8 <HAL_RCC_OscConfig+0xd8>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <HAL_RCC_OscConfig+0x9c>
 800c5a2:	4b81      	ldr	r3, [pc, #516]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a80      	ldr	r2, [pc, #512]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	4b7e      	ldr	r3, [pc, #504]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a7d      	ldr	r2, [pc, #500]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5b8:	6013      	str	r3, [r2, #0]
 800c5ba:	e01d      	b.n	800c5f8 <HAL_RCC_OscConfig+0xd8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5c4:	d10c      	bne.n	800c5e0 <HAL_RCC_OscConfig+0xc0>
 800c5c6:	4b78      	ldr	r3, [pc, #480]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a77      	ldr	r2, [pc, #476]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5d0:	6013      	str	r3, [r2, #0]
 800c5d2:	4b75      	ldr	r3, [pc, #468]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a74      	ldr	r2, [pc, #464]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	e00b      	b.n	800c5f8 <HAL_RCC_OscConfig+0xd8>
 800c5e0:	4b71      	ldr	r3, [pc, #452]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a70      	ldr	r2, [pc, #448]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	4b6e      	ldr	r3, [pc, #440]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a6d      	ldr	r2, [pc, #436]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c5f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d013      	beq.n	800c628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c600:	f7fa fbca 	bl	8006d98 <HAL_GetTick>
 800c604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c606:	e008      	b.n	800c61a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c608:	f7fa fbc6 	bl	8006d98 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b64      	cmp	r3, #100	; 0x64
 800c614:	d901      	bls.n	800c61a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e3d4      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c61a:	4b63      	ldr	r3, [pc, #396]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0f0      	beq.n	800c608 <HAL_RCC_OscConfig+0xe8>
 800c626:	e014      	b.n	800c652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c628:	f7fa fbb6 	bl	8006d98 <HAL_GetTick>
 800c62c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c62e:	e008      	b.n	800c642 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c630:	f7fa fbb2 	bl	8006d98 <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b64      	cmp	r3, #100	; 0x64
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e3c0      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c642:	4b59      	ldr	r3, [pc, #356]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f0      	bne.n	800c630 <HAL_RCC_OscConfig+0x110>
 800c64e:	e000      	b.n	800c652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0302 	and.w	r3, r3, #2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 80ca 	beq.w	800c7f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c660:	4b51      	ldr	r3, [pc, #324]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c668:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c66a:	4b4f      	ldr	r3, [pc, #316]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d007      	beq.n	800c686 <HAL_RCC_OscConfig+0x166>
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	2b18      	cmp	r3, #24
 800c67a:	d156      	bne.n	800c72a <HAL_RCC_OscConfig+0x20a>
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d151      	bne.n	800c72a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c686:	4b48      	ldr	r3, [pc, #288]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d005      	beq.n	800c69e <HAL_RCC_OscConfig+0x17e>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e392      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c69e:	4b42      	ldr	r3, [pc, #264]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f023 0219 	bic.w	r2, r3, #25
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	493f      	ldr	r1, [pc, #252]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6b0:	f7fa fb72 	bl	8006d98 <HAL_GetTick>
 800c6b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c6b6:	e008      	b.n	800c6ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6b8:	f7fa fb6e 	bl	8006d98 <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d901      	bls.n	800c6ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e37c      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c6ca:	4b37      	ldr	r3, [pc, #220]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0f0      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6d6:	f7fa fb8f 	bl	8006df8 <HAL_GetREVID>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f241 0203 	movw	r2, #4099	; 0x1003
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d817      	bhi.n	800c714 <HAL_RCC_OscConfig+0x1f4>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	2b40      	cmp	r3, #64	; 0x40
 800c6ea:	d108      	bne.n	800c6fe <HAL_RCC_OscConfig+0x1de>
 800c6ec:	4b2e      	ldr	r3, [pc, #184]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c6f4:	4a2c      	ldr	r2, [pc, #176]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c6f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6fc:	e07a      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6fe:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	031b      	lsls	r3, r3, #12
 800c70c:	4926      	ldr	r1, [pc, #152]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c712:	e06f      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c714:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	4921      	ldr	r1, [pc, #132]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c724:	4313      	orrs	r3, r2
 800c726:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c728:	e064      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d047      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c732:	4b1d      	ldr	r3, [pc, #116]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f023 0219 	bic.w	r2, r3, #25
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	491a      	ldr	r1, [pc, #104]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c740:	4313      	orrs	r3, r2
 800c742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c744:	f7fa fb28 	bl	8006d98 <HAL_GetTick>
 800c748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c74a:	e008      	b.n	800c75e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c74c:	f7fa fb24 	bl	8006d98 <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	2b02      	cmp	r3, #2
 800c758:	d901      	bls.n	800c75e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e332      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 0304 	and.w	r3, r3, #4
 800c766:	2b00      	cmp	r3, #0
 800c768:	d0f0      	beq.n	800c74c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c76a:	f7fa fb45 	bl	8006df8 <HAL_GetREVID>
 800c76e:	4603      	mov	r3, r0
 800c770:	f241 0203 	movw	r2, #4099	; 0x1003
 800c774:	4293      	cmp	r3, r2
 800c776:	d819      	bhi.n	800c7ac <HAL_RCC_OscConfig+0x28c>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	691b      	ldr	r3, [r3, #16]
 800c77c:	2b40      	cmp	r3, #64	; 0x40
 800c77e:	d108      	bne.n	800c792 <HAL_RCC_OscConfig+0x272>
 800c780:	4b09      	ldr	r3, [pc, #36]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c788:	4a07      	ldr	r2, [pc, #28]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c78a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c78e:	6053      	str	r3, [r2, #4]
 800c790:	e030      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	031b      	lsls	r3, r3, #12
 800c7a0:	4901      	ldr	r1, [pc, #4]	; (800c7a8 <HAL_RCC_OscConfig+0x288>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	604b      	str	r3, [r1, #4]
 800c7a6:	e025      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
 800c7a8:	58024400 	.word	0x58024400
 800c7ac:	4b9a      	ldr	r3, [pc, #616]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	061b      	lsls	r3, r3, #24
 800c7ba:	4997      	ldr	r1, [pc, #604]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	604b      	str	r3, [r1, #4]
 800c7c0:	e018      	b.n	800c7f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7c2:	4b95      	ldr	r3, [pc, #596]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a94      	ldr	r2, [pc, #592]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c7c8:	f023 0301 	bic.w	r3, r3, #1
 800c7cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ce:	f7fa fae3 	bl	8006d98 <HAL_GetTick>
 800c7d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c7d4:	e008      	b.n	800c7e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7d6:	f7fa fadf 	bl	8006d98 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d901      	bls.n	800c7e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e2ed      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c7e8:	4b8b      	ldr	r3, [pc, #556]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1f0      	bne.n	800c7d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0310 	and.w	r3, r3, #16
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80a9 	beq.w	800c954 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c802:	4b85      	ldr	r3, [pc, #532]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c80a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c80c:	4b82      	ldr	r3, [pc, #520]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	2b08      	cmp	r3, #8
 800c816:	d007      	beq.n	800c828 <HAL_RCC_OscConfig+0x308>
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b18      	cmp	r3, #24
 800c81c:	d13a      	bne.n	800c894 <HAL_RCC_OscConfig+0x374>
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	2b01      	cmp	r3, #1
 800c826:	d135      	bne.n	800c894 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c828:	4b7b      	ldr	r3, [pc, #492]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c830:	2b00      	cmp	r3, #0
 800c832:	d005      	beq.n	800c840 <HAL_RCC_OscConfig+0x320>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	2b80      	cmp	r3, #128	; 0x80
 800c83a:	d001      	beq.n	800c840 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e2c1      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c840:	f7fa fada 	bl	8006df8 <HAL_GetREVID>
 800c844:	4603      	mov	r3, r0
 800c846:	f241 0203 	movw	r2, #4099	; 0x1003
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d817      	bhi.n	800c87e <HAL_RCC_OscConfig+0x35e>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	2b20      	cmp	r3, #32
 800c854:	d108      	bne.n	800c868 <HAL_RCC_OscConfig+0x348>
 800c856:	4b70      	ldr	r3, [pc, #448]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c85e:	4a6e      	ldr	r2, [pc, #440]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c864:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c866:	e075      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c868:	4b6b      	ldr	r3, [pc, #428]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	069b      	lsls	r3, r3, #26
 800c876:	4968      	ldr	r1, [pc, #416]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c878:	4313      	orrs	r3, r2
 800c87a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c87c:	e06a      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c87e:	4b66      	ldr	r3, [pc, #408]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	061b      	lsls	r3, r3, #24
 800c88c:	4962      	ldr	r1, [pc, #392]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c892:	e05f      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d042      	beq.n	800c922 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c89c:	4b5e      	ldr	r3, [pc, #376]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a5d      	ldr	r2, [pc, #372]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8a8:	f7fa fa76 	bl	8006d98 <HAL_GetTick>
 800c8ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c8ae:	e008      	b.n	800c8c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c8b0:	f7fa fa72 	bl	8006d98 <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d901      	bls.n	800c8c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e280      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c8c2:	4b55      	ldr	r3, [pc, #340]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0f0      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c8ce:	f7fa fa93 	bl	8006df8 <HAL_GetREVID>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d817      	bhi.n	800c90c <HAL_RCC_OscConfig+0x3ec>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	d108      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x3d6>
 800c8e4:	4b4c      	ldr	r3, [pc, #304]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c8ec:	4a4a      	ldr	r2, [pc, #296]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c8ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8f2:	6053      	str	r3, [r2, #4]
 800c8f4:	e02e      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
 800c8f6:	4b48      	ldr	r3, [pc, #288]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	069b      	lsls	r3, r3, #26
 800c904:	4944      	ldr	r1, [pc, #272]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c906:	4313      	orrs	r3, r2
 800c908:	604b      	str	r3, [r1, #4]
 800c90a:	e023      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
 800c90c:	4b42      	ldr	r3, [pc, #264]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	061b      	lsls	r3, r3, #24
 800c91a:	493f      	ldr	r1, [pc, #252]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c91c:	4313      	orrs	r3, r2
 800c91e:	60cb      	str	r3, [r1, #12]
 800c920:	e018      	b.n	800c954 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c922:	4b3d      	ldr	r3, [pc, #244]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a3c      	ldr	r2, [pc, #240]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c92c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c92e:	f7fa fa33 	bl	8006d98 <HAL_GetTick>
 800c932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c934:	e008      	b.n	800c948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c936:	f7fa fa2f 	bl	8006d98 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d901      	bls.n	800c948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e23d      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c948:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1f0      	bne.n	800c936 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0308 	and.w	r3, r3, #8
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d036      	beq.n	800c9ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d019      	beq.n	800c99c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c968:	4b2b      	ldr	r3, [pc, #172]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c96c:	4a2a      	ldr	r2, [pc, #168]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c974:	f7fa fa10 	bl	8006d98 <HAL_GetTick>
 800c978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c97a:	e008      	b.n	800c98e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c97c:	f7fa fa0c 	bl	8006d98 <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	2b02      	cmp	r3, #2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e21a      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c98e:	4b22      	ldr	r3, [pc, #136]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c992:	f003 0302 	and.w	r3, r3, #2
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0f0      	beq.n	800c97c <HAL_RCC_OscConfig+0x45c>
 800c99a:	e018      	b.n	800c9ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c99c:	4b1e      	ldr	r3, [pc, #120]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a0:	4a1d      	ldr	r2, [pc, #116]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c9a2:	f023 0301 	bic.w	r3, r3, #1
 800c9a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9a8:	f7fa f9f6 	bl	8006d98 <HAL_GetTick>
 800c9ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c9ae:	e008      	b.n	800c9c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9b0:	f7fa f9f2 	bl	8006d98 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e200      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9c6:	f003 0302 	and.w	r3, r3, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1f0      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d039      	beq.n	800ca4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01c      	beq.n	800ca1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a0c      	ldr	r2, [pc, #48]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800c9e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c9ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c9ee:	f7fa f9d3 	bl	8006d98 <HAL_GetTick>
 800c9f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c9f4:	e008      	b.n	800ca08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9f6:	f7fa f9cf 	bl	8006d98 <HAL_GetTick>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d901      	bls.n	800ca08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ca04:	2303      	movs	r3, #3
 800ca06:	e1dd      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ca08:	4b03      	ldr	r3, [pc, #12]	; (800ca18 <HAL_RCC_OscConfig+0x4f8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d0f0      	beq.n	800c9f6 <HAL_RCC_OscConfig+0x4d6>
 800ca14:	e01b      	b.n	800ca4e <HAL_RCC_OscConfig+0x52e>
 800ca16:	bf00      	nop
 800ca18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ca1c:	4b9b      	ldr	r3, [pc, #620]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a9a      	ldr	r2, [pc, #616]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800ca22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ca28:	f7fa f9b6 	bl	8006d98 <HAL_GetTick>
 800ca2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ca30:	f7fa f9b2 	bl	8006d98 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e1c0      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ca42:	4b92      	ldr	r3, [pc, #584]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0304 	and.w	r3, r3, #4
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 8081 	beq.w	800cb5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ca5c:	4b8c      	ldr	r3, [pc, #560]	; (800cc90 <HAL_RCC_OscConfig+0x770>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a8b      	ldr	r2, [pc, #556]	; (800cc90 <HAL_RCC_OscConfig+0x770>)
 800ca62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca68:	f7fa f996 	bl	8006d98 <HAL_GetTick>
 800ca6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca6e:	e008      	b.n	800ca82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca70:	f7fa f992 	bl	8006d98 <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	2b64      	cmp	r3, #100	; 0x64
 800ca7c:	d901      	bls.n	800ca82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e1a0      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca82:	4b83      	ldr	r3, [pc, #524]	; (800cc90 <HAL_RCC_OscConfig+0x770>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0f0      	beq.n	800ca70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d106      	bne.n	800caa4 <HAL_RCC_OscConfig+0x584>
 800ca96:	4b7d      	ldr	r3, [pc, #500]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a7c      	ldr	r2, [pc, #496]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800ca9c:	f043 0301 	orr.w	r3, r3, #1
 800caa0:	6713      	str	r3, [r2, #112]	; 0x70
 800caa2:	e02d      	b.n	800cb00 <HAL_RCC_OscConfig+0x5e0>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10c      	bne.n	800cac6 <HAL_RCC_OscConfig+0x5a6>
 800caac:	4b77      	ldr	r3, [pc, #476]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800caae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab0:	4a76      	ldr	r2, [pc, #472]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cab2:	f023 0301 	bic.w	r3, r3, #1
 800cab6:	6713      	str	r3, [r2, #112]	; 0x70
 800cab8:	4b74      	ldr	r3, [pc, #464]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800caba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabc:	4a73      	ldr	r2, [pc, #460]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cabe:	f023 0304 	bic.w	r3, r3, #4
 800cac2:	6713      	str	r3, [r2, #112]	; 0x70
 800cac4:	e01c      	b.n	800cb00 <HAL_RCC_OscConfig+0x5e0>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	2b05      	cmp	r3, #5
 800cacc:	d10c      	bne.n	800cae8 <HAL_RCC_OscConfig+0x5c8>
 800cace:	4b6f      	ldr	r3, [pc, #444]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad2:	4a6e      	ldr	r2, [pc, #440]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cad4:	f043 0304 	orr.w	r3, r3, #4
 800cad8:	6713      	str	r3, [r2, #112]	; 0x70
 800cada:	4b6c      	ldr	r3, [pc, #432]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cade:	4a6b      	ldr	r2, [pc, #428]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	6713      	str	r3, [r2, #112]	; 0x70
 800cae6:	e00b      	b.n	800cb00 <HAL_RCC_OscConfig+0x5e0>
 800cae8:	4b68      	ldr	r3, [pc, #416]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800caea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caec:	4a67      	ldr	r2, [pc, #412]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800caee:	f023 0301 	bic.w	r3, r3, #1
 800caf2:	6713      	str	r3, [r2, #112]	; 0x70
 800caf4:	4b65      	ldr	r3, [pc, #404]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	4a64      	ldr	r2, [pc, #400]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cafa:	f023 0304 	bic.w	r3, r3, #4
 800cafe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d015      	beq.n	800cb34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb08:	f7fa f946 	bl	8006d98 <HAL_GetTick>
 800cb0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb0e:	e00a      	b.n	800cb26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb10:	f7fa f942 	bl	8006d98 <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e14e      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb26:	4b59      	ldr	r3, [pc, #356]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d0ee      	beq.n	800cb10 <HAL_RCC_OscConfig+0x5f0>
 800cb32:	e014      	b.n	800cb5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb34:	f7fa f930 	bl	8006d98 <HAL_GetTick>
 800cb38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cb3a:	e00a      	b.n	800cb52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb3c:	f7fa f92c 	bl	8006d98 <HAL_GetTick>
 800cb40:	4602      	mov	r2, r0
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d901      	bls.n	800cb52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e138      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cb52:	4b4e      	ldr	r3, [pc, #312]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb56:	f003 0302 	and.w	r3, r3, #2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1ee      	bne.n	800cb3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 812d 	beq.w	800cdc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cb68:	4b48      	ldr	r3, [pc, #288]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb70:	2b18      	cmp	r3, #24
 800cb72:	f000 80bd 	beq.w	800ccf0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	f040 809e 	bne.w	800ccbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb80:	4b42      	ldr	r3, [pc, #264]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a41      	ldr	r2, [pc, #260]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cb86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8c:	f7fa f904 	bl	8006d98 <HAL_GetTick>
 800cb90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cb92:	e008      	b.n	800cba6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb94:	f7fa f900 	bl	8006d98 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e10e      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cba6:	4b39      	ldr	r3, [pc, #228]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f0      	bne.n	800cb94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cbb2:	4b36      	ldr	r3, [pc, #216]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cbb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbb6:	4b37      	ldr	r3, [pc, #220]	; (800cc94 <HAL_RCC_OscConfig+0x774>)
 800cbb8:	4013      	ands	r3, r2
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cbc2:	0112      	lsls	r2, r2, #4
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	4931      	ldr	r1, [pc, #196]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	628b      	str	r3, [r1, #40]	; 0x28
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	025b      	lsls	r3, r3, #9
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	041b      	lsls	r3, r3, #16
 800cbea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	061b      	lsls	r3, r3, #24
 800cbf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbfc:	4923      	ldr	r1, [pc, #140]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cc02:	4b22      	ldr	r3, [pc, #136]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc06:	4a21      	ldr	r2, [pc, #132]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc08:	f023 0301 	bic.w	r3, r3, #1
 800cc0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cc0e:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc12:	4b21      	ldr	r3, [pc, #132]	; (800cc98 <HAL_RCC_OscConfig+0x778>)
 800cc14:	4013      	ands	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cc1a:	00d2      	lsls	r2, r2, #3
 800cc1c:	491b      	ldr	r1, [pc, #108]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cc22:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc26:	f023 020c 	bic.w	r2, r3, #12
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	4917      	ldr	r1, [pc, #92]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc30:	4313      	orrs	r3, r2
 800cc32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cc34:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	f023 0202 	bic.w	r2, r3, #2
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc40:	4912      	ldr	r1, [pc, #72]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc42:	4313      	orrs	r3, r2
 800cc44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cc46:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	4a10      	ldr	r2, [pc, #64]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc52:	4b0e      	ldr	r3, [pc, #56]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	4a0d      	ldr	r2, [pc, #52]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	4a0a      	ldr	r2, [pc, #40]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cc6a:	4b08      	ldr	r3, [pc, #32]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6e:	4a07      	ldr	r2, [pc, #28]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc70:	f043 0301 	orr.w	r3, r3, #1
 800cc74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc76:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a04      	ldr	r2, [pc, #16]	; (800cc8c <HAL_RCC_OscConfig+0x76c>)
 800cc7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc82:	f7fa f889 	bl	8006d98 <HAL_GetTick>
 800cc86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc88:	e011      	b.n	800ccae <HAL_RCC_OscConfig+0x78e>
 800cc8a:	bf00      	nop
 800cc8c:	58024400 	.word	0x58024400
 800cc90:	58024800 	.word	0x58024800
 800cc94:	fffffc0c 	.word	0xfffffc0c
 800cc98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc9c:	f7fa f87c 	bl	8006d98 <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d901      	bls.n	800ccae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e08a      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ccae:	4b47      	ldr	r3, [pc, #284]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0f0      	beq.n	800cc9c <HAL_RCC_OscConfig+0x77c>
 800ccba:	e082      	b.n	800cdc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccbc:	4b43      	ldr	r3, [pc, #268]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a42      	ldr	r2, [pc, #264]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800ccc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccc8:	f7fa f866 	bl	8006d98 <HAL_GetTick>
 800cccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ccce:	e008      	b.n	800cce2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccd0:	f7fa f862 	bl	8006d98 <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d901      	bls.n	800cce2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	e070      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cce2:	4b3a      	ldr	r3, [pc, #232]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1f0      	bne.n	800ccd0 <HAL_RCC_OscConfig+0x7b0>
 800ccee:	e068      	b.n	800cdc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ccf0:	4b36      	ldr	r3, [pc, #216]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ccf6:	4b35      	ldr	r3, [pc, #212]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d031      	beq.n	800cd68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f003 0203 	and.w	r2, r3, #3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d12a      	bne.n	800cd68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	091b      	lsrs	r3, r3, #4
 800cd16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d122      	bne.n	800cd68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d11a      	bne.n	800cd68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	0a5b      	lsrs	r3, r3, #9
 800cd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d111      	bne.n	800cd68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	0c1b      	lsrs	r3, r3, #16
 800cd48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d108      	bne.n	800cd68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	0e1b      	lsrs	r3, r3, #24
 800cd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d001      	beq.n	800cd6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e02b      	b.n	800cdc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cd6c:	4b17      	ldr	r3, [pc, #92]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd70:	08db      	lsrs	r3, r3, #3
 800cd72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d01f      	beq.n	800cdc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd86:	4a11      	ldr	r2, [pc, #68]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cd8e:	f7fa f803 	bl	8006d98 <HAL_GetTick>
 800cd92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cd94:	bf00      	nop
 800cd96:	f7f9 ffff 	bl	8006d98 <HAL_GetTick>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d0f9      	beq.n	800cd96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cda2:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cda4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cda6:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <HAL_RCC_OscConfig+0x8b0>)
 800cda8:	4013      	ands	r3, r2
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cdae:	00d2      	lsls	r2, r2, #3
 800cdb0:	4906      	ldr	r1, [pc, #24]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800cdb6:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdba:	4a04      	ldr	r2, [pc, #16]	; (800cdcc <HAL_RCC_OscConfig+0x8ac>)
 800cdbc:	f043 0301 	orr.w	r3, r3, #1
 800cdc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3730      	adds	r7, #48	; 0x30
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	58024400 	.word	0x58024400
 800cdd0:	ffff0007 	.word	0xffff0007

0800cdd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e19c      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cde8:	4b8a      	ldr	r3, [pc, #552]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 030f 	and.w	r3, r3, #15
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d910      	bls.n	800ce18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdf6:	4b87      	ldr	r3, [pc, #540]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f023 020f 	bic.w	r2, r3, #15
 800cdfe:	4985      	ldr	r1, [pc, #532]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce06:	4b83      	ldr	r3, [pc, #524]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 030f 	and.w	r3, r3, #15
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d001      	beq.n	800ce18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e184      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d010      	beq.n	800ce46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	4b7b      	ldr	r3, [pc, #492]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d908      	bls.n	800ce46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ce34:	4b78      	ldr	r3, [pc, #480]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce36:	699b      	ldr	r3, [r3, #24]
 800ce38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	4975      	ldr	r1, [pc, #468]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce42:	4313      	orrs	r3, r2
 800ce44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 0308 	and.w	r3, r3, #8
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d010      	beq.n	800ce74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695a      	ldr	r2, [r3, #20]
 800ce56:	4b70      	ldr	r3, [pc, #448]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d908      	bls.n	800ce74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ce62:	4b6d      	ldr	r3, [pc, #436]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	496a      	ldr	r1, [pc, #424]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d010      	beq.n	800cea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	699a      	ldr	r2, [r3, #24]
 800ce84:	4b64      	ldr	r3, [pc, #400]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d908      	bls.n	800cea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ce90:	4b61      	ldr	r3, [pc, #388]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	495e      	ldr	r1, [pc, #376]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0320 	and.w	r3, r3, #32
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d010      	beq.n	800ced0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	69da      	ldr	r2, [r3, #28]
 800ceb2:	4b59      	ldr	r3, [pc, #356]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d908      	bls.n	800ced0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cebe:	4b56      	ldr	r3, [pc, #344]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	4953      	ldr	r1, [pc, #332]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cecc:	4313      	orrs	r3, r2
 800cece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0302 	and.w	r3, r3, #2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d010      	beq.n	800cefe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68da      	ldr	r2, [r3, #12]
 800cee0:	4b4d      	ldr	r3, [pc, #308]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cee2:	699b      	ldr	r3, [r3, #24]
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d908      	bls.n	800cefe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ceec:	4b4a      	ldr	r3, [pc, #296]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	f023 020f 	bic.w	r2, r3, #15
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	4947      	ldr	r1, [pc, #284]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d055      	beq.n	800cfb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cf0a:	4b43      	ldr	r3, [pc, #268]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	4940      	ldr	r1, [pc, #256]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d107      	bne.n	800cf34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf24:	4b3c      	ldr	r3, [pc, #240]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d121      	bne.n	800cf74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e0f6      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d107      	bne.n	800cf4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf3c:	4b36      	ldr	r3, [pc, #216]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d115      	bne.n	800cf74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e0ea      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d107      	bne.n	800cf64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf54:	4b30      	ldr	r3, [pc, #192]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d109      	bne.n	800cf74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e0de      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf64:	4b2c      	ldr	r3, [pc, #176]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0304 	and.w	r3, r3, #4
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e0d6      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cf74:	4b28      	ldr	r3, [pc, #160]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	f023 0207 	bic.w	r2, r3, #7
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	4925      	ldr	r1, [pc, #148]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cf82:	4313      	orrs	r3, r2
 800cf84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf86:	f7f9 ff07 	bl	8006d98 <HAL_GetTick>
 800cf8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf8c:	e00a      	b.n	800cfa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf8e:	f7f9 ff03 	bl	8006d98 <HAL_GetTick>
 800cf92:	4602      	mov	r2, r0
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d901      	bls.n	800cfa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	e0be      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfa4:	4b1c      	ldr	r3, [pc, #112]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d1eb      	bne.n	800cf8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 0302 	and.w	r3, r3, #2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d010      	beq.n	800cfe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d208      	bcs.n	800cfe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cfd2:	4b11      	ldr	r3, [pc, #68]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cfd4:	699b      	ldr	r3, [r3, #24]
 800cfd6:	f023 020f 	bic.w	r2, r3, #15
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	490e      	ldr	r1, [pc, #56]	; (800d018 <HAL_RCC_ClockConfig+0x244>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfe4:	4b0b      	ldr	r3, [pc, #44]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 030f 	and.w	r3, r3, #15
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d214      	bcs.n	800d01c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cff2:	4b08      	ldr	r3, [pc, #32]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f023 020f 	bic.w	r2, r3, #15
 800cffa:	4906      	ldr	r1, [pc, #24]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	4313      	orrs	r3, r2
 800d000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d002:	4b04      	ldr	r3, [pc, #16]	; (800d014 <HAL_RCC_ClockConfig+0x240>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 030f 	and.w	r3, r3, #15
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d005      	beq.n	800d01c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e086      	b.n	800d122 <HAL_RCC_ClockConfig+0x34e>
 800d014:	52002000 	.word	0x52002000
 800d018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0304 	and.w	r3, r3, #4
 800d024:	2b00      	cmp	r3, #0
 800d026:	d010      	beq.n	800d04a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	691a      	ldr	r2, [r3, #16]
 800d02c:	4b3f      	ldr	r3, [pc, #252]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d034:	429a      	cmp	r2, r3
 800d036:	d208      	bcs.n	800d04a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d038:	4b3c      	ldr	r3, [pc, #240]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	4939      	ldr	r1, [pc, #228]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d046:	4313      	orrs	r3, r2
 800d048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0308 	and.w	r3, r3, #8
 800d052:	2b00      	cmp	r3, #0
 800d054:	d010      	beq.n	800d078 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	695a      	ldr	r2, [r3, #20]
 800d05a:	4b34      	ldr	r3, [pc, #208]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d062:	429a      	cmp	r2, r3
 800d064:	d208      	bcs.n	800d078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d066:	4b31      	ldr	r3, [pc, #196]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	492e      	ldr	r1, [pc, #184]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d074:	4313      	orrs	r3, r2
 800d076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b00      	cmp	r3, #0
 800d082:	d010      	beq.n	800d0a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	699a      	ldr	r2, [r3, #24]
 800d088:	4b28      	ldr	r3, [pc, #160]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d090:	429a      	cmp	r2, r3
 800d092:	d208      	bcs.n	800d0a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d094:	4b25      	ldr	r3, [pc, #148]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	4922      	ldr	r1, [pc, #136]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d010      	beq.n	800d0d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69da      	ldr	r2, [r3, #28]
 800d0b6:	4b1d      	ldr	r3, [pc, #116]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d208      	bcs.n	800d0d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d0c2:	4b1a      	ldr	r3, [pc, #104]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	4917      	ldr	r1, [pc, #92]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d0d4:	f000 f834 	bl	800d140 <HAL_RCC_GetSysClockFreq>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0dc:	699b      	ldr	r3, [r3, #24]
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	f003 030f 	and.w	r3, r3, #15
 800d0e4:	4912      	ldr	r1, [pc, #72]	; (800d130 <HAL_RCC_ClockConfig+0x35c>)
 800d0e6:	5ccb      	ldrb	r3, [r1, r3]
 800d0e8:	f003 031f 	and.w	r3, r3, #31
 800d0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d0f2:	4b0e      	ldr	r3, [pc, #56]	; (800d12c <HAL_RCC_ClockConfig+0x358>)
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	f003 030f 	and.w	r3, r3, #15
 800d0fa:	4a0d      	ldr	r2, [pc, #52]	; (800d130 <HAL_RCC_ClockConfig+0x35c>)
 800d0fc:	5cd3      	ldrb	r3, [r2, r3]
 800d0fe:	f003 031f 	and.w	r3, r3, #31
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	fa22 f303 	lsr.w	r3, r2, r3
 800d108:	4a0a      	ldr	r2, [pc, #40]	; (800d134 <HAL_RCC_ClockConfig+0x360>)
 800d10a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d10c:	4a0a      	ldr	r2, [pc, #40]	; (800d138 <HAL_RCC_ClockConfig+0x364>)
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d112:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <HAL_RCC_ClockConfig+0x368>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4618      	mov	r0, r3
 800d118:	f7f9 fdf4 	bl	8006d04 <HAL_InitTick>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	58024400 	.word	0x58024400
 800d130:	0801565c 	.word	0x0801565c
 800d134:	24000044 	.word	0x24000044
 800d138:	24000040 	.word	0x24000040
 800d13c:	24000048 	.word	0x24000048

0800d140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d140:	b480      	push	{r7}
 800d142:	b089      	sub	sp, #36	; 0x24
 800d144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d146:	4bb3      	ldr	r3, [pc, #716]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d14e:	2b18      	cmp	r3, #24
 800d150:	f200 8155 	bhi.w	800d3fe <HAL_RCC_GetSysClockFreq+0x2be>
 800d154:	a201      	add	r2, pc, #4	; (adr r2, 800d15c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15a:	bf00      	nop
 800d15c:	0800d1c1 	.word	0x0800d1c1
 800d160:	0800d3ff 	.word	0x0800d3ff
 800d164:	0800d3ff 	.word	0x0800d3ff
 800d168:	0800d3ff 	.word	0x0800d3ff
 800d16c:	0800d3ff 	.word	0x0800d3ff
 800d170:	0800d3ff 	.word	0x0800d3ff
 800d174:	0800d3ff 	.word	0x0800d3ff
 800d178:	0800d3ff 	.word	0x0800d3ff
 800d17c:	0800d1e7 	.word	0x0800d1e7
 800d180:	0800d3ff 	.word	0x0800d3ff
 800d184:	0800d3ff 	.word	0x0800d3ff
 800d188:	0800d3ff 	.word	0x0800d3ff
 800d18c:	0800d3ff 	.word	0x0800d3ff
 800d190:	0800d3ff 	.word	0x0800d3ff
 800d194:	0800d3ff 	.word	0x0800d3ff
 800d198:	0800d3ff 	.word	0x0800d3ff
 800d19c:	0800d1ed 	.word	0x0800d1ed
 800d1a0:	0800d3ff 	.word	0x0800d3ff
 800d1a4:	0800d3ff 	.word	0x0800d3ff
 800d1a8:	0800d3ff 	.word	0x0800d3ff
 800d1ac:	0800d3ff 	.word	0x0800d3ff
 800d1b0:	0800d3ff 	.word	0x0800d3ff
 800d1b4:	0800d3ff 	.word	0x0800d3ff
 800d1b8:	0800d3ff 	.word	0x0800d3ff
 800d1bc:	0800d1f3 	.word	0x0800d1f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c0:	4b94      	ldr	r3, [pc, #592]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d009      	beq.n	800d1e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1cc:	4b91      	ldr	r3, [pc, #580]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	08db      	lsrs	r3, r3, #3
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	4a90      	ldr	r2, [pc, #576]	; (800d418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d1de:	e111      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d1e0:	4b8d      	ldr	r3, [pc, #564]	; (800d418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d1e2:	61bb      	str	r3, [r7, #24]
      break;
 800d1e4:	e10e      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d1e6:	4b8d      	ldr	r3, [pc, #564]	; (800d41c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d1e8:	61bb      	str	r3, [r7, #24]
      break;
 800d1ea:	e10b      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d1ec:	4b8c      	ldr	r3, [pc, #560]	; (800d420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d1ee:	61bb      	str	r3, [r7, #24]
      break;
 800d1f0:	e108      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1f2:	4b88      	ldr	r3, [pc, #544]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d1fc:	4b85      	ldr	r3, [pc, #532]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d200:	091b      	lsrs	r3, r3, #4
 800d202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d208:	4b82      	ldr	r3, [pc, #520]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d212:	4b80      	ldr	r3, [pc, #512]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d216:	08db      	lsrs	r3, r3, #3
 800d218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	fb02 f303 	mul.w	r3, r2, r3
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 80e1 	beq.w	800d3f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2b02      	cmp	r3, #2
 800d23a:	f000 8083 	beq.w	800d344 <HAL_RCC_GetSysClockFreq+0x204>
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b02      	cmp	r3, #2
 800d242:	f200 80a1 	bhi.w	800d388 <HAL_RCC_GetSysClockFreq+0x248>
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d003      	beq.n	800d254 <HAL_RCC_GetSysClockFreq+0x114>
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d056      	beq.n	800d300 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d252:	e099      	b.n	800d388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d254:	4b6f      	ldr	r3, [pc, #444]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 0320 	and.w	r3, r3, #32
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d02d      	beq.n	800d2bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d260:	4b6c      	ldr	r3, [pc, #432]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	08db      	lsrs	r3, r3, #3
 800d266:	f003 0303 	and.w	r3, r3, #3
 800d26a:	4a6b      	ldr	r2, [pc, #428]	; (800d418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d26c:	fa22 f303 	lsr.w	r3, r2, r3
 800d270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	ee07 3a90 	vmov	s15, r3
 800d278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d28a:	4b62      	ldr	r3, [pc, #392]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d292:	ee07 3a90 	vmov	s15, r3
 800d296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d29e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d2ba:	e087      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d428 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ce:	4b51      	ldr	r3, [pc, #324]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d6:	ee07 3a90 	vmov	s15, r3
 800d2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2de:	ed97 6a02 	vldr	s12, [r7, #8]
 800d2e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d2fe:	e065      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d42c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d312:	4b40      	ldr	r3, [pc, #256]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d322:	ed97 6a02 	vldr	s12, [r7, #8]
 800d326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d33e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d342:	e043      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d430 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d356:	4b2f      	ldr	r3, [pc, #188]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35e:	ee07 3a90 	vmov	s15, r3
 800d362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d366:	ed97 6a02 	vldr	s12, [r7, #8]
 800d36a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d386:	e021      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	ee07 3a90 	vmov	s15, r3
 800d38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d42c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d39a:	4b1e      	ldr	r3, [pc, #120]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800d3ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d3ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d3cc:	4b11      	ldr	r3, [pc, #68]	; (800d414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d0:	0a5b      	lsrs	r3, r3, #9
 800d3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	ee07 3a90 	vmov	s15, r3
 800d3e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d3e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f0:	ee17 3a90 	vmov	r3, s15
 800d3f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d3f6:	e005      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	61bb      	str	r3, [r7, #24]
      break;
 800d3fc:	e002      	b.n	800d404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d3fe:	4b07      	ldr	r3, [pc, #28]	; (800d41c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d400:	61bb      	str	r3, [r7, #24]
      break;
 800d402:	bf00      	nop
  }

  return sysclockfreq;
 800d404:	69bb      	ldr	r3, [r7, #24]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3724      	adds	r7, #36	; 0x24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	58024400 	.word	0x58024400
 800d418:	03d09000 	.word	0x03d09000
 800d41c:	003d0900 	.word	0x003d0900
 800d420:	017d7840 	.word	0x017d7840
 800d424:	46000000 	.word	0x46000000
 800d428:	4c742400 	.word	0x4c742400
 800d42c:	4a742400 	.word	0x4a742400
 800d430:	4bbebc20 	.word	0x4bbebc20

0800d434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d43a:	f7ff fe81 	bl	800d140 <HAL_RCC_GetSysClockFreq>
 800d43e:	4602      	mov	r2, r0
 800d440:	4b10      	ldr	r3, [pc, #64]	; (800d484 <HAL_RCC_GetHCLKFreq+0x50>)
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	0a1b      	lsrs	r3, r3, #8
 800d446:	f003 030f 	and.w	r3, r3, #15
 800d44a:	490f      	ldr	r1, [pc, #60]	; (800d488 <HAL_RCC_GetHCLKFreq+0x54>)
 800d44c:	5ccb      	ldrb	r3, [r1, r3]
 800d44e:	f003 031f 	and.w	r3, r3, #31
 800d452:	fa22 f303 	lsr.w	r3, r2, r3
 800d456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <HAL_RCC_GetHCLKFreq+0x50>)
 800d45a:	699b      	ldr	r3, [r3, #24]
 800d45c:	f003 030f 	and.w	r3, r3, #15
 800d460:	4a09      	ldr	r2, [pc, #36]	; (800d488 <HAL_RCC_GetHCLKFreq+0x54>)
 800d462:	5cd3      	ldrb	r3, [r2, r3]
 800d464:	f003 031f 	and.w	r3, r3, #31
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	fa22 f303 	lsr.w	r3, r2, r3
 800d46e:	4a07      	ldr	r2, [pc, #28]	; (800d48c <HAL_RCC_GetHCLKFreq+0x58>)
 800d470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d472:	4a07      	ldr	r2, [pc, #28]	; (800d490 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d478:	4b04      	ldr	r3, [pc, #16]	; (800d48c <HAL_RCC_GetHCLKFreq+0x58>)
 800d47a:	681b      	ldr	r3, [r3, #0]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	58024400 	.word	0x58024400
 800d488:	0801565c 	.word	0x0801565c
 800d48c:	24000044 	.word	0x24000044
 800d490:	24000040 	.word	0x24000040

0800d494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d498:	f7ff ffcc 	bl	800d434 <HAL_RCC_GetHCLKFreq>
 800d49c:	4602      	mov	r2, r0
 800d49e:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4a0:	69db      	ldr	r3, [r3, #28]
 800d4a2:	091b      	lsrs	r3, r3, #4
 800d4a4:	f003 0307 	and.w	r3, r3, #7
 800d4a8:	4904      	ldr	r1, [pc, #16]	; (800d4bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d4aa:	5ccb      	ldrb	r3, [r1, r3]
 800d4ac:	f003 031f 	and.w	r3, r3, #31
 800d4b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	58024400 	.word	0x58024400
 800d4bc:	0801565c 	.word	0x0801565c

0800d4c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d4c4:	f7ff ffb6 	bl	800d434 <HAL_RCC_GetHCLKFreq>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	4b06      	ldr	r3, [pc, #24]	; (800d4e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	0a1b      	lsrs	r3, r3, #8
 800d4d0:	f003 0307 	and.w	r3, r3, #7
 800d4d4:	4904      	ldr	r1, [pc, #16]	; (800d4e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d4d6:	5ccb      	ldrb	r3, [r1, r3]
 800d4d8:	f003 031f 	and.w	r3, r3, #31
 800d4dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	58024400 	.word	0x58024400
 800d4e8:	0801565c 	.word	0x0801565c

0800d4ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d4ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4f0:	b0ca      	sub	sp, #296	; 0x128
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d4fe:	2300      	movs	r3, #0
 800d500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d510:	2500      	movs	r5, #0
 800d512:	ea54 0305 	orrs.w	r3, r4, r5
 800d516:	d049      	beq.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d51c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d51e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d522:	d02f      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d528:	d828      	bhi.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d52a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d52e:	d01a      	beq.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d534:	d822      	bhi.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d53a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d53e:	d007      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d540:	e01c      	b.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d542:	4bb8      	ldr	r3, [pc, #736]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d546:	4ab7      	ldr	r2, [pc, #732]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d54c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d54e:	e01a      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d554:	3308      	adds	r3, #8
 800d556:	2102      	movs	r1, #2
 800d558:	4618      	mov	r0, r3
 800d55a:	f002 fb61 	bl	800fc20 <RCCEx_PLL2_Config>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d564:	e00f      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d56a:	3328      	adds	r3, #40	; 0x28
 800d56c:	2102      	movs	r1, #2
 800d56e:	4618      	mov	r0, r3
 800d570:	f002 fc08 	bl	800fd84 <RCCEx_PLL3_Config>
 800d574:	4603      	mov	r3, r0
 800d576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d57a:	e004      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d582:	e000      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10a      	bne.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d58e:	4ba5      	ldr	r3, [pc, #660]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d592:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59c:	4aa1      	ldr	r2, [pc, #644]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d59e:	430b      	orrs	r3, r1
 800d5a0:	6513      	str	r3, [r2, #80]	; 0x50
 800d5a2:	e003      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d5b8:	f04f 0900 	mov.w	r9, #0
 800d5bc:	ea58 0309 	orrs.w	r3, r8, r9
 800d5c0:	d047      	beq.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d82a      	bhi.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d5cc:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d2:	bf00      	nop
 800d5d4:	0800d5e9 	.word	0x0800d5e9
 800d5d8:	0800d5f7 	.word	0x0800d5f7
 800d5dc:	0800d60d 	.word	0x0800d60d
 800d5e0:	0800d62b 	.word	0x0800d62b
 800d5e4:	0800d62b 	.word	0x0800d62b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5e8:	4b8e      	ldr	r3, [pc, #568]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ec:	4a8d      	ldr	r2, [pc, #564]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d5ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d5f4:	e01a      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f002 fb0e 	bl	800fc20 <RCCEx_PLL2_Config>
 800d604:	4603      	mov	r3, r0
 800d606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d60a:	e00f      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d610:	3328      	adds	r3, #40	; 0x28
 800d612:	2100      	movs	r1, #0
 800d614:	4618      	mov	r0, r3
 800d616:	f002 fbb5 	bl	800fd84 <RCCEx_PLL3_Config>
 800d61a:	4603      	mov	r3, r0
 800d61c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d620:	e004      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d628:	e000      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d62a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10a      	bne.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d634:	4b7b      	ldr	r3, [pc, #492]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d638:	f023 0107 	bic.w	r1, r3, #7
 800d63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d642:	4a78      	ldr	r2, [pc, #480]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d644:	430b      	orrs	r3, r1
 800d646:	6513      	str	r3, [r2, #80]	; 0x50
 800d648:	e003      	b.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d64e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d65e:	f04f 0b00 	mov.w	fp, #0
 800d662:	ea5a 030b 	orrs.w	r3, sl, fp
 800d666:	d04c      	beq.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d672:	d030      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d678:	d829      	bhi.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d67a:	2bc0      	cmp	r3, #192	; 0xc0
 800d67c:	d02d      	beq.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d67e:	2bc0      	cmp	r3, #192	; 0xc0
 800d680:	d825      	bhi.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d682:	2b80      	cmp	r3, #128	; 0x80
 800d684:	d018      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d686:	2b80      	cmp	r3, #128	; 0x80
 800d688:	d821      	bhi.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d68e:	2b40      	cmp	r3, #64	; 0x40
 800d690:	d007      	beq.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d692:	e01c      	b.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d694:	4b63      	ldr	r3, [pc, #396]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	4a62      	ldr	r2, [pc, #392]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d69e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d6a0:	e01c      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6a6:	3308      	adds	r3, #8
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f002 fab8 	bl	800fc20 <RCCEx_PLL2_Config>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d6b6:	e011      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6bc:	3328      	adds	r3, #40	; 0x28
 800d6be:	2100      	movs	r1, #0
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f002 fb5f 	bl	800fd84 <RCCEx_PLL3_Config>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d6cc:	e006      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6d4:	e002      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d6d6:	bf00      	nop
 800d6d8:	e000      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d6da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10a      	bne.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d6e4:	4b4f      	ldr	r3, [pc, #316]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6f2:	4a4c      	ldr	r2, [pc, #304]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d6f4:	430b      	orrs	r3, r1
 800d6f6:	6513      	str	r3, [r2, #80]	; 0x50
 800d6f8:	e003      	b.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d70e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d712:	2300      	movs	r3, #0
 800d714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d718:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800d71c:	460b      	mov	r3, r1
 800d71e:	4313      	orrs	r3, r2
 800d720:	d053      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d72a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d72e:	d035      	beq.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d734:	d82e      	bhi.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d73a:	d031      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d73c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d740:	d828      	bhi.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d746:	d01a      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d74c:	d822      	bhi.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d756:	d007      	beq.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d758:	e01c      	b.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d75a:	4b32      	ldr	r3, [pc, #200]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75e:	4a31      	ldr	r2, [pc, #196]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d766:	e01c      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d76c:	3308      	adds	r3, #8
 800d76e:	2100      	movs	r1, #0
 800d770:	4618      	mov	r0, r3
 800d772:	f002 fa55 	bl	800fc20 <RCCEx_PLL2_Config>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d77c:	e011      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d782:	3328      	adds	r3, #40	; 0x28
 800d784:	2100      	movs	r1, #0
 800d786:	4618      	mov	r0, r3
 800d788:	f002 fafc 	bl	800fd84 <RCCEx_PLL3_Config>
 800d78c:	4603      	mov	r3, r0
 800d78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d792:	e006      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d79a:	e002      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d79c:	bf00      	nop
 800d79e:	e000      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10b      	bne.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d7aa:	4b1e      	ldr	r3, [pc, #120]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800d7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d7ba:	4a1a      	ldr	r2, [pc, #104]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	6593      	str	r3, [r2, #88]	; 0x58
 800d7c0:	e003      	b.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d7d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d7e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	d056      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d7f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7f6:	d038      	beq.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d7f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7fc:	d831      	bhi.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d7fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d802:	d034      	beq.n	800d86e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d808:	d82b      	bhi.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d80e:	d01d      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d814:	d825      	bhi.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d816:	2b00      	cmp	r3, #0
 800d818:	d006      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d81a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d81e:	d00a      	beq.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d820:	e01f      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d822:	bf00      	nop
 800d824:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d828:	4ba2      	ldr	r3, [pc, #648]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82c:	4aa1      	ldr	r2, [pc, #644]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d82e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d834:	e01c      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d83a:	3308      	adds	r3, #8
 800d83c:	2100      	movs	r1, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f002 f9ee 	bl	800fc20 <RCCEx_PLL2_Config>
 800d844:	4603      	mov	r3, r0
 800d846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d84a:	e011      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d850:	3328      	adds	r3, #40	; 0x28
 800d852:	2100      	movs	r1, #0
 800d854:	4618      	mov	r0, r3
 800d856:	f002 fa95 	bl	800fd84 <RCCEx_PLL3_Config>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d860:	e006      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d868:	e002      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d86a:	bf00      	nop
 800d86c:	e000      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d86e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10b      	bne.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d878:	4b8e      	ldr	r3, [pc, #568]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d87a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d87c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800d880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d888:	4a8a      	ldr	r2, [pc, #552]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d88a:	430b      	orrs	r3, r1
 800d88c:	6593      	str	r3, [r2, #88]	; 0x58
 800d88e:	e003      	b.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d8a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d8ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	d03a      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8be:	2b30      	cmp	r3, #48	; 0x30
 800d8c0:	d01f      	beq.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d8c2:	2b30      	cmp	r3, #48	; 0x30
 800d8c4:	d819      	bhi.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d8c6:	2b20      	cmp	r3, #32
 800d8c8:	d00c      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d8ca:	2b20      	cmp	r3, #32
 800d8cc:	d815      	bhi.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d019      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d8d2:	2b10      	cmp	r3, #16
 800d8d4:	d111      	bne.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8d6:	4b77      	ldr	r3, [pc, #476]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8da:	4a76      	ldr	r2, [pc, #472]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d8dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d8e2:	e011      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	2102      	movs	r1, #2
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f002 f997 	bl	800fc20 <RCCEx_PLL2_Config>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d8f8:	e006      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d900:	e002      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d902:	bf00      	nop
 800d904:	e000      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10a      	bne.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d910:	4b68      	ldr	r3, [pc, #416]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d914:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d91e:	4a65      	ldr	r2, [pc, #404]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d920:	430b      	orrs	r3, r1
 800d922:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d924:	e003      	b.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d92a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d93a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d93e:	2300      	movs	r3, #0
 800d940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d944:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d948:	460b      	mov	r3, r1
 800d94a:	4313      	orrs	r3, r2
 800d94c:	d051      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d958:	d035      	beq.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d95a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d95e:	d82e      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d964:	d031      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d96a:	d828      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d970:	d01a      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d976:	d822      	bhi.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d980:	d007      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d982:	e01c      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d984:	4b4b      	ldr	r3, [pc, #300]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	4a4a      	ldr	r2, [pc, #296]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d98e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d990:	e01c      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d996:	3308      	adds	r3, #8
 800d998:	2100      	movs	r1, #0
 800d99a:	4618      	mov	r0, r3
 800d99c:	f002 f940 	bl	800fc20 <RCCEx_PLL2_Config>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d9a6:	e011      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9ac:	3328      	adds	r3, #40	; 0x28
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 f9e7 	bl	800fd84 <RCCEx_PLL3_Config>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d9bc:	e006      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9c4:	e002      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d9c6:	bf00      	nop
 800d9c8:	e000      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10a      	bne.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d9d4:	4b37      	ldr	r3, [pc, #220]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9e2:	4a34      	ldr	r2, [pc, #208]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	6513      	str	r3, [r2, #80]	; 0x50
 800d9e8:	e003      	b.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d9fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800da02:	2300      	movs	r3, #0
 800da04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800da0c:	460b      	mov	r3, r1
 800da0e:	4313      	orrs	r3, r2
 800da10:	d056      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800da12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da1c:	d033      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800da1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da22:	d82c      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800da24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da28:	d02f      	beq.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800da2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da2e:	d826      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800da30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800da34:	d02b      	beq.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800da36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800da3a:	d820      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800da3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da40:	d012      	beq.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800da42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da46:	d81a      	bhi.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d022      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800da4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da50:	d115      	bne.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800da52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da56:	3308      	adds	r3, #8
 800da58:	2101      	movs	r1, #1
 800da5a:	4618      	mov	r0, r3
 800da5c:	f002 f8e0 	bl	800fc20 <RCCEx_PLL2_Config>
 800da60:	4603      	mov	r3, r0
 800da62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800da66:	e015      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da6c:	3328      	adds	r3, #40	; 0x28
 800da6e:	2101      	movs	r1, #1
 800da70:	4618      	mov	r0, r3
 800da72:	f002 f987 	bl	800fd84 <RCCEx_PLL3_Config>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800da7c:	e00a      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da84:	e006      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800da86:	bf00      	nop
 800da88:	e004      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800da8a:	bf00      	nop
 800da8c:	e002      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800da8e:	bf00      	nop
 800da90:	e000      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800da92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10d      	bne.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800da9c:	4b05      	ldr	r3, [pc, #20]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800daa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daaa:	4a02      	ldr	r2, [pc, #8]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800daac:	430b      	orrs	r3, r1
 800daae:	6513      	str	r3, [r2, #80]	; 0x50
 800dab0:	e006      	b.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dab2:	bf00      	nop
 800dab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dabc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800dacc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dad0:	2300      	movs	r3, #0
 800dad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dad6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800dada:	460b      	mov	r3, r1
 800dadc:	4313      	orrs	r3, r2
 800dade:	d055      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daec:	d033      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800daee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daf2:	d82c      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800daf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daf8:	d02f      	beq.n	800db5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dafe:	d826      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800db00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db04:	d02b      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800db06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db0a:	d820      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800db0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db10:	d012      	beq.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800db12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db16:	d81a      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d022      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800db1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db20:	d115      	bne.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db26:	3308      	adds	r3, #8
 800db28:	2101      	movs	r1, #1
 800db2a:	4618      	mov	r0, r3
 800db2c:	f002 f878 	bl	800fc20 <RCCEx_PLL2_Config>
 800db30:	4603      	mov	r3, r0
 800db32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800db36:	e015      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db3c:	3328      	adds	r3, #40	; 0x28
 800db3e:	2101      	movs	r1, #1
 800db40:	4618      	mov	r0, r3
 800db42:	f002 f91f 	bl	800fd84 <RCCEx_PLL3_Config>
 800db46:	4603      	mov	r3, r0
 800db48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800db4c:	e00a      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db54:	e006      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800db56:	bf00      	nop
 800db58:	e004      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800db5a:	bf00      	nop
 800db5c:	e002      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800db5e:	bf00      	nop
 800db60:	e000      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800db62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10b      	bne.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800db6c:	4ba3      	ldr	r3, [pc, #652]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800db74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800db7c:	4a9f      	ldr	r2, [pc, #636]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db7e:	430b      	orrs	r3, r1
 800db80:	6593      	str	r3, [r2, #88]	; 0x58
 800db82:	e003      	b.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800db8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800db98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db9c:	2300      	movs	r3, #0
 800db9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dba6:	460b      	mov	r3, r1
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	d037      	beq.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbb6:	d00e      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800dbb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbbc:	d816      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x700>
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d018      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800dbc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbc6:	d111      	bne.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbc8:	4b8c      	ldr	r3, [pc, #560]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbcc:	4a8b      	ldr	r2, [pc, #556]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dbd4:	e00f      	b.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbda:	3308      	adds	r3, #8
 800dbdc:	2101      	movs	r1, #1
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f002 f81e 	bl	800fc20 <RCCEx_PLL2_Config>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dbea:	e004      	b.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbf2:	e000      	b.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800dbf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dbfe:	4b7f      	ldr	r3, [pc, #508]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0c:	4a7b      	ldr	r2, [pc, #492]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dc0e:	430b      	orrs	r3, r1
 800dc10:	6513      	str	r3, [r2, #80]	; 0x50
 800dc12:	e003      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800dc28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dc32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	d039      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d81c      	bhi.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dc46:	a201      	add	r2, pc, #4	; (adr r2, 800dc4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4c:	0800dc89 	.word	0x0800dc89
 800dc50:	0800dc5d 	.word	0x0800dc5d
 800dc54:	0800dc6b 	.word	0x0800dc6b
 800dc58:	0800dc89 	.word	0x0800dc89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc5c:	4b67      	ldr	r3, [pc, #412]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc60:	4a66      	ldr	r2, [pc, #408]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dc62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dc68:	e00f      	b.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc6e:	3308      	adds	r3, #8
 800dc70:	2102      	movs	r1, #2
 800dc72:	4618      	mov	r0, r3
 800dc74:	f001 ffd4 	bl	800fc20 <RCCEx_PLL2_Config>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dc7e:	e004      	b.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc86:	e000      	b.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800dc88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10a      	bne.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dc92:	4b5a      	ldr	r3, [pc, #360]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc96:	f023 0103 	bic.w	r1, r3, #3
 800dc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dca0:	4a56      	ldr	r2, [pc, #344]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dca2:	430b      	orrs	r3, r1
 800dca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dca6:	e003      	b.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dcb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800dcbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800dcca:	460b      	mov	r3, r1
 800dccc:	4313      	orrs	r3, r2
 800dcce:	f000 809f 	beq.w	800de10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dcd2:	4b4b      	ldr	r3, [pc, #300]	; (800de00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a4a      	ldr	r2, [pc, #296]	; (800de00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dcd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dcde:	f7f9 f85b 	bl	8006d98 <HAL_GetTick>
 800dce2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dce6:	e00b      	b.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dce8:	f7f9 f856 	bl	8006d98 <HAL_GetTick>
 800dcec:	4602      	mov	r2, r0
 800dcee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	2b64      	cmp	r3, #100	; 0x64
 800dcf6:	d903      	bls.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dcfe:	e005      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd00:	4b3f      	ldr	r3, [pc, #252]	; (800de00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d0ed      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800dd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d179      	bne.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800dd14:	4b39      	ldr	r3, [pc, #228]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd20:	4053      	eors	r3, r2
 800dd22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d015      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dd2a:	4b34      	ldr	r3, [pc, #208]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dd36:	4b31      	ldr	r3, [pc, #196]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3a:	4a30      	ldr	r2, [pc, #192]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd42:	4b2e      	ldr	r3, [pc, #184]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd46:	4a2d      	ldr	r2, [pc, #180]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800dd4e:	4a2b      	ldr	r2, [pc, #172]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dd54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd62:	d118      	bne.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd64:	f7f9 f818 	bl	8006d98 <HAL_GetTick>
 800dd68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd6c:	e00d      	b.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd6e:	f7f9 f813 	bl	8006d98 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dd78:	1ad2      	subs	r2, r2, r3
 800dd7a:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d903      	bls.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800dd82:	2303      	movs	r3, #3
 800dd84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800dd88:	e005      	b.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd8e:	f003 0302 	and.w	r3, r3, #2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d0eb      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800dd96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d129      	bne.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dda2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dda6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ddae:	d10e      	bne.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ddb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ddc0:	091a      	lsrs	r2, r3, #4
 800ddc2:	4b10      	ldr	r3, [pc, #64]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	4a0d      	ldr	r2, [pc, #52]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddc8:	430b      	orrs	r3, r1
 800ddca:	6113      	str	r3, [r2, #16]
 800ddcc:	e005      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ddce:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	4a0a      	ldr	r2, [pc, #40]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ddd8:	6113      	str	r3, [r2, #16]
 800ddda:	4b08      	ldr	r3, [pc, #32]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ddde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dde2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dde6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddea:	4a04      	ldr	r2, [pc, #16]	; (800ddfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddec:	430b      	orrs	r3, r1
 800ddee:	6713      	str	r3, [r2, #112]	; 0x70
 800ddf0:	e00e      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ddf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ddfa:	e009      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ddfc:	58024400 	.word	0x58024400
 800de00:	58024800 	.word	0x58024800
 800de04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800de10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	f002 0301 	and.w	r3, r2, #1
 800de1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de20:	2300      	movs	r3, #0
 800de22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4313      	orrs	r3, r2
 800de2e:	f000 8089 	beq.w	800df44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800de32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de38:	2b28      	cmp	r3, #40	; 0x28
 800de3a:	d86b      	bhi.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800de3c:	a201      	add	r2, pc, #4	; (adr r2, 800de44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800de3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de42:	bf00      	nop
 800de44:	0800df1d 	.word	0x0800df1d
 800de48:	0800df15 	.word	0x0800df15
 800de4c:	0800df15 	.word	0x0800df15
 800de50:	0800df15 	.word	0x0800df15
 800de54:	0800df15 	.word	0x0800df15
 800de58:	0800df15 	.word	0x0800df15
 800de5c:	0800df15 	.word	0x0800df15
 800de60:	0800df15 	.word	0x0800df15
 800de64:	0800dee9 	.word	0x0800dee9
 800de68:	0800df15 	.word	0x0800df15
 800de6c:	0800df15 	.word	0x0800df15
 800de70:	0800df15 	.word	0x0800df15
 800de74:	0800df15 	.word	0x0800df15
 800de78:	0800df15 	.word	0x0800df15
 800de7c:	0800df15 	.word	0x0800df15
 800de80:	0800df15 	.word	0x0800df15
 800de84:	0800deff 	.word	0x0800deff
 800de88:	0800df15 	.word	0x0800df15
 800de8c:	0800df15 	.word	0x0800df15
 800de90:	0800df15 	.word	0x0800df15
 800de94:	0800df15 	.word	0x0800df15
 800de98:	0800df15 	.word	0x0800df15
 800de9c:	0800df15 	.word	0x0800df15
 800dea0:	0800df15 	.word	0x0800df15
 800dea4:	0800df1d 	.word	0x0800df1d
 800dea8:	0800df15 	.word	0x0800df15
 800deac:	0800df15 	.word	0x0800df15
 800deb0:	0800df15 	.word	0x0800df15
 800deb4:	0800df15 	.word	0x0800df15
 800deb8:	0800df15 	.word	0x0800df15
 800debc:	0800df15 	.word	0x0800df15
 800dec0:	0800df15 	.word	0x0800df15
 800dec4:	0800df1d 	.word	0x0800df1d
 800dec8:	0800df15 	.word	0x0800df15
 800decc:	0800df15 	.word	0x0800df15
 800ded0:	0800df15 	.word	0x0800df15
 800ded4:	0800df15 	.word	0x0800df15
 800ded8:	0800df15 	.word	0x0800df15
 800dedc:	0800df15 	.word	0x0800df15
 800dee0:	0800df15 	.word	0x0800df15
 800dee4:	0800df1d 	.word	0x0800df1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deec:	3308      	adds	r3, #8
 800deee:	2101      	movs	r1, #1
 800def0:	4618      	mov	r0, r3
 800def2:	f001 fe95 	bl	800fc20 <RCCEx_PLL2_Config>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800defc:	e00f      	b.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800defe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df02:	3328      	adds	r3, #40	; 0x28
 800df04:	2101      	movs	r1, #1
 800df06:	4618      	mov	r0, r3
 800df08:	f001 ff3c 	bl	800fd84 <RCCEx_PLL3_Config>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800df12:	e004      	b.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df1a:	e000      	b.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800df1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10a      	bne.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800df26:	4bbf      	ldr	r3, [pc, #764]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800df28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df2a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800df2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df34:	4abb      	ldr	r2, [pc, #748]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800df36:	430b      	orrs	r3, r1
 800df38:	6553      	str	r3, [r2, #84]	; 0x54
 800df3a:	e003      	b.n	800df44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800df44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f002 0302 	and.w	r3, r2, #2
 800df50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df54:	2300      	movs	r3, #0
 800df56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800df5e:	460b      	mov	r3, r1
 800df60:	4313      	orrs	r3, r2
 800df62:	d041      	beq.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800df64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d824      	bhi.n	800dfb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800df6e:	a201      	add	r2, pc, #4	; (adr r2, 800df74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800dfc1 	.word	0x0800dfc1
 800df78:	0800df8d 	.word	0x0800df8d
 800df7c:	0800dfa3 	.word	0x0800dfa3
 800df80:	0800dfc1 	.word	0x0800dfc1
 800df84:	0800dfc1 	.word	0x0800dfc1
 800df88:	0800dfc1 	.word	0x0800dfc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df90:	3308      	adds	r3, #8
 800df92:	2101      	movs	r1, #1
 800df94:	4618      	mov	r0, r3
 800df96:	f001 fe43 	bl	800fc20 <RCCEx_PLL2_Config>
 800df9a:	4603      	mov	r3, r0
 800df9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dfa0:	e00f      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfa6:	3328      	adds	r3, #40	; 0x28
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f001 feea 	bl	800fd84 <RCCEx_PLL3_Config>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dfb6:	e004      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dfbe:	e000      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dfc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10a      	bne.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dfca:	4b96      	ldr	r3, [pc, #600]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dfcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfce:	f023 0107 	bic.w	r1, r3, #7
 800dfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfd8:	4a92      	ldr	r2, [pc, #584]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dfda:	430b      	orrs	r3, r1
 800dfdc:	6553      	str	r3, [r2, #84]	; 0x54
 800dfde:	e003      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f002 0304 	and.w	r3, r2, #4
 800dff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dff8:	2300      	movs	r3, #0
 800dffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e002:	460b      	mov	r3, r1
 800e004:	4313      	orrs	r3, r2
 800e006:	d044      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e00c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e010:	2b05      	cmp	r3, #5
 800e012:	d825      	bhi.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e014:	a201      	add	r2, pc, #4	; (adr r2, 800e01c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01a:	bf00      	nop
 800e01c:	0800e069 	.word	0x0800e069
 800e020:	0800e035 	.word	0x0800e035
 800e024:	0800e04b 	.word	0x0800e04b
 800e028:	0800e069 	.word	0x0800e069
 800e02c:	0800e069 	.word	0x0800e069
 800e030:	0800e069 	.word	0x0800e069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e038:	3308      	adds	r3, #8
 800e03a:	2101      	movs	r1, #1
 800e03c:	4618      	mov	r0, r3
 800e03e:	f001 fdef 	bl	800fc20 <RCCEx_PLL2_Config>
 800e042:	4603      	mov	r3, r0
 800e044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e048:	e00f      	b.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e04e:	3328      	adds	r3, #40	; 0x28
 800e050:	2101      	movs	r1, #1
 800e052:	4618      	mov	r0, r3
 800e054:	f001 fe96 	bl	800fd84 <RCCEx_PLL3_Config>
 800e058:	4603      	mov	r3, r0
 800e05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e05e:	e004      	b.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e066:	e000      	b.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e06a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10b      	bne.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e072:	4b6c      	ldr	r3, [pc, #432]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e076:	f023 0107 	bic.w	r1, r3, #7
 800e07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e07e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e082:	4a68      	ldr	r2, [pc, #416]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e084:	430b      	orrs	r3, r1
 800e086:	6593      	str	r3, [r2, #88]	; 0x58
 800e088:	e003      	b.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e08e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	f002 0320 	and.w	r3, r2, #32
 800e09e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e0a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	d055      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0be:	d033      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e0c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0c4:	d82c      	bhi.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0ca:	d02f      	beq.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0d0:	d826      	bhi.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e0d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0d6:	d02b      	beq.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e0d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0dc:	d820      	bhi.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0e2:	d012      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0e8:	d81a      	bhi.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d022      	beq.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e0ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0f2:	d115      	bne.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f001 fd8f 	bl	800fc20 <RCCEx_PLL2_Config>
 800e102:	4603      	mov	r3, r0
 800e104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e108:	e015      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e10e:	3328      	adds	r3, #40	; 0x28
 800e110:	2102      	movs	r1, #2
 800e112:	4618      	mov	r0, r3
 800e114:	f001 fe36 	bl	800fd84 <RCCEx_PLL3_Config>
 800e118:	4603      	mov	r3, r0
 800e11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e11e:	e00a      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e126:	e006      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e128:	bf00      	nop
 800e12a:	e004      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e12c:	bf00      	nop
 800e12e:	e002      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e130:	bf00      	nop
 800e132:	e000      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e134:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10b      	bne.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e13e:	4b39      	ldr	r3, [pc, #228]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e142:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e14e:	4a35      	ldr	r2, [pc, #212]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e150:	430b      	orrs	r3, r1
 800e152:	6553      	str	r3, [r2, #84]	; 0x54
 800e154:	e003      	b.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e15a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e16a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e16e:	2300      	movs	r3, #0
 800e170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e178:	460b      	mov	r3, r1
 800e17a:	4313      	orrs	r3, r2
 800e17c:	d058      	beq.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e186:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e18a:	d033      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e18c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e190:	d82c      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e196:	d02f      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e19c:	d826      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e19e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e1a2:	d02b      	beq.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e1a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e1a8:	d820      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1ae:	d012      	beq.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1b4:	d81a      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d022      	beq.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1be:	d115      	bne.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f001 fd29 	bl	800fc20 <RCCEx_PLL2_Config>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e1d4:	e015      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1da:	3328      	adds	r3, #40	; 0x28
 800e1dc:	2102      	movs	r1, #2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f001 fdd0 	bl	800fd84 <RCCEx_PLL3_Config>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e1ea:	e00a      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1f2:	e006      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e1f4:	bf00      	nop
 800e1f6:	e004      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e1f8:	bf00      	nop
 800e1fa:	e002      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e1fc:	bf00      	nop
 800e1fe:	e000      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10e      	bne.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e20a:	4b06      	ldr	r3, [pc, #24]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e20e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e21a:	4a02      	ldr	r2, [pc, #8]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e21c:	430b      	orrs	r3, r1
 800e21e:	6593      	str	r3, [r2, #88]	; 0x58
 800e220:	e006      	b.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e222:	bf00      	nop
 800e224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e22c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e23c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e240:	2300      	movs	r3, #0
 800e242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e24a:	460b      	mov	r3, r1
 800e24c:	4313      	orrs	r3, r2
 800e24e:	d055      	beq.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e258:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e25c:	d033      	beq.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e25e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e262:	d82c      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e268:	d02f      	beq.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e26a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e26e:	d826      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e270:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e274:	d02b      	beq.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e276:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e27a:	d820      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e27c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e280:	d012      	beq.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e286:	d81a      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d022      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e28c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e290:	d115      	bne.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e296:	3308      	adds	r3, #8
 800e298:	2100      	movs	r1, #0
 800e29a:	4618      	mov	r0, r3
 800e29c:	f001 fcc0 	bl	800fc20 <RCCEx_PLL2_Config>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e2a6:	e015      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ac:	3328      	adds	r3, #40	; 0x28
 800e2ae:	2102      	movs	r1, #2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 fd67 	bl	800fd84 <RCCEx_PLL3_Config>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e2bc:	e00a      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2c4:	e006      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e2c6:	bf00      	nop
 800e2c8:	e004      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e2ca:	bf00      	nop
 800e2cc:	e002      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e2ce:	bf00      	nop
 800e2d0:	e000      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e2d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10b      	bne.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e2dc:	4ba1      	ldr	r3, [pc, #644]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e2ec:	4a9d      	ldr	r2, [pc, #628]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2ee:	430b      	orrs	r3, r1
 800e2f0:	6593      	str	r3, [r2, #88]	; 0x58
 800e2f2:	e003      	b.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f002 0308 	and.w	r3, r2, #8
 800e308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e30c:	2300      	movs	r3, #0
 800e30e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e316:	460b      	mov	r3, r1
 800e318:	4313      	orrs	r3, r2
 800e31a:	d01e      	beq.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e328:	d10c      	bne.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e32e:	3328      	adds	r3, #40	; 0x28
 800e330:	2102      	movs	r1, #2
 800e332:	4618      	mov	r0, r3
 800e334:	f001 fd26 	bl	800fd84 <RCCEx_PLL3_Config>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e344:	4b87      	ldr	r3, [pc, #540]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e354:	4a83      	ldr	r2, [pc, #524]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e356:	430b      	orrs	r3, r1
 800e358:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	f002 0310 	and.w	r3, r2, #16
 800e366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e36a:	2300      	movs	r3, #0
 800e36c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e370:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e374:	460b      	mov	r3, r1
 800e376:	4313      	orrs	r3, r2
 800e378:	d01e      	beq.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e37e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e386:	d10c      	bne.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e38c:	3328      	adds	r3, #40	; 0x28
 800e38e:	2102      	movs	r1, #2
 800e390:	4618      	mov	r0, r3
 800e392:	f001 fcf7 	bl	800fd84 <RCCEx_PLL3_Config>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e3a2:	4b70      	ldr	r3, [pc, #448]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e3b2:	4a6c      	ldr	r2, [pc, #432]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e3b4:	430b      	orrs	r3, r1
 800e3b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e3c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e3ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	d03e      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e3e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3e4:	d022      	beq.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e3e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3ea:	d81b      	bhi.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d003      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f4:	d00b      	beq.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e3f6:	e015      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	2100      	movs	r1, #0
 800e400:	4618      	mov	r0, r3
 800e402:	f001 fc0d 	bl	800fc20 <RCCEx_PLL2_Config>
 800e406:	4603      	mov	r3, r0
 800e408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e40c:	e00f      	b.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e412:	3328      	adds	r3, #40	; 0x28
 800e414:	2102      	movs	r1, #2
 800e416:	4618      	mov	r0, r3
 800e418:	f001 fcb4 	bl	800fd84 <RCCEx_PLL3_Config>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e422:	e004      	b.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e42a:	e000      	b.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e42c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e42e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10b      	bne.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e436:	4b4b      	ldr	r3, [pc, #300]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e446:	4a47      	ldr	r2, [pc, #284]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e448:	430b      	orrs	r3, r1
 800e44a:	6593      	str	r3, [r2, #88]	; 0x58
 800e44c:	e003      	b.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e44e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e462:	67bb      	str	r3, [r7, #120]	; 0x78
 800e464:	2300      	movs	r3, #0
 800e466:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e468:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e46c:	460b      	mov	r3, r1
 800e46e:	4313      	orrs	r3, r2
 800e470:	d03b      	beq.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e47a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e47e:	d01f      	beq.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e484:	d818      	bhi.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e48a:	d003      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e48c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e490:	d007      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e492:	e011      	b.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e494:	4b33      	ldr	r3, [pc, #204]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e498:	4a32      	ldr	r2, [pc, #200]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e49a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e49e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e4a0:	e00f      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4a6:	3328      	adds	r3, #40	; 0x28
 800e4a8:	2101      	movs	r1, #1
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f001 fc6a 	bl	800fd84 <RCCEx_PLL3_Config>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e4b6:	e004      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4be:	e000      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10b      	bne.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e4ca:	4b26      	ldr	r3, [pc, #152]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4da:	4a22      	ldr	r2, [pc, #136]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	6553      	str	r3, [r2, #84]	; 0x54
 800e4e0:	e003      	b.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e4f6:	673b      	str	r3, [r7, #112]	; 0x70
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	677b      	str	r3, [r7, #116]	; 0x74
 800e4fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e500:	460b      	mov	r3, r1
 800e502:	4313      	orrs	r3, r2
 800e504:	d034      	beq.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e514:	d007      	beq.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e516:	e011      	b.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e518:	4b12      	ldr	r3, [pc, #72]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e51c:	4a11      	ldr	r2, [pc, #68]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e524:	e00e      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e52a:	3308      	adds	r3, #8
 800e52c:	2102      	movs	r1, #2
 800e52e:	4618      	mov	r0, r3
 800e530:	f001 fb76 	bl	800fc20 <RCCEx_PLL2_Config>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e53a:	e003      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e53c:	2301      	movs	r3, #1
 800e53e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e542:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10d      	bne.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e54c:	4b05      	ldr	r3, [pc, #20]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e54e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e55a:	4a02      	ldr	r2, [pc, #8]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e55c:	430b      	orrs	r3, r1
 800e55e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e560:	e006      	b.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e562:	bf00      	nop
 800e564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e56c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e578:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e57c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e57e:	2300      	movs	r3, #0
 800e580:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e586:	460b      	mov	r3, r1
 800e588:	4313      	orrs	r3, r2
 800e58a:	d00c      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e590:	3328      	adds	r3, #40	; 0x28
 800e592:	2102      	movs	r1, #2
 800e594:	4618      	mov	r0, r3
 800e596:	f001 fbf5 	bl	800fd84 <RCCEx_PLL3_Config>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e5b2:	663b      	str	r3, [r7, #96]	; 0x60
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	667b      	str	r3, [r7, #100]	; 0x64
 800e5b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	d038      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5ce:	d018      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5d4:	d811      	bhi.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e5d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5da:	d014      	beq.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5e0:	d80b      	bhi.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d011      	beq.n	800e60a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ea:	d106      	bne.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5ec:	4bc3      	ldr	r3, [pc, #780]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f0:	4ac2      	ldr	r2, [pc, #776]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e5f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e5f8:	e008      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e600:	e004      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e602:	bf00      	nop
 800e604:	e002      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e606:	bf00      	nop
 800e608:	e000      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10b      	bne.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e614:	4bb9      	ldr	r3, [pc, #740]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e618:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e624:	4ab5      	ldr	r2, [pc, #724]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e626:	430b      	orrs	r3, r1
 800e628:	6553      	str	r3, [r2, #84]	; 0x54
 800e62a:	e003      	b.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e640:	65bb      	str	r3, [r7, #88]	; 0x58
 800e642:	2300      	movs	r3, #0
 800e644:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e64a:	460b      	mov	r3, r1
 800e64c:	4313      	orrs	r3, r2
 800e64e:	d009      	beq.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e650:	4baa      	ldr	r3, [pc, #680]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e65e:	4aa7      	ldr	r2, [pc, #668]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e660:	430b      	orrs	r3, r1
 800e662:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e670:	653b      	str	r3, [r7, #80]	; 0x50
 800e672:	2300      	movs	r3, #0
 800e674:	657b      	str	r3, [r7, #84]	; 0x54
 800e676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e67a:	460b      	mov	r3, r1
 800e67c:	4313      	orrs	r3, r2
 800e67e:	d00a      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e680:	4b9e      	ldr	r3, [pc, #632]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e68c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e690:	4a9a      	ldr	r2, [pc, #616]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e692:	430b      	orrs	r3, r1
 800e694:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e6a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	d009      	beq.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e6b2:	4b92      	ldr	r3, [pc, #584]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6c0:	4a8e      	ldr	r2, [pc, #568]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6c2:	430b      	orrs	r3, r1
 800e6c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e6d2:	643b      	str	r3, [r7, #64]	; 0x40
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	647b      	str	r3, [r7, #68]	; 0x44
 800e6d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	d00e      	beq.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e6e2:	4b86      	ldr	r3, [pc, #536]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	4a85      	ldr	r2, [pc, #532]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6ec:	6113      	str	r3, [r2, #16]
 800e6ee:	4b83      	ldr	r3, [pc, #524]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6f0:	6919      	ldr	r1, [r3, #16]
 800e6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e6fa:	4a80      	ldr	r2, [pc, #512]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e70c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e70e:	2300      	movs	r3, #0
 800e710:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e716:	460b      	mov	r3, r1
 800e718:	4313      	orrs	r3, r2
 800e71a:	d009      	beq.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e71c:	4b77      	ldr	r3, [pc, #476]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e720:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e72a:	4a74      	ldr	r2, [pc, #464]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e72c:	430b      	orrs	r3, r1
 800e72e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e73c:	633b      	str	r3, [r7, #48]	; 0x30
 800e73e:	2300      	movs	r3, #0
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
 800e742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e746:	460b      	mov	r3, r1
 800e748:	4313      	orrs	r3, r2
 800e74a:	d00a      	beq.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e74c:	4b6b      	ldr	r3, [pc, #428]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e750:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e75c:	4a67      	ldr	r2, [pc, #412]	; (800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e75e:	430b      	orrs	r3, r1
 800e760:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76a:	2100      	movs	r1, #0
 800e76c:	62b9      	str	r1, [r7, #40]	; 0x28
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e774:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e778:	460b      	mov	r3, r1
 800e77a:	4313      	orrs	r3, r2
 800e77c:	d011      	beq.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e782:	3308      	adds	r3, #8
 800e784:	2100      	movs	r1, #0
 800e786:	4618      	mov	r0, r3
 800e788:	f001 fa4a 	bl	800fc20 <RCCEx_PLL2_Config>
 800e78c:	4603      	mov	r3, r0
 800e78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e79e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	6239      	str	r1, [r7, #32]
 800e7ae:	f003 0302 	and.w	r3, r3, #2
 800e7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	d011      	beq.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f001 fa2a 	bl	800fc20 <RCCEx_PLL2_Config>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	61b9      	str	r1, [r7, #24]
 800e7ee:	f003 0304 	and.w	r3, r3, #4
 800e7f2:	61fb      	str	r3, [r7, #28]
 800e7f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	d011      	beq.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e802:	3308      	adds	r3, #8
 800e804:	2102      	movs	r1, #2
 800e806:	4618      	mov	r0, r3
 800e808:	f001 fa0a 	bl	800fc20 <RCCEx_PLL2_Config>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e81e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	2100      	movs	r1, #0
 800e82c:	6139      	str	r1, [r7, #16]
 800e82e:	f003 0308 	and.w	r3, r3, #8
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e838:	460b      	mov	r3, r1
 800e83a:	4313      	orrs	r3, r2
 800e83c:	d011      	beq.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e842:	3328      	adds	r3, #40	; 0x28
 800e844:	2100      	movs	r1, #0
 800e846:	4618      	mov	r0, r3
 800e848:	f001 fa9c 	bl	800fd84 <RCCEx_PLL3_Config>
 800e84c:	4603      	mov	r3, r0
 800e84e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800e852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e856:	2b00      	cmp	r3, #0
 800e858:	d003      	beq.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e85a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e85e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	2100      	movs	r1, #0
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	f003 0310 	and.w	r3, r3, #16
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e878:	460b      	mov	r3, r1
 800e87a:	4313      	orrs	r3, r2
 800e87c:	d011      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e882:	3328      	adds	r3, #40	; 0x28
 800e884:	2101      	movs	r1, #1
 800e886:	4618      	mov	r0, r3
 800e888:	f001 fa7c 	bl	800fd84 <RCCEx_PLL3_Config>
 800e88c:	4603      	mov	r3, r0
 800e88e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e89a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e89e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	6039      	str	r1, [r7, #0]
 800e8ae:	f003 0320 	and.w	r3, r3, #32
 800e8b2:	607b      	str	r3, [r7, #4]
 800e8b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	d011      	beq.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8c2:	3328      	adds	r3, #40	; 0x28
 800e8c4:	2102      	movs	r1, #2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f001 fa5c 	bl	800fd84 <RCCEx_PLL3_Config>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800e8e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e000      	b.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e8ee:	2301      	movs	r3, #1
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8fc:	58024400 	.word	0x58024400

0800e900 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b090      	sub	sp, #64	; 0x40
 800e904:	af00      	add	r7, sp, #0
 800e906:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e90a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e90e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e912:	430b      	orrs	r3, r1
 800e914:	f040 8094 	bne.w	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e918:	4b9e      	ldr	r3, [pc, #632]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e91c:	f003 0307 	and.w	r3, r3, #7
 800e920:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	2b04      	cmp	r3, #4
 800e926:	f200 8087 	bhi.w	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e92a:	a201      	add	r2, pc, #4	; (adr r2, 800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e930:	0800e945 	.word	0x0800e945
 800e934:	0800e96d 	.word	0x0800e96d
 800e938:	0800e995 	.word	0x0800e995
 800e93c:	0800ea31 	.word	0x0800ea31
 800e940:	0800e9bd 	.word	0x0800e9bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e944:	4b93      	ldr	r3, [pc, #588]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e94c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e950:	d108      	bne.n	800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e956:	4618      	mov	r0, r3
 800e958:	f001 f810 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e960:	f000 bd45 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e964:	2300      	movs	r3, #0
 800e966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e968:	f000 bd41 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e96c:	4b89      	ldr	r3, [pc, #548]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e978:	d108      	bne.n	800e98c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e97a:	f107 0318 	add.w	r3, r7, #24
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 fd54 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e988:	f000 bd31 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e990:	f000 bd2d 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e994:	4b7f      	ldr	r3, [pc, #508]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e99c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9a0:	d108      	bne.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9a2:	f107 030c 	add.w	r3, r7, #12
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f000 fe94 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9b0:	f000 bd1d 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9b8:	f000 bd19 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e9bc:	4b75      	ldr	r3, [pc, #468]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e9c6:	4b73      	ldr	r3, [pc, #460]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f003 0304 	and.w	r3, r3, #4
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	d10c      	bne.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d109      	bne.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9d8:	4b6e      	ldr	r3, [pc, #440]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	08db      	lsrs	r3, r3, #3
 800e9de:	f003 0303 	and.w	r3, r3, #3
 800e9e2:	4a6d      	ldr	r2, [pc, #436]	; (800eb98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ea:	e01f      	b.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9ec:	4b69      	ldr	r3, [pc, #420]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9f8:	d106      	bne.n	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea00:	d102      	bne.n	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ea02:	4b66      	ldr	r3, [pc, #408]	; (800eb9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ea04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea06:	e011      	b.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ea08:	4b62      	ldr	r3, [pc, #392]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea14:	d106      	bne.n	800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ea16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea1c:	d102      	bne.n	800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ea1e:	4b60      	ldr	r3, [pc, #384]	; (800eba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ea20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea22:	e003      	b.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ea24:	2300      	movs	r3, #0
 800ea26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ea28:	f000 bce1 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ea2c:	f000 bcdf 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ea30:	4b5c      	ldr	r3, [pc, #368]	; (800eba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ea32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea34:	f000 bcdb 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea3c:	f000 bcd7 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ea40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	f040 80ad 	bne.w	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ea4e:	4b51      	ldr	r3, [pc, #324]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ea50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ea56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea5e:	d056      	beq.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea66:	f200 8090 	bhi.w	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	2bc0      	cmp	r3, #192	; 0xc0
 800ea6e:	f000 8088 	beq.w	800eb82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	2bc0      	cmp	r3, #192	; 0xc0
 800ea76:	f200 8088 	bhi.w	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	2b80      	cmp	r3, #128	; 0x80
 800ea7e:	d032      	beq.n	800eae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea82:	2b80      	cmp	r3, #128	; 0x80
 800ea84:	f200 8081 	bhi.w	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea90:	2b40      	cmp	r3, #64	; 0x40
 800ea92:	d014      	beq.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ea94:	e079      	b.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea96:	4b3f      	ldr	r3, [pc, #252]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaa2:	d108      	bne.n	800eab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eaa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 ff67 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eab2:	f000 bc9c 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaba:	f000 bc98 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eabe:	4b35      	ldr	r3, [pc, #212]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eaca:	d108      	bne.n	800eade <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eacc:	f107 0318 	add.w	r3, r7, #24
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 fcab 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eada:	f000 bc88 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae2:	f000 bc84 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eae6:	4b2b      	ldr	r3, [pc, #172]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eaee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eaf2:	d108      	bne.n	800eb06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 fdeb 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb02:	f000 bc74 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb0a:	f000 bc70 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eb0e:	4b21      	ldr	r3, [pc, #132]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eb16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eb18:	4b1e      	ldr	r3, [pc, #120]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0304 	and.w	r3, r3, #4
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d10c      	bne.n	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800eb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d109      	bne.n	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb2a:	4b1a      	ldr	r3, [pc, #104]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	08db      	lsrs	r3, r3, #3
 800eb30:	f003 0303 	and.w	r3, r3, #3
 800eb34:	4a18      	ldr	r2, [pc, #96]	; (800eb98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800eb36:	fa22 f303 	lsr.w	r3, r2, r3
 800eb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb3c:	e01f      	b.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb3e:	4b15      	ldr	r3, [pc, #84]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb4a:	d106      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800eb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb52:	d102      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eb54:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eb56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb58:	e011      	b.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb66:	d106      	bne.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800eb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb6e:	d102      	bne.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eb70:	4b0b      	ldr	r3, [pc, #44]	; (800eba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800eb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb74:	e003      	b.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eb7a:	f000 bc38 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eb7e:	f000 bc36 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eb82:	4b08      	ldr	r3, [pc, #32]	; (800eba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800eb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb86:	f000 bc32 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8e:	f000 bc2e 	b.w	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eb92:	bf00      	nop
 800eb94:	58024400 	.word	0x58024400
 800eb98:	03d09000 	.word	0x03d09000
 800eb9c:	003d0900 	.word	0x003d0900
 800eba0:	017d7840 	.word	0x017d7840
 800eba4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800eba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ebb0:	430b      	orrs	r3, r1
 800ebb2:	f040 809c 	bne.w	800ecee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ebb6:	4b9e      	ldr	r3, [pc, #632]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ebb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ebbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ebc6:	d054      	beq.n	800ec72 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ebce:	f200 808b 	bhi.w	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ebd8:	f000 8083 	beq.w	800ece2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ebe2:	f200 8081 	bhi.w	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebec:	d02f      	beq.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebf4:	d878      	bhi.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d004      	beq.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec02:	d012      	beq.n	800ec2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ec04:	e070      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ec06:	4b8a      	ldr	r3, [pc, #552]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec12:	d107      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 feaf 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec22:	e3e4      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec24:	2300      	movs	r3, #0
 800ec26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec28:	e3e1      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec2a:	4b81      	ldr	r3, [pc, #516]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec36:	d107      	bne.n	800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec38:	f107 0318 	add.w	r3, r7, #24
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 fbf5 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec46:	e3d2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec4c:	e3cf      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec4e:	4b78      	ldr	r3, [pc, #480]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec5a:	d107      	bne.n	800ec6c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec5c:	f107 030c 	add.w	r3, r7, #12
 800ec60:	4618      	mov	r0, r3
 800ec62:	f000 fd37 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec6a:	e3c0      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec70:	e3bd      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ec72:	4b6f      	ldr	r3, [pc, #444]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec7c:	4b6c      	ldr	r3, [pc, #432]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 0304 	and.w	r3, r3, #4
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	d10c      	bne.n	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ec88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec8e:	4b68      	ldr	r3, [pc, #416]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	08db      	lsrs	r3, r3, #3
 800ec94:	f003 0303 	and.w	r3, r3, #3
 800ec98:	4a66      	ldr	r2, [pc, #408]	; (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ec9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eca0:	e01e      	b.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eca2:	4b63      	ldr	r3, [pc, #396]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecae:	d106      	bne.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ecb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ecb6:	d102      	bne.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ecb8:	4b5f      	ldr	r3, [pc, #380]	; (800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ecba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecbc:	e010      	b.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ecbe:	4b5c      	ldr	r3, [pc, #368]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecca:	d106      	bne.n	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800eccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ecd2:	d102      	bne.n	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ecd4:	4b59      	ldr	r3, [pc, #356]	; (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ecd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecd8:	e002      	b.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ecde:	e386      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ece0:	e385      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ece2:	4b57      	ldr	r3, [pc, #348]	; (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ece4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ece6:	e382      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecec:	e37f      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ecee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecf2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	f040 80a7 	bne.w	800ee4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ecfc:	4b4c      	ldr	r3, [pc, #304]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ecfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ed04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ed06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed0c:	d055      	beq.n	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed14:	f200 8096 	bhi.w	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ed1e:	f000 8084 	beq.w	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ed28:	f200 808c 	bhi.w	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed32:	d030      	beq.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed3a:	f200 8083 	bhi.w	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d004      	beq.n	800ed4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ed4a:	d012      	beq.n	800ed72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ed4c:	e07a      	b.n	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed4e:	4b38      	ldr	r3, [pc, #224]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed5a:	d107      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed60:	4618      	mov	r0, r3
 800ed62:	f000 fe0b 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed6a:	e340      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed70:	e33d      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed72:	4b2f      	ldr	r3, [pc, #188]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed7e:	d107      	bne.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed80:	f107 0318 	add.w	r3, r7, #24
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 fb51 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed8e:	e32e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed94:	e32b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed96:	4b26      	ldr	r3, [pc, #152]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eda2:	d107      	bne.n	800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eda4:	f107 030c 	add.w	r3, r7, #12
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fc93 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edb2:	e31c      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb8:	e319      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800edba:	4b1d      	ldr	r3, [pc, #116]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800edc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800edc4:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 0304 	and.w	r3, r3, #4
 800edcc:	2b04      	cmp	r3, #4
 800edce:	d10c      	bne.n	800edea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d109      	bne.n	800edea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edd6:	4b16      	ldr	r3, [pc, #88]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	08db      	lsrs	r3, r3, #3
 800eddc:	f003 0303 	and.w	r3, r3, #3
 800ede0:	4a14      	ldr	r2, [pc, #80]	; (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ede2:	fa22 f303 	lsr.w	r3, r2, r3
 800ede6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ede8:	e01e      	b.n	800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800edea:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edf6:	d106      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800edf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edfe:	d102      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ee00:	4b0d      	ldr	r3, [pc, #52]	; (800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ee02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee04:	e010      	b.n	800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ee06:	4b0a      	ldr	r3, [pc, #40]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee12:	d106      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ee14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee1a:	d102      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ee1c:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ee1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee20:	e002      	b.n	800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ee26:	e2e2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee28:	e2e1      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ee2a:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ee2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee2e:	e2de      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee30:	58024400 	.word	0x58024400
 800ee34:	03d09000 	.word	0x03d09000
 800ee38:	003d0900 	.word	0x003d0900
 800ee3c:	017d7840 	.word	0x017d7840
 800ee40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee48:	e2d1      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ee4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ee52:	430b      	orrs	r3, r1
 800ee54:	f040 809c 	bne.w	800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ee58:	4b93      	ldr	r3, [pc, #588]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ee60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee68:	d054      	beq.n	800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee70:	f200 808b 	bhi.w	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee7a:	f000 8083 	beq.w	800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee84:	f200 8081 	bhi.w	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee8e:	d02f      	beq.n	800eef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee96:	d878      	bhi.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ee98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d004      	beq.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eea4:	d012      	beq.n	800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800eea6:	e070      	b.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eea8:	4b7f      	ldr	r3, [pc, #508]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eeb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eeb4:	d107      	bne.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 fd5e 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eec4:	e293      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeca:	e290      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eecc:	4b76      	ldr	r3, [pc, #472]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eed8:	d107      	bne.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eeda:	f107 0318 	add.w	r3, r7, #24
 800eede:	4618      	mov	r0, r3
 800eee0:	f000 faa4 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eee8:	e281      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeee:	e27e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eef0:	4b6d      	ldr	r3, [pc, #436]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eefc:	d107      	bne.n	800ef0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eefe:	f107 030c 	add.w	r3, r7, #12
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 fbe6 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef0c:	e26f      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef12:	e26c      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef14:	4b64      	ldr	r3, [pc, #400]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ef16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ef1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef1e:	4b62      	ldr	r3, [pc, #392]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f003 0304 	and.w	r3, r3, #4
 800ef26:	2b04      	cmp	r3, #4
 800ef28:	d10c      	bne.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d109      	bne.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef30:	4b5d      	ldr	r3, [pc, #372]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	08db      	lsrs	r3, r3, #3
 800ef36:	f003 0303 	and.w	r3, r3, #3
 800ef3a:	4a5c      	ldr	r2, [pc, #368]	; (800f0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ef3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef42:	e01e      	b.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef44:	4b58      	ldr	r3, [pc, #352]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef50:	d106      	bne.n	800ef60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ef52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef58:	d102      	bne.n	800ef60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ef5a:	4b55      	ldr	r3, [pc, #340]	; (800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef5e:	e010      	b.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef60:	4b51      	ldr	r3, [pc, #324]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef6c:	d106      	bne.n	800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ef6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef74:	d102      	bne.n	800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef76:	4b4f      	ldr	r3, [pc, #316]	; (800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ef78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef7a:	e002      	b.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ef80:	e235      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef82:	e234      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef84:	4b4c      	ldr	r3, [pc, #304]	; (800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ef86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef88:	e231      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef8e:	e22e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ef90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef94:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ef98:	430b      	orrs	r3, r1
 800ef9a:	f040 808f 	bne.w	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ef9e:	4b42      	ldr	r3, [pc, #264]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800efa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800efa6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800efae:	d06b      	beq.n	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800efb6:	d874      	bhi.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800efbe:	d056      	beq.n	800f06e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800efc6:	d86c      	bhi.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800efce:	d03b      	beq.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800efd6:	d864      	bhi.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efde:	d021      	beq.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efe6:	d85c      	bhi.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	2b00      	cmp	r3, #0
 800efec:	d004      	beq.n	800eff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eff4:	d004      	beq.n	800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800eff6:	e054      	b.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800eff8:	f7fe fa4c 	bl	800d494 <HAL_RCC_GetPCLK1Freq>
 800effc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800effe:	e1f6      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f000:	4b29      	ldr	r3, [pc, #164]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f00c:	d107      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f00e:	f107 0318 	add.w	r3, r7, #24
 800f012:	4618      	mov	r0, r3
 800f014:	f000 fa0a 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f01c:	e1e7      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f022:	e1e4      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f024:	4b20      	ldr	r3, [pc, #128]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f030:	d107      	bne.n	800f042 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f032:	f107 030c 	add.w	r3, r7, #12
 800f036:	4618      	mov	r0, r3
 800f038:	f000 fb4c 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f040:	e1d5      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f042:	2300      	movs	r3, #0
 800f044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f046:	e1d2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f048:	4b17      	ldr	r3, [pc, #92]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b04      	cmp	r3, #4
 800f052:	d109      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f054:	4b14      	ldr	r3, [pc, #80]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	08db      	lsrs	r3, r3, #3
 800f05a:	f003 0303 	and.w	r3, r3, #3
 800f05e:	4a13      	ldr	r2, [pc, #76]	; (800f0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f060:	fa22 f303 	lsr.w	r3, r2, r3
 800f064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f066:	e1c2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f06c:	e1bf      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f06e:	4b0e      	ldr	r3, [pc, #56]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f07a:	d102      	bne.n	800f082 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f07c:	4b0c      	ldr	r3, [pc, #48]	; (800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f080:	e1b5      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f082:	2300      	movs	r3, #0
 800f084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f086:	e1b2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f088:	4b07      	ldr	r3, [pc, #28]	; (800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f094:	d102      	bne.n	800f09c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f096:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f09a:	e1a8      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f09c:	2300      	movs	r3, #0
 800f09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a0:	e1a5      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a6:	e1a2      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0a8:	58024400 	.word	0x58024400
 800f0ac:	03d09000 	.word	0x03d09000
 800f0b0:	003d0900 	.word	0x003d0900
 800f0b4:	017d7840 	.word	0x017d7840
 800f0b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f0c4:	430b      	orrs	r3, r1
 800f0c6:	d173      	bne.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f0c8:	4b9c      	ldr	r3, [pc, #624]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f0d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0d8:	d02f      	beq.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0e0:	d863      	bhi.n	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d004      	beq.n	800f0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ee:	d012      	beq.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f0f0:	e05b      	b.n	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0f2:	4b92      	ldr	r3, [pc, #584]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0fe:	d107      	bne.n	800f110 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f100:	f107 0318 	add.w	r3, r7, #24
 800f104:	4618      	mov	r0, r3
 800f106:	f000 f991 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f10e:	e16e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f110:	2300      	movs	r3, #0
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f114:	e16b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f116:	4b89      	ldr	r3, [pc, #548]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f122:	d107      	bne.n	800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f124:	f107 030c 	add.w	r3, r7, #12
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 fad3 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f132:	e15c      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f134:	2300      	movs	r3, #0
 800f136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f138:	e159      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f13a:	4b80      	ldr	r3, [pc, #512]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f13e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f142:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f144:	4b7d      	ldr	r3, [pc, #500]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f003 0304 	and.w	r3, r3, #4
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d10c      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f152:	2b00      	cmp	r3, #0
 800f154:	d109      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f156:	4b79      	ldr	r3, [pc, #484]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	08db      	lsrs	r3, r3, #3
 800f15c:	f003 0303 	and.w	r3, r3, #3
 800f160:	4a77      	ldr	r2, [pc, #476]	; (800f340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f162:	fa22 f303 	lsr.w	r3, r2, r3
 800f166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f168:	e01e      	b.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f16a:	4b74      	ldr	r3, [pc, #464]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f176:	d106      	bne.n	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f17e:	d102      	bne.n	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f180:	4b70      	ldr	r3, [pc, #448]	; (800f344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f184:	e010      	b.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f186:	4b6d      	ldr	r3, [pc, #436]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f192:	d106      	bne.n	800f1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f19a:	d102      	bne.n	800f1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f19c:	4b6a      	ldr	r3, [pc, #424]	; (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1a0:	e002      	b.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f1a6:	e122      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1a8:	e121      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ae:	e11e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f1b8:	430b      	orrs	r3, r1
 800f1ba:	d133      	bne.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f1bc:	4b5f      	ldr	r3, [pc, #380]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f1c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d004      	beq.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1d2:	d012      	beq.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f1d4:	e023      	b.n	800f21e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f1d6:	4b59      	ldr	r3, [pc, #356]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1e2:	d107      	bne.n	800f1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f000 fbc7 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1f2:	e0fc      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1f8:	e0f9      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f1fa:	4b50      	ldr	r3, [pc, #320]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f206:	d107      	bne.n	800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f208:	f107 0318 	add.w	r3, r7, #24
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 f90d 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f216:	e0ea      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f218:	2300      	movs	r3, #0
 800f21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f21c:	e0e7      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f21e:	2300      	movs	r3, #0
 800f220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f222:	e0e4      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f228:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f22c:	430b      	orrs	r3, r1
 800f22e:	f040 808d 	bne.w	800f34c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f232:	4b42      	ldr	r3, [pc, #264]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f236:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f23a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f242:	d06b      	beq.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f24a:	d874      	bhi.n	800f336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f252:	d056      	beq.n	800f302 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f25a:	d86c      	bhi.n	800f336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f262:	d03b      	beq.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f26a:	d864      	bhi.n	800f336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f272:	d021      	beq.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f27a:	d85c      	bhi.n	800f336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d004      	beq.n	800f28c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f288:	d004      	beq.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f28a:	e054      	b.n	800f336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f28c:	f000 f8b8 	bl	800f400 <HAL_RCCEx_GetD3PCLK1Freq>
 800f290:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f292:	e0ac      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f294:	4b29      	ldr	r3, [pc, #164]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f29c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2a0:	d107      	bne.n	800f2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2a2:	f107 0318 	add.w	r3, r7, #24
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 f8c0 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2b0:	e09d      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2b6:	e09a      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f2b8:	4b20      	ldr	r3, [pc, #128]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2c4:	d107      	bne.n	800f2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2c6:	f107 030c 	add.w	r3, r7, #12
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 fa02 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2d4:	e08b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2da:	e088      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f2dc:	4b17      	ldr	r3, [pc, #92]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b04      	cmp	r3, #4
 800f2e6:	d109      	bne.n	800f2fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2e8:	4b14      	ldr	r3, [pc, #80]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	08db      	lsrs	r3, r3, #3
 800f2ee:	f003 0303 	and.w	r3, r3, #3
 800f2f2:	4a13      	ldr	r2, [pc, #76]	; (800f340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2fa:	e078      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f300:	e075      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f302:	4b0e      	ldr	r3, [pc, #56]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f30e:	d102      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f310:	4b0c      	ldr	r3, [pc, #48]	; (800f344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f314:	e06b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f31a:	e068      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f31c:	4b07      	ldr	r3, [pc, #28]	; (800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f328:	d102      	bne.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f32a:	4b07      	ldr	r3, [pc, #28]	; (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f32e:	e05e      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f334:	e05b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f33a:	e058      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f33c:	58024400 	.word	0x58024400
 800f340:	03d09000 	.word	0x03d09000
 800f344:	003d0900 	.word	0x003d0900
 800f348:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f350:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f354:	430b      	orrs	r3, r1
 800f356:	d148      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f358:	4b27      	ldr	r3, [pc, #156]	; (800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f35c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f360:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f368:	d02a      	beq.n	800f3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f370:	d838      	bhi.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f37e:	d00d      	beq.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f380:	e030      	b.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f382:	4b1d      	ldr	r3, [pc, #116]	; (800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f38e:	d102      	bne.n	800f396 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f390:	4b1a      	ldr	r3, [pc, #104]	; (800f3fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f394:	e02b      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f396:	2300      	movs	r3, #0
 800f398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f39a:	e028      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f39c:	4b16      	ldr	r3, [pc, #88]	; (800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3a8:	d107      	bne.n	800f3ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fae4 	bl	800f97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b8:	e019      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3be:	e016      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3c0:	4b0d      	ldr	r3, [pc, #52]	; (800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3cc:	d107      	bne.n	800f3de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ce:	f107 0318 	add.w	r3, r7, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f000 f82a 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3dc:	e007      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e2:	e004      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e8:	e001      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3740      	adds	r7, #64	; 0x40
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	58024400 	.word	0x58024400
 800f3fc:	017d7840 	.word	0x017d7840

0800f400 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f404:	f7fe f816 	bl	800d434 <HAL_RCC_GetHCLKFreq>
 800f408:	4602      	mov	r2, r0
 800f40a:	4b06      	ldr	r3, [pc, #24]	; (800f424 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	091b      	lsrs	r3, r3, #4
 800f410:	f003 0307 	and.w	r3, r3, #7
 800f414:	4904      	ldr	r1, [pc, #16]	; (800f428 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f416:	5ccb      	ldrb	r3, [r1, r3]
 800f418:	f003 031f 	and.w	r3, r3, #31
 800f41c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f420:	4618      	mov	r0, r3
 800f422:	bd80      	pop	{r7, pc}
 800f424:	58024400 	.word	0x58024400
 800f428:	0801565c 	.word	0x0801565c

0800f42c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b089      	sub	sp, #36	; 0x24
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f434:	4ba1      	ldr	r3, [pc, #644]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f438:	f003 0303 	and.w	r3, r3, #3
 800f43c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f43e:	4b9f      	ldr	r3, [pc, #636]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f442:	0b1b      	lsrs	r3, r3, #12
 800f444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f448:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f44a:	4b9c      	ldr	r3, [pc, #624]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44e:	091b      	lsrs	r3, r3, #4
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f456:	4b99      	ldr	r3, [pc, #612]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f45a:	08db      	lsrs	r3, r3, #3
 800f45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	fb02 f303 	mul.w	r3, r2, r3
 800f466:	ee07 3a90 	vmov	s15, r3
 800f46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f46e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 8111 	beq.w	800f69c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	f000 8083 	beq.w	800f588 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	2b02      	cmp	r3, #2
 800f486:	f200 80a1 	bhi.w	800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d056      	beq.n	800f544 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f496:	e099      	b.n	800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f498:	4b88      	ldr	r3, [pc, #544]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 0320 	and.w	r3, r3, #32
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d02d      	beq.n	800f500 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4a4:	4b85      	ldr	r3, [pc, #532]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	08db      	lsrs	r3, r3, #3
 800f4aa:	f003 0303 	and.w	r3, r3, #3
 800f4ae:	4a84      	ldr	r2, [pc, #528]	; (800f6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	ee07 3a90 	vmov	s15, r3
 800f4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	ee07 3a90 	vmov	s15, r3
 800f4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4ce:	4b7b      	ldr	r3, [pc, #492]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4d6:	ee07 3a90 	vmov	s15, r3
 800f4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f4fe:	e087      	b.n	800f610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	ee07 3a90 	vmov	s15, r3
 800f506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f50a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f512:	4b6a      	ldr	r3, [pc, #424]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f51a:	ee07 3a90 	vmov	s15, r3
 800f51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f522:	ed97 6a03 	vldr	s12, [r7, #12]
 800f526:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f53e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f542:	e065      	b.n	800f610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	ee07 3a90 	vmov	s15, r3
 800f54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f54e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f556:	4b59      	ldr	r3, [pc, #356]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f55e:	ee07 3a90 	vmov	s15, r3
 800f562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f566:	ed97 6a03 	vldr	s12, [r7, #12]
 800f56a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f586:	e043      	b.n	800f610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	ee07 3a90 	vmov	s15, r3
 800f58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f59a:	4b48      	ldr	r3, [pc, #288]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5a2:	ee07 3a90 	vmov	s15, r3
 800f5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f5ca:	e021      	b.n	800f610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	ee07 3a90 	vmov	s15, r3
 800f5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5de:	4b37      	ldr	r3, [pc, #220]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f60e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f610:	4b2a      	ldr	r3, [pc, #168]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f614:	0a5b      	lsrs	r3, r3, #9
 800f616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f61a:	ee07 3a90 	vmov	s15, r3
 800f61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f636:	ee17 2a90 	vmov	r2, s15
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f63e:	4b1f      	ldr	r3, [pc, #124]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f642:	0c1b      	lsrs	r3, r3, #16
 800f644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f648:	ee07 3a90 	vmov	s15, r3
 800f64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f658:	edd7 6a07 	vldr	s13, [r7, #28]
 800f65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f664:	ee17 2a90 	vmov	r2, s15
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f66c:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f670:	0e1b      	lsrs	r3, r3, #24
 800f672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f676:	ee07 3a90 	vmov	s15, r3
 800f67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f686:	edd7 6a07 	vldr	s13, [r7, #28]
 800f68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f692:	ee17 2a90 	vmov	r2, s15
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f69a:	e008      	b.n	800f6ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	609a      	str	r2, [r3, #8]
}
 800f6ae:	bf00      	nop
 800f6b0:	3724      	adds	r7, #36	; 0x24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	58024400 	.word	0x58024400
 800f6c0:	03d09000 	.word	0x03d09000
 800f6c4:	46000000 	.word	0x46000000
 800f6c8:	4c742400 	.word	0x4c742400
 800f6cc:	4a742400 	.word	0x4a742400
 800f6d0:	4bbebc20 	.word	0x4bbebc20

0800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b089      	sub	sp, #36	; 0x24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6dc:	4ba1      	ldr	r3, [pc, #644]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e0:	f003 0303 	and.w	r3, r3, #3
 800f6e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f6e6:	4b9f      	ldr	r3, [pc, #636]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ea:	0d1b      	lsrs	r3, r3, #20
 800f6ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f6f2:	4b9c      	ldr	r3, [pc, #624]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f6:	0a1b      	lsrs	r3, r3, #8
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f6fe:	4b99      	ldr	r3, [pc, #612]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f702:	08db      	lsrs	r3, r3, #3
 800f704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f708:	693a      	ldr	r2, [r7, #16]
 800f70a:	fb02 f303 	mul.w	r3, r2, r3
 800f70e:	ee07 3a90 	vmov	s15, r3
 800f712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 8111 	beq.w	800f944 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	2b02      	cmp	r3, #2
 800f726:	f000 8083 	beq.w	800f830 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	f200 80a1 	bhi.w	800f874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d056      	beq.n	800f7ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f73e:	e099      	b.n	800f874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f740:	4b88      	ldr	r3, [pc, #544]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f003 0320 	and.w	r3, r3, #32
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d02d      	beq.n	800f7a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f74c:	4b85      	ldr	r3, [pc, #532]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	08db      	lsrs	r3, r3, #3
 800f752:	f003 0303 	and.w	r3, r3, #3
 800f756:	4a84      	ldr	r2, [pc, #528]	; (800f968 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f758:	fa22 f303 	lsr.w	r3, r2, r3
 800f75c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	ee07 3a90 	vmov	s15, r3
 800f764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	ee07 3a90 	vmov	s15, r3
 800f76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f776:	4b7b      	ldr	r3, [pc, #492]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f77e:	ee07 3a90 	vmov	s15, r3
 800f782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f786:	ed97 6a03 	vldr	s12, [r7, #12]
 800f78a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f7a6:	e087      	b.n	800f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	ee07 3a90 	vmov	s15, r3
 800f7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f970 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7ba:	4b6a      	ldr	r3, [pc, #424]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7c2:	ee07 3a90 	vmov	s15, r3
 800f7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7ea:	e065      	b.n	800f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	ee07 3a90 	vmov	s15, r3
 800f7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7fe:	4b59      	ldr	r3, [pc, #356]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f806:	ee07 3a90 	vmov	s15, r3
 800f80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f812:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f82e:	e043      	b.n	800f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	ee07 3a90 	vmov	s15, r3
 800f836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f83a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f842:	4b48      	ldr	r3, [pc, #288]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84a:	ee07 3a90 	vmov	s15, r3
 800f84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f852:	ed97 6a03 	vldr	s12, [r7, #12]
 800f856:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f872:	e021      	b.n	800f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	ee07 3a90 	vmov	s15, r3
 800f87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f87e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f886:	4b37      	ldr	r3, [pc, #220]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f88e:	ee07 3a90 	vmov	s15, r3
 800f892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f896:	ed97 6a03 	vldr	s12, [r7, #12]
 800f89a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f8b8:	4b2a      	ldr	r3, [pc, #168]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8bc:	0a5b      	lsrs	r3, r3, #9
 800f8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8c2:	ee07 3a90 	vmov	s15, r3
 800f8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8de:	ee17 2a90 	vmov	r2, s15
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f8e6:	4b1f      	ldr	r3, [pc, #124]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ea:	0c1b      	lsrs	r3, r3, #16
 800f8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8f0:	ee07 3a90 	vmov	s15, r3
 800f8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f900:	edd7 6a07 	vldr	s13, [r7, #28]
 800f904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f90c:	ee17 2a90 	vmov	r2, s15
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f914:	4b13      	ldr	r3, [pc, #76]	; (800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f918:	0e1b      	lsrs	r3, r3, #24
 800f91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f91e:	ee07 3a90 	vmov	s15, r3
 800f922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f92a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f92e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f93a:	ee17 2a90 	vmov	r2, s15
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f942:	e008      	b.n	800f956 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	609a      	str	r2, [r3, #8]
}
 800f956:	bf00      	nop
 800f958:	3724      	adds	r7, #36	; 0x24
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	58024400 	.word	0x58024400
 800f968:	03d09000 	.word	0x03d09000
 800f96c:	46000000 	.word	0x46000000
 800f970:	4c742400 	.word	0x4c742400
 800f974:	4a742400 	.word	0x4a742400
 800f978:	4bbebc20 	.word	0x4bbebc20

0800f97c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b089      	sub	sp, #36	; 0x24
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f984:	4ba0      	ldr	r3, [pc, #640]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f988:	f003 0303 	and.w	r3, r3, #3
 800f98c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f98e:	4b9e      	ldr	r3, [pc, #632]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f992:	091b      	lsrs	r3, r3, #4
 800f994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f998:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f99a:	4b9b      	ldr	r3, [pc, #620]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f9a4:	4b98      	ldr	r3, [pc, #608]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a8:	08db      	lsrs	r3, r3, #3
 800f9aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	fb02 f303 	mul.w	r3, r2, r3
 800f9b4:	ee07 3a90 	vmov	s15, r3
 800f9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f000 8111 	beq.w	800fbea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	f000 8083 	beq.w	800fad6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	2b02      	cmp	r3, #2
 800f9d4:	f200 80a1 	bhi.w	800fb1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d003      	beq.n	800f9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d056      	beq.n	800fa92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f9e4:	e099      	b.n	800fb1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9e6:	4b88      	ldr	r3, [pc, #544]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f003 0320 	and.w	r3, r3, #32
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d02d      	beq.n	800fa4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f9f2:	4b85      	ldr	r3, [pc, #532]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	08db      	lsrs	r3, r3, #3
 800f9f8:	f003 0303 	and.w	r3, r3, #3
 800f9fc:	4a83      	ldr	r2, [pc, #524]	; (800fc0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800fa02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	ee07 3a90 	vmov	s15, r3
 800fa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	ee07 3a90 	vmov	s15, r3
 800fa14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa1c:	4b7a      	ldr	r3, [pc, #488]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa24:	ee07 3a90 	vmov	s15, r3
 800fa28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa30:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fc10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fa34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fa4c:	e087      	b.n	800fb5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	ee07 3a90 	vmov	s15, r3
 800fa54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fc14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fa5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa60:	4b69      	ldr	r3, [pc, #420]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa68:	ee07 3a90 	vmov	s15, r3
 800fa6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa70:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa74:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fc10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fa78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa90:	e065      	b.n	800fb5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	ee07 3a90 	vmov	s15, r3
 800fa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fc18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800faa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faa4:	4b58      	ldr	r3, [pc, #352]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faac:	ee07 3a90 	vmov	s15, r3
 800fab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fab4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fab8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fc10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800facc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fad4:	e043      	b.n	800fb5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	ee07 3a90 	vmov	s15, r3
 800fadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fae0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fc1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fae8:	4b47      	ldr	r3, [pc, #284]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faf0:	ee07 3a90 	vmov	s15, r3
 800faf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fafc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fc10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb18:	e021      	b.n	800fb5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	ee07 3a90 	vmov	s15, r3
 800fb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fc14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fb28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb2c:	4b36      	ldr	r3, [pc, #216]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb34:	ee07 3a90 	vmov	s15, r3
 800fb38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fc10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fb5e:	4b2a      	ldr	r3, [pc, #168]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb62:	0a5b      	lsrs	r3, r3, #9
 800fb64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb68:	ee07 3a90 	vmov	s15, r3
 800fb6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb78:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb84:	ee17 2a90 	vmov	r2, s15
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fb8c:	4b1e      	ldr	r3, [pc, #120]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb90:	0c1b      	lsrs	r3, r3, #16
 800fb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fba6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbb2:	ee17 2a90 	vmov	r2, s15
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fbba:	4b13      	ldr	r3, [pc, #76]	; (800fc08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbbe:	0e1b      	lsrs	r3, r3, #24
 800fbc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbc4:	ee07 3a90 	vmov	s15, r3
 800fbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fbd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbe0:	ee17 2a90 	vmov	r2, s15
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fbe8:	e008      	b.n	800fbfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	609a      	str	r2, [r3, #8]
}
 800fbfc:	bf00      	nop
 800fbfe:	3724      	adds	r7, #36	; 0x24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr
 800fc08:	58024400 	.word	0x58024400
 800fc0c:	03d09000 	.word	0x03d09000
 800fc10:	46000000 	.word	0x46000000
 800fc14:	4c742400 	.word	0x4c742400
 800fc18:	4a742400 	.word	0x4a742400
 800fc1c:	4bbebc20 	.word	0x4bbebc20

0800fc20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc2e:	4b53      	ldr	r3, [pc, #332]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc32:	f003 0303 	and.w	r3, r3, #3
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d101      	bne.n	800fc3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e099      	b.n	800fd72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fc3e:	4b4f      	ldr	r3, [pc, #316]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4a4e      	ldr	r2, [pc, #312]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc4a:	f7f7 f8a5 	bl	8006d98 <HAL_GetTick>
 800fc4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fc50:	e008      	b.n	800fc64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc52:	f7f7 f8a1 	bl	8006d98 <HAL_GetTick>
 800fc56:	4602      	mov	r2, r0
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d901      	bls.n	800fc64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fc60:	2303      	movs	r3, #3
 800fc62:	e086      	b.n	800fd72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fc64:	4b45      	ldr	r3, [pc, #276]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1f0      	bne.n	800fc52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fc70:	4b42      	ldr	r3, [pc, #264]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	031b      	lsls	r3, r3, #12
 800fc7e:	493f      	ldr	r1, [pc, #252]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fc80:	4313      	orrs	r3, r2
 800fc82:	628b      	str	r3, [r1, #40]	; 0x28
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	025b      	lsls	r3, r3, #9
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	041b      	lsls	r3, r3, #16
 800fca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fca6:	431a      	orrs	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	061b      	lsls	r3, r3, #24
 800fcb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fcb4:	4931      	ldr	r1, [pc, #196]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fcba:	4b30      	ldr	r3, [pc, #192]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	492d      	ldr	r1, [pc, #180]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fccc:	4b2b      	ldr	r3, [pc, #172]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd0:	f023 0220 	bic.w	r2, r3, #32
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	4928      	ldr	r1, [pc, #160]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fcde:	4b27      	ldr	r3, [pc, #156]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce2:	4a26      	ldr	r2, [pc, #152]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fce4:	f023 0310 	bic.w	r3, r3, #16
 800fce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fcea:	4b24      	ldr	r3, [pc, #144]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcee:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <RCCEx_PLL2_Config+0x160>)
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	69d2      	ldr	r2, [r2, #28]
 800fcf6:	00d2      	lsls	r2, r2, #3
 800fcf8:	4920      	ldr	r1, [pc, #128]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fcfe:	4b1f      	ldr	r3, [pc, #124]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd02:	4a1e      	ldr	r2, [pc, #120]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd04:	f043 0310 	orr.w	r3, r3, #16
 800fd08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d106      	bne.n	800fd1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fd10:	4b1a      	ldr	r3, [pc, #104]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd14:	4a19      	ldr	r2, [pc, #100]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fd1c:	e00f      	b.n	800fd3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d106      	bne.n	800fd32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fd24:	4b15      	ldr	r3, [pc, #84]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd28:	4a14      	ldr	r2, [pc, #80]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fd30:	e005      	b.n	800fd3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fd32:	4b12      	ldr	r3, [pc, #72]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd36:	4a11      	ldr	r2, [pc, #68]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a0e      	ldr	r2, [pc, #56]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd4a:	f7f7 f825 	bl	8006d98 <HAL_GetTick>
 800fd4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fd50:	e008      	b.n	800fd64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fd52:	f7f7 f821 	bl	8006d98 <HAL_GetTick>
 800fd56:	4602      	mov	r2, r0
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d901      	bls.n	800fd64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fd60:	2303      	movs	r3, #3
 800fd62:	e006      	b.n	800fd72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fd64:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <RCCEx_PLL2_Config+0x15c>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d0f0      	beq.n	800fd52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	58024400 	.word	0x58024400
 800fd80:	ffff0007 	.word	0xffff0007

0800fd84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fd92:	4b53      	ldr	r3, [pc, #332]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd96:	f003 0303 	and.w	r3, r3, #3
 800fd9a:	2b03      	cmp	r3, #3
 800fd9c:	d101      	bne.n	800fda2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e099      	b.n	800fed6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fda2:	4b4f      	ldr	r3, [pc, #316]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a4e      	ldr	r2, [pc, #312]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fda8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fdac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdae:	f7f6 fff3 	bl	8006d98 <HAL_GetTick>
 800fdb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fdb4:	e008      	b.n	800fdc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fdb6:	f7f6 ffef 	bl	8006d98 <HAL_GetTick>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	1ad3      	subs	r3, r2, r3
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	d901      	bls.n	800fdc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e086      	b.n	800fed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fdc8:	4b45      	ldr	r3, [pc, #276]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1f0      	bne.n	800fdb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fdd4:	4b42      	ldr	r3, [pc, #264]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	051b      	lsls	r3, r3, #20
 800fde2:	493f      	ldr	r1, [pc, #252]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fde4:	4313      	orrs	r3, r2
 800fde6:	628b      	str	r3, [r1, #40]	; 0x28
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	3b01      	subs	r3, #1
 800fdee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	025b      	lsls	r3, r3, #9
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	041b      	lsls	r3, r3, #16
 800fe06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fe0a:	431a      	orrs	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	061b      	lsls	r3, r3, #24
 800fe14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fe18:	4931      	ldr	r1, [pc, #196]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fe1e:	4b30      	ldr	r3, [pc, #192]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	492d      	ldr	r1, [pc, #180]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fe30:	4b2b      	ldr	r3, [pc, #172]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	4928      	ldr	r1, [pc, #160]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fe42:	4b27      	ldr	r3, [pc, #156]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe46:	4a26      	ldr	r2, [pc, #152]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fe4e:	4b24      	ldr	r3, [pc, #144]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe52:	4b24      	ldr	r3, [pc, #144]	; (800fee4 <RCCEx_PLL3_Config+0x160>)
 800fe54:	4013      	ands	r3, r2
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	69d2      	ldr	r2, [r2, #28]
 800fe5a:	00d2      	lsls	r2, r2, #3
 800fe5c:	4920      	ldr	r1, [pc, #128]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fe62:	4b1f      	ldr	r3, [pc, #124]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe66:	4a1e      	ldr	r2, [pc, #120]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d106      	bne.n	800fe82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fe74:	4b1a      	ldr	r3, [pc, #104]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe78:	4a19      	ldr	r2, [pc, #100]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fe7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe80:	e00f      	b.n	800fea2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d106      	bne.n	800fe96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fe88:	4b15      	ldr	r3, [pc, #84]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8c:	4a14      	ldr	r2, [pc, #80]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fe92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe94:	e005      	b.n	800fea2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fe96:	4b12      	ldr	r3, [pc, #72]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	4a11      	ldr	r2, [pc, #68]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fe9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fea2:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a0e      	ldr	r2, [pc, #56]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800fea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800feae:	f7f6 ff73 	bl	8006d98 <HAL_GetTick>
 800feb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800feb4:	e008      	b.n	800fec8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800feb6:	f7f6 ff6f 	bl	8006d98 <HAL_GetTick>
 800feba:	4602      	mov	r2, r0
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d901      	bls.n	800fec8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fec4:	2303      	movs	r3, #3
 800fec6:	e006      	b.n	800fed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fec8:	4b05      	ldr	r3, [pc, #20]	; (800fee0 <RCCEx_PLL3_Config+0x15c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d0f0      	beq.n	800feb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	58024400 	.word	0x58024400
 800fee4:	ffff0007 	.word	0xffff0007

0800fee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d101      	bne.n	800fefa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fef6:	2301      	movs	r3, #1
 800fef8:	e10f      	b.n	801011a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a87      	ldr	r2, [pc, #540]	; (8010124 <HAL_SPI_Init+0x23c>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d00f      	beq.n	800ff2a <HAL_SPI_Init+0x42>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4a86      	ldr	r2, [pc, #536]	; (8010128 <HAL_SPI_Init+0x240>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d00a      	beq.n	800ff2a <HAL_SPI_Init+0x42>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a84      	ldr	r2, [pc, #528]	; (801012c <HAL_SPI_Init+0x244>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d005      	beq.n	800ff2a <HAL_SPI_Init+0x42>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	2b0f      	cmp	r3, #15
 800ff24:	d901      	bls.n	800ff2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ff26:	2301      	movs	r3, #1
 800ff28:	e0f7      	b.n	801011a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f900 	bl	8010130 <SPI_GetPacketSize>
 800ff30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a7b      	ldr	r2, [pc, #492]	; (8010124 <HAL_SPI_Init+0x23c>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d00c      	beq.n	800ff56 <HAL_SPI_Init+0x6e>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a79      	ldr	r2, [pc, #484]	; (8010128 <HAL_SPI_Init+0x240>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d007      	beq.n	800ff56 <HAL_SPI_Init+0x6e>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a78      	ldr	r2, [pc, #480]	; (801012c <HAL_SPI_Init+0x244>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d002      	beq.n	800ff56 <HAL_SPI_Init+0x6e>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b08      	cmp	r3, #8
 800ff54:	d811      	bhi.n	800ff7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ff5a:	4a72      	ldr	r2, [pc, #456]	; (8010124 <HAL_SPI_Init+0x23c>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d009      	beq.n	800ff74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a70      	ldr	r2, [pc, #448]	; (8010128 <HAL_SPI_Init+0x240>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d004      	beq.n	800ff74 <HAL_SPI_Init+0x8c>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	4a6f      	ldr	r2, [pc, #444]	; (801012c <HAL_SPI_Init+0x244>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d104      	bne.n	800ff7e <HAL_SPI_Init+0x96>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b10      	cmp	r3, #16
 800ff78:	d901      	bls.n	800ff7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e0cd      	b.n	801011a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f7f5 ff7c 	bl	8005e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f022 0201 	bic.w	r2, r2, #1
 800ffae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ffba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ffc4:	d119      	bne.n	800fffa <HAL_SPI_Init+0x112>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ffce:	d103      	bne.n	800ffd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d008      	beq.n	800ffea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10c      	bne.n	800fffa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ffe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ffe8:	d107      	bne.n	800fffa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fff8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00f      	beq.n	8010026 <HAL_SPI_Init+0x13e>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	2b06      	cmp	r3, #6
 801000c:	d90b      	bls.n	8010026 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	430a      	orrs	r2, r1
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	e007      	b.n	8010036 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	69da      	ldr	r2, [r3, #28]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003e:	431a      	orrs	r2, r3
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	431a      	orrs	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010048:	ea42 0103 	orr.w	r1, r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68da      	ldr	r2, [r3, #12]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	430a      	orrs	r2, r1
 8010056:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010060:	431a      	orrs	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010066:	431a      	orrs	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	699b      	ldr	r3, [r3, #24]
 801006c:	431a      	orrs	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	431a      	orrs	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	695b      	ldr	r3, [r3, #20]
 8010078:	431a      	orrs	r2, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	431a      	orrs	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	431a      	orrs	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801008a:	431a      	orrs	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	431a      	orrs	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010096:	ea42 0103 	orr.w	r1, r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d113      	bne.n	80100d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80100c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80100d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f022 0201 	bic.w	r2, r2, #1
 80100e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00a      	beq.n	8010108 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	430a      	orrs	r2, r1
 8010106:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2201      	movs	r2, #1
 8010114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	40013000 	.word	0x40013000
 8010128:	40003800 	.word	0x40003800
 801012c:	40003c00 	.word	0x40003c00

08010130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013c:	095b      	lsrs	r3, r3, #5
 801013e:	3301      	adds	r3, #1
 8010140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	3301      	adds	r3, #1
 8010148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	3307      	adds	r3, #7
 801014e:	08db      	lsrs	r3, r3, #3
 8010150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	fb02 f303 	mul.w	r3, r2, r3
}
 801015a:	4618      	mov	r0, r3
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	e049      	b.n	801020c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801017e:	b2db      	uxtb	r3, r3
 8010180:	2b00      	cmp	r3, #0
 8010182:	d106      	bne.n	8010192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7f5 ffc7 	bl	8006120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2202      	movs	r2, #2
 8010196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3304      	adds	r3, #4
 80101a2:	4619      	mov	r1, r3
 80101a4:	4610      	mov	r0, r2
 80101a6:	f000 ffe5 	bl	8011174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2201      	movs	r2, #1
 80101be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2201      	movs	r2, #1
 80101ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2201      	movs	r2, #1
 80101de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2201      	movs	r2, #1
 80101ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2201      	movs	r2, #1
 80101f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2201      	movs	r2, #1
 80101fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801020a:	2300      	movs	r3, #0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b01      	cmp	r3, #1
 8010226:	d001      	beq.n	801022c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010228:	2301      	movs	r3, #1
 801022a:	e054      	b.n	80102d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2202      	movs	r2, #2
 8010230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	68da      	ldr	r2, [r3, #12]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f042 0201 	orr.w	r2, r2, #1
 8010242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a26      	ldr	r2, [pc, #152]	; (80102e4 <HAL_TIM_Base_Start_IT+0xd0>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d022      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010256:	d01d      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a22      	ldr	r2, [pc, #136]	; (80102e8 <HAL_TIM_Base_Start_IT+0xd4>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d018      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a21      	ldr	r2, [pc, #132]	; (80102ec <HAL_TIM_Base_Start_IT+0xd8>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d013      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a1f      	ldr	r2, [pc, #124]	; (80102f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d00e      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a1e      	ldr	r2, [pc, #120]	; (80102f4 <HAL_TIM_Base_Start_IT+0xe0>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d009      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a1c      	ldr	r2, [pc, #112]	; (80102f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d004      	beq.n	8010294 <HAL_TIM_Base_Start_IT+0x80>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a1b      	ldr	r2, [pc, #108]	; (80102fc <HAL_TIM_Base_Start_IT+0xe8>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d115      	bne.n	80102c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	689a      	ldr	r2, [r3, #8]
 801029a:	4b19      	ldr	r3, [pc, #100]	; (8010300 <HAL_TIM_Base_Start_IT+0xec>)
 801029c:	4013      	ands	r3, r2
 801029e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2b06      	cmp	r3, #6
 80102a4:	d015      	beq.n	80102d2 <HAL_TIM_Base_Start_IT+0xbe>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102ac:	d011      	beq.n	80102d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f042 0201 	orr.w	r2, r2, #1
 80102bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102be:	e008      	b.n	80102d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f042 0201 	orr.w	r2, r2, #1
 80102ce:	601a      	str	r2, [r3, #0]
 80102d0:	e000      	b.n	80102d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3714      	adds	r7, #20
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	40010000 	.word	0x40010000
 80102e8:	40000400 	.word	0x40000400
 80102ec:	40000800 	.word	0x40000800
 80102f0:	40000c00 	.word	0x40000c00
 80102f4:	40010400 	.word	0x40010400
 80102f8:	40001800 	.word	0x40001800
 80102fc:	40014000 	.word	0x40014000
 8010300:	00010007 	.word	0x00010007

08010304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010312:	2301      	movs	r3, #1
 8010314:	e049      	b.n	80103aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801031c:	b2db      	uxtb	r3, r3
 801031e:	2b00      	cmp	r3, #0
 8010320:	d106      	bne.n	8010330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7f5 fe3e 	bl	8005fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2202      	movs	r2, #2
 8010334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	3304      	adds	r3, #4
 8010340:	4619      	mov	r1, r3
 8010342:	4610      	mov	r0, r2
 8010344:	f000 ff16 	bl	8011174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
	...

080103b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d109      	bne.n	80103d8 <HAL_TIM_PWM_Start+0x24>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	bf14      	ite	ne
 80103d0:	2301      	movne	r3, #1
 80103d2:	2300      	moveq	r3, #0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	e03c      	b.n	8010452 <HAL_TIM_PWM_Start+0x9e>
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d109      	bne.n	80103f2 <HAL_TIM_PWM_Start+0x3e>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	bf14      	ite	ne
 80103ea:	2301      	movne	r3, #1
 80103ec:	2300      	moveq	r3, #0
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	e02f      	b.n	8010452 <HAL_TIM_PWM_Start+0x9e>
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b08      	cmp	r3, #8
 80103f6:	d109      	bne.n	801040c <HAL_TIM_PWM_Start+0x58>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b01      	cmp	r3, #1
 8010402:	bf14      	ite	ne
 8010404:	2301      	movne	r3, #1
 8010406:	2300      	moveq	r3, #0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	e022      	b.n	8010452 <HAL_TIM_PWM_Start+0x9e>
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2b0c      	cmp	r3, #12
 8010410:	d109      	bne.n	8010426 <HAL_TIM_PWM_Start+0x72>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010418:	b2db      	uxtb	r3, r3
 801041a:	2b01      	cmp	r3, #1
 801041c:	bf14      	ite	ne
 801041e:	2301      	movne	r3, #1
 8010420:	2300      	moveq	r3, #0
 8010422:	b2db      	uxtb	r3, r3
 8010424:	e015      	b.n	8010452 <HAL_TIM_PWM_Start+0x9e>
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b10      	cmp	r3, #16
 801042a:	d109      	bne.n	8010440 <HAL_TIM_PWM_Start+0x8c>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b01      	cmp	r3, #1
 8010436:	bf14      	ite	ne
 8010438:	2301      	movne	r3, #1
 801043a:	2300      	moveq	r3, #0
 801043c:	b2db      	uxtb	r3, r3
 801043e:	e008      	b.n	8010452 <HAL_TIM_PWM_Start+0x9e>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2b01      	cmp	r3, #1
 801044a:	bf14      	ite	ne
 801044c:	2301      	movne	r3, #1
 801044e:	2300      	moveq	r3, #0
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010456:	2301      	movs	r3, #1
 8010458:	e0a1      	b.n	801059e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d104      	bne.n	801046a <HAL_TIM_PWM_Start+0xb6>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2202      	movs	r2, #2
 8010464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010468:	e023      	b.n	80104b2 <HAL_TIM_PWM_Start+0xfe>
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	2b04      	cmp	r3, #4
 801046e:	d104      	bne.n	801047a <HAL_TIM_PWM_Start+0xc6>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2202      	movs	r2, #2
 8010474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010478:	e01b      	b.n	80104b2 <HAL_TIM_PWM_Start+0xfe>
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2b08      	cmp	r3, #8
 801047e:	d104      	bne.n	801048a <HAL_TIM_PWM_Start+0xd6>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2202      	movs	r2, #2
 8010484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010488:	e013      	b.n	80104b2 <HAL_TIM_PWM_Start+0xfe>
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	2b0c      	cmp	r3, #12
 801048e:	d104      	bne.n	801049a <HAL_TIM_PWM_Start+0xe6>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010498:	e00b      	b.n	80104b2 <HAL_TIM_PWM_Start+0xfe>
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b10      	cmp	r3, #16
 801049e:	d104      	bne.n	80104aa <HAL_TIM_PWM_Start+0xf6>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2202      	movs	r2, #2
 80104a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104a8:	e003      	b.n	80104b2 <HAL_TIM_PWM_Start+0xfe>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2202      	movs	r2, #2
 80104ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2201      	movs	r2, #1
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f001 fc5d 	bl	8011d7a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a38      	ldr	r2, [pc, #224]	; (80105a8 <HAL_TIM_PWM_Start+0x1f4>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d013      	beq.n	80104f2 <HAL_TIM_PWM_Start+0x13e>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a37      	ldr	r2, [pc, #220]	; (80105ac <HAL_TIM_PWM_Start+0x1f8>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d00e      	beq.n	80104f2 <HAL_TIM_PWM_Start+0x13e>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a35      	ldr	r2, [pc, #212]	; (80105b0 <HAL_TIM_PWM_Start+0x1fc>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d009      	beq.n	80104f2 <HAL_TIM_PWM_Start+0x13e>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a34      	ldr	r2, [pc, #208]	; (80105b4 <HAL_TIM_PWM_Start+0x200>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d004      	beq.n	80104f2 <HAL_TIM_PWM_Start+0x13e>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a32      	ldr	r2, [pc, #200]	; (80105b8 <HAL_TIM_PWM_Start+0x204>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d101      	bne.n	80104f6 <HAL_TIM_PWM_Start+0x142>
 80104f2:	2301      	movs	r3, #1
 80104f4:	e000      	b.n	80104f8 <HAL_TIM_PWM_Start+0x144>
 80104f6:	2300      	movs	r3, #0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d007      	beq.n	801050c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801050a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a25      	ldr	r2, [pc, #148]	; (80105a8 <HAL_TIM_PWM_Start+0x1f4>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d022      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801051e:	d01d      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a25      	ldr	r2, [pc, #148]	; (80105bc <HAL_TIM_PWM_Start+0x208>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d018      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4a24      	ldr	r2, [pc, #144]	; (80105c0 <HAL_TIM_PWM_Start+0x20c>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d013      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4a22      	ldr	r2, [pc, #136]	; (80105c4 <HAL_TIM_PWM_Start+0x210>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d00e      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a1a      	ldr	r2, [pc, #104]	; (80105ac <HAL_TIM_PWM_Start+0x1f8>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d009      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a1e      	ldr	r2, [pc, #120]	; (80105c8 <HAL_TIM_PWM_Start+0x214>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d004      	beq.n	801055c <HAL_TIM_PWM_Start+0x1a8>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a16      	ldr	r2, [pc, #88]	; (80105b0 <HAL_TIM_PWM_Start+0x1fc>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d115      	bne.n	8010588 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	689a      	ldr	r2, [r3, #8]
 8010562:	4b1a      	ldr	r3, [pc, #104]	; (80105cc <HAL_TIM_PWM_Start+0x218>)
 8010564:	4013      	ands	r3, r2
 8010566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2b06      	cmp	r3, #6
 801056c:	d015      	beq.n	801059a <HAL_TIM_PWM_Start+0x1e6>
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010574:	d011      	beq.n	801059a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f042 0201 	orr.w	r2, r2, #1
 8010584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010586:	e008      	b.n	801059a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f042 0201 	orr.w	r2, r2, #1
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	e000      	b.n	801059c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801059a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	40010000 	.word	0x40010000
 80105ac:	40010400 	.word	0x40010400
 80105b0:	40014000 	.word	0x40014000
 80105b4:	40014400 	.word	0x40014400
 80105b8:	40014800 	.word	0x40014800
 80105bc:	40000400 	.word	0x40000400
 80105c0:	40000800 	.word	0x40000800
 80105c4:	40000c00 	.word	0x40000c00
 80105c8:	40001800 	.word	0x40001800
 80105cc:	00010007 	.word	0x00010007

080105d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d101      	bne.n	80105e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	e049      	b.n	8010676 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d106      	bne.n	80105fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7f5 fd10 	bl	800601c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2202      	movs	r2, #2
 8010600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3304      	adds	r3, #4
 801060c:	4619      	mov	r1, r3
 801060e:	4610      	mov	r0, r2
 8010610:	f000 fdb0 	bl	8011174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2201      	movs	r2, #1
 8010620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2201      	movs	r2, #1
 8010628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2201      	movs	r2, #1
 8010638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2201      	movs	r2, #1
 8010640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2201      	movs	r2, #1
 8010648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2201      	movs	r2, #1
 8010658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2201      	movs	r2, #1
 8010660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2201      	movs	r2, #1
 8010668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
	...

08010680 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d104      	bne.n	801069a <HAL_TIM_IC_Start+0x1a>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010696:	b2db      	uxtb	r3, r3
 8010698:	e023      	b.n	80106e2 <HAL_TIM_IC_Start+0x62>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	2b04      	cmp	r3, #4
 801069e:	d104      	bne.n	80106aa <HAL_TIM_IC_Start+0x2a>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	e01b      	b.n	80106e2 <HAL_TIM_IC_Start+0x62>
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	2b08      	cmp	r3, #8
 80106ae:	d104      	bne.n	80106ba <HAL_TIM_IC_Start+0x3a>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	e013      	b.n	80106e2 <HAL_TIM_IC_Start+0x62>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	2b0c      	cmp	r3, #12
 80106be:	d104      	bne.n	80106ca <HAL_TIM_IC_Start+0x4a>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	e00b      	b.n	80106e2 <HAL_TIM_IC_Start+0x62>
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2b10      	cmp	r3, #16
 80106ce:	d104      	bne.n	80106da <HAL_TIM_IC_Start+0x5a>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	e003      	b.n	80106e2 <HAL_TIM_IC_Start+0x62>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d104      	bne.n	80106f4 <HAL_TIM_IC_Start+0x74>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	e013      	b.n	801071c <HAL_TIM_IC_Start+0x9c>
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	2b04      	cmp	r3, #4
 80106f8:	d104      	bne.n	8010704 <HAL_TIM_IC_Start+0x84>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010700:	b2db      	uxtb	r3, r3
 8010702:	e00b      	b.n	801071c <HAL_TIM_IC_Start+0x9c>
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2b08      	cmp	r3, #8
 8010708:	d104      	bne.n	8010714 <HAL_TIM_IC_Start+0x94>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010710:	b2db      	uxtb	r3, r3
 8010712:	e003      	b.n	801071c <HAL_TIM_IC_Start+0x9c>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801071a:	b2db      	uxtb	r3, r3
 801071c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801071e:	7bfb      	ldrb	r3, [r7, #15]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d102      	bne.n	801072a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010724:	7bbb      	ldrb	r3, [r7, #14]
 8010726:	2b01      	cmp	r3, #1
 8010728:	d001      	beq.n	801072e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	e097      	b.n	801085e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d104      	bne.n	801073e <HAL_TIM_IC_Start+0xbe>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2202      	movs	r2, #2
 8010738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801073c:	e023      	b.n	8010786 <HAL_TIM_IC_Start+0x106>
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	2b04      	cmp	r3, #4
 8010742:	d104      	bne.n	801074e <HAL_TIM_IC_Start+0xce>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2202      	movs	r2, #2
 8010748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801074c:	e01b      	b.n	8010786 <HAL_TIM_IC_Start+0x106>
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	2b08      	cmp	r3, #8
 8010752:	d104      	bne.n	801075e <HAL_TIM_IC_Start+0xde>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2202      	movs	r2, #2
 8010758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801075c:	e013      	b.n	8010786 <HAL_TIM_IC_Start+0x106>
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	2b0c      	cmp	r3, #12
 8010762:	d104      	bne.n	801076e <HAL_TIM_IC_Start+0xee>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2202      	movs	r2, #2
 8010768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801076c:	e00b      	b.n	8010786 <HAL_TIM_IC_Start+0x106>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	2b10      	cmp	r3, #16
 8010772:	d104      	bne.n	801077e <HAL_TIM_IC_Start+0xfe>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2202      	movs	r2, #2
 8010778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801077c:	e003      	b.n	8010786 <HAL_TIM_IC_Start+0x106>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2202      	movs	r2, #2
 8010782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d104      	bne.n	8010796 <HAL_TIM_IC_Start+0x116>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2202      	movs	r2, #2
 8010790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010794:	e013      	b.n	80107be <HAL_TIM_IC_Start+0x13e>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b04      	cmp	r3, #4
 801079a:	d104      	bne.n	80107a6 <HAL_TIM_IC_Start+0x126>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2202      	movs	r2, #2
 80107a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107a4:	e00b      	b.n	80107be <HAL_TIM_IC_Start+0x13e>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2b08      	cmp	r3, #8
 80107aa:	d104      	bne.n	80107b6 <HAL_TIM_IC_Start+0x136>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2202      	movs	r2, #2
 80107b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80107b4:	e003      	b.n	80107be <HAL_TIM_IC_Start+0x13e>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2202      	movs	r2, #2
 80107ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2201      	movs	r2, #1
 80107c4:	6839      	ldr	r1, [r7, #0]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f001 fad7 	bl	8011d7a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a25      	ldr	r2, [pc, #148]	; (8010868 <HAL_TIM_IC_Start+0x1e8>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d022      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107de:	d01d      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a21      	ldr	r2, [pc, #132]	; (801086c <HAL_TIM_IC_Start+0x1ec>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d018      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4a20      	ldr	r2, [pc, #128]	; (8010870 <HAL_TIM_IC_Start+0x1f0>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d013      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a1e      	ldr	r2, [pc, #120]	; (8010874 <HAL_TIM_IC_Start+0x1f4>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d00e      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4a1d      	ldr	r2, [pc, #116]	; (8010878 <HAL_TIM_IC_Start+0x1f8>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d009      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4a1b      	ldr	r2, [pc, #108]	; (801087c <HAL_TIM_IC_Start+0x1fc>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d004      	beq.n	801081c <HAL_TIM_IC_Start+0x19c>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a1a      	ldr	r2, [pc, #104]	; (8010880 <HAL_TIM_IC_Start+0x200>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d115      	bne.n	8010848 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	689a      	ldr	r2, [r3, #8]
 8010822:	4b18      	ldr	r3, [pc, #96]	; (8010884 <HAL_TIM_IC_Start+0x204>)
 8010824:	4013      	ands	r3, r2
 8010826:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	2b06      	cmp	r3, #6
 801082c:	d015      	beq.n	801085a <HAL_TIM_IC_Start+0x1da>
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010834:	d011      	beq.n	801085a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f042 0201 	orr.w	r2, r2, #1
 8010844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010846:	e008      	b.n	801085a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f042 0201 	orr.w	r2, r2, #1
 8010856:	601a      	str	r2, [r3, #0]
 8010858:	e000      	b.n	801085c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801085a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	40010000 	.word	0x40010000
 801086c:	40000400 	.word	0x40000400
 8010870:	40000800 	.word	0x40000800
 8010874:	40000c00 	.word	0x40000c00
 8010878:	40010400 	.word	0x40010400
 801087c:	40001800 	.word	0x40001800
 8010880:	40014000 	.word	0x40014000
 8010884:	00010007 	.word	0x00010007

08010888 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010892:	2300      	movs	r3, #0
 8010894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d104      	bne.n	80108a6 <HAL_TIM_IC_Start_IT+0x1e>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	e023      	b.n	80108ee <HAL_TIM_IC_Start_IT+0x66>
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	2b04      	cmp	r3, #4
 80108aa:	d104      	bne.n	80108b6 <HAL_TIM_IC_Start_IT+0x2e>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	e01b      	b.n	80108ee <HAL_TIM_IC_Start_IT+0x66>
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b08      	cmp	r3, #8
 80108ba:	d104      	bne.n	80108c6 <HAL_TIM_IC_Start_IT+0x3e>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	e013      	b.n	80108ee <HAL_TIM_IC_Start_IT+0x66>
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	2b0c      	cmp	r3, #12
 80108ca:	d104      	bne.n	80108d6 <HAL_TIM_IC_Start_IT+0x4e>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	e00b      	b.n	80108ee <HAL_TIM_IC_Start_IT+0x66>
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b10      	cmp	r3, #16
 80108da:	d104      	bne.n	80108e6 <HAL_TIM_IC_Start_IT+0x5e>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	e003      	b.n	80108ee <HAL_TIM_IC_Start_IT+0x66>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d104      	bne.n	8010900 <HAL_TIM_IC_Start_IT+0x78>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	e013      	b.n	8010928 <HAL_TIM_IC_Start_IT+0xa0>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2b04      	cmp	r3, #4
 8010904:	d104      	bne.n	8010910 <HAL_TIM_IC_Start_IT+0x88>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801090c:	b2db      	uxtb	r3, r3
 801090e:	e00b      	b.n	8010928 <HAL_TIM_IC_Start_IT+0xa0>
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	2b08      	cmp	r3, #8
 8010914:	d104      	bne.n	8010920 <HAL_TIM_IC_Start_IT+0x98>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801091c:	b2db      	uxtb	r3, r3
 801091e:	e003      	b.n	8010928 <HAL_TIM_IC_Start_IT+0xa0>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010926:	b2db      	uxtb	r3, r3
 8010928:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801092a:	7bbb      	ldrb	r3, [r7, #14]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d102      	bne.n	8010936 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010930:	7b7b      	ldrb	r3, [r7, #13]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d001      	beq.n	801093a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010936:	2301      	movs	r3, #1
 8010938:	e0e2      	b.n	8010b00 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d104      	bne.n	801094a <HAL_TIM_IC_Start_IT+0xc2>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2202      	movs	r2, #2
 8010944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010948:	e023      	b.n	8010992 <HAL_TIM_IC_Start_IT+0x10a>
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	2b04      	cmp	r3, #4
 801094e:	d104      	bne.n	801095a <HAL_TIM_IC_Start_IT+0xd2>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2202      	movs	r2, #2
 8010954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010958:	e01b      	b.n	8010992 <HAL_TIM_IC_Start_IT+0x10a>
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	2b08      	cmp	r3, #8
 801095e:	d104      	bne.n	801096a <HAL_TIM_IC_Start_IT+0xe2>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2202      	movs	r2, #2
 8010964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010968:	e013      	b.n	8010992 <HAL_TIM_IC_Start_IT+0x10a>
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	2b0c      	cmp	r3, #12
 801096e:	d104      	bne.n	801097a <HAL_TIM_IC_Start_IT+0xf2>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2202      	movs	r2, #2
 8010974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010978:	e00b      	b.n	8010992 <HAL_TIM_IC_Start_IT+0x10a>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2b10      	cmp	r3, #16
 801097e:	d104      	bne.n	801098a <HAL_TIM_IC_Start_IT+0x102>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2202      	movs	r2, #2
 8010984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010988:	e003      	b.n	8010992 <HAL_TIM_IC_Start_IT+0x10a>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2202      	movs	r2, #2
 801098e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d104      	bne.n	80109a2 <HAL_TIM_IC_Start_IT+0x11a>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2202      	movs	r2, #2
 801099c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109a0:	e013      	b.n	80109ca <HAL_TIM_IC_Start_IT+0x142>
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b04      	cmp	r3, #4
 80109a6:	d104      	bne.n	80109b2 <HAL_TIM_IC_Start_IT+0x12a>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2202      	movs	r2, #2
 80109ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109b0:	e00b      	b.n	80109ca <HAL_TIM_IC_Start_IT+0x142>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	2b08      	cmp	r3, #8
 80109b6:	d104      	bne.n	80109c2 <HAL_TIM_IC_Start_IT+0x13a>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2202      	movs	r2, #2
 80109bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80109c0:	e003      	b.n	80109ca <HAL_TIM_IC_Start_IT+0x142>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2202      	movs	r2, #2
 80109c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	2b0c      	cmp	r3, #12
 80109ce:	d841      	bhi.n	8010a54 <HAL_TIM_IC_Start_IT+0x1cc>
 80109d0:	a201      	add	r2, pc, #4	; (adr r2, 80109d8 <HAL_TIM_IC_Start_IT+0x150>)
 80109d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d6:	bf00      	nop
 80109d8:	08010a0d 	.word	0x08010a0d
 80109dc:	08010a55 	.word	0x08010a55
 80109e0:	08010a55 	.word	0x08010a55
 80109e4:	08010a55 	.word	0x08010a55
 80109e8:	08010a1f 	.word	0x08010a1f
 80109ec:	08010a55 	.word	0x08010a55
 80109f0:	08010a55 	.word	0x08010a55
 80109f4:	08010a55 	.word	0x08010a55
 80109f8:	08010a31 	.word	0x08010a31
 80109fc:	08010a55 	.word	0x08010a55
 8010a00:	08010a55 	.word	0x08010a55
 8010a04:	08010a55 	.word	0x08010a55
 8010a08:	08010a43 	.word	0x08010a43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68da      	ldr	r2, [r3, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f042 0202 	orr.w	r2, r2, #2
 8010a1a:	60da      	str	r2, [r3, #12]
      break;
 8010a1c:	e01d      	b.n	8010a5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68da      	ldr	r2, [r3, #12]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f042 0204 	orr.w	r2, r2, #4
 8010a2c:	60da      	str	r2, [r3, #12]
      break;
 8010a2e:	e014      	b.n	8010a5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f042 0208 	orr.w	r2, r2, #8
 8010a3e:	60da      	str	r2, [r3, #12]
      break;
 8010a40:	e00b      	b.n	8010a5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	68da      	ldr	r2, [r3, #12]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f042 0210 	orr.w	r2, r2, #16
 8010a50:	60da      	str	r2, [r3, #12]
      break;
 8010a52:	e002      	b.n	8010a5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	73fb      	strb	r3, [r7, #15]
      break;
 8010a58:	bf00      	nop
  }

  if (status == HAL_OK)
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d14e      	bne.n	8010afe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2201      	movs	r2, #1
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f001 f986 	bl	8011d7a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a25      	ldr	r2, [pc, #148]	; (8010b08 <HAL_TIM_IC_Start_IT+0x280>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d022      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a80:	d01d      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a21      	ldr	r2, [pc, #132]	; (8010b0c <HAL_TIM_IC_Start_IT+0x284>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d018      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4a1f      	ldr	r2, [pc, #124]	; (8010b10 <HAL_TIM_IC_Start_IT+0x288>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d013      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4a1e      	ldr	r2, [pc, #120]	; (8010b14 <HAL_TIM_IC_Start_IT+0x28c>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d00e      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a1c      	ldr	r2, [pc, #112]	; (8010b18 <HAL_TIM_IC_Start_IT+0x290>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d009      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4a1b      	ldr	r2, [pc, #108]	; (8010b1c <HAL_TIM_IC_Start_IT+0x294>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d004      	beq.n	8010abe <HAL_TIM_IC_Start_IT+0x236>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	4a19      	ldr	r2, [pc, #100]	; (8010b20 <HAL_TIM_IC_Start_IT+0x298>)
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d115      	bne.n	8010aea <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	689a      	ldr	r2, [r3, #8]
 8010ac4:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <HAL_TIM_IC_Start_IT+0x29c>)
 8010ac6:	4013      	ands	r3, r2
 8010ac8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	2b06      	cmp	r3, #6
 8010ace:	d015      	beq.n	8010afc <HAL_TIM_IC_Start_IT+0x274>
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ad6:	d011      	beq.n	8010afc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f042 0201 	orr.w	r2, r2, #1
 8010ae6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ae8:	e008      	b.n	8010afc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f042 0201 	orr.w	r2, r2, #1
 8010af8:	601a      	str	r2, [r3, #0]
 8010afa:	e000      	b.n	8010afe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010afc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	40010000 	.word	0x40010000
 8010b0c:	40000400 	.word	0x40000400
 8010b10:	40000800 	.word	0x40000800
 8010b14:	40000c00 	.word	0x40000c00
 8010b18:	40010400 	.word	0x40010400
 8010b1c:	40001800 	.word	0x40001800
 8010b20:	40014000 	.word	0x40014000
 8010b24:	00010007 	.word	0x00010007

08010b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	691b      	ldr	r3, [r3, #16]
 8010b36:	f003 0302 	and.w	r3, r3, #2
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d122      	bne.n	8010b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	f003 0302 	and.w	r3, r3, #2
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	d11b      	bne.n	8010b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f06f 0202 	mvn.w	r2, #2
 8010b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	699b      	ldr	r3, [r3, #24]
 8010b62:	f003 0303 	and.w	r3, r3, #3
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f7f3 f918 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8010b70:	e005      	b.n	8010b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 faea 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7f3 f91b 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	f003 0304 	and.w	r3, r3, #4
 8010b8e:	2b04      	cmp	r3, #4
 8010b90:	d122      	bne.n	8010bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b04      	cmp	r3, #4
 8010b9e:	d11b      	bne.n	8010bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f06f 0204 	mvn.w	r2, #4
 8010ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2202      	movs	r2, #2
 8010bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7f3 f8ee 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8010bc4:	e005      	b.n	8010bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f000 fac0 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7f3 f8f1 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	f003 0308 	and.w	r3, r3, #8
 8010be2:	2b08      	cmp	r3, #8
 8010be4:	d122      	bne.n	8010c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	f003 0308 	and.w	r3, r3, #8
 8010bf0:	2b08      	cmp	r3, #8
 8010bf2:	d11b      	bne.n	8010c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f06f 0208 	mvn.w	r2, #8
 8010bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2204      	movs	r2, #4
 8010c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	69db      	ldr	r3, [r3, #28]
 8010c0a:	f003 0303 	and.w	r3, r3, #3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d003      	beq.n	8010c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7f3 f8c4 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8010c18:	e005      	b.n	8010c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 fa96 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7f3 f8c7 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	691b      	ldr	r3, [r3, #16]
 8010c32:	f003 0310 	and.w	r3, r3, #16
 8010c36:	2b10      	cmp	r3, #16
 8010c38:	d122      	bne.n	8010c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	f003 0310 	and.w	r3, r3, #16
 8010c44:	2b10      	cmp	r3, #16
 8010c46:	d11b      	bne.n	8010c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f06f 0210 	mvn.w	r2, #16
 8010c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2208      	movs	r2, #8
 8010c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	69db      	ldr	r3, [r3, #28]
 8010c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d003      	beq.n	8010c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7f3 f89a 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8010c6c:	e005      	b.n	8010c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fa6c 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7f3 f89d 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	d10e      	bne.n	8010cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	f003 0301 	and.w	r3, r3, #1
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d107      	bne.n	8010cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f06f 0201 	mvn.w	r2, #1
 8010ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7f3 f88e 	bl	8003dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	691b      	ldr	r3, [r3, #16]
 8010cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cb6:	2b80      	cmp	r3, #128	; 0x80
 8010cb8:	d10e      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cc4:	2b80      	cmp	r3, #128	; 0x80
 8010cc6:	d107      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f001 f90e 	bl	8011ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce6:	d10e      	bne.n	8010d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cf2:	2b80      	cmp	r3, #128	; 0x80
 8010cf4:	d107      	bne.n	8010d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f001 f901 	bl	8011f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	691b      	ldr	r3, [r3, #16]
 8010d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d10:	2b40      	cmp	r3, #64	; 0x40
 8010d12:	d10e      	bne.n	8010d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d1e:	2b40      	cmp	r3, #64	; 0x40
 8010d20:	d107      	bne.n	8010d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fa17 	bl	8011160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	f003 0320 	and.w	r3, r3, #32
 8010d3c:	2b20      	cmp	r3, #32
 8010d3e:	d10e      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	f003 0320 	and.w	r3, r3, #32
 8010d4a:	2b20      	cmp	r3, #32
 8010d4c:	d107      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f06f 0220 	mvn.w	r2, #32
 8010d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f001 f8c1 	bl	8011ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d5e:	bf00      	nop
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b086      	sub	sp, #24
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d101      	bne.n	8010d84 <HAL_TIM_IC_ConfigChannel+0x1e>
 8010d80:	2302      	movs	r3, #2
 8010d82:	e088      	b.n	8010e96 <HAL_TIM_IC_ConfigChannel+0x130>
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2201      	movs	r2, #1
 8010d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d11b      	bne.n	8010dca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010da2:	f000 fe41 	bl	8011a28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	699a      	ldr	r2, [r3, #24]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f022 020c 	bic.w	r2, r2, #12
 8010db4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6999      	ldr	r1, [r3, #24]
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	689a      	ldr	r2, [r3, #8]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	430a      	orrs	r2, r1
 8010dc6:	619a      	str	r2, [r3, #24]
 8010dc8:	e060      	b.n	8010e8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b04      	cmp	r3, #4
 8010dce:	d11c      	bne.n	8010e0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010de0:	f000 fec5 	bl	8011b6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	699a      	ldr	r2, [r3, #24]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010df2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6999      	ldr	r1, [r3, #24]
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	689b      	ldr	r3, [r3, #8]
 8010dfe:	021a      	lsls	r2, r3, #8
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	430a      	orrs	r2, r1
 8010e06:	619a      	str	r2, [r3, #24]
 8010e08:	e040      	b.n	8010e8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2b08      	cmp	r3, #8
 8010e0e:	d11b      	bne.n	8010e48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8010e20:	f000 ff12 	bl	8011c48 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	69da      	ldr	r2, [r3, #28]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f022 020c 	bic.w	r2, r2, #12
 8010e32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	69d9      	ldr	r1, [r3, #28]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	689a      	ldr	r2, [r3, #8]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	430a      	orrs	r2, r1
 8010e44:	61da      	str	r2, [r3, #28]
 8010e46:	e021      	b.n	8010e8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b0c      	cmp	r3, #12
 8010e4c:	d11c      	bne.n	8010e88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010e5e:	f000 ff2f 	bl	8011cc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	69da      	ldr	r2, [r3, #28]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010e70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	69d9      	ldr	r1, [r3, #28]
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	021a      	lsls	r2, r3, #8
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	430a      	orrs	r2, r1
 8010e84:	61da      	str	r2, [r3, #28]
 8010e86:	e001      	b.n	8010e8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3718      	adds	r7, #24
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
	...

08010ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010eac:	2300      	movs	r3, #0
 8010eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d101      	bne.n	8010ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010eba:	2302      	movs	r3, #2
 8010ebc:	e0ff      	b.n	80110be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2b14      	cmp	r3, #20
 8010eca:	f200 80f0 	bhi.w	80110ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010ece:	a201      	add	r2, pc, #4	; (adr r2, 8010ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed4:	08010f29 	.word	0x08010f29
 8010ed8:	080110af 	.word	0x080110af
 8010edc:	080110af 	.word	0x080110af
 8010ee0:	080110af 	.word	0x080110af
 8010ee4:	08010f69 	.word	0x08010f69
 8010ee8:	080110af 	.word	0x080110af
 8010eec:	080110af 	.word	0x080110af
 8010ef0:	080110af 	.word	0x080110af
 8010ef4:	08010fab 	.word	0x08010fab
 8010ef8:	080110af 	.word	0x080110af
 8010efc:	080110af 	.word	0x080110af
 8010f00:	080110af 	.word	0x080110af
 8010f04:	08010feb 	.word	0x08010feb
 8010f08:	080110af 	.word	0x080110af
 8010f0c:	080110af 	.word	0x080110af
 8010f10:	080110af 	.word	0x080110af
 8010f14:	0801102d 	.word	0x0801102d
 8010f18:	080110af 	.word	0x080110af
 8010f1c:	080110af 	.word	0x080110af
 8010f20:	080110af 	.word	0x080110af
 8010f24:	0801106d 	.word	0x0801106d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68b9      	ldr	r1, [r7, #8]
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f000 f9ba 	bl	80112a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	699a      	ldr	r2, [r3, #24]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f042 0208 	orr.w	r2, r2, #8
 8010f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	699a      	ldr	r2, [r3, #24]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f022 0204 	bic.w	r2, r2, #4
 8010f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	6999      	ldr	r1, [r3, #24]
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	691a      	ldr	r2, [r3, #16]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	430a      	orrs	r2, r1
 8010f64:	619a      	str	r2, [r3, #24]
      break;
 8010f66:	e0a5      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	68b9      	ldr	r1, [r7, #8]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 fa2a 	bl	80113c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	699a      	ldr	r2, [r3, #24]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	699a      	ldr	r2, [r3, #24]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6999      	ldr	r1, [r3, #24]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	691b      	ldr	r3, [r3, #16]
 8010f9e:	021a      	lsls	r2, r3, #8
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	430a      	orrs	r2, r1
 8010fa6:	619a      	str	r2, [r3, #24]
      break;
 8010fa8:	e084      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	68b9      	ldr	r1, [r7, #8]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 fa93 	bl	80114dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	69da      	ldr	r2, [r3, #28]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f042 0208 	orr.w	r2, r2, #8
 8010fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	69da      	ldr	r2, [r3, #28]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f022 0204 	bic.w	r2, r2, #4
 8010fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	69d9      	ldr	r1, [r3, #28]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	691a      	ldr	r2, [r3, #16]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	430a      	orrs	r2, r1
 8010fe6:	61da      	str	r2, [r3, #28]
      break;
 8010fe8:	e064      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68b9      	ldr	r1, [r7, #8]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f000 fafb 	bl	80115ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	69da      	ldr	r2, [r3, #28]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	69da      	ldr	r2, [r3, #28]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	69d9      	ldr	r1, [r3, #28]
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	021a      	lsls	r2, r3, #8
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	430a      	orrs	r2, r1
 8011028:	61da      	str	r2, [r3, #28]
      break;
 801102a:	e043      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	4618      	mov	r0, r3
 8011034:	f000 fb44 	bl	80116c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f042 0208 	orr.w	r2, r2, #8
 8011046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f022 0204 	bic.w	r2, r2, #4
 8011056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	691a      	ldr	r2, [r3, #16]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	430a      	orrs	r2, r1
 8011068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801106a:	e023      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	68b9      	ldr	r1, [r7, #8]
 8011072:	4618      	mov	r0, r3
 8011074:	f000 fb88 	bl	8011788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	691b      	ldr	r3, [r3, #16]
 80110a2:	021a      	lsls	r2, r3, #8
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	430a      	orrs	r2, r1
 80110aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80110ac:	e002      	b.n	80110b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	75fb      	strb	r3, [r7, #23]
      break;
 80110b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2200      	movs	r2, #0
 80110b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80110bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3718      	adds	r7, #24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop

080110c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d101      	bne.n	80110e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80110dc:	2302      	movs	r3, #2
 80110de:	e031      	b.n	8011144 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2202      	movs	r2, #2
 80110ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80110f0:	6839      	ldr	r1, [r7, #0]
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 fbae 	bl	8011854 <TIM_SlaveTimer_SetConfig>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d009      	beq.n	8011112 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2201      	movs	r2, #1
 8011102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801110e:	2301      	movs	r3, #1
 8011110:	e018      	b.n	8011144 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68da      	ldr	r2, [r3, #12]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011120:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68da      	ldr	r2, [r3, #12]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011130:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2201      	movs	r2, #1
 8011136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2200      	movs	r2, #0
 801113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011142:	2300      	movs	r3, #0
}
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011154:	bf00      	nop
 8011156:	370c      	adds	r7, #12
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011160:	b480      	push	{r7}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011168:	bf00      	nop
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a40      	ldr	r2, [pc, #256]	; (8011288 <TIM_Base_SetConfig+0x114>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d013      	beq.n	80111b4 <TIM_Base_SetConfig+0x40>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011192:	d00f      	beq.n	80111b4 <TIM_Base_SetConfig+0x40>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4a3d      	ldr	r2, [pc, #244]	; (801128c <TIM_Base_SetConfig+0x118>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d00b      	beq.n	80111b4 <TIM_Base_SetConfig+0x40>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4a3c      	ldr	r2, [pc, #240]	; (8011290 <TIM_Base_SetConfig+0x11c>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d007      	beq.n	80111b4 <TIM_Base_SetConfig+0x40>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4a3b      	ldr	r2, [pc, #236]	; (8011294 <TIM_Base_SetConfig+0x120>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d003      	beq.n	80111b4 <TIM_Base_SetConfig+0x40>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	4a3a      	ldr	r2, [pc, #232]	; (8011298 <TIM_Base_SetConfig+0x124>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d108      	bne.n	80111c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	68fa      	ldr	r2, [r7, #12]
 80111c2:	4313      	orrs	r3, r2
 80111c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4a2f      	ldr	r2, [pc, #188]	; (8011288 <TIM_Base_SetConfig+0x114>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d01f      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111d4:	d01b      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4a2c      	ldr	r2, [pc, #176]	; (801128c <TIM_Base_SetConfig+0x118>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d017      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4a2b      	ldr	r2, [pc, #172]	; (8011290 <TIM_Base_SetConfig+0x11c>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d013      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4a2a      	ldr	r2, [pc, #168]	; (8011294 <TIM_Base_SetConfig+0x120>)
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d00f      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4a29      	ldr	r2, [pc, #164]	; (8011298 <TIM_Base_SetConfig+0x124>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d00b      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4a28      	ldr	r2, [pc, #160]	; (801129c <TIM_Base_SetConfig+0x128>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d007      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	4a27      	ldr	r2, [pc, #156]	; (80112a0 <TIM_Base_SetConfig+0x12c>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d003      	beq.n	801120e <TIM_Base_SetConfig+0x9a>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4a26      	ldr	r2, [pc, #152]	; (80112a4 <TIM_Base_SetConfig+0x130>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d108      	bne.n	8011220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	4313      	orrs	r3, r2
 801121e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	695b      	ldr	r3, [r3, #20]
 801122a:	4313      	orrs	r3, r2
 801122c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	689a      	ldr	r2, [r3, #8]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4a10      	ldr	r2, [pc, #64]	; (8011288 <TIM_Base_SetConfig+0x114>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d00f      	beq.n	801126c <TIM_Base_SetConfig+0xf8>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	4a12      	ldr	r2, [pc, #72]	; (8011298 <TIM_Base_SetConfig+0x124>)
 8011250:	4293      	cmp	r3, r2
 8011252:	d00b      	beq.n	801126c <TIM_Base_SetConfig+0xf8>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4a11      	ldr	r2, [pc, #68]	; (801129c <TIM_Base_SetConfig+0x128>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d007      	beq.n	801126c <TIM_Base_SetConfig+0xf8>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a10      	ldr	r2, [pc, #64]	; (80112a0 <TIM_Base_SetConfig+0x12c>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d003      	beq.n	801126c <TIM_Base_SetConfig+0xf8>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a0f      	ldr	r2, [pc, #60]	; (80112a4 <TIM_Base_SetConfig+0x130>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d103      	bne.n	8011274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	691a      	ldr	r2, [r3, #16]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2201      	movs	r2, #1
 8011278:	615a      	str	r2, [r3, #20]
}
 801127a:	bf00      	nop
 801127c:	3714      	adds	r7, #20
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	40010000 	.word	0x40010000
 801128c:	40000400 	.word	0x40000400
 8011290:	40000800 	.word	0x40000800
 8011294:	40000c00 	.word	0x40000c00
 8011298:	40010400 	.word	0x40010400
 801129c:	40014000 	.word	0x40014000
 80112a0:	40014400 	.word	0x40014400
 80112a4:	40014800 	.word	0x40014800

080112a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a1b      	ldr	r3, [r3, #32]
 80112b6:	f023 0201 	bic.w	r2, r3, #1
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6a1b      	ldr	r3, [r3, #32]
 80112c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	4b37      	ldr	r3, [pc, #220]	; (80113b0 <TIM_OC1_SetConfig+0x108>)
 80112d4:	4013      	ands	r3, r2
 80112d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f023 0303 	bic.w	r3, r3, #3
 80112de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f023 0302 	bic.w	r3, r3, #2
 80112f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	4313      	orrs	r3, r2
 80112fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	4a2d      	ldr	r2, [pc, #180]	; (80113b4 <TIM_OC1_SetConfig+0x10c>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d00f      	beq.n	8011324 <TIM_OC1_SetConfig+0x7c>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4a2c      	ldr	r2, [pc, #176]	; (80113b8 <TIM_OC1_SetConfig+0x110>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d00b      	beq.n	8011324 <TIM_OC1_SetConfig+0x7c>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4a2b      	ldr	r2, [pc, #172]	; (80113bc <TIM_OC1_SetConfig+0x114>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d007      	beq.n	8011324 <TIM_OC1_SetConfig+0x7c>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4a2a      	ldr	r2, [pc, #168]	; (80113c0 <TIM_OC1_SetConfig+0x118>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d003      	beq.n	8011324 <TIM_OC1_SetConfig+0x7c>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4a29      	ldr	r2, [pc, #164]	; (80113c4 <TIM_OC1_SetConfig+0x11c>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d10c      	bne.n	801133e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	f023 0308 	bic.w	r3, r3, #8
 801132a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	4313      	orrs	r3, r2
 8011334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f023 0304 	bic.w	r3, r3, #4
 801133c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a1c      	ldr	r2, [pc, #112]	; (80113b4 <TIM_OC1_SetConfig+0x10c>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d00f      	beq.n	8011366 <TIM_OC1_SetConfig+0xbe>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a1b      	ldr	r2, [pc, #108]	; (80113b8 <TIM_OC1_SetConfig+0x110>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d00b      	beq.n	8011366 <TIM_OC1_SetConfig+0xbe>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a1a      	ldr	r2, [pc, #104]	; (80113bc <TIM_OC1_SetConfig+0x114>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d007      	beq.n	8011366 <TIM_OC1_SetConfig+0xbe>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4a19      	ldr	r2, [pc, #100]	; (80113c0 <TIM_OC1_SetConfig+0x118>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d003      	beq.n	8011366 <TIM_OC1_SetConfig+0xbe>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4a18      	ldr	r2, [pc, #96]	; (80113c4 <TIM_OC1_SetConfig+0x11c>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d111      	bne.n	801138a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801136c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	693a      	ldr	r2, [r7, #16]
 801137c:	4313      	orrs	r3, r2
 801137e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	699b      	ldr	r3, [r3, #24]
 8011384:	693a      	ldr	r2, [r7, #16]
 8011386:	4313      	orrs	r3, r2
 8011388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	693a      	ldr	r2, [r7, #16]
 801138e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	685a      	ldr	r2, [r3, #4]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	621a      	str	r2, [r3, #32]
}
 80113a4:	bf00      	nop
 80113a6:	371c      	adds	r7, #28
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	fffeff8f 	.word	0xfffeff8f
 80113b4:	40010000 	.word	0x40010000
 80113b8:	40010400 	.word	0x40010400
 80113bc:	40014000 	.word	0x40014000
 80113c0:	40014400 	.word	0x40014400
 80113c4:	40014800 	.word	0x40014800

080113c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b087      	sub	sp, #28
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a1b      	ldr	r3, [r3, #32]
 80113d6:	f023 0210 	bic.w	r2, r3, #16
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6a1b      	ldr	r3, [r3, #32]
 80113e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	699b      	ldr	r3, [r3, #24]
 80113ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	4b34      	ldr	r3, [pc, #208]	; (80114c4 <TIM_OC2_SetConfig+0xfc>)
 80113f4:	4013      	ands	r3, r2
 80113f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	021b      	lsls	r3, r3, #8
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	4313      	orrs	r3, r2
 801140a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	f023 0320 	bic.w	r3, r3, #32
 8011412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	011b      	lsls	r3, r3, #4
 801141a:	697a      	ldr	r2, [r7, #20]
 801141c:	4313      	orrs	r3, r2
 801141e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a29      	ldr	r2, [pc, #164]	; (80114c8 <TIM_OC2_SetConfig+0x100>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d003      	beq.n	8011430 <TIM_OC2_SetConfig+0x68>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	4a28      	ldr	r2, [pc, #160]	; (80114cc <TIM_OC2_SetConfig+0x104>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d10d      	bne.n	801144c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	011b      	lsls	r3, r3, #4
 801143e:	697a      	ldr	r2, [r7, #20]
 8011440:	4313      	orrs	r3, r2
 8011442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801144a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4a1e      	ldr	r2, [pc, #120]	; (80114c8 <TIM_OC2_SetConfig+0x100>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d00f      	beq.n	8011474 <TIM_OC2_SetConfig+0xac>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	4a1d      	ldr	r2, [pc, #116]	; (80114cc <TIM_OC2_SetConfig+0x104>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d00b      	beq.n	8011474 <TIM_OC2_SetConfig+0xac>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	4a1c      	ldr	r2, [pc, #112]	; (80114d0 <TIM_OC2_SetConfig+0x108>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d007      	beq.n	8011474 <TIM_OC2_SetConfig+0xac>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	4a1b      	ldr	r2, [pc, #108]	; (80114d4 <TIM_OC2_SetConfig+0x10c>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d003      	beq.n	8011474 <TIM_OC2_SetConfig+0xac>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4a1a      	ldr	r2, [pc, #104]	; (80114d8 <TIM_OC2_SetConfig+0x110>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d113      	bne.n	801149c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801147a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	695b      	ldr	r3, [r3, #20]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	693a      	ldr	r2, [r7, #16]
 801148c:	4313      	orrs	r3, r2
 801148e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	699b      	ldr	r3, [r3, #24]
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	4313      	orrs	r3, r2
 801149a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	621a      	str	r2, [r3, #32]
}
 80114b6:	bf00      	nop
 80114b8:	371c      	adds	r7, #28
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	feff8fff 	.word	0xfeff8fff
 80114c8:	40010000 	.word	0x40010000
 80114cc:	40010400 	.word	0x40010400
 80114d0:	40014000 	.word	0x40014000
 80114d4:	40014400 	.word	0x40014400
 80114d8:	40014800 	.word	0x40014800

080114dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114dc:	b480      	push	{r7}
 80114de:	b087      	sub	sp, #28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a1b      	ldr	r3, [r3, #32]
 80114ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a1b      	ldr	r3, [r3, #32]
 80114f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	69db      	ldr	r3, [r3, #28]
 8011502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	4b33      	ldr	r3, [pc, #204]	; (80115d4 <TIM_OC3_SetConfig+0xf8>)
 8011508:	4013      	ands	r3, r2
 801150a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f023 0303 	bic.w	r3, r3, #3
 8011512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68fa      	ldr	r2, [r7, #12]
 801151a:	4313      	orrs	r3, r2
 801151c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	021b      	lsls	r3, r3, #8
 801152c:	697a      	ldr	r2, [r7, #20]
 801152e:	4313      	orrs	r3, r2
 8011530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4a28      	ldr	r2, [pc, #160]	; (80115d8 <TIM_OC3_SetConfig+0xfc>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d003      	beq.n	8011542 <TIM_OC3_SetConfig+0x66>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4a27      	ldr	r2, [pc, #156]	; (80115dc <TIM_OC3_SetConfig+0x100>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d10d      	bne.n	801155e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	021b      	lsls	r3, r3, #8
 8011550:	697a      	ldr	r2, [r7, #20]
 8011552:	4313      	orrs	r3, r2
 8011554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801155c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a1d      	ldr	r2, [pc, #116]	; (80115d8 <TIM_OC3_SetConfig+0xfc>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d00f      	beq.n	8011586 <TIM_OC3_SetConfig+0xaa>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a1c      	ldr	r2, [pc, #112]	; (80115dc <TIM_OC3_SetConfig+0x100>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d00b      	beq.n	8011586 <TIM_OC3_SetConfig+0xaa>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a1b      	ldr	r2, [pc, #108]	; (80115e0 <TIM_OC3_SetConfig+0x104>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d007      	beq.n	8011586 <TIM_OC3_SetConfig+0xaa>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a1a      	ldr	r2, [pc, #104]	; (80115e4 <TIM_OC3_SetConfig+0x108>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d003      	beq.n	8011586 <TIM_OC3_SetConfig+0xaa>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a19      	ldr	r2, [pc, #100]	; (80115e8 <TIM_OC3_SetConfig+0x10c>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d113      	bne.n	80115ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801158c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	011b      	lsls	r3, r3, #4
 801159c:	693a      	ldr	r2, [r7, #16]
 801159e:	4313      	orrs	r3, r2
 80115a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	699b      	ldr	r3, [r3, #24]
 80115a6:	011b      	lsls	r3, r3, #4
 80115a8:	693a      	ldr	r2, [r7, #16]
 80115aa:	4313      	orrs	r3, r2
 80115ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	693a      	ldr	r2, [r7, #16]
 80115b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	685a      	ldr	r2, [r3, #4]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	697a      	ldr	r2, [r7, #20]
 80115c6:	621a      	str	r2, [r3, #32]
}
 80115c8:	bf00      	nop
 80115ca:	371c      	adds	r7, #28
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr
 80115d4:	fffeff8f 	.word	0xfffeff8f
 80115d8:	40010000 	.word	0x40010000
 80115dc:	40010400 	.word	0x40010400
 80115e0:	40014000 	.word	0x40014000
 80115e4:	40014400 	.word	0x40014400
 80115e8:	40014800 	.word	0x40014800

080115ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b087      	sub	sp, #28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	69db      	ldr	r3, [r3, #28]
 8011612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	4b24      	ldr	r3, [pc, #144]	; (80116a8 <TIM_OC4_SetConfig+0xbc>)
 8011618:	4013      	ands	r3, r2
 801161a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	021b      	lsls	r3, r3, #8
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	4313      	orrs	r3, r2
 801162e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	031b      	lsls	r3, r3, #12
 801163e:	693a      	ldr	r2, [r7, #16]
 8011640:	4313      	orrs	r3, r2
 8011642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a19      	ldr	r2, [pc, #100]	; (80116ac <TIM_OC4_SetConfig+0xc0>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d00f      	beq.n	801166c <TIM_OC4_SetConfig+0x80>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4a18      	ldr	r2, [pc, #96]	; (80116b0 <TIM_OC4_SetConfig+0xc4>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d00b      	beq.n	801166c <TIM_OC4_SetConfig+0x80>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4a17      	ldr	r2, [pc, #92]	; (80116b4 <TIM_OC4_SetConfig+0xc8>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d007      	beq.n	801166c <TIM_OC4_SetConfig+0x80>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a16      	ldr	r2, [pc, #88]	; (80116b8 <TIM_OC4_SetConfig+0xcc>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d003      	beq.n	801166c <TIM_OC4_SetConfig+0x80>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a15      	ldr	r2, [pc, #84]	; (80116bc <TIM_OC4_SetConfig+0xd0>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d109      	bne.n	8011680 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	019b      	lsls	r3, r3, #6
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	4313      	orrs	r3, r2
 801167e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	693a      	ldr	r2, [r7, #16]
 8011698:	621a      	str	r2, [r3, #32]
}
 801169a:	bf00      	nop
 801169c:	371c      	adds	r7, #28
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	feff8fff 	.word	0xfeff8fff
 80116ac:	40010000 	.word	0x40010000
 80116b0:	40010400 	.word	0x40010400
 80116b4:	40014000 	.word	0x40014000
 80116b8:	40014400 	.word	0x40014400
 80116bc:	40014800 	.word	0x40014800

080116c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b087      	sub	sp, #28
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	4b21      	ldr	r3, [pc, #132]	; (8011770 <TIM_OC5_SetConfig+0xb0>)
 80116ec:	4013      	ands	r3, r2
 80116ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	4313      	orrs	r3, r2
 80116f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	041b      	lsls	r3, r3, #16
 8011708:	693a      	ldr	r2, [r7, #16]
 801170a:	4313      	orrs	r3, r2
 801170c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4a18      	ldr	r2, [pc, #96]	; (8011774 <TIM_OC5_SetConfig+0xb4>)
 8011712:	4293      	cmp	r3, r2
 8011714:	d00f      	beq.n	8011736 <TIM_OC5_SetConfig+0x76>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	4a17      	ldr	r2, [pc, #92]	; (8011778 <TIM_OC5_SetConfig+0xb8>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d00b      	beq.n	8011736 <TIM_OC5_SetConfig+0x76>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4a16      	ldr	r2, [pc, #88]	; (801177c <TIM_OC5_SetConfig+0xbc>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d007      	beq.n	8011736 <TIM_OC5_SetConfig+0x76>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4a15      	ldr	r2, [pc, #84]	; (8011780 <TIM_OC5_SetConfig+0xc0>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d003      	beq.n	8011736 <TIM_OC5_SetConfig+0x76>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4a14      	ldr	r2, [pc, #80]	; (8011784 <TIM_OC5_SetConfig+0xc4>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d109      	bne.n	801174a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801173c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	695b      	ldr	r3, [r3, #20]
 8011742:	021b      	lsls	r3, r3, #8
 8011744:	697a      	ldr	r2, [r7, #20]
 8011746:	4313      	orrs	r3, r2
 8011748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	68fa      	ldr	r2, [r7, #12]
 8011754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	685a      	ldr	r2, [r3, #4]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	693a      	ldr	r2, [r7, #16]
 8011762:	621a      	str	r2, [r3, #32]
}
 8011764:	bf00      	nop
 8011766:	371c      	adds	r7, #28
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	fffeff8f 	.word	0xfffeff8f
 8011774:	40010000 	.word	0x40010000
 8011778:	40010400 	.word	0x40010400
 801177c:	40014000 	.word	0x40014000
 8011780:	40014400 	.word	0x40014400
 8011784:	40014800 	.word	0x40014800

08011788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011788:	b480      	push	{r7}
 801178a:	b087      	sub	sp, #28
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a1b      	ldr	r3, [r3, #32]
 8011796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	4b22      	ldr	r3, [pc, #136]	; (801183c <TIM_OC6_SetConfig+0xb4>)
 80117b4:	4013      	ands	r3, r2
 80117b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	021b      	lsls	r3, r3, #8
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80117ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	051b      	lsls	r3, r3, #20
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	4313      	orrs	r3, r2
 80117d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a19      	ldr	r2, [pc, #100]	; (8011840 <TIM_OC6_SetConfig+0xb8>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d00f      	beq.n	8011800 <TIM_OC6_SetConfig+0x78>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a18      	ldr	r2, [pc, #96]	; (8011844 <TIM_OC6_SetConfig+0xbc>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d00b      	beq.n	8011800 <TIM_OC6_SetConfig+0x78>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4a17      	ldr	r2, [pc, #92]	; (8011848 <TIM_OC6_SetConfig+0xc0>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d007      	beq.n	8011800 <TIM_OC6_SetConfig+0x78>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4a16      	ldr	r2, [pc, #88]	; (801184c <TIM_OC6_SetConfig+0xc4>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d003      	beq.n	8011800 <TIM_OC6_SetConfig+0x78>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a15      	ldr	r2, [pc, #84]	; (8011850 <TIM_OC6_SetConfig+0xc8>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d109      	bne.n	8011814 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	695b      	ldr	r3, [r3, #20]
 801180c:	029b      	lsls	r3, r3, #10
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	4313      	orrs	r3, r2
 8011812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	685a      	ldr	r2, [r3, #4]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	693a      	ldr	r2, [r7, #16]
 801182c:	621a      	str	r2, [r3, #32]
}
 801182e:	bf00      	nop
 8011830:	371c      	adds	r7, #28
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	feff8fff 	.word	0xfeff8fff
 8011840:	40010000 	.word	0x40010000
 8011844:	40010400 	.word	0x40010400
 8011848:	40014000 	.word	0x40014000
 801184c:	40014400 	.word	0x40014400
 8011850:	40014800 	.word	0x40014800

08011854 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801185e:	2300      	movs	r3, #0
 8011860:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	4b65      	ldr	r3, [pc, #404]	; (8011a04 <TIM_SlaveTimer_SetConfig+0x1b0>)
 801186e:	4013      	ands	r3, r2
 8011870:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	4313      	orrs	r3, r2
 801187a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801187c:	693a      	ldr	r2, [r7, #16]
 801187e:	4b62      	ldr	r3, [pc, #392]	; (8011a08 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011880:	4013      	ands	r3, r2
 8011882:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	693a      	ldr	r2, [r7, #16]
 801188a:	4313      	orrs	r3, r2
 801188c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	693a      	ldr	r2, [r7, #16]
 8011894:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	4a5c      	ldr	r2, [pc, #368]	; (8011a0c <TIM_SlaveTimer_SetConfig+0x1b8>)
 801189c:	4293      	cmp	r3, r2
 801189e:	f000 80ab 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118a2:	4a5a      	ldr	r2, [pc, #360]	; (8011a0c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	f200 80a4 	bhi.w	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80118ae:	f000 80a3 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80118b6:	f200 809c 	bhi.w	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118ba:	4a55      	ldr	r2, [pc, #340]	; (8011a10 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	f000 809b 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118c2:	4a53      	ldr	r2, [pc, #332]	; (8011a10 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	f200 8094 	bhi.w	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118ca:	4a52      	ldr	r2, [pc, #328]	; (8011a14 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	f000 8093 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118d2:	4a50      	ldr	r2, [pc, #320]	; (8011a14 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	f200 808c 	bhi.w	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118da:	4a4f      	ldr	r2, [pc, #316]	; (8011a18 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	f000 808b 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118e2:	4a4d      	ldr	r2, [pc, #308]	; (8011a18 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	f200 8084 	bhi.w	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118ea:	4a4c      	ldr	r2, [pc, #304]	; (8011a1c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	f000 8083 	beq.w	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118f2:	4a4a      	ldr	r2, [pc, #296]	; (8011a1c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d87c      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80118f8:	4a49      	ldr	r2, [pc, #292]	; (8011a20 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d07c      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80118fe:	4a48      	ldr	r2, [pc, #288]	; (8011a20 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d876      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011904:	4a47      	ldr	r2, [pc, #284]	; (8011a24 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011906:	4293      	cmp	r3, r2
 8011908:	d076      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 801190a:	4a46      	ldr	r2, [pc, #280]	; (8011a24 <TIM_SlaveTimer_SetConfig+0x1d0>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d870      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011910:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011914:	d070      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011916:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801191a:	d86a      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 801191c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011920:	d06a      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011926:	d864      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011928:	2b70      	cmp	r3, #112	; 0x70
 801192a:	d01a      	beq.n	8011962 <TIM_SlaveTimer_SetConfig+0x10e>
 801192c:	2b70      	cmp	r3, #112	; 0x70
 801192e:	d860      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011930:	2b60      	cmp	r3, #96	; 0x60
 8011932:	d054      	beq.n	80119de <TIM_SlaveTimer_SetConfig+0x18a>
 8011934:	2b60      	cmp	r3, #96	; 0x60
 8011936:	d85c      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011938:	2b50      	cmp	r3, #80	; 0x50
 801193a:	d046      	beq.n	80119ca <TIM_SlaveTimer_SetConfig+0x176>
 801193c:	2b50      	cmp	r3, #80	; 0x50
 801193e:	d858      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011940:	2b40      	cmp	r3, #64	; 0x40
 8011942:	d019      	beq.n	8011978 <TIM_SlaveTimer_SetConfig+0x124>
 8011944:	2b40      	cmp	r3, #64	; 0x40
 8011946:	d854      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011948:	2b30      	cmp	r3, #48	; 0x30
 801194a:	d055      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 801194c:	2b30      	cmp	r3, #48	; 0x30
 801194e:	d850      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011950:	2b20      	cmp	r3, #32
 8011952:	d051      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011954:	2b20      	cmp	r3, #32
 8011956:	d84c      	bhi.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8011958:	2b00      	cmp	r3, #0
 801195a:	d04d      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 801195c:	2b10      	cmp	r3, #16
 801195e:	d04b      	beq.n	80119f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011960:	e047      	b.n	80119f2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011972:	f000 f9e2 	bl	8011d3a <TIM_ETR_SetConfig>
      break;
 8011976:	e040      	b.n	80119fa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b05      	cmp	r3, #5
 801197e:	d101      	bne.n	8011984 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011980:	2301      	movs	r3, #1
 8011982:	e03b      	b.n	80119fc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6a1a      	ldr	r2, [r3, #32]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f022 0201 	bic.w	r2, r2, #1
 801199a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80119aa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	691b      	ldr	r3, [r3, #16]
 80119b0:	011b      	lsls	r3, r3, #4
 80119b2:	68ba      	ldr	r2, [r7, #8]
 80119b4:	4313      	orrs	r3, r2
 80119b6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	68ba      	ldr	r2, [r7, #8]
 80119be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	621a      	str	r2, [r3, #32]
      break;
 80119c8:	e017      	b.n	80119fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80119d6:	461a      	mov	r2, r3
 80119d8:	f000 f89a 	bl	8011b10 <TIM_TI1_ConfigInputStage>
      break;
 80119dc:	e00d      	b.n	80119fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80119ea:	461a      	mov	r2, r3
 80119ec:	f000 f8fc 	bl	8011be8 <TIM_TI2_ConfigInputStage>
      break;
 80119f0:	e003      	b.n	80119fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	75fb      	strb	r3, [r7, #23]
      break;
 80119f6:	e000      	b.n	80119fa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80119f8:	bf00      	nop
  }

  return status;
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3718      	adds	r7, #24
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	ffcfff8f 	.word	0xffcfff8f
 8011a08:	fffefff8 	.word	0xfffefff8
 8011a0c:	00200010 	.word	0x00200010
 8011a10:	00100070 	.word	0x00100070
 8011a14:	00100060 	.word	0x00100060
 8011a18:	00100050 	.word	0x00100050
 8011a1c:	00100040 	.word	0x00100040
 8011a20:	00100030 	.word	0x00100030
 8011a24:	00100020 	.word	0x00100020

08011a28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b087      	sub	sp, #28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6a1b      	ldr	r3, [r3, #32]
 8011a3a:	f023 0201 	bic.w	r2, r3, #1
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	699b      	ldr	r3, [r3, #24]
 8011a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	6a1b      	ldr	r3, [r3, #32]
 8011a4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	4a28      	ldr	r2, [pc, #160]	; (8011af4 <TIM_TI1_SetConfig+0xcc>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d01b      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a5c:	d017      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	4a25      	ldr	r2, [pc, #148]	; (8011af8 <TIM_TI1_SetConfig+0xd0>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d013      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	4a24      	ldr	r2, [pc, #144]	; (8011afc <TIM_TI1_SetConfig+0xd4>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d00f      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	4a23      	ldr	r2, [pc, #140]	; (8011b00 <TIM_TI1_SetConfig+0xd8>)
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d00b      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	4a22      	ldr	r2, [pc, #136]	; (8011b04 <TIM_TI1_SetConfig+0xdc>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d007      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	4a21      	ldr	r2, [pc, #132]	; (8011b08 <TIM_TI1_SetConfig+0xe0>)
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d003      	beq.n	8011a8e <TIM_TI1_SetConfig+0x66>
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	4a20      	ldr	r2, [pc, #128]	; (8011b0c <TIM_TI1_SetConfig+0xe4>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d101      	bne.n	8011a92 <TIM_TI1_SetConfig+0x6a>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e000      	b.n	8011a94 <TIM_TI1_SetConfig+0x6c>
 8011a92:	2300      	movs	r3, #0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d008      	beq.n	8011aaa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f023 0303 	bic.w	r3, r3, #3
 8011a9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011aa0:	697a      	ldr	r2, [r7, #20]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	617b      	str	r3, [r7, #20]
 8011aa8:	e003      	b.n	8011ab2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	f043 0301 	orr.w	r3, r3, #1
 8011ab0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	011b      	lsls	r3, r3, #4
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	f023 030a 	bic.w	r3, r3, #10
 8011acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	f003 030a 	and.w	r3, r3, #10
 8011ad4:	693a      	ldr	r2, [r7, #16]
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	693a      	ldr	r2, [r7, #16]
 8011ae4:	621a      	str	r2, [r3, #32]
}
 8011ae6:	bf00      	nop
 8011ae8:	371c      	adds	r7, #28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
 8011af2:	bf00      	nop
 8011af4:	40010000 	.word	0x40010000
 8011af8:	40000400 	.word	0x40000400
 8011afc:	40000800 	.word	0x40000800
 8011b00:	40000c00 	.word	0x40000c00
 8011b04:	40010400 	.word	0x40010400
 8011b08:	40001800 	.word	0x40001800
 8011b0c:	40014000 	.word	0x40014000

08011b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b087      	sub	sp, #28
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6a1b      	ldr	r3, [r3, #32]
 8011b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	f023 0201 	bic.w	r2, r3, #1
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	699b      	ldr	r3, [r3, #24]
 8011b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	011b      	lsls	r3, r3, #4
 8011b40:	693a      	ldr	r2, [r7, #16]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	f023 030a 	bic.w	r3, r3, #10
 8011b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011b4e:	697a      	ldr	r2, [r7, #20]
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	621a      	str	r2, [r3, #32]
}
 8011b62:	bf00      	nop
 8011b64:	371c      	adds	r7, #28
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b087      	sub	sp, #28
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	60f8      	str	r0, [r7, #12]
 8011b76:	60b9      	str	r1, [r7, #8]
 8011b78:	607a      	str	r2, [r7, #4]
 8011b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6a1b      	ldr	r3, [r3, #32]
 8011b80:	f023 0210 	bic.w	r2, r3, #16
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	699b      	ldr	r3, [r3, #24]
 8011b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6a1b      	ldr	r3, [r3, #32]
 8011b92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	021b      	lsls	r3, r3, #8
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	031b      	lsls	r3, r3, #12
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	011b      	lsls	r3, r3, #4
 8011bc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011bca:	693a      	ldr	r2, [r7, #16]
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	697a      	ldr	r2, [r7, #20]
 8011bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	693a      	ldr	r2, [r7, #16]
 8011bda:	621a      	str	r2, [r3, #32]
}
 8011bdc:	bf00      	nop
 8011bde:	371c      	adds	r7, #28
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b087      	sub	sp, #28
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6a1b      	ldr	r3, [r3, #32]
 8011bf8:	f023 0210 	bic.w	r2, r3, #16
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	699b      	ldr	r3, [r3, #24]
 8011c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6a1b      	ldr	r3, [r3, #32]
 8011c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	031b      	lsls	r3, r3, #12
 8011c18:	697a      	ldr	r2, [r7, #20]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	011b      	lsls	r3, r3, #4
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	697a      	ldr	r2, [r7, #20]
 8011c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	693a      	ldr	r2, [r7, #16]
 8011c3a:	621a      	str	r2, [r3, #32]
}
 8011c3c:	bf00      	nop
 8011c3e:	371c      	adds	r7, #28
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b087      	sub	sp, #28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	69db      	ldr	r3, [r3, #28]
 8011c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6a1b      	ldr	r3, [r3, #32]
 8011c6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f023 0303 	bic.w	r3, r3, #3
 8011c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	011b      	lsls	r3, r3, #4
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	697a      	ldr	r2, [r7, #20]
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8011c98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	021b      	lsls	r3, r3, #8
 8011c9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8011ca2:	693a      	ldr	r2, [r7, #16]
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	697a      	ldr	r2, [r7, #20]
 8011cac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	693a      	ldr	r2, [r7, #16]
 8011cb2:	621a      	str	r2, [r3, #32]
}
 8011cb4:	bf00      	nop
 8011cb6:	371c      	adds	r7, #28
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b087      	sub	sp, #28
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
 8011ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6a1b      	ldr	r3, [r3, #32]
 8011cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	69db      	ldr	r3, [r3, #28]
 8011cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6a1b      	ldr	r3, [r3, #32]
 8011ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	021b      	lsls	r3, r3, #8
 8011cf2:	697a      	ldr	r2, [r7, #20]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011cfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	031b      	lsls	r3, r3, #12
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8011d12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	031b      	lsls	r3, r3, #12
 8011d18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	697a      	ldr	r2, [r7, #20]
 8011d26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	693a      	ldr	r2, [r7, #16]
 8011d2c:	621a      	str	r2, [r3, #32]
}
 8011d2e:	bf00      	nop
 8011d30:	371c      	adds	r7, #28
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011d3a:	b480      	push	{r7}
 8011d3c:	b087      	sub	sp, #28
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	60b9      	str	r1, [r7, #8]
 8011d44:	607a      	str	r2, [r7, #4]
 8011d46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	021a      	lsls	r2, r3, #8
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	431a      	orrs	r2, r3
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	4313      	orrs	r3, r2
 8011d62:	697a      	ldr	r2, [r7, #20]
 8011d64:	4313      	orrs	r3, r2
 8011d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	697a      	ldr	r2, [r7, #20]
 8011d6c:	609a      	str	r2, [r3, #8]
}
 8011d6e:	bf00      	nop
 8011d70:	371c      	adds	r7, #28
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d7a:	b480      	push	{r7}
 8011d7c:	b087      	sub	sp, #28
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	60f8      	str	r0, [r7, #12]
 8011d82:	60b9      	str	r1, [r7, #8]
 8011d84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f003 031f 	and.w	r3, r3, #31
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011d92:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6a1a      	ldr	r2, [r3, #32]
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	43db      	mvns	r3, r3
 8011d9c:	401a      	ands	r2, r3
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	6a1a      	ldr	r2, [r3, #32]
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	f003 031f 	and.w	r3, r3, #31
 8011dac:	6879      	ldr	r1, [r7, #4]
 8011dae:	fa01 f303 	lsl.w	r3, r1, r3
 8011db2:	431a      	orrs	r2, r3
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	621a      	str	r2, [r3, #32]
}
 8011db8:	bf00      	nop
 8011dba:	371c      	adds	r7, #28
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d101      	bne.n	8011ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011dd8:	2302      	movs	r3, #2
 8011dda:	e06d      	b.n	8011eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2201      	movs	r2, #1
 8011de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2202      	movs	r2, #2
 8011de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	689b      	ldr	r3, [r3, #8]
 8011dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4a30      	ldr	r2, [pc, #192]	; (8011ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d004      	beq.n	8011e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a2f      	ldr	r2, [pc, #188]	; (8011ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d108      	bne.n	8011e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	4313      	orrs	r3, r2
 8011e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a20      	ldr	r2, [pc, #128]	; (8011ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d022      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e4e:	d01d      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4a1d      	ldr	r2, [pc, #116]	; (8011ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d018      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a1c      	ldr	r2, [pc, #112]	; (8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d013      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4a1a      	ldr	r2, [pc, #104]	; (8011ed4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d00e      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4a15      	ldr	r2, [pc, #84]	; (8011ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d009      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4a16      	ldr	r2, [pc, #88]	; (8011ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d004      	beq.n	8011e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4a15      	ldr	r2, [pc, #84]	; (8011edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d10c      	bne.n	8011ea6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	68ba      	ldr	r2, [r7, #8]
 8011e9a:	4313      	orrs	r3, r2
 8011e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	40010000 	.word	0x40010000
 8011ec8:	40010400 	.word	0x40010400
 8011ecc:	40000400 	.word	0x40000400
 8011ed0:	40000800 	.word	0x40000800
 8011ed4:	40000c00 	.word	0x40000c00
 8011ed8:	40001800 	.word	0x40001800
 8011edc:	40014000 	.word	0x40014000

08011ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011ee8:	bf00      	nop
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011efc:	bf00      	nop
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d101      	bne.n	8011f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e042      	b.n	8011fb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d106      	bne.n	8011f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7f3 fb95 	bl	8005670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2224      	movs	r2, #36	; 0x24
 8011f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f022 0201 	bic.w	r2, r2, #1
 8011f5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 fd54 	bl	8012a0c <UART_SetConfig>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d101      	bne.n	8011f6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e022      	b.n	8011fb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d002      	beq.n	8011f7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f001 fab0 	bl	80134dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	685a      	ldr	r2, [r3, #4]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	689a      	ldr	r2, [r3, #8]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f042 0201 	orr.w	r2, r2, #1
 8011faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f001 fb37 	bl	8013620 <UART_CheckIdleState>
 8011fb2:	4603      	mov	r3, r0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b08a      	sub	sp, #40	; 0x28
 8011fc0:	af02      	add	r7, sp, #8
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	603b      	str	r3, [r7, #0]
 8011fc8:	4613      	mov	r3, r2
 8011fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fd2:	2b20      	cmp	r3, #32
 8011fd4:	d17b      	bne.n	80120ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d002      	beq.n	8011fe2 <HAL_UART_Transmit+0x26>
 8011fdc:	88fb      	ldrh	r3, [r7, #6]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d101      	bne.n	8011fe6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e074      	b.n	80120d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2221      	movs	r2, #33	; 0x21
 8011ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011ff6:	f7f4 fecf 	bl	8006d98 <HAL_GetTick>
 8011ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	88fa      	ldrh	r2, [r7, #6]
 8012000:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	88fa      	ldrh	r2, [r7, #6]
 8012008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012014:	d108      	bne.n	8012028 <HAL_UART_Transmit+0x6c>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	691b      	ldr	r3, [r3, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d104      	bne.n	8012028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	61bb      	str	r3, [r7, #24]
 8012026:	e003      	b.n	8012030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012030:	e030      	b.n	8012094 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2200      	movs	r2, #0
 801203a:	2180      	movs	r1, #128	; 0x80
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f001 fb99 	bl	8013774 <UART_WaitOnFlagUntilTimeout>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d005      	beq.n	8012054 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2220      	movs	r2, #32
 801204c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012050:	2303      	movs	r3, #3
 8012052:	e03d      	b.n	80120d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10b      	bne.n	8012072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	3302      	adds	r3, #2
 801206e:	61bb      	str	r3, [r7, #24]
 8012070:	e007      	b.n	8012082 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	781a      	ldrb	r2, [r3, #0]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	3301      	adds	r3, #1
 8012080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012088:	b29b      	uxth	r3, r3
 801208a:	3b01      	subs	r3, #1
 801208c:	b29a      	uxth	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801209a:	b29b      	uxth	r3, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1c8      	bne.n	8012032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	2200      	movs	r2, #0
 80120a8:	2140      	movs	r1, #64	; 0x40
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f001 fb62 	bl	8013774 <UART_WaitOnFlagUntilTimeout>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d005      	beq.n	80120c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2220      	movs	r2, #32
 80120ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80120be:	2303      	movs	r3, #3
 80120c0:	e006      	b.n	80120d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2220      	movs	r2, #32
 80120c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80120ca:	2300      	movs	r3, #0
 80120cc:	e000      	b.n	80120d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80120ce:	2302      	movs	r3, #2
  }
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3720      	adds	r7, #32
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b08a      	sub	sp, #40	; 0x28
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	4613      	mov	r3, r2
 80120e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120ec:	2b20      	cmp	r3, #32
 80120ee:	d167      	bne.n	80121c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d002      	beq.n	80120fc <HAL_UART_Transmit_DMA+0x24>
 80120f6:	88fb      	ldrh	r3, [r7, #6]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80120fc:	2301      	movs	r3, #1
 80120fe:	e060      	b.n	80121c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	88fa      	ldrh	r2, [r7, #6]
 801210a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	88fa      	ldrh	r2, [r7, #6]
 8012112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2200      	movs	r2, #0
 801211a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2221      	movs	r2, #33	; 0x21
 8012122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801212a:	2b00      	cmp	r3, #0
 801212c:	d028      	beq.n	8012180 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012132:	4a26      	ldr	r2, [pc, #152]	; (80121cc <HAL_UART_Transmit_DMA+0xf4>)
 8012134:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801213a:	4a25      	ldr	r2, [pc, #148]	; (80121d0 <HAL_UART_Transmit_DMA+0xf8>)
 801213c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012142:	4a24      	ldr	r2, [pc, #144]	; (80121d4 <HAL_UART_Transmit_DMA+0xfc>)
 8012144:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801214a:	2200      	movs	r2, #0
 801214c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012156:	4619      	mov	r1, r3
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3328      	adds	r3, #40	; 0x28
 801215e:	461a      	mov	r2, r3
 8012160:	88fb      	ldrh	r3, [r7, #6]
 8012162:	f7f6 fe1b 	bl	8008d9c <HAL_DMA_Start_IT>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	2210      	movs	r2, #16
 8012170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2220      	movs	r2, #32
 8012178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801217c:	2301      	movs	r3, #1
 801217e:	e020      	b.n	80121c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2240      	movs	r2, #64	; 0x40
 8012186:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	3308      	adds	r3, #8
 801218e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	e853 3f00 	ldrex	r3, [r3]
 8012196:	613b      	str	r3, [r7, #16]
   return(result);
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801219e:	627b      	str	r3, [r7, #36]	; 0x24
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	3308      	adds	r3, #8
 80121a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a8:	623a      	str	r2, [r7, #32]
 80121aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ac:	69f9      	ldr	r1, [r7, #28]
 80121ae:	6a3a      	ldr	r2, [r7, #32]
 80121b0:	e841 2300 	strex	r3, r2, [r1]
 80121b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1e5      	bne.n	8012188 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80121bc:	2300      	movs	r3, #0
 80121be:	e000      	b.n	80121c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80121c0:	2302      	movs	r3, #2
  }
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3728      	adds	r7, #40	; 0x28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	08013ae1 	.word	0x08013ae1
 80121d0:	08013b77 	.word	0x08013b77
 80121d4:	08013cf9 	.word	0x08013cf9

080121d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08a      	sub	sp, #40	; 0x28
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	4613      	mov	r3, r2
 80121e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121ec:	2b20      	cmp	r3, #32
 80121ee:	d137      	bne.n	8012260 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d002      	beq.n	80121fc <HAL_UART_Receive_DMA+0x24>
 80121f6:	88fb      	ldrh	r3, [r7, #6]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	e030      	b.n	8012262 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2200      	movs	r2, #0
 8012204:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	4a18      	ldr	r2, [pc, #96]	; (801226c <HAL_UART_Receive_DMA+0x94>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d01f      	beq.n	8012250 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801221a:	2b00      	cmp	r3, #0
 801221c:	d018      	beq.n	8012250 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	e853 3f00 	ldrex	r3, [r3]
 801222a:	613b      	str	r3, [r7, #16]
   return(result);
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	461a      	mov	r2, r3
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	623b      	str	r3, [r7, #32]
 801223e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012240:	69f9      	ldr	r1, [r7, #28]
 8012242:	6a3a      	ldr	r2, [r7, #32]
 8012244:	e841 2300 	strex	r3, r2, [r1]
 8012248:	61bb      	str	r3, [r7, #24]
   return(result);
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d1e6      	bne.n	801221e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012250:	88fb      	ldrh	r3, [r7, #6]
 8012252:	461a      	mov	r2, r3
 8012254:	68b9      	ldr	r1, [r7, #8]
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f001 faf4 	bl	8013844 <UART_Start_Receive_DMA>
 801225c:	4603      	mov	r3, r0
 801225e:	e000      	b.n	8012262 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012260:	2302      	movs	r3, #2
  }
}
 8012262:	4618      	mov	r0, r3
 8012264:	3728      	adds	r7, #40	; 0x28
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	58000c00 	.word	0x58000c00

08012270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b0ba      	sub	sp, #232	; 0xe8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	69db      	ldr	r3, [r3, #28]
 801227e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	689b      	ldr	r3, [r3, #8]
 8012292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012296:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801229a:	f640 030f 	movw	r3, #2063	; 0x80f
 801229e:	4013      	ands	r3, r2
 80122a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80122a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d11b      	bne.n	80122e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80122ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80122b0:	f003 0320 	and.w	r3, r3, #32
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d015      	beq.n	80122e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80122b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80122bc:	f003 0320 	and.w	r3, r3, #32
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d105      	bne.n	80122d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80122c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80122c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d009      	beq.n	80122e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 8377 	beq.w	80129c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	4798      	blx	r3
      }
      return;
 80122e2:	e371      	b.n	80129c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80122e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 8123 	beq.w	8012534 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80122ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80122f2:	4b8d      	ldr	r3, [pc, #564]	; (8012528 <HAL_UART_IRQHandler+0x2b8>)
 80122f4:	4013      	ands	r3, r2
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d106      	bne.n	8012308 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80122fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80122fe:	4b8b      	ldr	r3, [pc, #556]	; (801252c <HAL_UART_IRQHandler+0x2bc>)
 8012300:	4013      	ands	r3, r2
 8012302:	2b00      	cmp	r3, #0
 8012304:	f000 8116 	beq.w	8012534 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801230c:	f003 0301 	and.w	r3, r3, #1
 8012310:	2b00      	cmp	r3, #0
 8012312:	d011      	beq.n	8012338 <HAL_UART_IRQHandler+0xc8>
 8012314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801231c:	2b00      	cmp	r3, #0
 801231e:	d00b      	beq.n	8012338 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2201      	movs	r2, #1
 8012326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801232e:	f043 0201 	orr.w	r2, r3, #1
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801233c:	f003 0302 	and.w	r3, r3, #2
 8012340:	2b00      	cmp	r3, #0
 8012342:	d011      	beq.n	8012368 <HAL_UART_IRQHandler+0xf8>
 8012344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012348:	f003 0301 	and.w	r3, r3, #1
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2202      	movs	r2, #2
 8012356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801235e:	f043 0204 	orr.w	r2, r3, #4
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801236c:	f003 0304 	and.w	r3, r3, #4
 8012370:	2b00      	cmp	r3, #0
 8012372:	d011      	beq.n	8012398 <HAL_UART_IRQHandler+0x128>
 8012374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012378:	f003 0301 	and.w	r3, r3, #1
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00b      	beq.n	8012398 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2204      	movs	r2, #4
 8012386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801238e:	f043 0202 	orr.w	r2, r3, #2
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801239c:	f003 0308 	and.w	r3, r3, #8
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d017      	beq.n	80123d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80123a8:	f003 0320 	and.w	r3, r3, #32
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d105      	bne.n	80123bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80123b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80123b4:	4b5c      	ldr	r3, [pc, #368]	; (8012528 <HAL_UART_IRQHandler+0x2b8>)
 80123b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00b      	beq.n	80123d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2208      	movs	r2, #8
 80123c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123ca:	f043 0208 	orr.w	r2, r3, #8
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80123d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d012      	beq.n	8012406 <HAL_UART_IRQHandler+0x196>
 80123e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80123e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00c      	beq.n	8012406 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123fc:	f043 0220 	orr.w	r2, r3, #32
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801240c:	2b00      	cmp	r3, #0
 801240e:	f000 82dd 	beq.w	80129cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012416:	f003 0320 	and.w	r3, r3, #32
 801241a:	2b00      	cmp	r3, #0
 801241c:	d013      	beq.n	8012446 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012422:	f003 0320 	and.w	r3, r3, #32
 8012426:	2b00      	cmp	r3, #0
 8012428:	d105      	bne.n	8012436 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801242a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012432:	2b00      	cmp	r3, #0
 8012434:	d007      	beq.n	8012446 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801243a:	2b00      	cmp	r3, #0
 801243c:	d003      	beq.n	8012446 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801244c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	689b      	ldr	r3, [r3, #8]
 8012456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801245a:	2b40      	cmp	r3, #64	; 0x40
 801245c:	d005      	beq.n	801246a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801245e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012462:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012466:	2b00      	cmp	r3, #0
 8012468:	d054      	beq.n	8012514 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f001 fad2 	bl	8013a14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801247a:	2b40      	cmp	r3, #64	; 0x40
 801247c:	d146      	bne.n	801250c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3308      	adds	r3, #8
 8012484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801248c:	e853 3f00 	ldrex	r3, [r3]
 8012490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	3308      	adds	r3, #8
 80124a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80124aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80124ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80124b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80124ba:	e841 2300 	strex	r3, r2, [r1]
 80124be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80124c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1d9      	bne.n	801247e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d017      	beq.n	8012504 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124da:	4a15      	ldr	r2, [pc, #84]	; (8012530 <HAL_UART_IRQHandler+0x2c0>)
 80124dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f7 f9e1 	bl	80098ac <HAL_DMA_Abort_IT>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d019      	beq.n	8012524 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80124fe:	4610      	mov	r0, r2
 8012500:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012502:	e00f      	b.n	8012524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7f1 fc21 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801250a:	e00b      	b.n	8012524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7f1 fc1d 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012512:	e007      	b.n	8012524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7f1 fc19 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012522:	e253      	b.n	80129cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012524:	bf00      	nop
    return;
 8012526:	e251      	b.n	80129cc <HAL_UART_IRQHandler+0x75c>
 8012528:	10000001 	.word	0x10000001
 801252c:	04000120 	.word	0x04000120
 8012530:	08013d79 	.word	0x08013d79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012538:	2b01      	cmp	r3, #1
 801253a:	f040 81e7 	bne.w	801290c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801253e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012542:	f003 0310 	and.w	r3, r3, #16
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 81e0 	beq.w	801290c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012550:	f003 0310 	and.w	r3, r3, #16
 8012554:	2b00      	cmp	r3, #0
 8012556:	f000 81d9 	beq.w	801290c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2210      	movs	r2, #16
 8012560:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801256c:	2b40      	cmp	r3, #64	; 0x40
 801256e:	f040 8151 	bne.w	8012814 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a96      	ldr	r2, [pc, #600]	; (80127d4 <HAL_UART_IRQHandler+0x564>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d068      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a93      	ldr	r2, [pc, #588]	; (80127d8 <HAL_UART_IRQHandler+0x568>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d061      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a91      	ldr	r2, [pc, #580]	; (80127dc <HAL_UART_IRQHandler+0x56c>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d05a      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a8e      	ldr	r2, [pc, #568]	; (80127e0 <HAL_UART_IRQHandler+0x570>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d053      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4a8c      	ldr	r2, [pc, #560]	; (80127e4 <HAL_UART_IRQHandler+0x574>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d04c      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4a89      	ldr	r2, [pc, #548]	; (80127e8 <HAL_UART_IRQHandler+0x578>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d045      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4a87      	ldr	r2, [pc, #540]	; (80127ec <HAL_UART_IRQHandler+0x57c>)
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d03e      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4a84      	ldr	r2, [pc, #528]	; (80127f0 <HAL_UART_IRQHandler+0x580>)
 80125de:	4293      	cmp	r3, r2
 80125e0:	d037      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4a82      	ldr	r2, [pc, #520]	; (80127f4 <HAL_UART_IRQHandler+0x584>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d030      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a7f      	ldr	r2, [pc, #508]	; (80127f8 <HAL_UART_IRQHandler+0x588>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d029      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	4a7d      	ldr	r2, [pc, #500]	; (80127fc <HAL_UART_IRQHandler+0x58c>)
 8012608:	4293      	cmp	r3, r2
 801260a:	d022      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a7a      	ldr	r2, [pc, #488]	; (8012800 <HAL_UART_IRQHandler+0x590>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d01b      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a78      	ldr	r2, [pc, #480]	; (8012804 <HAL_UART_IRQHandler+0x594>)
 8012624:	4293      	cmp	r3, r2
 8012626:	d014      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a75      	ldr	r2, [pc, #468]	; (8012808 <HAL_UART_IRQHandler+0x598>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d00d      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a73      	ldr	r2, [pc, #460]	; (801280c <HAL_UART_IRQHandler+0x59c>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d006      	beq.n	8012652 <HAL_UART_IRQHandler+0x3e2>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4a70      	ldr	r2, [pc, #448]	; (8012810 <HAL_UART_IRQHandler+0x5a0>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d106      	bne.n	8012660 <HAL_UART_IRQHandler+0x3f0>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	b29b      	uxth	r3, r3
 801265e:	e005      	b.n	801266c <HAL_UART_IRQHandler+0x3fc>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	b29b      	uxth	r3, r3
 801266c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 81ab 	beq.w	80129d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012684:	429a      	cmp	r2, r3
 8012686:	f080 81a3 	bcs.w	80129d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801269a:	69db      	ldr	r3, [r3, #28]
 801269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126a0:	f000 8087 	beq.w	80127b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80126b0:	e853 3f00 	ldrex	r3, [r3]
 80126b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80126b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80126bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	461a      	mov	r2, r3
 80126ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80126ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80126d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80126da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80126de:	e841 2300 	strex	r3, r2, [r1]
 80126e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80126e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1da      	bne.n	80126a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	3308      	adds	r3, #8
 80126f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126f8:	e853 3f00 	ldrex	r3, [r3]
 80126fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80126fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012700:	f023 0301 	bic.w	r3, r3, #1
 8012704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	3308      	adds	r3, #8
 801270e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801271a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801271e:	e841 2300 	strex	r3, r2, [r1]
 8012722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1e1      	bne.n	80126ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	3308      	adds	r3, #8
 8012730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012734:	e853 3f00 	ldrex	r3, [r3]
 8012738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801273c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	3308      	adds	r3, #8
 801274a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801274e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012756:	e841 2300 	strex	r3, r2, [r1]
 801275a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801275c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1e3      	bne.n	801272a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2220      	movs	r2, #32
 8012766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012778:	e853 3f00 	ldrex	r3, [r3]
 801277c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801277e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012780:	f023 0310 	bic.w	r3, r3, #16
 8012784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	461a      	mov	r2, r3
 801278e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012792:	65bb      	str	r3, [r7, #88]	; 0x58
 8012794:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801279a:	e841 2300 	strex	r3, r2, [r1]
 801279e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80127a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d1e4      	bne.n	8012770 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7f6 fd5f 	bl	8009270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2202      	movs	r2, #2
 80127b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	4619      	mov	r1, r3
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7f1 f98b 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80127d2:	e0fd      	b.n	80129d0 <HAL_UART_IRQHandler+0x760>
 80127d4:	40020010 	.word	0x40020010
 80127d8:	40020028 	.word	0x40020028
 80127dc:	40020040 	.word	0x40020040
 80127e0:	40020058 	.word	0x40020058
 80127e4:	40020070 	.word	0x40020070
 80127e8:	40020088 	.word	0x40020088
 80127ec:	400200a0 	.word	0x400200a0
 80127f0:	400200b8 	.word	0x400200b8
 80127f4:	40020410 	.word	0x40020410
 80127f8:	40020428 	.word	0x40020428
 80127fc:	40020440 	.word	0x40020440
 8012800:	40020458 	.word	0x40020458
 8012804:	40020470 	.word	0x40020470
 8012808:	40020488 	.word	0x40020488
 801280c:	400204a0 	.word	0x400204a0
 8012810:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012820:	b29b      	uxth	r3, r3
 8012822:	1ad3      	subs	r3, r2, r3
 8012824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801282e:	b29b      	uxth	r3, r3
 8012830:	2b00      	cmp	r3, #0
 8012832:	f000 80cf 	beq.w	80129d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012836:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801283a:	2b00      	cmp	r3, #0
 801283c:	f000 80ca 	beq.w	80129d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012848:	e853 3f00 	ldrex	r3, [r3]
 801284c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	461a      	mov	r2, r3
 801285e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012862:	647b      	str	r3, [r7, #68]	; 0x44
 8012864:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801286a:	e841 2300 	strex	r3, r2, [r1]
 801286e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1e4      	bne.n	8012840 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	3308      	adds	r3, #8
 801287c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	e853 3f00 	ldrex	r3, [r3]
 8012884:	623b      	str	r3, [r7, #32]
   return(result);
 8012886:	6a3a      	ldr	r2, [r7, #32]
 8012888:	4b55      	ldr	r3, [pc, #340]	; (80129e0 <HAL_UART_IRQHandler+0x770>)
 801288a:	4013      	ands	r3, r2
 801288c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3308      	adds	r3, #8
 8012896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801289a:	633a      	str	r2, [r7, #48]	; 0x30
 801289c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801289e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128a2:	e841 2300 	strex	r3, r2, [r1]
 80128a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d1e3      	bne.n	8012876 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2220      	movs	r2, #32
 80128b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	e853 3f00 	ldrex	r3, [r3]
 80128ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f023 0310 	bic.w	r3, r3, #16
 80128d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	461a      	mov	r2, r3
 80128e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80128e4:	61fb      	str	r3, [r7, #28]
 80128e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e8:	69b9      	ldr	r1, [r7, #24]
 80128ea:	69fa      	ldr	r2, [r7, #28]
 80128ec:	e841 2300 	strex	r3, r2, [r1]
 80128f0:	617b      	str	r3, [r7, #20]
   return(result);
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d1e4      	bne.n	80128c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2202      	movs	r2, #2
 80128fc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80128fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7f1 f8ef 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801290a:	e063      	b.n	80129d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00e      	beq.n	8012936 <HAL_UART_IRQHandler+0x6c6>
 8012918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801291c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012920:	2b00      	cmp	r3, #0
 8012922:	d008      	beq.n	8012936 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801292c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f001 fa63 	bl	8013dfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012934:	e051      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801293e:	2b00      	cmp	r3, #0
 8012940:	d014      	beq.n	801296c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801294e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012956:	2b00      	cmp	r3, #0
 8012958:	d008      	beq.n	801296c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801295e:	2b00      	cmp	r3, #0
 8012960:	d03a      	beq.n	80129d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	4798      	blx	r3
    }
    return;
 801296a:	e035      	b.n	80129d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801296c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012974:	2b00      	cmp	r3, #0
 8012976:	d009      	beq.n	801298c <HAL_UART_IRQHandler+0x71c>
 8012978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012980:	2b00      	cmp	r3, #0
 8012982:	d003      	beq.n	801298c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f001 fa0d 	bl	8013da4 <UART_EndTransmit_IT>
    return;
 801298a:	e026      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012994:	2b00      	cmp	r3, #0
 8012996:	d009      	beq.n	80129ac <HAL_UART_IRQHandler+0x73c>
 8012998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801299c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d003      	beq.n	80129ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f001 fa3c 	bl	8013e22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129aa:	e016      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80129ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d010      	beq.n	80129da <HAL_UART_IRQHandler+0x76a>
 80129b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	da0c      	bge.n	80129da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f001 fa24 	bl	8013e0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129c6:	e008      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
      return;
 80129c8:	bf00      	nop
 80129ca:	e006      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
    return;
 80129cc:	bf00      	nop
 80129ce:	e004      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
      return;
 80129d0:	bf00      	nop
 80129d2:	e002      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
      return;
 80129d4:	bf00      	nop
 80129d6:	e000      	b.n	80129da <HAL_UART_IRQHandler+0x76a>
    return;
 80129d8:	bf00      	nop
  }
}
 80129da:	37e8      	adds	r7, #232	; 0xe8
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	effffffe 	.word	0xeffffffe

080129e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80129ec:	bf00      	nop
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012a00:	bf00      	nop
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a10:	b092      	sub	sp, #72	; 0x48
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a16:	2300      	movs	r3, #0
 8012a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	689a      	ldr	r2, [r3, #8]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	431a      	orrs	r2, r3
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	695b      	ldr	r3, [r3, #20]
 8012a2a:	431a      	orrs	r2, r3
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	69db      	ldr	r3, [r3, #28]
 8012a30:	4313      	orrs	r3, r2
 8012a32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	4bbe      	ldr	r3, [pc, #760]	; (8012d34 <UART_SetConfig+0x328>)
 8012a3c:	4013      	ands	r3, r2
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	6812      	ldr	r2, [r2, #0]
 8012a42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a44:	430b      	orrs	r3, r1
 8012a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	68da      	ldr	r2, [r3, #12]
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	430a      	orrs	r2, r1
 8012a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	699b      	ldr	r3, [r3, #24]
 8012a62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4ab3      	ldr	r2, [pc, #716]	; (8012d38 <UART_SetConfig+0x32c>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d004      	beq.n	8012a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a74:	4313      	orrs	r3, r2
 8012a76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	689a      	ldr	r2, [r3, #8]
 8012a7e:	4baf      	ldr	r3, [pc, #700]	; (8012d3c <UART_SetConfig+0x330>)
 8012a80:	4013      	ands	r3, r2
 8012a82:	697a      	ldr	r2, [r7, #20]
 8012a84:	6812      	ldr	r2, [r2, #0]
 8012a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a88:	430b      	orrs	r3, r1
 8012a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a92:	f023 010f 	bic.w	r1, r3, #15
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	430a      	orrs	r2, r1
 8012aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	4aa6      	ldr	r2, [pc, #664]	; (8012d40 <UART_SetConfig+0x334>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d177      	bne.n	8012b9c <UART_SetConfig+0x190>
 8012aac:	4ba5      	ldr	r3, [pc, #660]	; (8012d44 <UART_SetConfig+0x338>)
 8012aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ab4:	2b28      	cmp	r3, #40	; 0x28
 8012ab6:	d86d      	bhi.n	8012b94 <UART_SetConfig+0x188>
 8012ab8:	a201      	add	r2, pc, #4	; (adr r2, 8012ac0 <UART_SetConfig+0xb4>)
 8012aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012abe:	bf00      	nop
 8012ac0:	08012b65 	.word	0x08012b65
 8012ac4:	08012b95 	.word	0x08012b95
 8012ac8:	08012b95 	.word	0x08012b95
 8012acc:	08012b95 	.word	0x08012b95
 8012ad0:	08012b95 	.word	0x08012b95
 8012ad4:	08012b95 	.word	0x08012b95
 8012ad8:	08012b95 	.word	0x08012b95
 8012adc:	08012b95 	.word	0x08012b95
 8012ae0:	08012b6d 	.word	0x08012b6d
 8012ae4:	08012b95 	.word	0x08012b95
 8012ae8:	08012b95 	.word	0x08012b95
 8012aec:	08012b95 	.word	0x08012b95
 8012af0:	08012b95 	.word	0x08012b95
 8012af4:	08012b95 	.word	0x08012b95
 8012af8:	08012b95 	.word	0x08012b95
 8012afc:	08012b95 	.word	0x08012b95
 8012b00:	08012b75 	.word	0x08012b75
 8012b04:	08012b95 	.word	0x08012b95
 8012b08:	08012b95 	.word	0x08012b95
 8012b0c:	08012b95 	.word	0x08012b95
 8012b10:	08012b95 	.word	0x08012b95
 8012b14:	08012b95 	.word	0x08012b95
 8012b18:	08012b95 	.word	0x08012b95
 8012b1c:	08012b95 	.word	0x08012b95
 8012b20:	08012b7d 	.word	0x08012b7d
 8012b24:	08012b95 	.word	0x08012b95
 8012b28:	08012b95 	.word	0x08012b95
 8012b2c:	08012b95 	.word	0x08012b95
 8012b30:	08012b95 	.word	0x08012b95
 8012b34:	08012b95 	.word	0x08012b95
 8012b38:	08012b95 	.word	0x08012b95
 8012b3c:	08012b95 	.word	0x08012b95
 8012b40:	08012b85 	.word	0x08012b85
 8012b44:	08012b95 	.word	0x08012b95
 8012b48:	08012b95 	.word	0x08012b95
 8012b4c:	08012b95 	.word	0x08012b95
 8012b50:	08012b95 	.word	0x08012b95
 8012b54:	08012b95 	.word	0x08012b95
 8012b58:	08012b95 	.word	0x08012b95
 8012b5c:	08012b95 	.word	0x08012b95
 8012b60:	08012b8d 	.word	0x08012b8d
 8012b64:	2301      	movs	r3, #1
 8012b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b6a:	e222      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b6c:	2304      	movs	r3, #4
 8012b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b72:	e21e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b74:	2308      	movs	r3, #8
 8012b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b7a:	e21a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b7c:	2310      	movs	r3, #16
 8012b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b82:	e216      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b84:	2320      	movs	r3, #32
 8012b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b8a:	e212      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b8c:	2340      	movs	r3, #64	; 0x40
 8012b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b92:	e20e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b94:	2380      	movs	r3, #128	; 0x80
 8012b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b9a:	e20a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a69      	ldr	r2, [pc, #420]	; (8012d48 <UART_SetConfig+0x33c>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d130      	bne.n	8012c08 <UART_SetConfig+0x1fc>
 8012ba6:	4b67      	ldr	r3, [pc, #412]	; (8012d44 <UART_SetConfig+0x338>)
 8012ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012baa:	f003 0307 	and.w	r3, r3, #7
 8012bae:	2b05      	cmp	r3, #5
 8012bb0:	d826      	bhi.n	8012c00 <UART_SetConfig+0x1f4>
 8012bb2:	a201      	add	r2, pc, #4	; (adr r2, 8012bb8 <UART_SetConfig+0x1ac>)
 8012bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb8:	08012bd1 	.word	0x08012bd1
 8012bbc:	08012bd9 	.word	0x08012bd9
 8012bc0:	08012be1 	.word	0x08012be1
 8012bc4:	08012be9 	.word	0x08012be9
 8012bc8:	08012bf1 	.word	0x08012bf1
 8012bcc:	08012bf9 	.word	0x08012bf9
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bd6:	e1ec      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012bd8:	2304      	movs	r3, #4
 8012bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bde:	e1e8      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012be0:	2308      	movs	r3, #8
 8012be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012be6:	e1e4      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012be8:	2310      	movs	r3, #16
 8012bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bee:	e1e0      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012bf0:	2320      	movs	r3, #32
 8012bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bf6:	e1dc      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012bf8:	2340      	movs	r3, #64	; 0x40
 8012bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bfe:	e1d8      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c00:	2380      	movs	r3, #128	; 0x80
 8012c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c06:	e1d4      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a4f      	ldr	r2, [pc, #316]	; (8012d4c <UART_SetConfig+0x340>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d130      	bne.n	8012c74 <UART_SetConfig+0x268>
 8012c12:	4b4c      	ldr	r3, [pc, #304]	; (8012d44 <UART_SetConfig+0x338>)
 8012c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c16:	f003 0307 	and.w	r3, r3, #7
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	d826      	bhi.n	8012c6c <UART_SetConfig+0x260>
 8012c1e:	a201      	add	r2, pc, #4	; (adr r2, 8012c24 <UART_SetConfig+0x218>)
 8012c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c24:	08012c3d 	.word	0x08012c3d
 8012c28:	08012c45 	.word	0x08012c45
 8012c2c:	08012c4d 	.word	0x08012c4d
 8012c30:	08012c55 	.word	0x08012c55
 8012c34:	08012c5d 	.word	0x08012c5d
 8012c38:	08012c65 	.word	0x08012c65
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c42:	e1b6      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c44:	2304      	movs	r3, #4
 8012c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c4a:	e1b2      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c4c:	2308      	movs	r3, #8
 8012c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c52:	e1ae      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c54:	2310      	movs	r3, #16
 8012c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c5a:	e1aa      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c5c:	2320      	movs	r3, #32
 8012c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c62:	e1a6      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c64:	2340      	movs	r3, #64	; 0x40
 8012c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c6a:	e1a2      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c6c:	2380      	movs	r3, #128	; 0x80
 8012c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c72:	e19e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	4a35      	ldr	r2, [pc, #212]	; (8012d50 <UART_SetConfig+0x344>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d130      	bne.n	8012ce0 <UART_SetConfig+0x2d4>
 8012c7e:	4b31      	ldr	r3, [pc, #196]	; (8012d44 <UART_SetConfig+0x338>)
 8012c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c82:	f003 0307 	and.w	r3, r3, #7
 8012c86:	2b05      	cmp	r3, #5
 8012c88:	d826      	bhi.n	8012cd8 <UART_SetConfig+0x2cc>
 8012c8a:	a201      	add	r2, pc, #4	; (adr r2, 8012c90 <UART_SetConfig+0x284>)
 8012c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c90:	08012ca9 	.word	0x08012ca9
 8012c94:	08012cb1 	.word	0x08012cb1
 8012c98:	08012cb9 	.word	0x08012cb9
 8012c9c:	08012cc1 	.word	0x08012cc1
 8012ca0:	08012cc9 	.word	0x08012cc9
 8012ca4:	08012cd1 	.word	0x08012cd1
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cae:	e180      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cb0:	2304      	movs	r3, #4
 8012cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cb6:	e17c      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cb8:	2308      	movs	r3, #8
 8012cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cbe:	e178      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cc0:	2310      	movs	r3, #16
 8012cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cc6:	e174      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cc8:	2320      	movs	r3, #32
 8012cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cce:	e170      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cd0:	2340      	movs	r3, #64	; 0x40
 8012cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cd6:	e16c      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012cd8:	2380      	movs	r3, #128	; 0x80
 8012cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cde:	e168      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	4a1b      	ldr	r2, [pc, #108]	; (8012d54 <UART_SetConfig+0x348>)
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	d142      	bne.n	8012d70 <UART_SetConfig+0x364>
 8012cea:	4b16      	ldr	r3, [pc, #88]	; (8012d44 <UART_SetConfig+0x338>)
 8012cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cee:	f003 0307 	and.w	r3, r3, #7
 8012cf2:	2b05      	cmp	r3, #5
 8012cf4:	d838      	bhi.n	8012d68 <UART_SetConfig+0x35c>
 8012cf6:	a201      	add	r2, pc, #4	; (adr r2, 8012cfc <UART_SetConfig+0x2f0>)
 8012cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cfc:	08012d15 	.word	0x08012d15
 8012d00:	08012d1d 	.word	0x08012d1d
 8012d04:	08012d25 	.word	0x08012d25
 8012d08:	08012d2d 	.word	0x08012d2d
 8012d0c:	08012d59 	.word	0x08012d59
 8012d10:	08012d61 	.word	0x08012d61
 8012d14:	2300      	movs	r3, #0
 8012d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d1a:	e14a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d1c:	2304      	movs	r3, #4
 8012d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d22:	e146      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d24:	2308      	movs	r3, #8
 8012d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d2a:	e142      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d2c:	2310      	movs	r3, #16
 8012d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d32:	e13e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d34:	cfff69f3 	.word	0xcfff69f3
 8012d38:	58000c00 	.word	0x58000c00
 8012d3c:	11fff4ff 	.word	0x11fff4ff
 8012d40:	40011000 	.word	0x40011000
 8012d44:	58024400 	.word	0x58024400
 8012d48:	40004400 	.word	0x40004400
 8012d4c:	40004800 	.word	0x40004800
 8012d50:	40004c00 	.word	0x40004c00
 8012d54:	40005000 	.word	0x40005000
 8012d58:	2320      	movs	r3, #32
 8012d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d5e:	e128      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d60:	2340      	movs	r3, #64	; 0x40
 8012d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d66:	e124      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d68:	2380      	movs	r3, #128	; 0x80
 8012d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d6e:	e120      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4acb      	ldr	r2, [pc, #812]	; (80130a4 <UART_SetConfig+0x698>)
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d176      	bne.n	8012e68 <UART_SetConfig+0x45c>
 8012d7a:	4bcb      	ldr	r3, [pc, #812]	; (80130a8 <UART_SetConfig+0x69c>)
 8012d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d82:	2b28      	cmp	r3, #40	; 0x28
 8012d84:	d86c      	bhi.n	8012e60 <UART_SetConfig+0x454>
 8012d86:	a201      	add	r2, pc, #4	; (adr r2, 8012d8c <UART_SetConfig+0x380>)
 8012d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d8c:	08012e31 	.word	0x08012e31
 8012d90:	08012e61 	.word	0x08012e61
 8012d94:	08012e61 	.word	0x08012e61
 8012d98:	08012e61 	.word	0x08012e61
 8012d9c:	08012e61 	.word	0x08012e61
 8012da0:	08012e61 	.word	0x08012e61
 8012da4:	08012e61 	.word	0x08012e61
 8012da8:	08012e61 	.word	0x08012e61
 8012dac:	08012e39 	.word	0x08012e39
 8012db0:	08012e61 	.word	0x08012e61
 8012db4:	08012e61 	.word	0x08012e61
 8012db8:	08012e61 	.word	0x08012e61
 8012dbc:	08012e61 	.word	0x08012e61
 8012dc0:	08012e61 	.word	0x08012e61
 8012dc4:	08012e61 	.word	0x08012e61
 8012dc8:	08012e61 	.word	0x08012e61
 8012dcc:	08012e41 	.word	0x08012e41
 8012dd0:	08012e61 	.word	0x08012e61
 8012dd4:	08012e61 	.word	0x08012e61
 8012dd8:	08012e61 	.word	0x08012e61
 8012ddc:	08012e61 	.word	0x08012e61
 8012de0:	08012e61 	.word	0x08012e61
 8012de4:	08012e61 	.word	0x08012e61
 8012de8:	08012e61 	.word	0x08012e61
 8012dec:	08012e49 	.word	0x08012e49
 8012df0:	08012e61 	.word	0x08012e61
 8012df4:	08012e61 	.word	0x08012e61
 8012df8:	08012e61 	.word	0x08012e61
 8012dfc:	08012e61 	.word	0x08012e61
 8012e00:	08012e61 	.word	0x08012e61
 8012e04:	08012e61 	.word	0x08012e61
 8012e08:	08012e61 	.word	0x08012e61
 8012e0c:	08012e51 	.word	0x08012e51
 8012e10:	08012e61 	.word	0x08012e61
 8012e14:	08012e61 	.word	0x08012e61
 8012e18:	08012e61 	.word	0x08012e61
 8012e1c:	08012e61 	.word	0x08012e61
 8012e20:	08012e61 	.word	0x08012e61
 8012e24:	08012e61 	.word	0x08012e61
 8012e28:	08012e61 	.word	0x08012e61
 8012e2c:	08012e59 	.word	0x08012e59
 8012e30:	2301      	movs	r3, #1
 8012e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e36:	e0bc      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e38:	2304      	movs	r3, #4
 8012e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e3e:	e0b8      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e40:	2308      	movs	r3, #8
 8012e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e46:	e0b4      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e48:	2310      	movs	r3, #16
 8012e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4e:	e0b0      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e50:	2320      	movs	r3, #32
 8012e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e56:	e0ac      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e58:	2340      	movs	r3, #64	; 0x40
 8012e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e5e:	e0a8      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e60:	2380      	movs	r3, #128	; 0x80
 8012e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e66:	e0a4      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4a8f      	ldr	r2, [pc, #572]	; (80130ac <UART_SetConfig+0x6a0>)
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d130      	bne.n	8012ed4 <UART_SetConfig+0x4c8>
 8012e72:	4b8d      	ldr	r3, [pc, #564]	; (80130a8 <UART_SetConfig+0x69c>)
 8012e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e76:	f003 0307 	and.w	r3, r3, #7
 8012e7a:	2b05      	cmp	r3, #5
 8012e7c:	d826      	bhi.n	8012ecc <UART_SetConfig+0x4c0>
 8012e7e:	a201      	add	r2, pc, #4	; (adr r2, 8012e84 <UART_SetConfig+0x478>)
 8012e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e84:	08012e9d 	.word	0x08012e9d
 8012e88:	08012ea5 	.word	0x08012ea5
 8012e8c:	08012ead 	.word	0x08012ead
 8012e90:	08012eb5 	.word	0x08012eb5
 8012e94:	08012ebd 	.word	0x08012ebd
 8012e98:	08012ec5 	.word	0x08012ec5
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ea2:	e086      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ea4:	2304      	movs	r3, #4
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eaa:	e082      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012eac:	2308      	movs	r3, #8
 8012eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb2:	e07e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012eb4:	2310      	movs	r3, #16
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eba:	e07a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ebc:	2320      	movs	r3, #32
 8012ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ec2:	e076      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ec4:	2340      	movs	r3, #64	; 0x40
 8012ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eca:	e072      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ecc:	2380      	movs	r3, #128	; 0x80
 8012ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ed2:	e06e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4a75      	ldr	r2, [pc, #468]	; (80130b0 <UART_SetConfig+0x6a4>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d130      	bne.n	8012f40 <UART_SetConfig+0x534>
 8012ede:	4b72      	ldr	r3, [pc, #456]	; (80130a8 <UART_SetConfig+0x69c>)
 8012ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ee2:	f003 0307 	and.w	r3, r3, #7
 8012ee6:	2b05      	cmp	r3, #5
 8012ee8:	d826      	bhi.n	8012f38 <UART_SetConfig+0x52c>
 8012eea:	a201      	add	r2, pc, #4	; (adr r2, 8012ef0 <UART_SetConfig+0x4e4>)
 8012eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef0:	08012f09 	.word	0x08012f09
 8012ef4:	08012f11 	.word	0x08012f11
 8012ef8:	08012f19 	.word	0x08012f19
 8012efc:	08012f21 	.word	0x08012f21
 8012f00:	08012f29 	.word	0x08012f29
 8012f04:	08012f31 	.word	0x08012f31
 8012f08:	2300      	movs	r3, #0
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0e:	e050      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f10:	2304      	movs	r3, #4
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f16:	e04c      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f18:	2308      	movs	r3, #8
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1e:	e048      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f20:	2310      	movs	r3, #16
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f26:	e044      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f28:	2320      	movs	r3, #32
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f2e:	e040      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f30:	2340      	movs	r3, #64	; 0x40
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f36:	e03c      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f38:	2380      	movs	r3, #128	; 0x80
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f3e:	e038      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4a5b      	ldr	r2, [pc, #364]	; (80130b4 <UART_SetConfig+0x6a8>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d130      	bne.n	8012fac <UART_SetConfig+0x5a0>
 8012f4a:	4b57      	ldr	r3, [pc, #348]	; (80130a8 <UART_SetConfig+0x69c>)
 8012f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f4e:	f003 0307 	and.w	r3, r3, #7
 8012f52:	2b05      	cmp	r3, #5
 8012f54:	d826      	bhi.n	8012fa4 <UART_SetConfig+0x598>
 8012f56:	a201      	add	r2, pc, #4	; (adr r2, 8012f5c <UART_SetConfig+0x550>)
 8012f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f5c:	08012f75 	.word	0x08012f75
 8012f60:	08012f7d 	.word	0x08012f7d
 8012f64:	08012f85 	.word	0x08012f85
 8012f68:	08012f8d 	.word	0x08012f8d
 8012f6c:	08012f95 	.word	0x08012f95
 8012f70:	08012f9d 	.word	0x08012f9d
 8012f74:	2302      	movs	r3, #2
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f7a:	e01a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f7c:	2304      	movs	r3, #4
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e016      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f84:	2308      	movs	r3, #8
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8a:	e012      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f8c:	2310      	movs	r3, #16
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f92:	e00e      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f94:	2320      	movs	r3, #32
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9a:	e00a      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012f9c:	2340      	movs	r3, #64	; 0x40
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa2:	e006      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012fa4:	2380      	movs	r3, #128	; 0x80
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012faa:	e002      	b.n	8012fb2 <UART_SetConfig+0x5a6>
 8012fac:	2380      	movs	r3, #128	; 0x80
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4a3f      	ldr	r2, [pc, #252]	; (80130b4 <UART_SetConfig+0x6a8>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	f040 80f8 	bne.w	80131ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012fbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012fc2:	2b20      	cmp	r3, #32
 8012fc4:	dc46      	bgt.n	8013054 <UART_SetConfig+0x648>
 8012fc6:	2b02      	cmp	r3, #2
 8012fc8:	f2c0 8082 	blt.w	80130d0 <UART_SetConfig+0x6c4>
 8012fcc:	3b02      	subs	r3, #2
 8012fce:	2b1e      	cmp	r3, #30
 8012fd0:	d87e      	bhi.n	80130d0 <UART_SetConfig+0x6c4>
 8012fd2:	a201      	add	r2, pc, #4	; (adr r2, 8012fd8 <UART_SetConfig+0x5cc>)
 8012fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd8:	0801305b 	.word	0x0801305b
 8012fdc:	080130d1 	.word	0x080130d1
 8012fe0:	08013063 	.word	0x08013063
 8012fe4:	080130d1 	.word	0x080130d1
 8012fe8:	080130d1 	.word	0x080130d1
 8012fec:	080130d1 	.word	0x080130d1
 8012ff0:	08013073 	.word	0x08013073
 8012ff4:	080130d1 	.word	0x080130d1
 8012ff8:	080130d1 	.word	0x080130d1
 8012ffc:	080130d1 	.word	0x080130d1
 8013000:	080130d1 	.word	0x080130d1
 8013004:	080130d1 	.word	0x080130d1
 8013008:	080130d1 	.word	0x080130d1
 801300c:	080130d1 	.word	0x080130d1
 8013010:	08013083 	.word	0x08013083
 8013014:	080130d1 	.word	0x080130d1
 8013018:	080130d1 	.word	0x080130d1
 801301c:	080130d1 	.word	0x080130d1
 8013020:	080130d1 	.word	0x080130d1
 8013024:	080130d1 	.word	0x080130d1
 8013028:	080130d1 	.word	0x080130d1
 801302c:	080130d1 	.word	0x080130d1
 8013030:	080130d1 	.word	0x080130d1
 8013034:	080130d1 	.word	0x080130d1
 8013038:	080130d1 	.word	0x080130d1
 801303c:	080130d1 	.word	0x080130d1
 8013040:	080130d1 	.word	0x080130d1
 8013044:	080130d1 	.word	0x080130d1
 8013048:	080130d1 	.word	0x080130d1
 801304c:	080130d1 	.word	0x080130d1
 8013050:	080130c3 	.word	0x080130c3
 8013054:	2b40      	cmp	r3, #64	; 0x40
 8013056:	d037      	beq.n	80130c8 <UART_SetConfig+0x6bc>
 8013058:	e03a      	b.n	80130d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801305a:	f7fc f9d1 	bl	800f400 <HAL_RCCEx_GetD3PCLK1Freq>
 801305e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013060:	e03c      	b.n	80130dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013066:	4618      	mov	r0, r3
 8013068:	f7fc f9e0 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013070:	e034      	b.n	80130dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013072:	f107 0318 	add.w	r3, r7, #24
 8013076:	4618      	mov	r0, r3
 8013078:	f7fc fb2c 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013080:	e02c      	b.n	80130dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013082:	4b09      	ldr	r3, [pc, #36]	; (80130a8 <UART_SetConfig+0x69c>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f003 0320 	and.w	r3, r3, #32
 801308a:	2b00      	cmp	r3, #0
 801308c:	d016      	beq.n	80130bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801308e:	4b06      	ldr	r3, [pc, #24]	; (80130a8 <UART_SetConfig+0x69c>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	08db      	lsrs	r3, r3, #3
 8013094:	f003 0303 	and.w	r3, r3, #3
 8013098:	4a07      	ldr	r2, [pc, #28]	; (80130b8 <UART_SetConfig+0x6ac>)
 801309a:	fa22 f303 	lsr.w	r3, r2, r3
 801309e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80130a0:	e01c      	b.n	80130dc <UART_SetConfig+0x6d0>
 80130a2:	bf00      	nop
 80130a4:	40011400 	.word	0x40011400
 80130a8:	58024400 	.word	0x58024400
 80130ac:	40007800 	.word	0x40007800
 80130b0:	40007c00 	.word	0x40007c00
 80130b4:	58000c00 	.word	0x58000c00
 80130b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80130bc:	4b9d      	ldr	r3, [pc, #628]	; (8013334 <UART_SetConfig+0x928>)
 80130be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80130c0:	e00c      	b.n	80130dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80130c2:	4b9d      	ldr	r3, [pc, #628]	; (8013338 <UART_SetConfig+0x92c>)
 80130c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80130c6:	e009      	b.n	80130dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80130c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80130ce:	e005      	b.n	80130dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80130d0:	2300      	movs	r3, #0
 80130d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80130d4:	2301      	movs	r3, #1
 80130d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80130da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80130dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f000 81de 	beq.w	80134a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e8:	4a94      	ldr	r2, [pc, #592]	; (801333c <UART_SetConfig+0x930>)
 80130ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130ee:	461a      	mov	r2, r3
 80130f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80130f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	4613      	mov	r3, r2
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	4413      	add	r3, r2
 8013102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013104:	429a      	cmp	r2, r3
 8013106:	d305      	bcc.n	8013114 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801310e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013110:	429a      	cmp	r2, r3
 8013112:	d903      	bls.n	801311c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801311a:	e1c1      	b.n	80134a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801311e:	2200      	movs	r2, #0
 8013120:	60bb      	str	r3, [r7, #8]
 8013122:	60fa      	str	r2, [r7, #12]
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013128:	4a84      	ldr	r2, [pc, #528]	; (801333c <UART_SetConfig+0x930>)
 801312a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801312e:	b29b      	uxth	r3, r3
 8013130:	2200      	movs	r2, #0
 8013132:	603b      	str	r3, [r7, #0]
 8013134:	607a      	str	r2, [r7, #4]
 8013136:	e9d7 2300 	ldrd	r2, r3, [r7]
 801313a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801313e:	f7ed f927 	bl	8000390 <__aeabi_uldivmod>
 8013142:	4602      	mov	r2, r0
 8013144:	460b      	mov	r3, r1
 8013146:	4610      	mov	r0, r2
 8013148:	4619      	mov	r1, r3
 801314a:	f04f 0200 	mov.w	r2, #0
 801314e:	f04f 0300 	mov.w	r3, #0
 8013152:	020b      	lsls	r3, r1, #8
 8013154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013158:	0202      	lsls	r2, r0, #8
 801315a:	6979      	ldr	r1, [r7, #20]
 801315c:	6849      	ldr	r1, [r1, #4]
 801315e:	0849      	lsrs	r1, r1, #1
 8013160:	2000      	movs	r0, #0
 8013162:	460c      	mov	r4, r1
 8013164:	4605      	mov	r5, r0
 8013166:	eb12 0804 	adds.w	r8, r2, r4
 801316a:	eb43 0905 	adc.w	r9, r3, r5
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	469a      	mov	sl, r3
 8013176:	4693      	mov	fp, r2
 8013178:	4652      	mov	r2, sl
 801317a:	465b      	mov	r3, fp
 801317c:	4640      	mov	r0, r8
 801317e:	4649      	mov	r1, r9
 8013180:	f7ed f906 	bl	8000390 <__aeabi_uldivmod>
 8013184:	4602      	mov	r2, r0
 8013186:	460b      	mov	r3, r1
 8013188:	4613      	mov	r3, r2
 801318a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013192:	d308      	bcc.n	80131a6 <UART_SetConfig+0x79a>
 8013194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801319a:	d204      	bcs.n	80131a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131a2:	60da      	str	r2, [r3, #12]
 80131a4:	e17c      	b.n	80134a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80131a6:	2301      	movs	r3, #1
 80131a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80131ac:	e178      	b.n	80134a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	69db      	ldr	r3, [r3, #28]
 80131b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131b6:	f040 80c5 	bne.w	8013344 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80131ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80131be:	2b20      	cmp	r3, #32
 80131c0:	dc48      	bgt.n	8013254 <UART_SetConfig+0x848>
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	db7b      	blt.n	80132be <UART_SetConfig+0x8b2>
 80131c6:	2b20      	cmp	r3, #32
 80131c8:	d879      	bhi.n	80132be <UART_SetConfig+0x8b2>
 80131ca:	a201      	add	r2, pc, #4	; (adr r2, 80131d0 <UART_SetConfig+0x7c4>)
 80131cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d0:	0801325b 	.word	0x0801325b
 80131d4:	08013263 	.word	0x08013263
 80131d8:	080132bf 	.word	0x080132bf
 80131dc:	080132bf 	.word	0x080132bf
 80131e0:	0801326b 	.word	0x0801326b
 80131e4:	080132bf 	.word	0x080132bf
 80131e8:	080132bf 	.word	0x080132bf
 80131ec:	080132bf 	.word	0x080132bf
 80131f0:	0801327b 	.word	0x0801327b
 80131f4:	080132bf 	.word	0x080132bf
 80131f8:	080132bf 	.word	0x080132bf
 80131fc:	080132bf 	.word	0x080132bf
 8013200:	080132bf 	.word	0x080132bf
 8013204:	080132bf 	.word	0x080132bf
 8013208:	080132bf 	.word	0x080132bf
 801320c:	080132bf 	.word	0x080132bf
 8013210:	0801328b 	.word	0x0801328b
 8013214:	080132bf 	.word	0x080132bf
 8013218:	080132bf 	.word	0x080132bf
 801321c:	080132bf 	.word	0x080132bf
 8013220:	080132bf 	.word	0x080132bf
 8013224:	080132bf 	.word	0x080132bf
 8013228:	080132bf 	.word	0x080132bf
 801322c:	080132bf 	.word	0x080132bf
 8013230:	080132bf 	.word	0x080132bf
 8013234:	080132bf 	.word	0x080132bf
 8013238:	080132bf 	.word	0x080132bf
 801323c:	080132bf 	.word	0x080132bf
 8013240:	080132bf 	.word	0x080132bf
 8013244:	080132bf 	.word	0x080132bf
 8013248:	080132bf 	.word	0x080132bf
 801324c:	080132bf 	.word	0x080132bf
 8013250:	080132b1 	.word	0x080132b1
 8013254:	2b40      	cmp	r3, #64	; 0x40
 8013256:	d02e      	beq.n	80132b6 <UART_SetConfig+0x8aa>
 8013258:	e031      	b.n	80132be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801325a:	f7fa f91b 	bl	800d494 <HAL_RCC_GetPCLK1Freq>
 801325e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013260:	e033      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013262:	f7fa f92d 	bl	800d4c0 <HAL_RCC_GetPCLK2Freq>
 8013266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013268:	e02f      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801326a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801326e:	4618      	mov	r0, r3
 8013270:	f7fc f8dc 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013278:	e027      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801327a:	f107 0318 	add.w	r3, r7, #24
 801327e:	4618      	mov	r0, r3
 8013280:	f7fc fa28 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013288:	e01f      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801328a:	4b2d      	ldr	r3, [pc, #180]	; (8013340 <UART_SetConfig+0x934>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f003 0320 	and.w	r3, r3, #32
 8013292:	2b00      	cmp	r3, #0
 8013294:	d009      	beq.n	80132aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013296:	4b2a      	ldr	r3, [pc, #168]	; (8013340 <UART_SetConfig+0x934>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	08db      	lsrs	r3, r3, #3
 801329c:	f003 0303 	and.w	r3, r3, #3
 80132a0:	4a24      	ldr	r2, [pc, #144]	; (8013334 <UART_SetConfig+0x928>)
 80132a2:	fa22 f303 	lsr.w	r3, r2, r3
 80132a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80132a8:	e00f      	b.n	80132ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80132aa:	4b22      	ldr	r3, [pc, #136]	; (8013334 <UART_SetConfig+0x928>)
 80132ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132ae:	e00c      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80132b0:	4b21      	ldr	r3, [pc, #132]	; (8013338 <UART_SetConfig+0x92c>)
 80132b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132b4:	e009      	b.n	80132ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80132ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132bc:	e005      	b.n	80132ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80132be:	2300      	movs	r3, #0
 80132c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80132c2:	2301      	movs	r3, #1
 80132c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80132c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80132ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f000 80e7 	beq.w	80134a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132d6:	4a19      	ldr	r2, [pc, #100]	; (801333c <UART_SetConfig+0x930>)
 80132d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132dc:	461a      	mov	r2, r3
 80132de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80132e4:	005a      	lsls	r2, r3, #1
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	085b      	lsrs	r3, r3, #1
 80132ec:	441a      	add	r2, r3
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	685b      	ldr	r3, [r3, #4]
 80132f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80132f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80132f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fa:	2b0f      	cmp	r3, #15
 80132fc:	d916      	bls.n	801332c <UART_SetConfig+0x920>
 80132fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013304:	d212      	bcs.n	801332c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013308:	b29b      	uxth	r3, r3
 801330a:	f023 030f 	bic.w	r3, r3, #15
 801330e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013312:	085b      	lsrs	r3, r3, #1
 8013314:	b29b      	uxth	r3, r3
 8013316:	f003 0307 	and.w	r3, r3, #7
 801331a:	b29a      	uxth	r2, r3
 801331c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801331e:	4313      	orrs	r3, r2
 8013320:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013328:	60da      	str	r2, [r3, #12]
 801332a:	e0b9      	b.n	80134a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801332c:	2301      	movs	r3, #1
 801332e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013332:	e0b5      	b.n	80134a0 <UART_SetConfig+0xa94>
 8013334:	03d09000 	.word	0x03d09000
 8013338:	003d0900 	.word	0x003d0900
 801333c:	08015674 	.word	0x08015674
 8013340:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013344:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013348:	2b20      	cmp	r3, #32
 801334a:	dc49      	bgt.n	80133e0 <UART_SetConfig+0x9d4>
 801334c:	2b00      	cmp	r3, #0
 801334e:	db7c      	blt.n	801344a <UART_SetConfig+0xa3e>
 8013350:	2b20      	cmp	r3, #32
 8013352:	d87a      	bhi.n	801344a <UART_SetConfig+0xa3e>
 8013354:	a201      	add	r2, pc, #4	; (adr r2, 801335c <UART_SetConfig+0x950>)
 8013356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335a:	bf00      	nop
 801335c:	080133e7 	.word	0x080133e7
 8013360:	080133ef 	.word	0x080133ef
 8013364:	0801344b 	.word	0x0801344b
 8013368:	0801344b 	.word	0x0801344b
 801336c:	080133f7 	.word	0x080133f7
 8013370:	0801344b 	.word	0x0801344b
 8013374:	0801344b 	.word	0x0801344b
 8013378:	0801344b 	.word	0x0801344b
 801337c:	08013407 	.word	0x08013407
 8013380:	0801344b 	.word	0x0801344b
 8013384:	0801344b 	.word	0x0801344b
 8013388:	0801344b 	.word	0x0801344b
 801338c:	0801344b 	.word	0x0801344b
 8013390:	0801344b 	.word	0x0801344b
 8013394:	0801344b 	.word	0x0801344b
 8013398:	0801344b 	.word	0x0801344b
 801339c:	08013417 	.word	0x08013417
 80133a0:	0801344b 	.word	0x0801344b
 80133a4:	0801344b 	.word	0x0801344b
 80133a8:	0801344b 	.word	0x0801344b
 80133ac:	0801344b 	.word	0x0801344b
 80133b0:	0801344b 	.word	0x0801344b
 80133b4:	0801344b 	.word	0x0801344b
 80133b8:	0801344b 	.word	0x0801344b
 80133bc:	0801344b 	.word	0x0801344b
 80133c0:	0801344b 	.word	0x0801344b
 80133c4:	0801344b 	.word	0x0801344b
 80133c8:	0801344b 	.word	0x0801344b
 80133cc:	0801344b 	.word	0x0801344b
 80133d0:	0801344b 	.word	0x0801344b
 80133d4:	0801344b 	.word	0x0801344b
 80133d8:	0801344b 	.word	0x0801344b
 80133dc:	0801343d 	.word	0x0801343d
 80133e0:	2b40      	cmp	r3, #64	; 0x40
 80133e2:	d02e      	beq.n	8013442 <UART_SetConfig+0xa36>
 80133e4:	e031      	b.n	801344a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133e6:	f7fa f855 	bl	800d494 <HAL_RCC_GetPCLK1Freq>
 80133ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133ec:	e033      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80133ee:	f7fa f867 	bl	800d4c0 <HAL_RCC_GetPCLK2Freq>
 80133f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133f4:	e02f      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fc f816 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013404:	e027      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013406:	f107 0318 	add.w	r3, r7, #24
 801340a:	4618      	mov	r0, r3
 801340c:	f7fc f962 	bl	800f6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013414:	e01f      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013416:	4b2d      	ldr	r3, [pc, #180]	; (80134cc <UART_SetConfig+0xac0>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f003 0320 	and.w	r3, r3, #32
 801341e:	2b00      	cmp	r3, #0
 8013420:	d009      	beq.n	8013436 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013422:	4b2a      	ldr	r3, [pc, #168]	; (80134cc <UART_SetConfig+0xac0>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	08db      	lsrs	r3, r3, #3
 8013428:	f003 0303 	and.w	r3, r3, #3
 801342c:	4a28      	ldr	r2, [pc, #160]	; (80134d0 <UART_SetConfig+0xac4>)
 801342e:	fa22 f303 	lsr.w	r3, r2, r3
 8013432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013434:	e00f      	b.n	8013456 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013436:	4b26      	ldr	r3, [pc, #152]	; (80134d0 <UART_SetConfig+0xac4>)
 8013438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801343a:	e00c      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801343c:	4b25      	ldr	r3, [pc, #148]	; (80134d4 <UART_SetConfig+0xac8>)
 801343e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013440:	e009      	b.n	8013456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013448:	e005      	b.n	8013456 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801344a:	2300      	movs	r3, #0
 801344c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013454:	bf00      	nop
    }

    if (pclk != 0U)
 8013456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013458:	2b00      	cmp	r3, #0
 801345a:	d021      	beq.n	80134a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013460:	4a1d      	ldr	r2, [pc, #116]	; (80134d8 <UART_SetConfig+0xacc>)
 8013462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013466:	461a      	mov	r2, r3
 8013468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801346a:	fbb3 f2f2 	udiv	r2, r3, r2
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	085b      	lsrs	r3, r3, #1
 8013474:	441a      	add	r2, r3
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	fbb2 f3f3 	udiv	r3, r2, r3
 801347e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013482:	2b0f      	cmp	r3, #15
 8013484:	d909      	bls.n	801349a <UART_SetConfig+0xa8e>
 8013486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801348c:	d205      	bcs.n	801349a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013490:	b29a      	uxth	r2, r3
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	60da      	str	r2, [r3, #12]
 8013498:	e002      	b.n	80134a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801349a:	2301      	movs	r3, #1
 801349c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	2201      	movs	r2, #1
 80134a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	2201      	movs	r2, #1
 80134ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2200      	movs	r2, #0
 80134b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	2200      	movs	r2, #0
 80134ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80134bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3748      	adds	r7, #72	; 0x48
 80134c4:	46bd      	mov	sp, r7
 80134c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80134ca:	bf00      	nop
 80134cc:	58024400 	.word	0x58024400
 80134d0:	03d09000 	.word	0x03d09000
 80134d4:	003d0900 	.word	0x003d0900
 80134d8:	08015674 	.word	0x08015674

080134dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134e8:	f003 0301 	and.w	r3, r3, #1
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d00a      	beq.n	8013506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	430a      	orrs	r2, r1
 8013504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801350a:	f003 0302 	and.w	r3, r3, #2
 801350e:	2b00      	cmp	r3, #0
 8013510:	d00a      	beq.n	8013528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	430a      	orrs	r2, r1
 8013526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801352c:	f003 0304 	and.w	r3, r3, #4
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00a      	beq.n	801354a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	430a      	orrs	r2, r1
 8013548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801354e:	f003 0308 	and.w	r3, r3, #8
 8013552:	2b00      	cmp	r3, #0
 8013554:	d00a      	beq.n	801356c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	430a      	orrs	r2, r1
 801356a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013570:	f003 0310 	and.w	r3, r3, #16
 8013574:	2b00      	cmp	r3, #0
 8013576:	d00a      	beq.n	801358e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	689b      	ldr	r3, [r3, #8]
 801357e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	430a      	orrs	r2, r1
 801358c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013592:	f003 0320 	and.w	r3, r3, #32
 8013596:	2b00      	cmp	r3, #0
 8013598:	d00a      	beq.n	80135b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	430a      	orrs	r2, r1
 80135ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d01a      	beq.n	80135f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	430a      	orrs	r2, r1
 80135d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135da:	d10a      	bne.n	80135f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	430a      	orrs	r2, r1
 80135f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d00a      	beq.n	8013614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	430a      	orrs	r2, r1
 8013612:	605a      	str	r2, [r3, #4]
  }
}
 8013614:	bf00      	nop
 8013616:	370c      	adds	r7, #12
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b098      	sub	sp, #96	; 0x60
 8013624:	af02      	add	r7, sp, #8
 8013626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013630:	f7f3 fbb2 	bl	8006d98 <HAL_GetTick>
 8013634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f003 0308 	and.w	r3, r3, #8
 8013640:	2b08      	cmp	r3, #8
 8013642:	d12f      	bne.n	80136a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013648:	9300      	str	r3, [sp, #0]
 801364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801364c:	2200      	movs	r2, #0
 801364e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 f88e 	bl	8013774 <UART_WaitOnFlagUntilTimeout>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d022      	beq.n	80136a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013666:	e853 3f00 	ldrex	r3, [r3]
 801366a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801366e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013672:	653b      	str	r3, [r7, #80]	; 0x50
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	461a      	mov	r2, r3
 801367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801367c:	647b      	str	r3, [r7, #68]	; 0x44
 801367e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013684:	e841 2300 	strex	r3, r2, [r1]
 8013688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801368c:	2b00      	cmp	r3, #0
 801368e:	d1e6      	bne.n	801365e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2220      	movs	r2, #32
 8013694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80136a0:	2303      	movs	r3, #3
 80136a2:	e063      	b.n	801376c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f003 0304 	and.w	r3, r3, #4
 80136ae:	2b04      	cmp	r3, #4
 80136b0:	d149      	bne.n	8013746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136ba:	2200      	movs	r2, #0
 80136bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f000 f857 	bl	8013774 <UART_WaitOnFlagUntilTimeout>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d03c      	beq.n	8013746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d4:	e853 3f00 	ldrex	r3, [r3]
 80136d8:	623b      	str	r3, [r7, #32]
   return(result);
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	461a      	mov	r2, r3
 80136e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ea:	633b      	str	r3, [r7, #48]	; 0x30
 80136ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136f2:	e841 2300 	strex	r3, r2, [r1]
 80136f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d1e6      	bne.n	80136cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3308      	adds	r3, #8
 8013704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	e853 3f00 	ldrex	r3, [r3]
 801370c:	60fb      	str	r3, [r7, #12]
   return(result);
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	f023 0301 	bic.w	r3, r3, #1
 8013714:	64bb      	str	r3, [r7, #72]	; 0x48
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	3308      	adds	r3, #8
 801371c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801371e:	61fa      	str	r2, [r7, #28]
 8013720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013722:	69b9      	ldr	r1, [r7, #24]
 8013724:	69fa      	ldr	r2, [r7, #28]
 8013726:	e841 2300 	strex	r3, r2, [r1]
 801372a:	617b      	str	r3, [r7, #20]
   return(result);
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d1e5      	bne.n	80136fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2220      	movs	r2, #32
 8013736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2200      	movs	r2, #0
 801373e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013742:	2303      	movs	r3, #3
 8013744:	e012      	b.n	801376c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2220      	movs	r2, #32
 801374a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2220      	movs	r2, #32
 8013752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2200      	movs	r2, #0
 8013760:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3758      	adds	r7, #88	; 0x58
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	603b      	str	r3, [r7, #0]
 8013780:	4613      	mov	r3, r2
 8013782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013784:	e049      	b.n	801381a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801378c:	d045      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801378e:	f7f3 fb03 	bl	8006d98 <HAL_GetTick>
 8013792:	4602      	mov	r2, r0
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	1ad3      	subs	r3, r2, r3
 8013798:	69ba      	ldr	r2, [r7, #24]
 801379a:	429a      	cmp	r2, r3
 801379c:	d302      	bcc.n	80137a4 <UART_WaitOnFlagUntilTimeout+0x30>
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80137a4:	2303      	movs	r3, #3
 80137a6:	e048      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	f003 0304 	and.w	r3, r3, #4
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d031      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	69db      	ldr	r3, [r3, #28]
 80137bc:	f003 0308 	and.w	r3, r3, #8
 80137c0:	2b08      	cmp	r3, #8
 80137c2:	d110      	bne.n	80137e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2208      	movs	r2, #8
 80137ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f921 	bl	8013a14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2208      	movs	r2, #8
 80137d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80137e2:	2301      	movs	r3, #1
 80137e4:	e029      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	69db      	ldr	r3, [r3, #28]
 80137ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137f4:	d111      	bne.n	801381a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80137fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013800:	68f8      	ldr	r0, [r7, #12]
 8013802:	f000 f907 	bl	8013a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2220      	movs	r2, #32
 801380a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013816:	2303      	movs	r3, #3
 8013818:	e00f      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	69da      	ldr	r2, [r3, #28]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	4013      	ands	r3, r2
 8013824:	68ba      	ldr	r2, [r7, #8]
 8013826:	429a      	cmp	r2, r3
 8013828:	bf0c      	ite	eq
 801382a:	2301      	moveq	r3, #1
 801382c:	2300      	movne	r3, #0
 801382e:	b2db      	uxtb	r3, r3
 8013830:	461a      	mov	r2, r3
 8013832:	79fb      	ldrb	r3, [r7, #7]
 8013834:	429a      	cmp	r2, r3
 8013836:	d0a6      	beq.n	8013786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b096      	sub	sp, #88	; 0x58
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	4613      	mov	r3, r2
 8013850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	68ba      	ldr	r2, [r7, #8]
 8013856:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	88fa      	ldrh	r2, [r7, #6]
 801385c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2222      	movs	r2, #34	; 0x22
 801386c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013876:	2b00      	cmp	r3, #0
 8013878:	d02d      	beq.n	80138d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013880:	4a40      	ldr	r2, [pc, #256]	; (8013984 <UART_Start_Receive_DMA+0x140>)
 8013882:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801388a:	4a3f      	ldr	r2, [pc, #252]	; (8013988 <UART_Start_Receive_DMA+0x144>)
 801388c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013894:	4a3d      	ldr	r2, [pc, #244]	; (801398c <UART_Start_Receive_DMA+0x148>)
 8013896:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801389e:	2200      	movs	r2, #0
 80138a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	3324      	adds	r3, #36	; 0x24
 80138ae:	4619      	mov	r1, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138b4:	461a      	mov	r2, r3
 80138b6:	88fb      	ldrh	r3, [r7, #6]
 80138b8:	f7f5 fa70 	bl	8008d9c <HAL_DMA_Start_IT>
 80138bc:	4603      	mov	r3, r0
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d009      	beq.n	80138d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2210      	movs	r2, #16
 80138c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2220      	movs	r2, #32
 80138ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80138d2:	2301      	movs	r3, #1
 80138d4:	e051      	b.n	801397a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d018      	beq.n	8013910 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138e6:	e853 3f00 	ldrex	r3, [r3]
 80138ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80138ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80138f2:	657b      	str	r3, [r7, #84]	; 0x54
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	461a      	mov	r2, r3
 80138fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80138fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013900:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013904:	e841 2300 	strex	r3, r2, [r1]
 8013908:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1e6      	bne.n	80138de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	3308      	adds	r3, #8
 8013916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801391a:	e853 3f00 	ldrex	r3, [r3]
 801391e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013922:	f043 0301 	orr.w	r3, r3, #1
 8013926:	653b      	str	r3, [r7, #80]	; 0x50
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3308      	adds	r3, #8
 801392e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013930:	637a      	str	r2, [r7, #52]	; 0x34
 8013932:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013938:	e841 2300 	strex	r3, r2, [r1]
 801393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1e5      	bne.n	8013910 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	3308      	adds	r3, #8
 801394a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	e853 3f00 	ldrex	r3, [r3]
 8013952:	613b      	str	r3, [r7, #16]
   return(result);
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3308      	adds	r3, #8
 8013962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013964:	623a      	str	r2, [r7, #32]
 8013966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013968:	69f9      	ldr	r1, [r7, #28]
 801396a:	6a3a      	ldr	r2, [r7, #32]
 801396c:	e841 2300 	strex	r3, r2, [r1]
 8013970:	61bb      	str	r3, [r7, #24]
   return(result);
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1e5      	bne.n	8013944 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013978:	2300      	movs	r3, #0
}
 801397a:	4618      	mov	r0, r3
 801397c:	3758      	adds	r7, #88	; 0x58
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	08013b93 	.word	0x08013b93
 8013988:	08013cbb 	.word	0x08013cbb
 801398c:	08013cf9 	.word	0x08013cf9

08013990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013990:	b480      	push	{r7}
 8013992:	b08f      	sub	sp, #60	; 0x3c
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801399e:	6a3b      	ldr	r3, [r7, #32]
 80139a0:	e853 3f00 	ldrex	r3, [r3]
 80139a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80139ac:	637b      	str	r3, [r7, #52]	; 0x34
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	461a      	mov	r2, r3
 80139b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139be:	e841 2300 	strex	r3, r2, [r1]
 80139c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80139c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d1e6      	bne.n	8013998 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3308      	adds	r3, #8
 80139d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	e853 3f00 	ldrex	r3, [r3]
 80139d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80139e0:	633b      	str	r3, [r7, #48]	; 0x30
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	3308      	adds	r3, #8
 80139e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ea:	61ba      	str	r2, [r7, #24]
 80139ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ee:	6979      	ldr	r1, [r7, #20]
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	e841 2300 	strex	r3, r2, [r1]
 80139f6:	613b      	str	r3, [r7, #16]
   return(result);
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1e5      	bne.n	80139ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2220      	movs	r2, #32
 8013a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8013a06:	bf00      	nop
 8013a08:	373c      	adds	r7, #60	; 0x3c
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr
	...

08013a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b095      	sub	sp, #84	; 0x54
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a24:	e853 3f00 	ldrex	r3, [r3]
 8013a28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	461a      	mov	r2, r3
 8013a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8013a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a42:	e841 2300 	strex	r3, r2, [r1]
 8013a46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e6      	bne.n	8013a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	3308      	adds	r3, #8
 8013a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a56:	6a3b      	ldr	r3, [r7, #32]
 8013a58:	e853 3f00 	ldrex	r3, [r3]
 8013a5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a5e:	69fa      	ldr	r2, [r7, #28]
 8013a60:	4b1e      	ldr	r3, [pc, #120]	; (8013adc <UART_EndRxTransfer+0xc8>)
 8013a62:	4013      	ands	r3, r2
 8013a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	3308      	adds	r3, #8
 8013a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a76:	e841 2300 	strex	r3, r2, [r1]
 8013a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d1e5      	bne.n	8013a4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d118      	bne.n	8013abc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	e853 3f00 	ldrex	r3, [r3]
 8013a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	f023 0310 	bic.w	r3, r3, #16
 8013a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aa8:	61bb      	str	r3, [r7, #24]
 8013aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aac:	6979      	ldr	r1, [r7, #20]
 8013aae:	69ba      	ldr	r2, [r7, #24]
 8013ab0:	e841 2300 	strex	r3, r2, [r1]
 8013ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d1e6      	bne.n	8013a8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2220      	movs	r2, #32
 8013ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2200      	movs	r2, #0
 8013ace:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013ad0:	bf00      	nop
 8013ad2:	3754      	adds	r7, #84	; 0x54
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr
 8013adc:	effffffe 	.word	0xeffffffe

08013ae0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b090      	sub	sp, #64	; 0x40
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	69db      	ldr	r3, [r3, #28]
 8013af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013af6:	d037      	beq.n	8013b68 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8013af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013afa:	2200      	movs	r2, #0
 8013afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	3308      	adds	r3, #8
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	e853 3f00 	ldrex	r3, [r3]
 8013b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8013b10:	6a3b      	ldr	r3, [r7, #32]
 8013b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	3308      	adds	r3, #8
 8013b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b20:	633a      	str	r2, [r7, #48]	; 0x30
 8013b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b28:	e841 2300 	strex	r3, r2, [r1]
 8013b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d1e5      	bne.n	8013b00 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	e853 3f00 	ldrex	r3, [r3]
 8013b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b48:	637b      	str	r3, [r7, #52]	; 0x34
 8013b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	461a      	mov	r2, r3
 8013b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b52:	61fb      	str	r3, [r7, #28]
 8013b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b56:	69b9      	ldr	r1, [r7, #24]
 8013b58:	69fa      	ldr	r2, [r7, #28]
 8013b5a:	e841 2300 	strex	r3, r2, [r1]
 8013b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1e6      	bne.n	8013b34 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013b66:	e002      	b.n	8013b6e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013b68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013b6a:	f7ef ff75 	bl	8003a58 <HAL_UART_TxCpltCallback>
}
 8013b6e:	bf00      	nop
 8013b70:	3740      	adds	r7, #64	; 0x40
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}

08013b76 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b084      	sub	sp, #16
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013b84:	68f8      	ldr	r0, [r7, #12]
 8013b86:	f7fe ff2d 	bl	80129e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b8a:	bf00      	nop
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b09c      	sub	sp, #112	; 0x70
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	69db      	ldr	r3, [r3, #28]
 8013ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ba8:	d071      	beq.n	8013c8e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bac:	2200      	movs	r2, #0
 8013bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bba:	e853 3f00 	ldrex	r3, [r3]
 8013bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8013bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	461a      	mov	r2, r3
 8013bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8013bd2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013bd8:	e841 2300 	strex	r3, r2, [r1]
 8013bdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d1e6      	bne.n	8013bb2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	3308      	adds	r3, #8
 8013bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bee:	e853 3f00 	ldrex	r3, [r3]
 8013bf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf6:	f023 0301 	bic.w	r3, r3, #1
 8013bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8013bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3308      	adds	r3, #8
 8013c02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c04:	647a      	str	r2, [r7, #68]	; 0x44
 8013c06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c0c:	e841 2300 	strex	r3, r2, [r1]
 8013c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d1e5      	bne.n	8013be4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	3308      	adds	r3, #8
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	e853 3f00 	ldrex	r3, [r3]
 8013c26:	623b      	str	r3, [r7, #32]
   return(result);
 8013c28:	6a3b      	ldr	r3, [r7, #32]
 8013c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8013c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	3308      	adds	r3, #8
 8013c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013c38:	633a      	str	r2, [r7, #48]	; 0x30
 8013c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c40:	e841 2300 	strex	r3, r2, [r1]
 8013c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1e5      	bne.n	8013c18 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c4e:	2220      	movs	r2, #32
 8013c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d118      	bne.n	8013c8e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	e853 3f00 	ldrex	r3, [r3]
 8013c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f023 0310 	bic.w	r3, r3, #16
 8013c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	461a      	mov	r2, r3
 8013c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c7a:	61fb      	str	r3, [r7, #28]
 8013c7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7e:	69b9      	ldr	r1, [r7, #24]
 8013c80:	69fa      	ldr	r2, [r7, #28]
 8013c82:	e841 2300 	strex	r3, r2, [r1]
 8013c86:	617b      	str	r3, [r7, #20]
   return(result);
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1e6      	bne.n	8013c5c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c90:	2200      	movs	r2, #0
 8013c92:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d107      	bne.n	8013cac <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013ca6:	f7ef ff1f 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013caa:	e002      	b.n	8013cb2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013cac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013cae:	f7ef feeb 	bl	8003a88 <HAL_UART_RxCpltCallback>
}
 8013cb2:	bf00      	nop
 8013cb4:	3770      	adds	r7, #112	; 0x70
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b084      	sub	sp, #16
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2201      	movs	r2, #1
 8013ccc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d109      	bne.n	8013cea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013cdc:	085b      	lsrs	r3, r3, #1
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f7ef ff00 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013ce8:	e002      	b.n	8013cf0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013cea:	68f8      	ldr	r0, [r7, #12]
 8013cec:	f7fe fe84 	bl	80129f8 <HAL_UART_RxHalfCpltCallback>
}
 8013cf0:	bf00      	nop
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	689b      	ldr	r3, [r3, #8]
 8013d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d20:	2b80      	cmp	r3, #128	; 0x80
 8013d22:	d109      	bne.n	8013d38 <UART_DMAError+0x40>
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	2b21      	cmp	r3, #33	; 0x21
 8013d28:	d106      	bne.n	8013d38 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8013d32:	6978      	ldr	r0, [r7, #20]
 8013d34:	f7ff fe2c 	bl	8013990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	689b      	ldr	r3, [r3, #8]
 8013d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d42:	2b40      	cmp	r3, #64	; 0x40
 8013d44:	d109      	bne.n	8013d5a <UART_DMAError+0x62>
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2b22      	cmp	r3, #34	; 0x22
 8013d4a:	d106      	bne.n	8013d5a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8013d54:	6978      	ldr	r0, [r7, #20]
 8013d56:	f7ff fe5d 	bl	8013a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d60:	f043 0210 	orr.w	r2, r3, #16
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d6a:	6978      	ldr	r0, [r7, #20]
 8013d6c:	f7ef ffee 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d70:	bf00      	nop
 8013d72:	3718      	adds	r7, #24
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	2200      	movs	r2, #0
 8013d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f7ef ffd8 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d9c:	bf00      	nop
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b088      	sub	sp, #32
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	e853 3f00 	ldrex	r3, [r3]
 8013db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dc0:	61fb      	str	r3, [r7, #28]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	61bb      	str	r3, [r7, #24]
 8013dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dce:	6979      	ldr	r1, [r7, #20]
 8013dd0:	69ba      	ldr	r2, [r7, #24]
 8013dd2:	e841 2300 	strex	r3, r2, [r1]
 8013dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1e6      	bne.n	8013dac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2220      	movs	r2, #32
 8013de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2200      	movs	r2, #0
 8013dea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7ef fe33 	bl	8003a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013df2:	bf00      	nop
 8013df4:	3720      	adds	r7, #32
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013dfa:	b480      	push	{r7}
 8013dfc:	b083      	sub	sp, #12
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013e02:	bf00      	nop
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr

08013e0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013e0e:	b480      	push	{r7}
 8013e10:	b083      	sub	sp, #12
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013e16:	bf00      	nop
 8013e18:	370c      	adds	r7, #12
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr

08013e22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013e22:	b480      	push	{r7}
 8013e24:	b083      	sub	sp, #12
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013e2a:	bf00      	nop
 8013e2c:	370c      	adds	r7, #12
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013e36:	b480      	push	{r7}
 8013e38:	b085      	sub	sp, #20
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d101      	bne.n	8013e4c <HAL_UARTEx_DisableFifoMode+0x16>
 8013e48:	2302      	movs	r3, #2
 8013e4a:	e027      	b.n	8013e9c <HAL_UARTEx_DisableFifoMode+0x66>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2201      	movs	r2, #1
 8013e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2224      	movs	r2, #36	; 0x24
 8013e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f022 0201 	bic.w	r2, r2, #1
 8013e72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013e7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2220      	movs	r2, #32
 8013e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d101      	bne.n	8013ec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013ebc:	2302      	movs	r3, #2
 8013ebe:	e02d      	b.n	8013f1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2224      	movs	r2, #36	; 0x24
 8013ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f022 0201 	bic.w	r2, r2, #1
 8013ee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	689b      	ldr	r3, [r3, #8]
 8013eee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	683a      	ldr	r2, [r7, #0]
 8013ef8:	430a      	orrs	r2, r1
 8013efa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 f8a3 	bl	8014048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	68fa      	ldr	r2, [r7, #12]
 8013f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2220      	movs	r2, #32
 8013f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2200      	movs	r2, #0
 8013f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3710      	adds	r7, #16
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d101      	bne.n	8013f3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013f38:	2302      	movs	r3, #2
 8013f3a:	e02d      	b.n	8013f98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2201      	movs	r2, #1
 8013f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2224      	movs	r2, #36	; 0x24
 8013f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f022 0201 	bic.w	r2, r2, #1
 8013f62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	683a      	ldr	r2, [r7, #0]
 8013f74:	430a      	orrs	r2, r1
 8013f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f000 f865 	bl	8014048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	68fa      	ldr	r2, [r7, #12]
 8013f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2220      	movs	r2, #32
 8013f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08c      	sub	sp, #48	; 0x30
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	4613      	mov	r3, r2
 8013fac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fb4:	2b20      	cmp	r3, #32
 8013fb6:	d142      	bne.n	801403e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d002      	beq.n	8013fc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8013fbe:	88fb      	ldrh	r3, [r7, #6]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d101      	bne.n	8013fc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	e03b      	b.n	8014040 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8013fd4:	88fb      	ldrh	r3, [r7, #6]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	68b9      	ldr	r1, [r7, #8]
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	f7ff fc32 	bl	8013844 <UART_Start_Receive_DMA>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8013fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d124      	bne.n	8014038 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d11d      	bne.n	8014032 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2210      	movs	r2, #16
 8013ffc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	e853 3f00 	ldrex	r3, [r3]
 801400a:	617b      	str	r3, [r7, #20]
   return(result);
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	f043 0310 	orr.w	r3, r3, #16
 8014012:	62bb      	str	r3, [r7, #40]	; 0x28
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	461a      	mov	r2, r3
 801401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401c:	627b      	str	r3, [r7, #36]	; 0x24
 801401e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014020:	6a39      	ldr	r1, [r7, #32]
 8014022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014024:	e841 2300 	strex	r3, r2, [r1]
 8014028:	61fb      	str	r3, [r7, #28]
   return(result);
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d1e6      	bne.n	8013ffe <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014030:	e002      	b.n	8014038 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8014032:	2301      	movs	r3, #1
 8014034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8014038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801403c:	e000      	b.n	8014040 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801403e:	2302      	movs	r3, #2
  }
}
 8014040:	4618      	mov	r0, r3
 8014042:	3730      	adds	r7, #48	; 0x30
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014048:	b480      	push	{r7}
 801404a:	b085      	sub	sp, #20
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014054:	2b00      	cmp	r3, #0
 8014056:	d108      	bne.n	801406a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2201      	movs	r2, #1
 801405c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2201      	movs	r2, #1
 8014064:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014068:	e031      	b.n	80140ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801406a:	2310      	movs	r3, #16
 801406c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801406e:	2310      	movs	r3, #16
 8014070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	0e5b      	lsrs	r3, r3, #25
 801407a:	b2db      	uxtb	r3, r3
 801407c:	f003 0307 	and.w	r3, r3, #7
 8014080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	0f5b      	lsrs	r3, r3, #29
 801408a:	b2db      	uxtb	r3, r3
 801408c:	f003 0307 	and.w	r3, r3, #7
 8014090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014092:	7bbb      	ldrb	r3, [r7, #14]
 8014094:	7b3a      	ldrb	r2, [r7, #12]
 8014096:	4911      	ldr	r1, [pc, #68]	; (80140dc <UARTEx_SetNbDataToProcess+0x94>)
 8014098:	5c8a      	ldrb	r2, [r1, r2]
 801409a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801409e:	7b3a      	ldrb	r2, [r7, #12]
 80140a0:	490f      	ldr	r1, [pc, #60]	; (80140e0 <UARTEx_SetNbDataToProcess+0x98>)
 80140a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80140a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
 80140b2:	7b7a      	ldrb	r2, [r7, #13]
 80140b4:	4909      	ldr	r1, [pc, #36]	; (80140dc <UARTEx_SetNbDataToProcess+0x94>)
 80140b6:	5c8a      	ldrb	r2, [r1, r2]
 80140b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80140bc:	7b7a      	ldrb	r2, [r7, #13]
 80140be:	4908      	ldr	r1, [pc, #32]	; (80140e0 <UARTEx_SetNbDataToProcess+0x98>)
 80140c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80140ce:	bf00      	nop
 80140d0:	3714      	adds	r7, #20
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop
 80140dc:	0801568c 	.word	0x0801568c
 80140e0:	08015694 	.word	0x08015694

080140e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80140e4:	b084      	sub	sp, #16
 80140e6:	b580      	push	{r7, lr}
 80140e8:	b084      	sub	sp, #16
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	f107 001c 	add.w	r0, r7, #28
 80140f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d120      	bne.n	801413e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	68da      	ldr	r2, [r3, #12]
 801410c:	4b2a      	ldr	r3, [pc, #168]	; (80141b8 <USB_CoreInit+0xd4>)
 801410e:	4013      	ands	r3, r2
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014122:	2b01      	cmp	r3, #1
 8014124:	d105      	bne.n	8014132 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 faac 	bl	8014690 <USB_CoreReset>
 8014138:	4603      	mov	r3, r0
 801413a:	73fb      	strb	r3, [r7, #15]
 801413c:	e01a      	b.n	8014174 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	68db      	ldr	r3, [r3, #12]
 8014142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 faa0 	bl	8014690 <USB_CoreReset>
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014156:	2b00      	cmp	r3, #0
 8014158:	d106      	bne.n	8014168 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801415e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	639a      	str	r2, [r3, #56]	; 0x38
 8014166:	e005      	b.n	8014174 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801416c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014176:	2b01      	cmp	r3, #1
 8014178:	d116      	bne.n	80141a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801417e:	b29a      	uxth	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014188:	4b0c      	ldr	r3, [pc, #48]	; (80141bc <USB_CoreInit+0xd8>)
 801418a:	4313      	orrs	r3, r2
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	689b      	ldr	r3, [r3, #8]
 8014194:	f043 0206 	orr.w	r2, r3, #6
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	f043 0220 	orr.w	r2, r3, #32
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3710      	adds	r7, #16
 80141ae:	46bd      	mov	sp, r7
 80141b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80141b4:	b004      	add	sp, #16
 80141b6:	4770      	bx	lr
 80141b8:	ffbdffbf 	.word	0xffbdffbf
 80141bc:	03ee0000 	.word	0x03ee0000

080141c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	f023 0201 	bic.w	r2, r3, #1
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	370c      	adds	r7, #12
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr

080141e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80141e2:	b580      	push	{r7, lr}
 80141e4:	b084      	sub	sp, #16
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
 80141ea:	460b      	mov	r3, r1
 80141ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80141ee:	2300      	movs	r3, #0
 80141f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80141fe:	78fb      	ldrb	r3, [r7, #3]
 8014200:	2b01      	cmp	r3, #1
 8014202:	d115      	bne.n	8014230 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014210:	2001      	movs	r0, #1
 8014212:	f7f2 fdcd 	bl	8006db0 <HAL_Delay>
      ms++;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	3301      	adds	r3, #1
 801421a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 fa29 	bl	8014674 <USB_GetMode>
 8014222:	4603      	mov	r3, r0
 8014224:	2b01      	cmp	r3, #1
 8014226:	d01e      	beq.n	8014266 <USB_SetCurrentMode+0x84>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2b31      	cmp	r3, #49	; 0x31
 801422c:	d9f0      	bls.n	8014210 <USB_SetCurrentMode+0x2e>
 801422e:	e01a      	b.n	8014266 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014230:	78fb      	ldrb	r3, [r7, #3]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d115      	bne.n	8014262 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014242:	2001      	movs	r0, #1
 8014244:	f7f2 fdb4 	bl	8006db0 <HAL_Delay>
      ms++;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	3301      	adds	r3, #1
 801424c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f000 fa10 	bl	8014674 <USB_GetMode>
 8014254:	4603      	mov	r3, r0
 8014256:	2b00      	cmp	r3, #0
 8014258:	d005      	beq.n	8014266 <USB_SetCurrentMode+0x84>
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	2b31      	cmp	r3, #49	; 0x31
 801425e:	d9f0      	bls.n	8014242 <USB_SetCurrentMode+0x60>
 8014260:	e001      	b.n	8014266 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014262:	2301      	movs	r3, #1
 8014264:	e005      	b.n	8014272 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2b32      	cmp	r3, #50	; 0x32
 801426a:	d101      	bne.n	8014270 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801426c:	2301      	movs	r3, #1
 801426e:	e000      	b.n	8014272 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014270:	2300      	movs	r3, #0
}
 8014272:	4618      	mov	r0, r3
 8014274:	3710      	adds	r7, #16
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
	...

0801427c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801427c:	b084      	sub	sp, #16
 801427e:	b580      	push	{r7, lr}
 8014280:	b086      	sub	sp, #24
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801428a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801428e:	2300      	movs	r3, #0
 8014290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014296:	2300      	movs	r3, #0
 8014298:	613b      	str	r3, [r7, #16]
 801429a:	e009      	b.n	80142b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	3340      	adds	r3, #64	; 0x40
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	3301      	adds	r3, #1
 80142ae:	613b      	str	r3, [r7, #16]
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	2b0e      	cmp	r3, #14
 80142b4:	d9f2      	bls.n	801429c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80142b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d11c      	bne.n	80142f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80142ca:	f043 0302 	orr.w	r3, r3, #2
 80142ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	e005      	b.n	8014302 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014308:	461a      	mov	r2, r3
 801430a:	2300      	movs	r3, #0
 801430c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014314:	4619      	mov	r1, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801431c:	461a      	mov	r2, r3
 801431e:	680b      	ldr	r3, [r1, #0]
 8014320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014324:	2b01      	cmp	r3, #1
 8014326:	d10c      	bne.n	8014342 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801432a:	2b00      	cmp	r3, #0
 801432c:	d104      	bne.n	8014338 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801432e:	2100      	movs	r1, #0
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 f965 	bl	8014600 <USB_SetDevSpeed>
 8014336:	e008      	b.n	801434a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014338:	2101      	movs	r1, #1
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 f960 	bl	8014600 <USB_SetDevSpeed>
 8014340:	e003      	b.n	801434a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014342:	2103      	movs	r1, #3
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 f95b 	bl	8014600 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801434a:	2110      	movs	r1, #16
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 f8f3 	bl	8014538 <USB_FlushTxFifo>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d001      	beq.n	801435c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8014358:	2301      	movs	r3, #1
 801435a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 f91f 	bl	80145a0 <USB_FlushRxFifo>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d001      	beq.n	801436c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8014368:	2301      	movs	r3, #1
 801436a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014372:	461a      	mov	r2, r3
 8014374:	2300      	movs	r3, #0
 8014376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801437e:	461a      	mov	r2, r3
 8014380:	2300      	movs	r3, #0
 8014382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801438a:	461a      	mov	r2, r3
 801438c:	2300      	movs	r3, #0
 801438e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014390:	2300      	movs	r3, #0
 8014392:	613b      	str	r3, [r7, #16]
 8014394:	e043      	b.n	801441e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	015a      	lsls	r2, r3, #5
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	4413      	add	r3, r2
 801439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80143ac:	d118      	bne.n	80143e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10a      	bne.n	80143ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	015a      	lsls	r2, r3, #5
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	4413      	add	r3, r2
 80143bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143c0:	461a      	mov	r2, r3
 80143c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80143c6:	6013      	str	r3, [r2, #0]
 80143c8:	e013      	b.n	80143f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	015a      	lsls	r2, r3, #5
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	4413      	add	r3, r2
 80143d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143d6:	461a      	mov	r2, r3
 80143d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80143dc:	6013      	str	r3, [r2, #0]
 80143de:	e008      	b.n	80143f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	015a      	lsls	r2, r3, #5
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	4413      	add	r3, r2
 80143e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ec:	461a      	mov	r2, r3
 80143ee:	2300      	movs	r3, #0
 80143f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	015a      	lsls	r2, r3, #5
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	4413      	add	r3, r2
 80143fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143fe:	461a      	mov	r2, r3
 8014400:	2300      	movs	r3, #0
 8014402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	015a      	lsls	r2, r3, #5
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	4413      	add	r3, r2
 801440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014410:	461a      	mov	r2, r3
 8014412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	3301      	adds	r3, #1
 801441c:	613b      	str	r3, [r7, #16]
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	429a      	cmp	r2, r3
 8014424:	d3b7      	bcc.n	8014396 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014426:	2300      	movs	r3, #0
 8014428:	613b      	str	r3, [r7, #16]
 801442a:	e043      	b.n	80144b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	015a      	lsls	r2, r3, #5
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	4413      	add	r3, r2
 8014434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801443e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014442:	d118      	bne.n	8014476 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d10a      	bne.n	8014460 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	015a      	lsls	r2, r3, #5
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	4413      	add	r3, r2
 8014452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014456:	461a      	mov	r2, r3
 8014458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801445c:	6013      	str	r3, [r2, #0]
 801445e:	e013      	b.n	8014488 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	015a      	lsls	r2, r3, #5
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	4413      	add	r3, r2
 8014468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801446c:	461a      	mov	r2, r3
 801446e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014472:	6013      	str	r3, [r2, #0]
 8014474:	e008      	b.n	8014488 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	015a      	lsls	r2, r3, #5
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	4413      	add	r3, r2
 801447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014482:	461a      	mov	r2, r3
 8014484:	2300      	movs	r3, #0
 8014486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	015a      	lsls	r2, r3, #5
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	4413      	add	r3, r2
 8014490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014494:	461a      	mov	r2, r3
 8014496:	2300      	movs	r3, #0
 8014498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	015a      	lsls	r2, r3, #5
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	4413      	add	r3, r2
 80144a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144a6:	461a      	mov	r2, r3
 80144a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80144ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	3301      	adds	r3, #1
 80144b2:	613b      	str	r3, [r7, #16]
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	693a      	ldr	r2, [r7, #16]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d3b7      	bcc.n	801442c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144c2:	691b      	ldr	r3, [r3, #16]
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80144ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2200      	movs	r2, #0
 80144d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80144dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80144de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d105      	bne.n	80144f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	699b      	ldr	r3, [r3, #24]
 80144e8:	f043 0210 	orr.w	r2, r3, #16
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	699a      	ldr	r2, [r3, #24]
 80144f4:	4b0e      	ldr	r3, [pc, #56]	; (8014530 <USB_DevInit+0x2b4>)
 80144f6:	4313      	orrs	r3, r2
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80144fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d005      	beq.n	801450e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	699b      	ldr	r3, [r3, #24]
 8014506:	f043 0208 	orr.w	r2, r3, #8
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014510:	2b01      	cmp	r3, #1
 8014512:	d105      	bne.n	8014520 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	699a      	ldr	r2, [r3, #24]
 8014518:	4b06      	ldr	r3, [pc, #24]	; (8014534 <USB_DevInit+0x2b8>)
 801451a:	4313      	orrs	r3, r2
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014520:	7dfb      	ldrb	r3, [r7, #23]
}
 8014522:	4618      	mov	r0, r3
 8014524:	3718      	adds	r7, #24
 8014526:	46bd      	mov	sp, r7
 8014528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801452c:	b004      	add	sp, #16
 801452e:	4770      	bx	lr
 8014530:	803c3800 	.word	0x803c3800
 8014534:	40000004 	.word	0x40000004

08014538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014538:	b480      	push	{r7}
 801453a:	b085      	sub	sp, #20
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014542:	2300      	movs	r3, #0
 8014544:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	3301      	adds	r3, #1
 801454a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4a13      	ldr	r2, [pc, #76]	; (801459c <USB_FlushTxFifo+0x64>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d901      	bls.n	8014558 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014554:	2303      	movs	r3, #3
 8014556:	e01b      	b.n	8014590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	691b      	ldr	r3, [r3, #16]
 801455c:	2b00      	cmp	r3, #0
 801455e:	daf2      	bge.n	8014546 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014560:	2300      	movs	r3, #0
 8014562:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	019b      	lsls	r3, r3, #6
 8014568:	f043 0220 	orr.w	r2, r3, #32
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	3301      	adds	r3, #1
 8014574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	4a08      	ldr	r2, [pc, #32]	; (801459c <USB_FlushTxFifo+0x64>)
 801457a:	4293      	cmp	r3, r2
 801457c:	d901      	bls.n	8014582 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801457e:	2303      	movs	r3, #3
 8014580:	e006      	b.n	8014590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	f003 0320 	and.w	r3, r3, #32
 801458a:	2b20      	cmp	r3, #32
 801458c:	d0f0      	beq.n	8014570 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	3714      	adds	r7, #20
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr
 801459c:	00030d40 	.word	0x00030d40

080145a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80145a0:	b480      	push	{r7}
 80145a2:	b085      	sub	sp, #20
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80145a8:	2300      	movs	r3, #0
 80145aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	3301      	adds	r3, #1
 80145b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	4a11      	ldr	r2, [pc, #68]	; (80145fc <USB_FlushRxFifo+0x5c>)
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d901      	bls.n	80145be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80145ba:	2303      	movs	r3, #3
 80145bc:	e018      	b.n	80145f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	691b      	ldr	r3, [r3, #16]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	daf2      	bge.n	80145ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80145c6:	2300      	movs	r3, #0
 80145c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2210      	movs	r2, #16
 80145ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	3301      	adds	r3, #1
 80145d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	4a08      	ldr	r2, [pc, #32]	; (80145fc <USB_FlushRxFifo+0x5c>)
 80145da:	4293      	cmp	r3, r2
 80145dc:	d901      	bls.n	80145e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80145de:	2303      	movs	r3, #3
 80145e0:	e006      	b.n	80145f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	691b      	ldr	r3, [r3, #16]
 80145e6:	f003 0310 	and.w	r3, r3, #16
 80145ea:	2b10      	cmp	r3, #16
 80145ec:	d0f0      	beq.n	80145d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr
 80145fc:	00030d40 	.word	0x00030d40

08014600 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014600:	b480      	push	{r7}
 8014602:	b085      	sub	sp, #20
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	78fb      	ldrb	r3, [r7, #3]
 801461a:	68f9      	ldr	r1, [r7, #12]
 801461c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014620:	4313      	orrs	r3, r2
 8014622:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3714      	adds	r7, #20
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr

08014632 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014632:	b480      	push	{r7}
 8014634:	b085      	sub	sp, #20
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801464c:	f023 0303 	bic.w	r3, r3, #3
 8014650:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014660:	f043 0302 	orr.w	r3, r3, #2
 8014664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014666:	2300      	movs	r3, #0
}
 8014668:	4618      	mov	r0, r3
 801466a:	3714      	adds	r7, #20
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	695b      	ldr	r3, [r3, #20]
 8014680:	f003 0301 	and.w	r3, r3, #1
}
 8014684:	4618      	mov	r0, r3
 8014686:	370c      	adds	r7, #12
 8014688:	46bd      	mov	sp, r7
 801468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468e:	4770      	bx	lr

08014690 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014690:	b480      	push	{r7}
 8014692:	b085      	sub	sp, #20
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014698:	2300      	movs	r3, #0
 801469a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	3301      	adds	r3, #1
 80146a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	4a13      	ldr	r2, [pc, #76]	; (80146f4 <USB_CoreReset+0x64>)
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d901      	bls.n	80146ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80146aa:	2303      	movs	r3, #3
 80146ac:	e01b      	b.n	80146e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	691b      	ldr	r3, [r3, #16]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	daf2      	bge.n	801469c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80146b6:	2300      	movs	r3, #0
 80146b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	691b      	ldr	r3, [r3, #16]
 80146be:	f043 0201 	orr.w	r2, r3, #1
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	3301      	adds	r3, #1
 80146ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	4a09      	ldr	r2, [pc, #36]	; (80146f4 <USB_CoreReset+0x64>)
 80146d0:	4293      	cmp	r3, r2
 80146d2:	d901      	bls.n	80146d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80146d4:	2303      	movs	r3, #3
 80146d6:	e006      	b.n	80146e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	f003 0301 	and.w	r3, r3, #1
 80146e0:	2b01      	cmp	r3, #1
 80146e2:	d0f0      	beq.n	80146c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80146e4:	2300      	movs	r3, #0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3714      	adds	r7, #20
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr
 80146f2:	bf00      	nop
 80146f4:	00030d40 	.word	0x00030d40

080146f8 <_Znaj>:
 80146f8:	f000 b800 	b.w	80146fc <_Znwj>

080146fc <_Znwj>:
 80146fc:	2801      	cmp	r0, #1
 80146fe:	bf38      	it	cc
 8014700:	2001      	movcc	r0, #1
 8014702:	b510      	push	{r4, lr}
 8014704:	4604      	mov	r4, r0
 8014706:	4620      	mov	r0, r4
 8014708:	f000 f81a 	bl	8014740 <malloc>
 801470c:	b100      	cbz	r0, 8014710 <_Znwj+0x14>
 801470e:	bd10      	pop	{r4, pc}
 8014710:	f000 f806 	bl	8014720 <_ZSt15get_new_handlerv>
 8014714:	b908      	cbnz	r0, 801471a <_Znwj+0x1e>
 8014716:	f000 f80b 	bl	8014730 <abort>
 801471a:	4780      	blx	r0
 801471c:	e7f3      	b.n	8014706 <_Znwj+0xa>
	...

08014720 <_ZSt15get_new_handlerv>:
 8014720:	4b02      	ldr	r3, [pc, #8]	; (801472c <_ZSt15get_new_handlerv+0xc>)
 8014722:	6818      	ldr	r0, [r3, #0]
 8014724:	f3bf 8f5b 	dmb	ish
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop
 801472c:	24002ae8 	.word	0x24002ae8

08014730 <abort>:
 8014730:	b508      	push	{r3, lr}
 8014732:	2006      	movs	r0, #6
 8014734:	f000 f940 	bl	80149b8 <raise>
 8014738:	2001      	movs	r0, #1
 801473a:	f7f1 fecb 	bl	80064d4 <_exit>
	...

08014740 <malloc>:
 8014740:	4b02      	ldr	r3, [pc, #8]	; (801474c <malloc+0xc>)
 8014742:	4601      	mov	r1, r0
 8014744:	6818      	ldr	r0, [r3, #0]
 8014746:	f000 b823 	b.w	8014790 <_malloc_r>
 801474a:	bf00      	nop
 801474c:	2400009c 	.word	0x2400009c

08014750 <sbrk_aligned>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	4e0e      	ldr	r6, [pc, #56]	; (801478c <sbrk_aligned+0x3c>)
 8014754:	460c      	mov	r4, r1
 8014756:	6831      	ldr	r1, [r6, #0]
 8014758:	4605      	mov	r5, r0
 801475a:	b911      	cbnz	r1, 8014762 <sbrk_aligned+0x12>
 801475c:	f000 f948 	bl	80149f0 <_sbrk_r>
 8014760:	6030      	str	r0, [r6, #0]
 8014762:	4621      	mov	r1, r4
 8014764:	4628      	mov	r0, r5
 8014766:	f000 f943 	bl	80149f0 <_sbrk_r>
 801476a:	1c43      	adds	r3, r0, #1
 801476c:	d00a      	beq.n	8014784 <sbrk_aligned+0x34>
 801476e:	1cc4      	adds	r4, r0, #3
 8014770:	f024 0403 	bic.w	r4, r4, #3
 8014774:	42a0      	cmp	r0, r4
 8014776:	d007      	beq.n	8014788 <sbrk_aligned+0x38>
 8014778:	1a21      	subs	r1, r4, r0
 801477a:	4628      	mov	r0, r5
 801477c:	f000 f938 	bl	80149f0 <_sbrk_r>
 8014780:	3001      	adds	r0, #1
 8014782:	d101      	bne.n	8014788 <sbrk_aligned+0x38>
 8014784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014788:	4620      	mov	r0, r4
 801478a:	bd70      	pop	{r4, r5, r6, pc}
 801478c:	24002af0 	.word	0x24002af0

08014790 <_malloc_r>:
 8014790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014794:	1ccd      	adds	r5, r1, #3
 8014796:	f025 0503 	bic.w	r5, r5, #3
 801479a:	3508      	adds	r5, #8
 801479c:	2d0c      	cmp	r5, #12
 801479e:	bf38      	it	cc
 80147a0:	250c      	movcc	r5, #12
 80147a2:	2d00      	cmp	r5, #0
 80147a4:	4607      	mov	r7, r0
 80147a6:	db01      	blt.n	80147ac <_malloc_r+0x1c>
 80147a8:	42a9      	cmp	r1, r5
 80147aa:	d905      	bls.n	80147b8 <_malloc_r+0x28>
 80147ac:	230c      	movs	r3, #12
 80147ae:	603b      	str	r3, [r7, #0]
 80147b0:	2600      	movs	r6, #0
 80147b2:	4630      	mov	r0, r6
 80147b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801488c <_malloc_r+0xfc>
 80147bc:	f000 f868 	bl	8014890 <__malloc_lock>
 80147c0:	f8d8 3000 	ldr.w	r3, [r8]
 80147c4:	461c      	mov	r4, r3
 80147c6:	bb5c      	cbnz	r4, 8014820 <_malloc_r+0x90>
 80147c8:	4629      	mov	r1, r5
 80147ca:	4638      	mov	r0, r7
 80147cc:	f7ff ffc0 	bl	8014750 <sbrk_aligned>
 80147d0:	1c43      	adds	r3, r0, #1
 80147d2:	4604      	mov	r4, r0
 80147d4:	d155      	bne.n	8014882 <_malloc_r+0xf2>
 80147d6:	f8d8 4000 	ldr.w	r4, [r8]
 80147da:	4626      	mov	r6, r4
 80147dc:	2e00      	cmp	r6, #0
 80147de:	d145      	bne.n	801486c <_malloc_r+0xdc>
 80147e0:	2c00      	cmp	r4, #0
 80147e2:	d048      	beq.n	8014876 <_malloc_r+0xe6>
 80147e4:	6823      	ldr	r3, [r4, #0]
 80147e6:	4631      	mov	r1, r6
 80147e8:	4638      	mov	r0, r7
 80147ea:	eb04 0903 	add.w	r9, r4, r3
 80147ee:	f000 f8ff 	bl	80149f0 <_sbrk_r>
 80147f2:	4581      	cmp	r9, r0
 80147f4:	d13f      	bne.n	8014876 <_malloc_r+0xe6>
 80147f6:	6821      	ldr	r1, [r4, #0]
 80147f8:	1a6d      	subs	r5, r5, r1
 80147fa:	4629      	mov	r1, r5
 80147fc:	4638      	mov	r0, r7
 80147fe:	f7ff ffa7 	bl	8014750 <sbrk_aligned>
 8014802:	3001      	adds	r0, #1
 8014804:	d037      	beq.n	8014876 <_malloc_r+0xe6>
 8014806:	6823      	ldr	r3, [r4, #0]
 8014808:	442b      	add	r3, r5
 801480a:	6023      	str	r3, [r4, #0]
 801480c:	f8d8 3000 	ldr.w	r3, [r8]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d038      	beq.n	8014886 <_malloc_r+0xf6>
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	42a2      	cmp	r2, r4
 8014818:	d12b      	bne.n	8014872 <_malloc_r+0xe2>
 801481a:	2200      	movs	r2, #0
 801481c:	605a      	str	r2, [r3, #4]
 801481e:	e00f      	b.n	8014840 <_malloc_r+0xb0>
 8014820:	6822      	ldr	r2, [r4, #0]
 8014822:	1b52      	subs	r2, r2, r5
 8014824:	d41f      	bmi.n	8014866 <_malloc_r+0xd6>
 8014826:	2a0b      	cmp	r2, #11
 8014828:	d917      	bls.n	801485a <_malloc_r+0xca>
 801482a:	1961      	adds	r1, r4, r5
 801482c:	42a3      	cmp	r3, r4
 801482e:	6025      	str	r5, [r4, #0]
 8014830:	bf18      	it	ne
 8014832:	6059      	strne	r1, [r3, #4]
 8014834:	6863      	ldr	r3, [r4, #4]
 8014836:	bf08      	it	eq
 8014838:	f8c8 1000 	streq.w	r1, [r8]
 801483c:	5162      	str	r2, [r4, r5]
 801483e:	604b      	str	r3, [r1, #4]
 8014840:	4638      	mov	r0, r7
 8014842:	f104 060b 	add.w	r6, r4, #11
 8014846:	f000 f829 	bl	801489c <__malloc_unlock>
 801484a:	f026 0607 	bic.w	r6, r6, #7
 801484e:	1d23      	adds	r3, r4, #4
 8014850:	1af2      	subs	r2, r6, r3
 8014852:	d0ae      	beq.n	80147b2 <_malloc_r+0x22>
 8014854:	1b9b      	subs	r3, r3, r6
 8014856:	50a3      	str	r3, [r4, r2]
 8014858:	e7ab      	b.n	80147b2 <_malloc_r+0x22>
 801485a:	42a3      	cmp	r3, r4
 801485c:	6862      	ldr	r2, [r4, #4]
 801485e:	d1dd      	bne.n	801481c <_malloc_r+0x8c>
 8014860:	f8c8 2000 	str.w	r2, [r8]
 8014864:	e7ec      	b.n	8014840 <_malloc_r+0xb0>
 8014866:	4623      	mov	r3, r4
 8014868:	6864      	ldr	r4, [r4, #4]
 801486a:	e7ac      	b.n	80147c6 <_malloc_r+0x36>
 801486c:	4634      	mov	r4, r6
 801486e:	6876      	ldr	r6, [r6, #4]
 8014870:	e7b4      	b.n	80147dc <_malloc_r+0x4c>
 8014872:	4613      	mov	r3, r2
 8014874:	e7cc      	b.n	8014810 <_malloc_r+0x80>
 8014876:	230c      	movs	r3, #12
 8014878:	603b      	str	r3, [r7, #0]
 801487a:	4638      	mov	r0, r7
 801487c:	f000 f80e 	bl	801489c <__malloc_unlock>
 8014880:	e797      	b.n	80147b2 <_malloc_r+0x22>
 8014882:	6025      	str	r5, [r4, #0]
 8014884:	e7dc      	b.n	8014840 <_malloc_r+0xb0>
 8014886:	605b      	str	r3, [r3, #4]
 8014888:	deff      	udf	#255	; 0xff
 801488a:	bf00      	nop
 801488c:	24002aec 	.word	0x24002aec

08014890 <__malloc_lock>:
 8014890:	4801      	ldr	r0, [pc, #4]	; (8014898 <__malloc_lock+0x8>)
 8014892:	f000 b8e7 	b.w	8014a64 <__retarget_lock_acquire_recursive>
 8014896:	bf00      	nop
 8014898:	24002c30 	.word	0x24002c30

0801489c <__malloc_unlock>:
 801489c:	4801      	ldr	r0, [pc, #4]	; (80148a4 <__malloc_unlock+0x8>)
 801489e:	f000 b8e2 	b.w	8014a66 <__retarget_lock_release_recursive>
 80148a2:	bf00      	nop
 80148a4:	24002c30 	.word	0x24002c30

080148a8 <realloc>:
 80148a8:	4b02      	ldr	r3, [pc, #8]	; (80148b4 <realloc+0xc>)
 80148aa:	460a      	mov	r2, r1
 80148ac:	4601      	mov	r1, r0
 80148ae:	6818      	ldr	r0, [r3, #0]
 80148b0:	f000 b802 	b.w	80148b8 <_realloc_r>
 80148b4:	2400009c 	.word	0x2400009c

080148b8 <_realloc_r>:
 80148b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148bc:	4680      	mov	r8, r0
 80148be:	4614      	mov	r4, r2
 80148c0:	460e      	mov	r6, r1
 80148c2:	b921      	cbnz	r1, 80148ce <_realloc_r+0x16>
 80148c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c8:	4611      	mov	r1, r2
 80148ca:	f7ff bf61 	b.w	8014790 <_malloc_r>
 80148ce:	b92a      	cbnz	r2, 80148dc <_realloc_r+0x24>
 80148d0:	f000 f8d8 	bl	8014a84 <_free_r>
 80148d4:	4625      	mov	r5, r4
 80148d6:	4628      	mov	r0, r5
 80148d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148dc:	f000 f91e 	bl	8014b1c <_malloc_usable_size_r>
 80148e0:	4284      	cmp	r4, r0
 80148e2:	4607      	mov	r7, r0
 80148e4:	d802      	bhi.n	80148ec <_realloc_r+0x34>
 80148e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80148ea:	d812      	bhi.n	8014912 <_realloc_r+0x5a>
 80148ec:	4621      	mov	r1, r4
 80148ee:	4640      	mov	r0, r8
 80148f0:	f7ff ff4e 	bl	8014790 <_malloc_r>
 80148f4:	4605      	mov	r5, r0
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d0ed      	beq.n	80148d6 <_realloc_r+0x1e>
 80148fa:	42bc      	cmp	r4, r7
 80148fc:	4622      	mov	r2, r4
 80148fe:	4631      	mov	r1, r6
 8014900:	bf28      	it	cs
 8014902:	463a      	movcs	r2, r7
 8014904:	f000 f8b0 	bl	8014a68 <memcpy>
 8014908:	4631      	mov	r1, r6
 801490a:	4640      	mov	r0, r8
 801490c:	f000 f8ba 	bl	8014a84 <_free_r>
 8014910:	e7e1      	b.n	80148d6 <_realloc_r+0x1e>
 8014912:	4635      	mov	r5, r6
 8014914:	e7df      	b.n	80148d6 <_realloc_r+0x1e>
	...

08014918 <siprintf>:
 8014918:	b40e      	push	{r1, r2, r3}
 801491a:	b500      	push	{lr}
 801491c:	b09c      	sub	sp, #112	; 0x70
 801491e:	ab1d      	add	r3, sp, #116	; 0x74
 8014920:	9002      	str	r0, [sp, #8]
 8014922:	9006      	str	r0, [sp, #24]
 8014924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014928:	4809      	ldr	r0, [pc, #36]	; (8014950 <siprintf+0x38>)
 801492a:	9107      	str	r1, [sp, #28]
 801492c:	9104      	str	r1, [sp, #16]
 801492e:	4909      	ldr	r1, [pc, #36]	; (8014954 <siprintf+0x3c>)
 8014930:	f853 2b04 	ldr.w	r2, [r3], #4
 8014934:	9105      	str	r1, [sp, #20]
 8014936:	6800      	ldr	r0, [r0, #0]
 8014938:	9301      	str	r3, [sp, #4]
 801493a:	a902      	add	r1, sp, #8
 801493c:	f000 f950 	bl	8014be0 <_svfiprintf_r>
 8014940:	9b02      	ldr	r3, [sp, #8]
 8014942:	2200      	movs	r2, #0
 8014944:	701a      	strb	r2, [r3, #0]
 8014946:	b01c      	add	sp, #112	; 0x70
 8014948:	f85d eb04 	ldr.w	lr, [sp], #4
 801494c:	b003      	add	sp, #12
 801494e:	4770      	bx	lr
 8014950:	2400009c 	.word	0x2400009c
 8014954:	ffff0208 	.word	0xffff0208

08014958 <memset>:
 8014958:	4402      	add	r2, r0
 801495a:	4603      	mov	r3, r0
 801495c:	4293      	cmp	r3, r2
 801495e:	d100      	bne.n	8014962 <memset+0xa>
 8014960:	4770      	bx	lr
 8014962:	f803 1b01 	strb.w	r1, [r3], #1
 8014966:	e7f9      	b.n	801495c <memset+0x4>

08014968 <_raise_r>:
 8014968:	291f      	cmp	r1, #31
 801496a:	b538      	push	{r3, r4, r5, lr}
 801496c:	4604      	mov	r4, r0
 801496e:	460d      	mov	r5, r1
 8014970:	d904      	bls.n	801497c <_raise_r+0x14>
 8014972:	2316      	movs	r3, #22
 8014974:	6003      	str	r3, [r0, #0]
 8014976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801497a:	bd38      	pop	{r3, r4, r5, pc}
 801497c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801497e:	b112      	cbz	r2, 8014986 <_raise_r+0x1e>
 8014980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014984:	b94b      	cbnz	r3, 801499a <_raise_r+0x32>
 8014986:	4620      	mov	r0, r4
 8014988:	f000 f830 	bl	80149ec <_getpid_r>
 801498c:	462a      	mov	r2, r5
 801498e:	4601      	mov	r1, r0
 8014990:	4620      	mov	r0, r4
 8014992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014996:	f000 b817 	b.w	80149c8 <_kill_r>
 801499a:	2b01      	cmp	r3, #1
 801499c:	d00a      	beq.n	80149b4 <_raise_r+0x4c>
 801499e:	1c59      	adds	r1, r3, #1
 80149a0:	d103      	bne.n	80149aa <_raise_r+0x42>
 80149a2:	2316      	movs	r3, #22
 80149a4:	6003      	str	r3, [r0, #0]
 80149a6:	2001      	movs	r0, #1
 80149a8:	e7e7      	b.n	801497a <_raise_r+0x12>
 80149aa:	2400      	movs	r4, #0
 80149ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80149b0:	4628      	mov	r0, r5
 80149b2:	4798      	blx	r3
 80149b4:	2000      	movs	r0, #0
 80149b6:	e7e0      	b.n	801497a <_raise_r+0x12>

080149b8 <raise>:
 80149b8:	4b02      	ldr	r3, [pc, #8]	; (80149c4 <raise+0xc>)
 80149ba:	4601      	mov	r1, r0
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	f7ff bfd3 	b.w	8014968 <_raise_r>
 80149c2:	bf00      	nop
 80149c4:	2400009c 	.word	0x2400009c

080149c8 <_kill_r>:
 80149c8:	b538      	push	{r3, r4, r5, lr}
 80149ca:	4d07      	ldr	r5, [pc, #28]	; (80149e8 <_kill_r+0x20>)
 80149cc:	2300      	movs	r3, #0
 80149ce:	4604      	mov	r4, r0
 80149d0:	4608      	mov	r0, r1
 80149d2:	4611      	mov	r1, r2
 80149d4:	602b      	str	r3, [r5, #0]
 80149d6:	f7f1 fd6d 	bl	80064b4 <_kill>
 80149da:	1c43      	adds	r3, r0, #1
 80149dc:	d102      	bne.n	80149e4 <_kill_r+0x1c>
 80149de:	682b      	ldr	r3, [r5, #0]
 80149e0:	b103      	cbz	r3, 80149e4 <_kill_r+0x1c>
 80149e2:	6023      	str	r3, [r4, #0]
 80149e4:	bd38      	pop	{r3, r4, r5, pc}
 80149e6:	bf00      	nop
 80149e8:	24002c2c 	.word	0x24002c2c

080149ec <_getpid_r>:
 80149ec:	f7f1 bd5a 	b.w	80064a4 <_getpid>

080149f0 <_sbrk_r>:
 80149f0:	b538      	push	{r3, r4, r5, lr}
 80149f2:	4d06      	ldr	r5, [pc, #24]	; (8014a0c <_sbrk_r+0x1c>)
 80149f4:	2300      	movs	r3, #0
 80149f6:	4604      	mov	r4, r0
 80149f8:	4608      	mov	r0, r1
 80149fa:	602b      	str	r3, [r5, #0]
 80149fc:	f7f1 fd74 	bl	80064e8 <_sbrk>
 8014a00:	1c43      	adds	r3, r0, #1
 8014a02:	d102      	bne.n	8014a0a <_sbrk_r+0x1a>
 8014a04:	682b      	ldr	r3, [r5, #0]
 8014a06:	b103      	cbz	r3, 8014a0a <_sbrk_r+0x1a>
 8014a08:	6023      	str	r3, [r4, #0]
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	24002c2c 	.word	0x24002c2c

08014a10 <__errno>:
 8014a10:	4b01      	ldr	r3, [pc, #4]	; (8014a18 <__errno+0x8>)
 8014a12:	6818      	ldr	r0, [r3, #0]
 8014a14:	4770      	bx	lr
 8014a16:	bf00      	nop
 8014a18:	2400009c 	.word	0x2400009c

08014a1c <__libc_init_array>:
 8014a1c:	b570      	push	{r4, r5, r6, lr}
 8014a1e:	4d0d      	ldr	r5, [pc, #52]	; (8014a54 <__libc_init_array+0x38>)
 8014a20:	4c0d      	ldr	r4, [pc, #52]	; (8014a58 <__libc_init_array+0x3c>)
 8014a22:	1b64      	subs	r4, r4, r5
 8014a24:	10a4      	asrs	r4, r4, #2
 8014a26:	2600      	movs	r6, #0
 8014a28:	42a6      	cmp	r6, r4
 8014a2a:	d109      	bne.n	8014a40 <__libc_init_array+0x24>
 8014a2c:	4d0b      	ldr	r5, [pc, #44]	; (8014a5c <__libc_init_array+0x40>)
 8014a2e:	4c0c      	ldr	r4, [pc, #48]	; (8014a60 <__libc_init_array+0x44>)
 8014a30:	f000 fb7e 	bl	8015130 <_init>
 8014a34:	1b64      	subs	r4, r4, r5
 8014a36:	10a4      	asrs	r4, r4, #2
 8014a38:	2600      	movs	r6, #0
 8014a3a:	42a6      	cmp	r6, r4
 8014a3c:	d105      	bne.n	8014a4a <__libc_init_array+0x2e>
 8014a3e:	bd70      	pop	{r4, r5, r6, pc}
 8014a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a44:	4798      	blx	r3
 8014a46:	3601      	adds	r6, #1
 8014a48:	e7ee      	b.n	8014a28 <__libc_init_array+0xc>
 8014a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a4e:	4798      	blx	r3
 8014a50:	3601      	adds	r6, #1
 8014a52:	e7f2      	b.n	8014a3a <__libc_init_array+0x1e>
 8014a54:	080156d8 	.word	0x080156d8
 8014a58:	080156d8 	.word	0x080156d8
 8014a5c:	080156d8 	.word	0x080156d8
 8014a60:	080156e0 	.word	0x080156e0

08014a64 <__retarget_lock_acquire_recursive>:
 8014a64:	4770      	bx	lr

08014a66 <__retarget_lock_release_recursive>:
 8014a66:	4770      	bx	lr

08014a68 <memcpy>:
 8014a68:	440a      	add	r2, r1
 8014a6a:	4291      	cmp	r1, r2
 8014a6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014a70:	d100      	bne.n	8014a74 <memcpy+0xc>
 8014a72:	4770      	bx	lr
 8014a74:	b510      	push	{r4, lr}
 8014a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a7e:	4291      	cmp	r1, r2
 8014a80:	d1f9      	bne.n	8014a76 <memcpy+0xe>
 8014a82:	bd10      	pop	{r4, pc}

08014a84 <_free_r>:
 8014a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a86:	2900      	cmp	r1, #0
 8014a88:	d044      	beq.n	8014b14 <_free_r+0x90>
 8014a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a8e:	9001      	str	r0, [sp, #4]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	f1a1 0404 	sub.w	r4, r1, #4
 8014a96:	bfb8      	it	lt
 8014a98:	18e4      	addlt	r4, r4, r3
 8014a9a:	f7ff fef9 	bl	8014890 <__malloc_lock>
 8014a9e:	4a1e      	ldr	r2, [pc, #120]	; (8014b18 <_free_r+0x94>)
 8014aa0:	9801      	ldr	r0, [sp, #4]
 8014aa2:	6813      	ldr	r3, [r2, #0]
 8014aa4:	b933      	cbnz	r3, 8014ab4 <_free_r+0x30>
 8014aa6:	6063      	str	r3, [r4, #4]
 8014aa8:	6014      	str	r4, [r2, #0]
 8014aaa:	b003      	add	sp, #12
 8014aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ab0:	f7ff bef4 	b.w	801489c <__malloc_unlock>
 8014ab4:	42a3      	cmp	r3, r4
 8014ab6:	d908      	bls.n	8014aca <_free_r+0x46>
 8014ab8:	6825      	ldr	r5, [r4, #0]
 8014aba:	1961      	adds	r1, r4, r5
 8014abc:	428b      	cmp	r3, r1
 8014abe:	bf01      	itttt	eq
 8014ac0:	6819      	ldreq	r1, [r3, #0]
 8014ac2:	685b      	ldreq	r3, [r3, #4]
 8014ac4:	1949      	addeq	r1, r1, r5
 8014ac6:	6021      	streq	r1, [r4, #0]
 8014ac8:	e7ed      	b.n	8014aa6 <_free_r+0x22>
 8014aca:	461a      	mov	r2, r3
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	b10b      	cbz	r3, 8014ad4 <_free_r+0x50>
 8014ad0:	42a3      	cmp	r3, r4
 8014ad2:	d9fa      	bls.n	8014aca <_free_r+0x46>
 8014ad4:	6811      	ldr	r1, [r2, #0]
 8014ad6:	1855      	adds	r5, r2, r1
 8014ad8:	42a5      	cmp	r5, r4
 8014ada:	d10b      	bne.n	8014af4 <_free_r+0x70>
 8014adc:	6824      	ldr	r4, [r4, #0]
 8014ade:	4421      	add	r1, r4
 8014ae0:	1854      	adds	r4, r2, r1
 8014ae2:	42a3      	cmp	r3, r4
 8014ae4:	6011      	str	r1, [r2, #0]
 8014ae6:	d1e0      	bne.n	8014aaa <_free_r+0x26>
 8014ae8:	681c      	ldr	r4, [r3, #0]
 8014aea:	685b      	ldr	r3, [r3, #4]
 8014aec:	6053      	str	r3, [r2, #4]
 8014aee:	440c      	add	r4, r1
 8014af0:	6014      	str	r4, [r2, #0]
 8014af2:	e7da      	b.n	8014aaa <_free_r+0x26>
 8014af4:	d902      	bls.n	8014afc <_free_r+0x78>
 8014af6:	230c      	movs	r3, #12
 8014af8:	6003      	str	r3, [r0, #0]
 8014afa:	e7d6      	b.n	8014aaa <_free_r+0x26>
 8014afc:	6825      	ldr	r5, [r4, #0]
 8014afe:	1961      	adds	r1, r4, r5
 8014b00:	428b      	cmp	r3, r1
 8014b02:	bf04      	itt	eq
 8014b04:	6819      	ldreq	r1, [r3, #0]
 8014b06:	685b      	ldreq	r3, [r3, #4]
 8014b08:	6063      	str	r3, [r4, #4]
 8014b0a:	bf04      	itt	eq
 8014b0c:	1949      	addeq	r1, r1, r5
 8014b0e:	6021      	streq	r1, [r4, #0]
 8014b10:	6054      	str	r4, [r2, #4]
 8014b12:	e7ca      	b.n	8014aaa <_free_r+0x26>
 8014b14:	b003      	add	sp, #12
 8014b16:	bd30      	pop	{r4, r5, pc}
 8014b18:	24002aec 	.word	0x24002aec

08014b1c <_malloc_usable_size_r>:
 8014b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b20:	1f18      	subs	r0, r3, #4
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	bfbc      	itt	lt
 8014b26:	580b      	ldrlt	r3, [r1, r0]
 8014b28:	18c0      	addlt	r0, r0, r3
 8014b2a:	4770      	bx	lr

08014b2c <__ssputs_r>:
 8014b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b30:	688e      	ldr	r6, [r1, #8]
 8014b32:	461f      	mov	r7, r3
 8014b34:	42be      	cmp	r6, r7
 8014b36:	680b      	ldr	r3, [r1, #0]
 8014b38:	4682      	mov	sl, r0
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	4690      	mov	r8, r2
 8014b3e:	d82c      	bhi.n	8014b9a <__ssputs_r+0x6e>
 8014b40:	898a      	ldrh	r2, [r1, #12]
 8014b42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014b46:	d026      	beq.n	8014b96 <__ssputs_r+0x6a>
 8014b48:	6965      	ldr	r5, [r4, #20]
 8014b4a:	6909      	ldr	r1, [r1, #16]
 8014b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b50:	eba3 0901 	sub.w	r9, r3, r1
 8014b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b58:	1c7b      	adds	r3, r7, #1
 8014b5a:	444b      	add	r3, r9
 8014b5c:	106d      	asrs	r5, r5, #1
 8014b5e:	429d      	cmp	r5, r3
 8014b60:	bf38      	it	cc
 8014b62:	461d      	movcc	r5, r3
 8014b64:	0553      	lsls	r3, r2, #21
 8014b66:	d527      	bpl.n	8014bb8 <__ssputs_r+0x8c>
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f7ff fe11 	bl	8014790 <_malloc_r>
 8014b6e:	4606      	mov	r6, r0
 8014b70:	b360      	cbz	r0, 8014bcc <__ssputs_r+0xa0>
 8014b72:	6921      	ldr	r1, [r4, #16]
 8014b74:	464a      	mov	r2, r9
 8014b76:	f7ff ff77 	bl	8014a68 <memcpy>
 8014b7a:	89a3      	ldrh	r3, [r4, #12]
 8014b7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b84:	81a3      	strh	r3, [r4, #12]
 8014b86:	6126      	str	r6, [r4, #16]
 8014b88:	6165      	str	r5, [r4, #20]
 8014b8a:	444e      	add	r6, r9
 8014b8c:	eba5 0509 	sub.w	r5, r5, r9
 8014b90:	6026      	str	r6, [r4, #0]
 8014b92:	60a5      	str	r5, [r4, #8]
 8014b94:	463e      	mov	r6, r7
 8014b96:	42be      	cmp	r6, r7
 8014b98:	d900      	bls.n	8014b9c <__ssputs_r+0x70>
 8014b9a:	463e      	mov	r6, r7
 8014b9c:	6820      	ldr	r0, [r4, #0]
 8014b9e:	4632      	mov	r2, r6
 8014ba0:	4641      	mov	r1, r8
 8014ba2:	f000 faab 	bl	80150fc <memmove>
 8014ba6:	68a3      	ldr	r3, [r4, #8]
 8014ba8:	1b9b      	subs	r3, r3, r6
 8014baa:	60a3      	str	r3, [r4, #8]
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	4433      	add	r3, r6
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	2000      	movs	r0, #0
 8014bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb8:	462a      	mov	r2, r5
 8014bba:	f7ff fe7d 	bl	80148b8 <_realloc_r>
 8014bbe:	4606      	mov	r6, r0
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d1e0      	bne.n	8014b86 <__ssputs_r+0x5a>
 8014bc4:	6921      	ldr	r1, [r4, #16]
 8014bc6:	4650      	mov	r0, sl
 8014bc8:	f7ff ff5c 	bl	8014a84 <_free_r>
 8014bcc:	230c      	movs	r3, #12
 8014bce:	f8ca 3000 	str.w	r3, [sl]
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bd8:	81a3      	strh	r3, [r4, #12]
 8014bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bde:	e7e9      	b.n	8014bb4 <__ssputs_r+0x88>

08014be0 <_svfiprintf_r>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	4698      	mov	r8, r3
 8014be6:	898b      	ldrh	r3, [r1, #12]
 8014be8:	061b      	lsls	r3, r3, #24
 8014bea:	b09d      	sub	sp, #116	; 0x74
 8014bec:	4607      	mov	r7, r0
 8014bee:	460d      	mov	r5, r1
 8014bf0:	4614      	mov	r4, r2
 8014bf2:	d50e      	bpl.n	8014c12 <_svfiprintf_r+0x32>
 8014bf4:	690b      	ldr	r3, [r1, #16]
 8014bf6:	b963      	cbnz	r3, 8014c12 <_svfiprintf_r+0x32>
 8014bf8:	2140      	movs	r1, #64	; 0x40
 8014bfa:	f7ff fdc9 	bl	8014790 <_malloc_r>
 8014bfe:	6028      	str	r0, [r5, #0]
 8014c00:	6128      	str	r0, [r5, #16]
 8014c02:	b920      	cbnz	r0, 8014c0e <_svfiprintf_r+0x2e>
 8014c04:	230c      	movs	r3, #12
 8014c06:	603b      	str	r3, [r7, #0]
 8014c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c0c:	e0d0      	b.n	8014db0 <_svfiprintf_r+0x1d0>
 8014c0e:	2340      	movs	r3, #64	; 0x40
 8014c10:	616b      	str	r3, [r5, #20]
 8014c12:	2300      	movs	r3, #0
 8014c14:	9309      	str	r3, [sp, #36]	; 0x24
 8014c16:	2320      	movs	r3, #32
 8014c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c20:	2330      	movs	r3, #48	; 0x30
 8014c22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014dc8 <_svfiprintf_r+0x1e8>
 8014c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c2a:	f04f 0901 	mov.w	r9, #1
 8014c2e:	4623      	mov	r3, r4
 8014c30:	469a      	mov	sl, r3
 8014c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c36:	b10a      	cbz	r2, 8014c3c <_svfiprintf_r+0x5c>
 8014c38:	2a25      	cmp	r2, #37	; 0x25
 8014c3a:	d1f9      	bne.n	8014c30 <_svfiprintf_r+0x50>
 8014c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8014c40:	d00b      	beq.n	8014c5a <_svfiprintf_r+0x7a>
 8014c42:	465b      	mov	r3, fp
 8014c44:	4622      	mov	r2, r4
 8014c46:	4629      	mov	r1, r5
 8014c48:	4638      	mov	r0, r7
 8014c4a:	f7ff ff6f 	bl	8014b2c <__ssputs_r>
 8014c4e:	3001      	adds	r0, #1
 8014c50:	f000 80a9 	beq.w	8014da6 <_svfiprintf_r+0x1c6>
 8014c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c56:	445a      	add	r2, fp
 8014c58:	9209      	str	r2, [sp, #36]	; 0x24
 8014c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	f000 80a1 	beq.w	8014da6 <_svfiprintf_r+0x1c6>
 8014c64:	2300      	movs	r3, #0
 8014c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c6e:	f10a 0a01 	add.w	sl, sl, #1
 8014c72:	9304      	str	r3, [sp, #16]
 8014c74:	9307      	str	r3, [sp, #28]
 8014c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c7c:	4654      	mov	r4, sl
 8014c7e:	2205      	movs	r2, #5
 8014c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c84:	4850      	ldr	r0, [pc, #320]	; (8014dc8 <_svfiprintf_r+0x1e8>)
 8014c86:	f7eb fb33 	bl	80002f0 <memchr>
 8014c8a:	9a04      	ldr	r2, [sp, #16]
 8014c8c:	b9d8      	cbnz	r0, 8014cc6 <_svfiprintf_r+0xe6>
 8014c8e:	06d0      	lsls	r0, r2, #27
 8014c90:	bf44      	itt	mi
 8014c92:	2320      	movmi	r3, #32
 8014c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c98:	0711      	lsls	r1, r2, #28
 8014c9a:	bf44      	itt	mi
 8014c9c:	232b      	movmi	r3, #43	; 0x2b
 8014c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8014ca8:	d015      	beq.n	8014cd6 <_svfiprintf_r+0xf6>
 8014caa:	9a07      	ldr	r2, [sp, #28]
 8014cac:	4654      	mov	r4, sl
 8014cae:	2000      	movs	r0, #0
 8014cb0:	f04f 0c0a 	mov.w	ip, #10
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cba:	3b30      	subs	r3, #48	; 0x30
 8014cbc:	2b09      	cmp	r3, #9
 8014cbe:	d94d      	bls.n	8014d5c <_svfiprintf_r+0x17c>
 8014cc0:	b1b0      	cbz	r0, 8014cf0 <_svfiprintf_r+0x110>
 8014cc2:	9207      	str	r2, [sp, #28]
 8014cc4:	e014      	b.n	8014cf0 <_svfiprintf_r+0x110>
 8014cc6:	eba0 0308 	sub.w	r3, r0, r8
 8014cca:	fa09 f303 	lsl.w	r3, r9, r3
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	9304      	str	r3, [sp, #16]
 8014cd2:	46a2      	mov	sl, r4
 8014cd4:	e7d2      	b.n	8014c7c <_svfiprintf_r+0x9c>
 8014cd6:	9b03      	ldr	r3, [sp, #12]
 8014cd8:	1d19      	adds	r1, r3, #4
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	9103      	str	r1, [sp, #12]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	bfbb      	ittet	lt
 8014ce2:	425b      	neglt	r3, r3
 8014ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8014ce8:	9307      	strge	r3, [sp, #28]
 8014cea:	9307      	strlt	r3, [sp, #28]
 8014cec:	bfb8      	it	lt
 8014cee:	9204      	strlt	r2, [sp, #16]
 8014cf0:	7823      	ldrb	r3, [r4, #0]
 8014cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8014cf4:	d10c      	bne.n	8014d10 <_svfiprintf_r+0x130>
 8014cf6:	7863      	ldrb	r3, [r4, #1]
 8014cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8014cfa:	d134      	bne.n	8014d66 <_svfiprintf_r+0x186>
 8014cfc:	9b03      	ldr	r3, [sp, #12]
 8014cfe:	1d1a      	adds	r2, r3, #4
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	9203      	str	r2, [sp, #12]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	bfb8      	it	lt
 8014d08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014d0c:	3402      	adds	r4, #2
 8014d0e:	9305      	str	r3, [sp, #20]
 8014d10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014dd8 <_svfiprintf_r+0x1f8>
 8014d14:	7821      	ldrb	r1, [r4, #0]
 8014d16:	2203      	movs	r2, #3
 8014d18:	4650      	mov	r0, sl
 8014d1a:	f7eb fae9 	bl	80002f0 <memchr>
 8014d1e:	b138      	cbz	r0, 8014d30 <_svfiprintf_r+0x150>
 8014d20:	9b04      	ldr	r3, [sp, #16]
 8014d22:	eba0 000a 	sub.w	r0, r0, sl
 8014d26:	2240      	movs	r2, #64	; 0x40
 8014d28:	4082      	lsls	r2, r0
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	3401      	adds	r4, #1
 8014d2e:	9304      	str	r3, [sp, #16]
 8014d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d34:	4825      	ldr	r0, [pc, #148]	; (8014dcc <_svfiprintf_r+0x1ec>)
 8014d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d3a:	2206      	movs	r2, #6
 8014d3c:	f7eb fad8 	bl	80002f0 <memchr>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d038      	beq.n	8014db6 <_svfiprintf_r+0x1d6>
 8014d44:	4b22      	ldr	r3, [pc, #136]	; (8014dd0 <_svfiprintf_r+0x1f0>)
 8014d46:	bb1b      	cbnz	r3, 8014d90 <_svfiprintf_r+0x1b0>
 8014d48:	9b03      	ldr	r3, [sp, #12]
 8014d4a:	3307      	adds	r3, #7
 8014d4c:	f023 0307 	bic.w	r3, r3, #7
 8014d50:	3308      	adds	r3, #8
 8014d52:	9303      	str	r3, [sp, #12]
 8014d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d56:	4433      	add	r3, r6
 8014d58:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5a:	e768      	b.n	8014c2e <_svfiprintf_r+0x4e>
 8014d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d60:	460c      	mov	r4, r1
 8014d62:	2001      	movs	r0, #1
 8014d64:	e7a6      	b.n	8014cb4 <_svfiprintf_r+0xd4>
 8014d66:	2300      	movs	r3, #0
 8014d68:	3401      	adds	r4, #1
 8014d6a:	9305      	str	r3, [sp, #20]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	f04f 0c0a 	mov.w	ip, #10
 8014d72:	4620      	mov	r0, r4
 8014d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d78:	3a30      	subs	r2, #48	; 0x30
 8014d7a:	2a09      	cmp	r2, #9
 8014d7c:	d903      	bls.n	8014d86 <_svfiprintf_r+0x1a6>
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d0c6      	beq.n	8014d10 <_svfiprintf_r+0x130>
 8014d82:	9105      	str	r1, [sp, #20]
 8014d84:	e7c4      	b.n	8014d10 <_svfiprintf_r+0x130>
 8014d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e7f0      	b.n	8014d72 <_svfiprintf_r+0x192>
 8014d90:	ab03      	add	r3, sp, #12
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	462a      	mov	r2, r5
 8014d96:	4b0f      	ldr	r3, [pc, #60]	; (8014dd4 <_svfiprintf_r+0x1f4>)
 8014d98:	a904      	add	r1, sp, #16
 8014d9a:	4638      	mov	r0, r7
 8014d9c:	f3af 8000 	nop.w
 8014da0:	1c42      	adds	r2, r0, #1
 8014da2:	4606      	mov	r6, r0
 8014da4:	d1d6      	bne.n	8014d54 <_svfiprintf_r+0x174>
 8014da6:	89ab      	ldrh	r3, [r5, #12]
 8014da8:	065b      	lsls	r3, r3, #25
 8014daa:	f53f af2d 	bmi.w	8014c08 <_svfiprintf_r+0x28>
 8014dae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014db0:	b01d      	add	sp, #116	; 0x74
 8014db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db6:	ab03      	add	r3, sp, #12
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	462a      	mov	r2, r5
 8014dbc:	4b05      	ldr	r3, [pc, #20]	; (8014dd4 <_svfiprintf_r+0x1f4>)
 8014dbe:	a904      	add	r1, sp, #16
 8014dc0:	4638      	mov	r0, r7
 8014dc2:	f000 f879 	bl	8014eb8 <_printf_i>
 8014dc6:	e7eb      	b.n	8014da0 <_svfiprintf_r+0x1c0>
 8014dc8:	0801569c 	.word	0x0801569c
 8014dcc:	080156a6 	.word	0x080156a6
 8014dd0:	00000000 	.word	0x00000000
 8014dd4:	08014b2d 	.word	0x08014b2d
 8014dd8:	080156a2 	.word	0x080156a2

08014ddc <_printf_common>:
 8014ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014de0:	4616      	mov	r6, r2
 8014de2:	4699      	mov	r9, r3
 8014de4:	688a      	ldr	r2, [r1, #8]
 8014de6:	690b      	ldr	r3, [r1, #16]
 8014de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014dec:	4293      	cmp	r3, r2
 8014dee:	bfb8      	it	lt
 8014df0:	4613      	movlt	r3, r2
 8014df2:	6033      	str	r3, [r6, #0]
 8014df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014df8:	4607      	mov	r7, r0
 8014dfa:	460c      	mov	r4, r1
 8014dfc:	b10a      	cbz	r2, 8014e02 <_printf_common+0x26>
 8014dfe:	3301      	adds	r3, #1
 8014e00:	6033      	str	r3, [r6, #0]
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	0699      	lsls	r1, r3, #26
 8014e06:	bf42      	ittt	mi
 8014e08:	6833      	ldrmi	r3, [r6, #0]
 8014e0a:	3302      	addmi	r3, #2
 8014e0c:	6033      	strmi	r3, [r6, #0]
 8014e0e:	6825      	ldr	r5, [r4, #0]
 8014e10:	f015 0506 	ands.w	r5, r5, #6
 8014e14:	d106      	bne.n	8014e24 <_printf_common+0x48>
 8014e16:	f104 0a19 	add.w	sl, r4, #25
 8014e1a:	68e3      	ldr	r3, [r4, #12]
 8014e1c:	6832      	ldr	r2, [r6, #0]
 8014e1e:	1a9b      	subs	r3, r3, r2
 8014e20:	42ab      	cmp	r3, r5
 8014e22:	dc26      	bgt.n	8014e72 <_printf_common+0x96>
 8014e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014e28:	1e13      	subs	r3, r2, #0
 8014e2a:	6822      	ldr	r2, [r4, #0]
 8014e2c:	bf18      	it	ne
 8014e2e:	2301      	movne	r3, #1
 8014e30:	0692      	lsls	r2, r2, #26
 8014e32:	d42b      	bmi.n	8014e8c <_printf_common+0xb0>
 8014e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014e38:	4649      	mov	r1, r9
 8014e3a:	4638      	mov	r0, r7
 8014e3c:	47c0      	blx	r8
 8014e3e:	3001      	adds	r0, #1
 8014e40:	d01e      	beq.n	8014e80 <_printf_common+0xa4>
 8014e42:	6823      	ldr	r3, [r4, #0]
 8014e44:	6922      	ldr	r2, [r4, #16]
 8014e46:	f003 0306 	and.w	r3, r3, #6
 8014e4a:	2b04      	cmp	r3, #4
 8014e4c:	bf02      	ittt	eq
 8014e4e:	68e5      	ldreq	r5, [r4, #12]
 8014e50:	6833      	ldreq	r3, [r6, #0]
 8014e52:	1aed      	subeq	r5, r5, r3
 8014e54:	68a3      	ldr	r3, [r4, #8]
 8014e56:	bf0c      	ite	eq
 8014e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e5c:	2500      	movne	r5, #0
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	bfc4      	itt	gt
 8014e62:	1a9b      	subgt	r3, r3, r2
 8014e64:	18ed      	addgt	r5, r5, r3
 8014e66:	2600      	movs	r6, #0
 8014e68:	341a      	adds	r4, #26
 8014e6a:	42b5      	cmp	r5, r6
 8014e6c:	d11a      	bne.n	8014ea4 <_printf_common+0xc8>
 8014e6e:	2000      	movs	r0, #0
 8014e70:	e008      	b.n	8014e84 <_printf_common+0xa8>
 8014e72:	2301      	movs	r3, #1
 8014e74:	4652      	mov	r2, sl
 8014e76:	4649      	mov	r1, r9
 8014e78:	4638      	mov	r0, r7
 8014e7a:	47c0      	blx	r8
 8014e7c:	3001      	adds	r0, #1
 8014e7e:	d103      	bne.n	8014e88 <_printf_common+0xac>
 8014e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e88:	3501      	adds	r5, #1
 8014e8a:	e7c6      	b.n	8014e1a <_printf_common+0x3e>
 8014e8c:	18e1      	adds	r1, r4, r3
 8014e8e:	1c5a      	adds	r2, r3, #1
 8014e90:	2030      	movs	r0, #48	; 0x30
 8014e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e96:	4422      	add	r2, r4
 8014e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ea0:	3302      	adds	r3, #2
 8014ea2:	e7c7      	b.n	8014e34 <_printf_common+0x58>
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	4622      	mov	r2, r4
 8014ea8:	4649      	mov	r1, r9
 8014eaa:	4638      	mov	r0, r7
 8014eac:	47c0      	blx	r8
 8014eae:	3001      	adds	r0, #1
 8014eb0:	d0e6      	beq.n	8014e80 <_printf_common+0xa4>
 8014eb2:	3601      	adds	r6, #1
 8014eb4:	e7d9      	b.n	8014e6a <_printf_common+0x8e>
	...

08014eb8 <_printf_i>:
 8014eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ebc:	7e0f      	ldrb	r7, [r1, #24]
 8014ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014ec0:	2f78      	cmp	r7, #120	; 0x78
 8014ec2:	4691      	mov	r9, r2
 8014ec4:	4680      	mov	r8, r0
 8014ec6:	460c      	mov	r4, r1
 8014ec8:	469a      	mov	sl, r3
 8014eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014ece:	d807      	bhi.n	8014ee0 <_printf_i+0x28>
 8014ed0:	2f62      	cmp	r7, #98	; 0x62
 8014ed2:	d80a      	bhi.n	8014eea <_printf_i+0x32>
 8014ed4:	2f00      	cmp	r7, #0
 8014ed6:	f000 80d4 	beq.w	8015082 <_printf_i+0x1ca>
 8014eda:	2f58      	cmp	r7, #88	; 0x58
 8014edc:	f000 80c0 	beq.w	8015060 <_printf_i+0x1a8>
 8014ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014ee8:	e03a      	b.n	8014f60 <_printf_i+0xa8>
 8014eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014eee:	2b15      	cmp	r3, #21
 8014ef0:	d8f6      	bhi.n	8014ee0 <_printf_i+0x28>
 8014ef2:	a101      	add	r1, pc, #4	; (adr r1, 8014ef8 <_printf_i+0x40>)
 8014ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014ef8:	08014f51 	.word	0x08014f51
 8014efc:	08014f65 	.word	0x08014f65
 8014f00:	08014ee1 	.word	0x08014ee1
 8014f04:	08014ee1 	.word	0x08014ee1
 8014f08:	08014ee1 	.word	0x08014ee1
 8014f0c:	08014ee1 	.word	0x08014ee1
 8014f10:	08014f65 	.word	0x08014f65
 8014f14:	08014ee1 	.word	0x08014ee1
 8014f18:	08014ee1 	.word	0x08014ee1
 8014f1c:	08014ee1 	.word	0x08014ee1
 8014f20:	08014ee1 	.word	0x08014ee1
 8014f24:	08015069 	.word	0x08015069
 8014f28:	08014f91 	.word	0x08014f91
 8014f2c:	08015023 	.word	0x08015023
 8014f30:	08014ee1 	.word	0x08014ee1
 8014f34:	08014ee1 	.word	0x08014ee1
 8014f38:	0801508b 	.word	0x0801508b
 8014f3c:	08014ee1 	.word	0x08014ee1
 8014f40:	08014f91 	.word	0x08014f91
 8014f44:	08014ee1 	.word	0x08014ee1
 8014f48:	08014ee1 	.word	0x08014ee1
 8014f4c:	0801502b 	.word	0x0801502b
 8014f50:	682b      	ldr	r3, [r5, #0]
 8014f52:	1d1a      	adds	r2, r3, #4
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	602a      	str	r2, [r5, #0]
 8014f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f60:	2301      	movs	r3, #1
 8014f62:	e09f      	b.n	80150a4 <_printf_i+0x1ec>
 8014f64:	6820      	ldr	r0, [r4, #0]
 8014f66:	682b      	ldr	r3, [r5, #0]
 8014f68:	0607      	lsls	r7, r0, #24
 8014f6a:	f103 0104 	add.w	r1, r3, #4
 8014f6e:	6029      	str	r1, [r5, #0]
 8014f70:	d501      	bpl.n	8014f76 <_printf_i+0xbe>
 8014f72:	681e      	ldr	r6, [r3, #0]
 8014f74:	e003      	b.n	8014f7e <_printf_i+0xc6>
 8014f76:	0646      	lsls	r6, r0, #25
 8014f78:	d5fb      	bpl.n	8014f72 <_printf_i+0xba>
 8014f7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014f7e:	2e00      	cmp	r6, #0
 8014f80:	da03      	bge.n	8014f8a <_printf_i+0xd2>
 8014f82:	232d      	movs	r3, #45	; 0x2d
 8014f84:	4276      	negs	r6, r6
 8014f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f8a:	485a      	ldr	r0, [pc, #360]	; (80150f4 <_printf_i+0x23c>)
 8014f8c:	230a      	movs	r3, #10
 8014f8e:	e012      	b.n	8014fb6 <_printf_i+0xfe>
 8014f90:	682b      	ldr	r3, [r5, #0]
 8014f92:	6820      	ldr	r0, [r4, #0]
 8014f94:	1d19      	adds	r1, r3, #4
 8014f96:	6029      	str	r1, [r5, #0]
 8014f98:	0605      	lsls	r5, r0, #24
 8014f9a:	d501      	bpl.n	8014fa0 <_printf_i+0xe8>
 8014f9c:	681e      	ldr	r6, [r3, #0]
 8014f9e:	e002      	b.n	8014fa6 <_printf_i+0xee>
 8014fa0:	0641      	lsls	r1, r0, #25
 8014fa2:	d5fb      	bpl.n	8014f9c <_printf_i+0xe4>
 8014fa4:	881e      	ldrh	r6, [r3, #0]
 8014fa6:	4853      	ldr	r0, [pc, #332]	; (80150f4 <_printf_i+0x23c>)
 8014fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8014faa:	bf0c      	ite	eq
 8014fac:	2308      	moveq	r3, #8
 8014fae:	230a      	movne	r3, #10
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014fb6:	6865      	ldr	r5, [r4, #4]
 8014fb8:	60a5      	str	r5, [r4, #8]
 8014fba:	2d00      	cmp	r5, #0
 8014fbc:	bfa2      	ittt	ge
 8014fbe:	6821      	ldrge	r1, [r4, #0]
 8014fc0:	f021 0104 	bicge.w	r1, r1, #4
 8014fc4:	6021      	strge	r1, [r4, #0]
 8014fc6:	b90e      	cbnz	r6, 8014fcc <_printf_i+0x114>
 8014fc8:	2d00      	cmp	r5, #0
 8014fca:	d04b      	beq.n	8015064 <_printf_i+0x1ac>
 8014fcc:	4615      	mov	r5, r2
 8014fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8014fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8014fd6:	5dc7      	ldrb	r7, [r0, r7]
 8014fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014fdc:	4637      	mov	r7, r6
 8014fde:	42bb      	cmp	r3, r7
 8014fe0:	460e      	mov	r6, r1
 8014fe2:	d9f4      	bls.n	8014fce <_printf_i+0x116>
 8014fe4:	2b08      	cmp	r3, #8
 8014fe6:	d10b      	bne.n	8015000 <_printf_i+0x148>
 8014fe8:	6823      	ldr	r3, [r4, #0]
 8014fea:	07de      	lsls	r6, r3, #31
 8014fec:	d508      	bpl.n	8015000 <_printf_i+0x148>
 8014fee:	6923      	ldr	r3, [r4, #16]
 8014ff0:	6861      	ldr	r1, [r4, #4]
 8014ff2:	4299      	cmp	r1, r3
 8014ff4:	bfde      	ittt	le
 8014ff6:	2330      	movle	r3, #48	; 0x30
 8014ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ffc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015000:	1b52      	subs	r2, r2, r5
 8015002:	6122      	str	r2, [r4, #16]
 8015004:	f8cd a000 	str.w	sl, [sp]
 8015008:	464b      	mov	r3, r9
 801500a:	aa03      	add	r2, sp, #12
 801500c:	4621      	mov	r1, r4
 801500e:	4640      	mov	r0, r8
 8015010:	f7ff fee4 	bl	8014ddc <_printf_common>
 8015014:	3001      	adds	r0, #1
 8015016:	d14a      	bne.n	80150ae <_printf_i+0x1f6>
 8015018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501c:	b004      	add	sp, #16
 801501e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015022:	6823      	ldr	r3, [r4, #0]
 8015024:	f043 0320 	orr.w	r3, r3, #32
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	4833      	ldr	r0, [pc, #204]	; (80150f8 <_printf_i+0x240>)
 801502c:	2778      	movs	r7, #120	; 0x78
 801502e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015032:	6823      	ldr	r3, [r4, #0]
 8015034:	6829      	ldr	r1, [r5, #0]
 8015036:	061f      	lsls	r7, r3, #24
 8015038:	f851 6b04 	ldr.w	r6, [r1], #4
 801503c:	d402      	bmi.n	8015044 <_printf_i+0x18c>
 801503e:	065f      	lsls	r7, r3, #25
 8015040:	bf48      	it	mi
 8015042:	b2b6      	uxthmi	r6, r6
 8015044:	07df      	lsls	r7, r3, #31
 8015046:	bf48      	it	mi
 8015048:	f043 0320 	orrmi.w	r3, r3, #32
 801504c:	6029      	str	r1, [r5, #0]
 801504e:	bf48      	it	mi
 8015050:	6023      	strmi	r3, [r4, #0]
 8015052:	b91e      	cbnz	r6, 801505c <_printf_i+0x1a4>
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	f023 0320 	bic.w	r3, r3, #32
 801505a:	6023      	str	r3, [r4, #0]
 801505c:	2310      	movs	r3, #16
 801505e:	e7a7      	b.n	8014fb0 <_printf_i+0xf8>
 8015060:	4824      	ldr	r0, [pc, #144]	; (80150f4 <_printf_i+0x23c>)
 8015062:	e7e4      	b.n	801502e <_printf_i+0x176>
 8015064:	4615      	mov	r5, r2
 8015066:	e7bd      	b.n	8014fe4 <_printf_i+0x12c>
 8015068:	682b      	ldr	r3, [r5, #0]
 801506a:	6826      	ldr	r6, [r4, #0]
 801506c:	6961      	ldr	r1, [r4, #20]
 801506e:	1d18      	adds	r0, r3, #4
 8015070:	6028      	str	r0, [r5, #0]
 8015072:	0635      	lsls	r5, r6, #24
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	d501      	bpl.n	801507c <_printf_i+0x1c4>
 8015078:	6019      	str	r1, [r3, #0]
 801507a:	e002      	b.n	8015082 <_printf_i+0x1ca>
 801507c:	0670      	lsls	r0, r6, #25
 801507e:	d5fb      	bpl.n	8015078 <_printf_i+0x1c0>
 8015080:	8019      	strh	r1, [r3, #0]
 8015082:	2300      	movs	r3, #0
 8015084:	6123      	str	r3, [r4, #16]
 8015086:	4615      	mov	r5, r2
 8015088:	e7bc      	b.n	8015004 <_printf_i+0x14c>
 801508a:	682b      	ldr	r3, [r5, #0]
 801508c:	1d1a      	adds	r2, r3, #4
 801508e:	602a      	str	r2, [r5, #0]
 8015090:	681d      	ldr	r5, [r3, #0]
 8015092:	6862      	ldr	r2, [r4, #4]
 8015094:	2100      	movs	r1, #0
 8015096:	4628      	mov	r0, r5
 8015098:	f7eb f92a 	bl	80002f0 <memchr>
 801509c:	b108      	cbz	r0, 80150a2 <_printf_i+0x1ea>
 801509e:	1b40      	subs	r0, r0, r5
 80150a0:	6060      	str	r0, [r4, #4]
 80150a2:	6863      	ldr	r3, [r4, #4]
 80150a4:	6123      	str	r3, [r4, #16]
 80150a6:	2300      	movs	r3, #0
 80150a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150ac:	e7aa      	b.n	8015004 <_printf_i+0x14c>
 80150ae:	6923      	ldr	r3, [r4, #16]
 80150b0:	462a      	mov	r2, r5
 80150b2:	4649      	mov	r1, r9
 80150b4:	4640      	mov	r0, r8
 80150b6:	47d0      	blx	sl
 80150b8:	3001      	adds	r0, #1
 80150ba:	d0ad      	beq.n	8015018 <_printf_i+0x160>
 80150bc:	6823      	ldr	r3, [r4, #0]
 80150be:	079b      	lsls	r3, r3, #30
 80150c0:	d413      	bmi.n	80150ea <_printf_i+0x232>
 80150c2:	68e0      	ldr	r0, [r4, #12]
 80150c4:	9b03      	ldr	r3, [sp, #12]
 80150c6:	4298      	cmp	r0, r3
 80150c8:	bfb8      	it	lt
 80150ca:	4618      	movlt	r0, r3
 80150cc:	e7a6      	b.n	801501c <_printf_i+0x164>
 80150ce:	2301      	movs	r3, #1
 80150d0:	4632      	mov	r2, r6
 80150d2:	4649      	mov	r1, r9
 80150d4:	4640      	mov	r0, r8
 80150d6:	47d0      	blx	sl
 80150d8:	3001      	adds	r0, #1
 80150da:	d09d      	beq.n	8015018 <_printf_i+0x160>
 80150dc:	3501      	adds	r5, #1
 80150de:	68e3      	ldr	r3, [r4, #12]
 80150e0:	9903      	ldr	r1, [sp, #12]
 80150e2:	1a5b      	subs	r3, r3, r1
 80150e4:	42ab      	cmp	r3, r5
 80150e6:	dcf2      	bgt.n	80150ce <_printf_i+0x216>
 80150e8:	e7eb      	b.n	80150c2 <_printf_i+0x20a>
 80150ea:	2500      	movs	r5, #0
 80150ec:	f104 0619 	add.w	r6, r4, #25
 80150f0:	e7f5      	b.n	80150de <_printf_i+0x226>
 80150f2:	bf00      	nop
 80150f4:	080156ad 	.word	0x080156ad
 80150f8:	080156be 	.word	0x080156be

080150fc <memmove>:
 80150fc:	4288      	cmp	r0, r1
 80150fe:	b510      	push	{r4, lr}
 8015100:	eb01 0402 	add.w	r4, r1, r2
 8015104:	d902      	bls.n	801510c <memmove+0x10>
 8015106:	4284      	cmp	r4, r0
 8015108:	4623      	mov	r3, r4
 801510a:	d807      	bhi.n	801511c <memmove+0x20>
 801510c:	1e43      	subs	r3, r0, #1
 801510e:	42a1      	cmp	r1, r4
 8015110:	d008      	beq.n	8015124 <memmove+0x28>
 8015112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015116:	f803 2f01 	strb.w	r2, [r3, #1]!
 801511a:	e7f8      	b.n	801510e <memmove+0x12>
 801511c:	4402      	add	r2, r0
 801511e:	4601      	mov	r1, r0
 8015120:	428a      	cmp	r2, r1
 8015122:	d100      	bne.n	8015126 <memmove+0x2a>
 8015124:	bd10      	pop	{r4, pc}
 8015126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801512a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801512e:	e7f7      	b.n	8015120 <memmove+0x24>

08015130 <_init>:
 8015130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015132:	bf00      	nop
 8015134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015136:	bc08      	pop	{r3}
 8015138:	469e      	mov	lr, r3
 801513a:	4770      	bx	lr

0801513c <_fini>:
 801513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513e:	bf00      	nop
 8015140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015142:	bc08      	pop	{r3}
 8015144:	469e      	mov	lr, r3
 8015146:	4770      	bx	lr
