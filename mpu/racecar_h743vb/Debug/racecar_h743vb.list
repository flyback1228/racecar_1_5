
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a84  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08013d1c  08013d1c  00023d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141e4  080141e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080141ec  080141ec  000241ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080141f4  080141f4  000241f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  080141f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a9c  2400009c  08014294  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001b38  08014294  00031b38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY
 11 .debug_info   00033683  00000000  00000000  0003010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004f16  00000000  00000000  00063790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002588  00000000  00000000  000686a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d77  00000000  00000000  0006ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e831  00000000  00000000  0006c9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002f530  00000000  00000000  000ab1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018e428  00000000  00000000  000da708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a984  00000000  00000000  00268b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  002734b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400009c 	.word	0x2400009c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013d04 	.word	0x08013d04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a0 	.word	0x240000a0
 80002d4:	08013d04 	.word	0x08013d04

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f005 fab6 	bl	8005b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f82c 	bl	8000648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f0:	f000 f8a4 	bl	800073c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fe86 	bl	8001304 <MX_GPIO_Init>
  MX_BDMA_Init();
 80005f8:	f000 fe34 	bl	8001264 <MX_BDMA_Init>
  MX_DMA_Init();
 80005fc:	f000 fe52 	bl	80012a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f8ce 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000604:	f000 f944 	bl	8000890 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000608:	f000 f982 	bl	8000910 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800060c:	f000 f9cc 	bl	80009a8 <MX_UART4_Init>
  MX_UART5_Init();
 8000610:	f000 fa16 	bl	8000a40 <MX_UART5_Init>
  MX_UART7_Init();
 8000614:	f000 fa60 	bl	8000ad8 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000618:	f000 faaa 	bl	8000b70 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800061c:	f000 faf4 	bl	8000c08 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000620:	f000 fb1e 	bl	8000c60 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000624:	f000 fb40 	bl	8000ca8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000628:	f000 fc74 	bl	8000f14 <MX_TIM5_Init>
  MX_TIM2_Init();
 800062c:	f000 fb92 	bl	8000d54 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fde6 	bl	8001200 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000634:	f000 fc08 	bl	8000e48 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000638:	f000 fd5e 	bl	80010f8 <MX_TIM15_Init>
  MX_TIM6_Init();
 800063c:	f000 fcec 	bl	8001018 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000640:	f000 fd22 	bl	8001088 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x60>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	224c      	movs	r2, #76	; 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f013 faad 	bl	8013bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f013 faa7 	bl	8013bb6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f009 ff4b 	bl	800a504 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <SystemClock_Config+0xec>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <SystemClock_Config+0xec>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <SystemClock_Config+0xec>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xf0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xf0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xf0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xf0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006ce:	2314      	movs	r3, #20
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00a f810 	bl	800a70c <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f2:	f000 fee1 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800070a:	2350      	movs	r3, #80	; 0x50
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800070e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fc4f 	bl	800afc0 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000728:	f000 fec6 	bl	80014b8 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b0      	sub	sp, #192	; 0xc0
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	22c0      	movs	r2, #192	; 0xc0
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f013 fa34 	bl	8013bb6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 800074e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 800075e:	233c      	movs	r3, #60	; 0x3c
 8000760:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000772:	2320      	movs	r3, #32
 8000774:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f00a ffa5 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000794:	f000 fe90 	bl	80014b8 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	37c0      	adds	r7, #192	; 0xc0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007c6:	4a30      	ldr	r2, [pc, #192]	; (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ADC1_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ADC1_Init+0xe4>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000822:	f005 fbe7 	bl	8005ff4 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fe44 	bl	80014b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_ADC1_Init+0xe4>)
 800083c:	f006 f9fe 	bl	8006c3c <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000846:	f000 fe37 	bl	80014b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0xec>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_ADC1_Init+0xe4>)
 800086e:	f005 fd63 	bl	8006338 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000878:	f000 fe1e 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240000b8 	.word	0x240000b8
 8000888:	40022000 	.word	0x40022000
 800088c:	0c900008 	.word	0x0c900008

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f009 fbaa 	bl	800a024 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fdef 	bl	80014b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f009 fc31 	bl	800a144 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fde6 	bl	80014b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f009 fc73 	bl	800a1da <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fddd 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2400011c 	.word	0x2400011c
 8000908:	40005400 	.word	0x40005400
 800090c:	00c0eaff 	.word	0x00c0eaff

08000910 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_LPUART1_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800095a:	f010 f843 	bl	80109e4 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 fda8 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	f011 ff7e 	bl	801286c <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 fd9f 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	f011 ffb3 	bl	80128e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 fd96 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800098e:	f011 ff34 	bl	80127fa <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 fd8e 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000170 	.word	0x24000170
 80009a4:	58000c00 	.word	0x58000c00

080009a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_UART4_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_UART4_Init+0x90>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_UART4_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_UART4_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_UART4_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_UART4_Init+0x90>)
 80009f2:	f00f fff7 	bl	80109e4 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 fd5c 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a04:	f011 ff32 	bl	801286c <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 fd53 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a16:	f011 ff67 	bl	80128e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 fd4a 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a26:	f011 fee8 	bl	80127fa <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 fd42 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	24000204 	.word	0x24000204
 8000a3c:	40004c00 	.word	0x40004c00

08000a40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_UART5_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a8a:	f00f ffab 	bl	80109e4 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 fd10 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a9c:	f011 fee6 	bl	801286c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fd07 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000aae:	f011 ff1b 	bl	80128e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fcfe 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000abe:	f011 fe9c 	bl	80127fa <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fcf6 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	24000298 	.word	0x24000298
 8000ad4:	40005000 	.word	0x40005000

08000ad8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_UART7_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_UART7_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_UART7_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b22:	f00f ff5f 	bl	80109e4 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 fcc4 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b34:	f011 fe9a 	bl	801286c <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 fcbb 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b46:	f011 fecf 	bl	80128e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 fcb2 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b56:	f011 fe50 	bl	80127fa <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 fcaa 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2400032c 	.word	0x2400032c
 8000b6c:	40007800 	.word	0x40007800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <MX_USART3_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bba:	f00f ff13 	bl	80109e4 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fc78 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f011 fe4e 	bl	801286c <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fc6f 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bde:	f011 fe83 	bl	80128e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f000 fc66 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bee:	f011 fe04 	bl	80127fa <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f000 fc5e 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	240003c0 	.word	0x240003c0
 8000c04:	40004800 	.word	0x40004800

08000c08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_QUADSPI_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c20:	2210      	movs	r2, #16
 8000c22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c26:	2216      	movs	r2, #22
 8000c28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c30:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c46:	f009 fca7 	bl	800a598 <HAL_QSPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 fc32 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000634 	.word	0x24000634
 8000c5c:	52005000 	.word	0x52005000

08000c60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <MX_SDMMC1_SD_Init+0x44>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c8c:	f00d fa22 	bl	800e0d4 <HAL_SD_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c96:	f000 fc0f 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000680 	.word	0x24000680
 8000ca4:	52007000 	.word	0x52007000

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MX_SPI1_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d38:	f00e fa3a 	bl	800f1b0 <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fbb9 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240006fc 	.word	0x240006fc
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d82:	2263      	movs	r2, #99	; 0x63
 8000d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da0:	4828      	ldr	r0, [pc, #160]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000da2:	f00e fb9b 	bl	800f4dc <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fb84 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000dc0:	f00f fd64 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dca:	f000 fb75 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	; 0x60
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000de6:	f00e fde3 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000df0:	f000 fb62 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	2204      	movs	r2, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000dfc:	f00e fdd8 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e06:	f000 fb57 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000e12:	f00e fdcd 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000e1c:	f000 fb4c 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	220c      	movs	r2, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000e28:	f00e fdc2 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000e32:	f000 fb41 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <MX_TIM2_Init+0xf0>)
 8000e38:	f004 fc28 	bl	800568c <HAL_TIM_MspPostInit>

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000784 	.word	0x24000784

08000e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_TIM3_Init+0xc8>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e74:	2263      	movs	r2, #99	; 0x63
 8000e76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15503;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e80:	f643 428f 	movw	r2, #15503	; 0x3c8f
 8000e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e94:	f00e fb22 	bl	800f4dc <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e9e:	f000 fb0b 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4816      	ldr	r0, [pc, #88]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eb2:	f00f fceb 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ebc:	f000 fafc 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000ed8:	f00e fd6a 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ee2:	f000 fae9 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eee:	f00e fd5f 	bl	800f9b0 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ef8:	f000 fade 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000efe:	f004 fbc5 	bl	800568c <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	240007d0 	.word	0x240007d0
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f44:	4a33      	ldr	r2, [pc, #204]	; (8001014 <MX_TIM5_Init+0x100>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f68:	4829      	ldr	r0, [pc, #164]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f6a:	f00e fb0e 	bl	800f58a <HAL_TIM_IC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f74:	f000 faa0 	bl	80014b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f7c:	2350      	movs	r3, #80	; 0x50
 8000f7e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f94:	f00e fe20 	bl	800fbd8 <HAL_TIM_SlaveConfigSynchro>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f9e:	f000 fa8b 	bl	80014b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000fbc:	f00e fc5b 	bl	800f876 <HAL_TIM_IC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8000fc6:	f000 fa77 	bl	80014b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000fdc:	f00e fc4b 	bl	800f876 <HAL_TIM_IC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000fe6:	f000 fa67 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000ff8:	f00f fc48 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001002:	f000 fa59 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400081c 	.word	0x2400081c
 8001014:	40000c00 	.word	0x40000c00

08001018 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM6_Init+0x68>)
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_TIM6_Init+0x6c>)
 800102c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_TIM6_Init+0x68>)
 8001030:	f242 720f 	movw	r2, #9999	; 0x270f
 8001034:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_TIM6_Init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_TIM6_Init+0x68>)
 800103e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001042:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_TIM6_Init+0x68>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM6_Init+0x68>)
 800104c:	f00e f9ef 	bl	800f42e <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001056:	f000 fa2f 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM6_Init+0x68>)
 8001068:	f00f fc10 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001072:	f000 fa21 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000868 	.word	0x24000868
 8001084:	40001000 	.word	0x40001000

08001088 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM7_Init+0x68>)
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_TIM7_Init+0x6c>)
 800109c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80010a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010bc:	f00e f9b7 	bl	800f42e <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010c6:	f000 f9f7 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010d8:	f00f fbd8 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010e2:	f000 f9e9 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	240008b4 	.word	0x240008b4
 80010f4:	40001400 	.word	0x40001400

080010f8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_TIM15_Init+0x100>)
 8001128:	4a34      	ldr	r2, [pc, #208]	; (80011fc <MX_TIM15_Init+0x104>)
 800112a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <MX_TIM15_Init+0x100>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_TIM15_Init+0x100>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <MX_TIM15_Init+0x100>)
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_TIM15_Init+0x100>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_TIM15_Init+0x100>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_TIM15_Init+0x100>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001152:	4829      	ldr	r0, [pc, #164]	; (80011f8 <MX_TIM15_Init+0x100>)
 8001154:	f00e fa19 	bl	800f58a <HAL_TIM_IC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 800115e:	f000 f9ab 	bl	80014b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001162:	2304      	movs	r3, #4
 8001164:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001166:	2350      	movs	r3, #80	; 0x50
 8001168:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <MX_TIM15_Init+0x100>)
 800117e:	f00e fd2b 	bl	800fbd8 <HAL_TIM_SlaveConfigSynchro>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001188:	f000 f996 	bl	80014b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_TIM15_Init+0x100>)
 80011a6:	f00e fb66 	bl	800f876 <HAL_TIM_IC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 80011b0:	f000 f982 	bl	80014b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2204      	movs	r2, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM15_Init+0x100>)
 80011c6:	f00e fb56 	bl	800f876 <HAL_TIM_IC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 80011d0:	f000 f972 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM15_Init+0x100>)
 80011e2:	f00f fb53 	bl	801088c <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80011ec:	f000 f964 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	24000900 	.word	0x24000900
 80011fc:	40014000 	.word	0x40014000

08001200 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001208:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120c:	2209      	movs	r2, #9
 800120e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001212:	2202      	movs	r2, #2
 8001214:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121e:	2202      	movs	r2, #2
 8001220:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001248:	f009 f813 	bl	800a272 <HAL_PCD_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001252:	f000 f931 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2400094c 	.word	0x2400094c
 8001260:	40080000 	.word	0x40080000

08001264 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_BDMA_Init+0x3c>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <MX_BDMA_Init+0x3c>)
 8001272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_BDMA_Init+0x3c>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2081      	movs	r0, #129	; 0x81
 800128e:	f005 fe8e 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001292:	2081      	movs	r0, #129	; 0x81
 8001294:	f005 fea5 	bl	8006fe2 <HAL_NVIC_EnableIRQ>

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_DMA_Init+0x5c>)
 80012ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_DMA_Init+0x5c>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_DMA_Init+0x5c>)
 80012bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	200b      	movs	r0, #11
 80012ce:	f005 fe6e 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d2:	200b      	movs	r0, #11
 80012d4:	f005 fe85 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	200c      	movs	r0, #12
 80012de:	f005 fe66 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012e2:	200c      	movs	r0, #12
 80012e4:	f005 fe7d 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	200d      	movs	r0, #13
 80012ee:	f005 fe5e 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012f2:	200d      	movs	r0, #13
 80012f4:	f005 fe75 	bl	8006fe2 <HAL_NVIC_EnableIRQ>

}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	58024400 	.word	0x58024400

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	4a59      	ldr	r2, [pc, #356]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <MX_GPIO_Init+0x1a0>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f248 0108 	movw	r1, #32776	; 0x8008
 80013d4:	4834      	ldr	r0, [pc, #208]	; (80014a8 <MX_GPIO_Init+0x1a4>)
 80013d6:	f008 fe0b 	bl	8009ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f24c 0120 	movw	r1, #49184	; 0xc020
 80013e0:	4832      	ldr	r0, [pc, #200]	; (80014ac <MX_GPIO_Init+0x1a8>)
 80013e2:	f008 fe05 	bl	8009ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 80013ec:	4830      	ldr	r0, [pc, #192]	; (80014b0 <MX_GPIO_Init+0x1ac>)
 80013ee:	f008 fdff 	bl	8009ff0 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LED_RED_Pin;
 80013f2:	f248 0308 	movw	r3, #32776	; 0x8008
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4827      	ldr	r0, [pc, #156]	; (80014a8 <MX_GPIO_Init+0x1a4>)
 800140c:	f008 fc40 	bl	8009c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_GPIO_Init+0x1b0>)
 8001428:	f008 fc32 	bl	8009c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <MX_GPIO_Init+0x1a4>)
 8001442:	f008 fc25 	bl	8009c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 8001446:	f24c 0320 	movw	r3, #49184	; 0xc020
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_GPIO_Init+0x1a8>)
 8001460:	f008 fc16 	bl	8009c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001464:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 8001468:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_GPIO_Init+0x1ac>)
 800147e:	f008 fc07 	bl	8009c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_GPIO_Init+0x1a8>)
 8001496:	f008 fbfb 	bl	8009c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58021000 	.word	0x58021000
 80014ac:	58020400 	.word	0x58020400
 80014b0:	58020c00 	.word	0x58020c00
 80014b4:	58020800 	.word	0x58020800

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>

080014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80014c2:	b480      	push	{r7}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	ed87 0a00 	vstr	s0, [r7]
 80014ce:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    std::memcpy(&val, &f, sizeof(val));
 80014d0:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	15db      	asrs	r3, r3, #23
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80014e2:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 80014e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d103      	bne.n	80014f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 80014ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014f0:	82fb      	strh	r3, [r7, #22]
 80014f2:	e02a      	b.n	800154a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 80014f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001502:	b29b      	uxth	r3, r3
 8001504:	82fb      	strh	r3, [r7, #22]
 8001506:	e020      	b.n	800154a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800150e:	2300      	movs	r3, #0
 8001510:	82fb      	strh	r3, [r7, #22]
 8001512:	e01a      	b.n	800154a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800151a:	b29b      	uxth	r3, r3
 800151c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001524:	e008      	b.n	8001538 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	613b      	str	r3, [r7, #16]
          exp--;
 800152c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f1      	beq.n	8001526 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001548:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	6079      	str	r1, [r7, #4]
 8001572:	0152      	lsls	r2, r2, #5
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	08d9      	lsrs	r1, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	0ad9      	lsrs	r1, r3, #11
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	b2ca      	uxtb	r2, r1
 8001592:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001594:	8afb      	ldrh	r3, [r7, #22]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	b2d9      	uxtb	r1, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	0cdb      	lsrs	r3, r3, #19
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1c58      	adds	r0, r3, #1
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80015b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b8:	111b      	asrs	r3, r3, #4
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	6079      	str	r1, [r7, #4]
 80015c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80015cc:	edd7 7a00 	vldr	s15, [r7]
 80015d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	d508      	bpl.n	80015ec <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3b01      	subs	r3, #1
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80015ec:	2308      	movs	r3, #8
  }
 80015ee:	4618      	mov	r0, r3
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80015fa:	b480      	push	{r7}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3303      	adds	r3, #3
 8001608:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	031b      	lsls	r3, r3, #12
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	051b      	lsls	r3, r3, #20
 8001642:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	b21b      	sxth	r3, r3
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	b29b      	uxth	r3, r3
 800166a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800166e:	b29a      	uxth	r2, r3
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	4313      	orrs	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8001678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 8001684:	23ff      	movs	r3, #255	; 0xff
 8001686:	82fb      	strh	r3, [r7, #22]
 8001688:	e02c      	b.n	80016e4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	f240 427e 	movw	r2, #1150	; 0x47e
 8001692:	4293      	cmp	r3, r2
 8001694:	dd04      	ble.n	80016a0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 8001696:	23ff      	movs	r3, #255	; 0xff
 8001698:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e021      	b.n	80016e4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80016a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80016a8:	dd05      	ble.n	80016b6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	82fb      	strh	r3, [r7, #22]
 80016b4:	e016      	b.n	80016e4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80016b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ba:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016be:	dc02      	bgt.n	80016c6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80016c0:	2300      	movs	r3, #0
 80016c2:	82fb      	strh	r3, [r7, #22]
 80016c4:	e00e      	b.n	80016e4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016cc:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80016ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016d2:	f240 3381 	movw	r3, #897	; 0x381
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	613b      	str	r3, [r7, #16]
      exp = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d002      	beq.n	80016f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3301      	adds	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 80016fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001702:	05da      	lsls	r2, r3, #23
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	061b      	lsls	r3, r3, #24
 8001714:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fa      	ldr	r2, [r7, #12]

    std::memcpy(f, &val, sizeof(val));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	601a      	str	r2, [r3, #0]
    return 8;
 8001724:	2308      	movs	r3, #8
  }
 8001726:	4618      	mov	r0, r3
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_ZN3ros3MsgC1Ev>:
class Msg
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <_ZN3ros3MsgC1Ev+0x1c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	08014194 	.word	0x08014194

08001774 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
      data()
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ffe8 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ffcf 	bl	8001732 <_ZN3ros4TimeC1Ev>
    {
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0801417c 	.word	0x0801417c

080017a4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0a19      	lsrs	r1, r3, #8
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	0c19      	lsrs	r1, r3, #16
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3302      	adds	r3, #2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0e19      	lsrs	r1, r3, #24
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3303      	adds	r3, #3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0a19      	lsrs	r1, r3, #8
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	0c19      	lsrs	r1, r3, #16
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3302      	adds	r3, #2
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	0e19      	lsrs	r1, r3, #24
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3303      	adds	r3, #3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3304      	adds	r3, #4
 8001844:	60fb      	str	r3, [r7, #12]
      return offset;
 8001846:	68fb      	ldr	r3, [r7, #12]
    }
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	440b      	add	r3, r1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3302      	adds	r3, #2
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	440b      	add	r3, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3303      	adds	r3, #3
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	440b      	add	r3, r1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3304      	adds	r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	440b      	add	r3, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3302      	adds	r3, #2
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	440b      	add	r3, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3303      	adds	r3, #3
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	440b      	add	r3, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3304      	adds	r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
     return offset;
 800190e:	68fb      	ldr	r3, [r7, #12]
    }
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	08013d1c 	.word	0x08013d1c

08001938 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	08013d2c 	.word	0x08013d2c

08001954 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fef8 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001974:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800197a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001980:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    {
    }
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08014164 	.word	0x08014164
 8001998:	08013d50 	.word	0x08013d50

0800199c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	8899      	ldrh	r1, [r3, #4]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b299      	uxth	r1, r3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	3301      	adds	r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3302      	adds	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fc7e 	bl	80002d8 <strlen>
 80019dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	69b9      	ldr	r1, [r7, #24]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f9bc 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3304      	adds	r3, #4
 80019f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	18d0      	adds	r0, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f012 f91e 	bl	8013c40 <memcpy>
      offset += length_topic_name;
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4413      	add	r3, r2
 8001a0a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc61 	bl	80002d8 <strlen>
 8001a16:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	6979      	ldr	r1, [r7, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 f99f 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	18d0      	adds	r0, r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f012 f901 	bl	8013c40 <memcpy>
      offset += length_message_type;
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4413      	add	r3, r2
 8001a44:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fc44 	bl	80002d8 <strlen>
 8001a50:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 f982 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3304      	adds	r3, #4
 8001a64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	18d0      	adds	r0, r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4619      	mov	r1, r3
 8001a74:	f012 f8e4 	bl	8013c40 <memcpy>
      offset += length_md5sum;
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	0a19      	lsrs	r1, r3, #8
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	0c19      	lsrs	r1, r3, #16
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	0e19      	lsrs	r1, r3, #24
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3303      	adds	r3, #3
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
    }
 8001aca:	4618      	mov	r0, r3
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	; 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	3301      	adds	r3, #1
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	440b      	add	r3, r1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	441a      	add	r2, r3
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 f93f 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	3304      	adds	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	e00b      	b.n	8001b48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	441a      	add	r2, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3301      	adds	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3ed      	bcc.n	8001b30 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	441a      	add	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	4413      	add	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 f90c 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	e00b      	b.n	8001bae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	440b      	add	r3, r1
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	3301      	adds	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3ed      	bcc.n	8001b96 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	441a      	add	r2, r3
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 f8d9 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e00b      	b.n	8001c14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	441a      	add	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	440b      	add	r3, r1
 8001c0a:	7812      	ldrb	r2, [r2, #0]
 8001c0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3ed      	bcc.n	8001bfc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	3b01      	subs	r3, #1
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	440a      	add	r2, r1
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	440b      	add	r3, r1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	440b      	add	r3, r1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	061b      	lsls	r3, r3, #24
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	3304      	adds	r3, #4
 8001c96:	61bb      	str	r3, [r7, #24]
     return offset;
 8001c98:	69bb      	ldr	r3, [r7, #24]
    }
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	08013d54 	.word	0x08013d54

08001cc0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	08013d70 	.word	0x08013d70

08001cdc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd34 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
      level(0),
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	711a      	strb	r2, [r3, #4]
      msg("")
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001cfc:	609a      	str	r2, [r3, #8]
    {
    }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0801414c 	.word	0x0801414c
 8001d0c:	08013d50 	.word	0x08013d50

08001d10 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	7912      	ldrb	r2, [r2, #4]
 8001d28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe facf 	bl	80002d8 <strlen>
 8001d3a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 f80d 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	18d0      	adds	r0, r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f011 ff6f 	bl	8013c40 <memcpy>
      offset += length_msg;
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    }
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3301      	adds	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	441a      	add	r2, r3
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 fffe 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3304      	adds	r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e00b      	b.n	8001dca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	441a      	add	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	440b      	add	r3, r1
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3ed      	bcc.n	8001db2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
     return offset;
 8001dfa:	693b      	ldr	r3, [r7, #16]
    }
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	08013d94 	.word	0x08013d94

08001e20 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	08013da8 	.word	0x08013da8

08001e3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fc84 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8001e4c:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	08014134 	.word	0x08014134

08001e98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2ca      	uxtb	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0a19      	lsrs	r1, r3, #8
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0c19      	lsrs	r1, r3, #16
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3302      	adds	r3, #2
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0e19      	lsrs	r1, r3, #24
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3304      	adds	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	e02a      	b.n	8001f4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	0a19      	lsrs	r1, r3, #8
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	3301      	adds	r3, #1
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	0c19      	lsrs	r1, r3, #16
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3302      	adds	r3, #2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2ca      	uxtb	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	0e19      	lsrs	r1, r3, #24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3303      	adds	r3, #3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3304      	adds	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3cf      	bcc.n	8001ef6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	0a19      	lsrs	r1, r3, #8
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	0c19      	lsrs	r1, r3, #16
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3302      	adds	r3, #2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	0e19      	lsrs	r1, r3, #24
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3303      	adds	r3, #3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	e02a      	b.n	8001ffc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2ca      	uxtb	r2, r1
 8001fbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0a19      	lsrs	r1, r3, #8
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0c19      	lsrs	r1, r3, #16
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	0e19      	lsrs	r1, r3, #24
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	429a      	cmp	r2, r3
 8002004:	d3cf      	bcc.n	8001fa6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69d9      	ldr	r1, [r3, #28]
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	b2ca      	uxtb	r2, r1
 8002012:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	0a19      	lsrs	r1, r3, #8
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	0c19      	lsrs	r1, r3, #16
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3302      	adds	r3, #2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	0e19      	lsrs	r1, r3, #24
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3303      	adds	r3, #3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3304      	adds	r3, #4
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e027      	b.n	80020a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f938 	bl	80002d8 <strlen>
 8002068:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	6979      	ldr	r1, [r7, #20]
 8002072:	4618      	mov	r0, r3
 8002074:	f001 fe76 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3304      	adds	r3, #4
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	18d0      	adds	r0, r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4619      	mov	r1, r3
 8002094:	f011 fdd4 	bl	8013c40 <memcpy>
      offset += length_stringsi;
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3d2      	bcc.n	8002056 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08e      	sub	sp, #56	; 0x38
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	3301      	adds	r3, #1
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	6a3a      	ldr	r2, [r7, #32]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e6:	3302      	adds	r3, #2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	3303      	adds	r3, #3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	4313      	orrs	r3, r2
 8002106:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3304      	adds	r3, #4
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d90a      	bls.n	800212e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f011 fd10 	bl	8013b48 <realloc>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	e035      	b.n	80021a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	440a      	add	r2, r1
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	3301      	adds	r3, #1
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	440b      	add	r3, r1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	3302      	adds	r3, #2
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	440b      	add	r3, r1
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	3303      	adds	r3, #3
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	440b      	add	r3, r1
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	3304      	adds	r3, #4
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	3301      	adds	r3, #1
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3c4      	bcc.n	800213a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021bc:	3301      	adds	r3, #1
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	3302      	adds	r3, #2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	3303      	adds	r3, #3
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	3304      	adds	r3, #4
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d90a      	bls.n	8002216 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f011 fc9c 	bl	8013b48 <realloc>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002220:	e035      	b.n	800228e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	440a      	add	r2, r1
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	3301      	adds	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	3302      	adds	r3, #2
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	440b      	add	r3, r1
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	3303      	adds	r3, #3
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	440b      	add	r3, r1
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	3304      	adds	r3, #4
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3214      	adds	r2, #20
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	3301      	adds	r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d3c4      	bcc.n	8002222 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	3301      	adds	r3, #1
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	3302      	adds	r3, #2
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	3303      	adds	r3, #3
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	3304      	adds	r3, #4
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d90a      	bls.n	80022fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f011 fc28 	bl	8013b48 <realloc>
 80022f8:	4602      	mov	r2, r0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
 8002308:	e03e      	b.n	8002388 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	441a      	add	r2, r3
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fd43 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	3304      	adds	r3, #4
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e00b      	b.n	8002340 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	441a      	add	r2, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	3b01      	subs	r3, #1
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	440b      	add	r3, r1
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	429a      	cmp	r2, r3
 800234a:	d3ed      	bcc.n	8002328 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800234c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	3b01      	subs	r3, #1
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	3b01      	subs	r3, #1
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	441a      	add	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4413      	add	r3, r2
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	3220      	adds	r2, #32
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	3301      	adds	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238e:	429a      	cmp	r2, r3
 8002390:	d3bb      	bcc.n	800230a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002394:	4618      	mov	r0, r3
 8002396:	3738      	adds	r7, #56	; 0x38
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08014028 	.word	0x08014028

080023b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	08013dcc 	.word	0x08013dcc

080023d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	611a      	str	r2, [r3, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68d8      	ldr	r0, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6891      	ldr	r1, [r2, #8]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4798      	blx	r3
 8002420:	4603      	mov	r3, r0
  };
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
  }
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d077      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a48      	ldr	r2, [pc, #288]	; (8002588 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d06f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a45      	ldr	r2, [pc, #276]	; (800258c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d067      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a42      	ldr	r2, [pc, #264]	; (8002590 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d05f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d057      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3c      	ldr	r2, [pc, #240]	; (8002598 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d04f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d047      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a36      	ldr	r2, [pc, #216]	; (80025a0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d03f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d037      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d02f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d027      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d017      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00f      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10a      	bne.n	8002562 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	e009      	b.n	8002576 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40020010 	.word	0x40020010
 8002588:	40020028 	.word	0x40020028
 800258c:	40020040 	.word	0x40020040
 8002590:	40020058 	.word	0x40020058
 8002594:	40020070 	.word	0x40020070
 8002598:	40020088 	.word	0x40020088
 800259c:	400200a0 	.word	0x400200a0
 80025a0:	400200b8 	.word	0x400200b8
 80025a4:	40020410 	.word	0x40020410
 80025a8:	40020428 	.word	0x40020428
 80025ac:	40020440 	.word	0x40020440
 80025b0:	40020458 	.word	0x40020458
 80025b4:	40020470 	.word	0x40020470
 80025b8:	40020488 	.word	0x40020488
 80025bc:	400204a0 	.word	0x400204a0
 80025c0:	400204b8 	.word	0x400204b8

080025c4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <_ZN13STM32HardwareC1Ev+0x34>)
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	24000204 	.word	0x24000204

080025fc <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002610:	4619      	mov	r1, r3
 8002612:	f00e fab7 	bl	8010b84 <HAL_UART_Receive_DMA>
    }
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN13STM32Hardware4readEv>:

    int read(){
 800261e:	b590      	push	{r4, r7, lr}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262a:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff06 	bl	8002444 <_ZN13STM32Hardware10getRdmaIndEv>
 8002638:	4603      	mov	r3, r0
 800263a:	429c      	cmp	r4, r3
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800264e:	1c59      	adds	r1, r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800266e:	68fb      	ldr	r3, [r7, #12]
    }
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	2b20      	cmp	r3, #32
 800268a:	d108      	bne.n	800269e <_ZN13STM32Hardware5flushEv+0x26>
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <_ZN13STM32Hardware5flushEv+0xb4>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <_ZN13STM32Hardware5flushEv+0x26>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <_ZN13STM32Hardware5flushEv+0x28>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d03f      	beq.n	8002724 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <_ZN13STM32Hardware5flushEv+0xb4>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d031      	beq.n	800271e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20a      	bcs.n	80026e0 <_ZN13STM32Hardware5flushEv+0x68>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026d8:	b29b      	uxth	r3, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b29b      	uxth	r3, r3
 80026de:	e006      	b.n	80026ee <_ZN13STM32Hardware5flushEv+0x76>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	89fa      	ldrh	r2, [r7, #14]
 8002704:	4619      	mov	r1, r3
 8002706:	f00e f9bd 	bl	8010a84 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	4413      	add	r3, r2
 8002714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
      }
    }
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	24000e58 	.word	0x24000e58

08002730 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
      int n = length;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002746:	bfa8      	it	ge
 8002748:	f44f 7300 	movge.w	r3, #512	; 0x200
 800274c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002754:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4293      	cmp	r3, r2
 800275c:	bf28      	it	cs
 800275e:	4613      	movcs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002768:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4618      	mov	r0, r3
 8002776:	f011 fa63 	bl	8013c40 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4413      	add	r3, r2
 8002784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	d00b      	beq.n	80027ae <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	18d1      	adds	r1, r2, r3
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	f011 fa49 	bl	8013c40 <memcpy>
      }

      flush();
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff62 	bl	8002678 <_ZN13STM32Hardware5flushEv>
    }
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	f003 fa4e 	bl	8005c64 <HAL_GetTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe ffb8 	bl	8001754 <_ZN3ros3MsgC1Ev>
 80027e4:	4a08      	ldr	r2, [pc, #32]	; (8002808 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
      label(""),
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80027ee:	605a      	str	r2, [r3, #4]
      size(0),
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
      stride(0)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
    {
    }
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	080140f0 	.word	0x080140f0
 800280c:	08013d50 	.word	0x08013d50

08002810 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fd58 	bl	80002d8 <strlen>
 8002828:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	4413      	add	r3, r2
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fa96 	bl	8003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3304      	adds	r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	18d0      	adds	r0, r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4619      	mov	r1, r3
 800284c:	f011 f9f8 	bl	8013c40 <memcpy>
      offset += length_label;
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	b2ca      	uxtb	r2, r1
 8002864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0a19      	lsrs	r1, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3301      	adds	r3, #1
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	b2ca      	uxtb	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	0c19      	lsrs	r1, r3, #16
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3302      	adds	r3, #2
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4413      	add	r3, r2
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0e19      	lsrs	r1, r3, #24
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3303      	adds	r3, #3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	4413      	add	r3, r2
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3304      	adds	r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68d9      	ldr	r1, [r3, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2ca      	uxtb	r2, r1
 80028ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a19      	lsrs	r1, r3, #8
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3301      	adds	r3, #1
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	b2ca      	uxtb	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0c19      	lsrs	r1, r3, #16
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3302      	adds	r3, #2
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	b2ca      	uxtb	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0e19      	lsrs	r1, r3, #24
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3303      	adds	r3, #3
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	b2ca      	uxtb	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
      return offset;
 80028ec:	68fb      	ldr	r3, [r7, #12]
    }
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	441a      	add	r2, r3
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fa46 	bl	8003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	3304      	adds	r3, #4
 800291a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e00b      	b.n	800293a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	441a      	add	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3b01      	subs	r3, #1
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	440b      	add	r3, r1
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3301      	adds	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d3ed      	bcc.n	8002922 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	3b01      	subs	r3, #1
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3b01      	subs	r3, #1
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	3301      	adds	r3, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	440b      	add	r3, r1
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3302      	adds	r3, #2
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	440b      	add	r3, r1
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3303      	adds	r3, #3
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	440b      	add	r3, r1
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3304      	adds	r3, #4
 80029be:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	3301      	adds	r3, #1
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	440b      	add	r3, r1
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	3302      	adds	r3, #2
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	440b      	add	r3, r1
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3303      	adds	r3, #3
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	440b      	add	r3, r1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3304      	adds	r3, #4
 8002a14:	613b      	str	r3, [r7, #16]
     return offset;
 8002a16:	693b      	ldr	r3, [r7, #16]
    }
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	08013df0 	.word	0x08013df0

08002a3c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	08013e10 	.word	0x08013e10

08002a58 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fe76 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3308      	adds	r3, #8
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff feab 	bl	80027d4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
    {
    }
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	080140d8 	.word	0x080140d8

08002a98 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2ca      	uxtb	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0a19      	lsrs	r1, r3, #8
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3301      	adds	r3, #1
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b2ca      	uxtb	r2, r1
 8002ac4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0c19      	lsrs	r1, r3, #16
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b2ca      	uxtb	r2, r1
 8002ad6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	0e19      	lsrs	r1, r3, #24
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3303      	adds	r3, #3
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b2ca      	uxtb	r2, r1
 8002ae8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	e017      	b.n	8002b26 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	18d0      	adds	r0, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	440a      	add	r2, r1
 8002b14:	4611      	mov	r1, r2
 8002b16:	4798      	blx	r3
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3e2      	bcc.n	8002af6 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	b2ca      	uxtb	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	0a19      	lsrs	r1, r3, #8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b2ca      	uxtb	r2, r1
 8002b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	0c19      	lsrs	r1, r3, #16
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b2ca      	uxtb	r2, r1
 8002b60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	0e19      	lsrs	r1, r3, #24
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3303      	adds	r3, #3
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b2ca      	uxtb	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3304      	adds	r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    }
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d90a      	bls.n	8002bf8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f010 ffab 	bl	8013b48 <realloc>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e01a      	b.n	8002c3a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 0008 	add.w	r0, r3, #8
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7ff fe70 	bl	80028f6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	18d0      	adds	r0, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f011 f806 	bl	8013c40 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	3301      	adds	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3df      	bcc.n	8002c04 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	440b      	add	r3, r1
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3302      	adds	r3, #2
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	440b      	add	r3, r1
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3303      	adds	r3, #3
 8002c86:	6839      	ldr	r1, [r7, #0]
 8002c88:	440b      	add	r3, r1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3304      	adds	r3, #4
 8002c98:	617b      	str	r3, [r7, #20]
     return offset;
 8002c9a:	697b      	ldr	r3, [r7, #20]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	08013e34 	.word	0x08013e34

08002cc0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	08013e50 	.word	0x08013e50

08002cdc <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fd34 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8002cec:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
      layout(),
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff feae 	bl	8002a58 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	080140c0 	.word	0x080140c0

08002d20 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	1d18      	adds	r0, r3, #4
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7ff fead 	bl	8002a98 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	0a19      	lsrs	r1, r3, #8
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	b2ca      	uxtb	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	0c19      	lsrs	r1, r3, #16
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	b2ca      	uxtb	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	0e19      	lsrs	r1, r3, #24
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3303      	adds	r3, #3
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	b2ca      	uxtb	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e02a      	b.n	8002dec <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	b2ca      	uxtb	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0a19      	lsrs	r1, r3, #8
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b2ca      	uxtb	r2, r1
 8002dbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0c19      	lsrs	r1, r3, #16
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0e19      	lsrs	r1, r3, #24
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2ca      	uxtb	r2, r1
 8002dde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3304      	adds	r3, #4
 8002de4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d3cf      	bcc.n	8002d96 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002df6:	697b      	ldr	r3, [r7, #20]
    }
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1d18      	adds	r0, r3, #4
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff feb3 	bl	8002b84 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	4413      	add	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3301      	adds	r3, #1
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3302      	adds	r3, #2
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3303      	adds	r3, #3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d90a      	bls.n	8002e8c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f010 fe61 	bl	8013b48 <realloc>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e035      	b.n	8002f04 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	440a      	add	r2, r1
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	6839      	ldr	r1, [r7, #0]
 8002eb2:	440b      	add	r3, r1
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	440b      	add	r3, r1
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3303      	adds	r3, #3
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	440b      	add	r3, r1
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	3228      	adds	r2, #40	; 0x28
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	3301      	adds	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3c4      	bcc.n	8002e98 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8002f0e:	697b      	ldr	r3, [r7, #20]
    }
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	08013e74 	.word	0x08013e74

08002f34 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	08013e90 	.word	0x08013e90

08002f50 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
      data(0)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fbfa 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8002f60:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	605a      	str	r2, [r3, #4]
    {
    }
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	080140a8 	.word	0x080140a8

08002f7c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	b2ca      	uxtb	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	0a19      	lsrs	r1, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2ca      	uxtb	r2, r1
 8002faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	0c19      	lsrs	r1, r3, #16
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b2ca      	uxtb	r2, r1
 8002fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0e19      	lsrs	r1, r3, #24
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3303      	adds	r3, #3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b2ca      	uxtb	r2, r1
 8002fca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    }
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	440b      	add	r3, r1
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3302      	adds	r3, #2
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	440b      	add	r3, r1
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	4313      	orrs	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3303      	adds	r3, #3
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	440b      	add	r3, r1
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4313      	orrs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3304      	adds	r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
     return offset;
 8003042:	68fb      	ldr	r3, [r7, #12]
    }
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	08013eb4 	.word	0x08013eb4

0800306c <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	08013ec8 	.word	0x08013ec8

08003088 <_ZN9vesc_msgs9VescStateC1Ev>:
      enum { FAULT_CODE_DRV8302 = 3 };
      enum { FAULT_CODE_ABS_OVER_CURRENT = 4 };
      enum { FAULT_CODE_OVER_TEMP_FET = 5 };
      enum { FAULT_CODE_OVER_TEMP_MOTOR = 6 };

    VescState():
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
      charge_regen(0),
      energy_drawn(0),
      energy_regen(0),
      displacement(0),
      distance_traveled(0),
      fault_code(0)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fb5e 	bl	8001754 <_ZN3ros3MsgC1Ev>
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <_ZN9vesc_msgs9VescStateC1Ev+0x88>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
      voltage_input(0),
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
      temperature_pcb(0),
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
      current_motor(0),
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
      current_input(0),
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
      speed(0),
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
      duty_cycle(0),
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
      charge_drawn(0),
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
      charge_regen(0),
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
      energy_drawn(0),
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
      energy_regen(0),
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
      displacement(0),
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
      distance_traveled(0),
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
      fault_code(0)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08014090 	.word	0x08014090

08003114 <_ZNK9vesc_msgs9VescState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->voltage_input);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	441a      	add	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edd3 7a01 	vldr	s15, [r3, #4]
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	4610      	mov	r0, r2
 8003134:	f7fe f9c5 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature_pcb);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	edd3 7a02 	vldr	s15, [r3, #8]
 800314c:	eeb0 0a67 	vmov.f32	s0, s15
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe f9b6 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_motor);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edd3 7a03 	vldr	s15, [r3, #12]
 800316a:	eeb0 0a67 	vmov.f32	s0, s15
 800316e:	4610      	mov	r0, r2
 8003170:	f7fe f9a7 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_input);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	edd3 7a04 	vldr	s15, [r3, #16]
 8003188:	eeb0 0a67 	vmov.f32	s0, s15
 800318c:	4610      	mov	r0, r2
 800318e:	f7fe f998 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031a6:	eeb0 0a67 	vmov.f32	s0, s15
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fe f989 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->duty_cycle);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80031c4:	eeb0 0a67 	vmov.f32	s0, s15
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7fe f97a 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_drawn);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	edd3 7a07 	vldr	s15, [r3, #28]
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7fe f96b 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_regen);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003200:	eeb0 0a67 	vmov.f32	s0, s15
 8003204:	4610      	mov	r0, r2
 8003206:	f7fe f95c 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_drawn);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800321e:	eeb0 0a67 	vmov.f32	s0, s15
 8003222:	4610      	mov	r0, r2
 8003224:	f7fe f94d 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_regen);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800323c:	eeb0 0a67 	vmov.f32	s0, s15
 8003240:	4610      	mov	r0, r2
 8003242:	f7fe f93e 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->displacement);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	4610      	mov	r0, r2
 8003260:	f7fe f92f 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->distance_traveled);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003278:	eeb0 0a67 	vmov.f32	s0, s15
 800327c:	4610      	mov	r0, r2
 800327e:	f7fe f920 	bl	80014c2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.real = this->fault_code;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_fault_code.base >> (8 * 0)) & 0xFF;
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4413      	add	r3, r2
 8003298:	b2ca      	uxtb	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_fault_code.base >> (8 * 1)) & 0xFF;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	0a19      	lsrs	r1, r3, #8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	b2ca      	uxtb	r2, r1
 80032aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_fault_code.base >> (8 * 2)) & 0xFF;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	0c19      	lsrs	r1, r3, #16
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3302      	adds	r3, #2
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	b2ca      	uxtb	r2, r1
 80032ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_fault_code.base >> (8 * 3)) & 0xFF;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0e19      	lsrs	r1, r3, #24
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3303      	adds	r3, #3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	b2ca      	uxtb	r2, r1
 80032ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->fault_code);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80032d2:	68fb      	ldr	r3, [r7, #12]
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_ZN9vesc_msgs9VescState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->voltage_input));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	441a      	add	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fe f97f 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature_pcb));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3308      	adds	r3, #8
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7fe f972 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_motor));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	330c      	adds	r3, #12
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f7fe f965 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_input));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3310      	adds	r3, #16
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7fe f958 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3314      	adds	r3, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f7fe f94b 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->duty_cycle));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3318      	adds	r3, #24
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7fe f93e 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_drawn));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	441a      	add	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	331c      	adds	r3, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fe f931 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_regen));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe f924 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_drawn));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3324      	adds	r3, #36	; 0x24
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe f917 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_regen));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3328      	adds	r3, #40	; 0x28
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe f90a 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->displacement));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	332c      	adds	r3, #44	; 0x2c
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7fe f8fd 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->distance_traveled));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3330      	adds	r3, #48	; 0x30
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7fe f8f0 	bl	80015fa <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.base = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	440a      	add	r2, r1
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	440b      	add	r3, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	4313      	orrs	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3302      	adds	r3, #2
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	440b      	add	r3, r1
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	4313      	orrs	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3303      	adds	r3, #3
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	440b      	add	r3, r1
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	4313      	orrs	r3, r2
 8003468:	60bb      	str	r3, [r7, #8]
      this->fault_code = u_fault_code.real;
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->fault_code);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3304      	adds	r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
     return offset;
 8003476:	68fb      	ldr	r3, [r7, #12]
    }
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZN9vesc_msgs9VescState7getTypeEv>:

    const char * getType(){ return "vesc_msgs/VescState"; };
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <_ZN9vesc_msgs9VescState7getTypeEv+0x18>)
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	08013eec 	.word	0x08013eec

0800349c <_ZN9vesc_msgs9VescState6getMD5Ev>:
    const char * getMD5(){ return "81214bb4c1945e7c159bd76ec397ac04"; };
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <_ZN9vesc_msgs9VescState6getMD5Ev+0x18>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	08013f00 	.word	0x08013f00

080034b8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	08014120 	.word	0x08014120

080034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ffe8 	bl	80034b8 <_ZN3ros15NodeHandleBase_C1Ev>
 80034e8:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f866 	bl	80025c4 <_ZN13STM32HardwareC1Ev>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f010 fb46 	bl	8013bb6 <memset>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f010 fb3d 	bl	8013bb6 <memset>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003542:	2264      	movs	r2, #100	; 0x64
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f010 fb35 	bl	8013bb6 <memset>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8003552:	2264      	movs	r2, #100	; 0x64
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f010 fb2d 	bl	8013bb6 <memset>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fc42 	bl	8001e3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	0801407c 	.word	0x0801407c

080035c8 <_Z13read_ble_dataPh>:


//char hello[] = "Hello world from STM32!";


HAL_StatusTypeDef read_ble_data(uint8_t* data){
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 80035d0:	4bac      	ldr	r3, [pc, #688]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e01e      	b.n	8003616 <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2bfe      	cmp	r3, #254	; 0xfe
 80035e2:	d115      	bne.n	8003610 <_Z13read_ble_dataPh+0x48>
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	425a      	negs	r2, r3
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	f002 021f 	and.w	r2, r2, #31
 80035f2:	bf58      	it	pl
 80035f4:	4253      	negpl	r3, r2
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b9e      	ldr	r3, [pc, #632]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 800360c:	701a      	strb	r2, [r3, #0]
			break;
 800360e:	e009      	b.n	8003624 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	3301      	adds	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	4b9b      	ldr	r3, [pc, #620]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f103 021f 	add.w	r2, r3, #31
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	429a      	cmp	r2, r3
 8003622:	dad9      	bge.n	80035d8 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003624:	4b97      	ldr	r3, [pc, #604]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3302      	adds	r3, #2
 800362a:	425a      	negs	r2, r3
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	f002 021f 	and.w	r2, r2, #31
 8003634:	bf58      	it	pl
 8003636:	4253      	negpl	r3, r2
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <_Z13read_ble_dataPh+0x80>
 8003644:	2301      	movs	r3, #1
 8003646:	e116      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003648:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	3303      	adds	r3, #3
 800364e:	425a      	negs	r2, r3
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	f002 021f 	and.w	r2, r2, #31
 8003658:	bf58      	it	pl
 800365a:	4253      	negpl	r3, r2
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d001      	beq.n	800366c <_Z13read_ble_dataPh+0xa4>
 8003668:	2301      	movs	r3, #1
 800366a:	e104      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3304      	adds	r3, #4
 8003672:	425a      	negs	r2, r3
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	f002 021f 	and.w	r2, r2, #31
 800367c:	bf58      	it	pl
 800367e:	4253      	negpl	r3, r2
 8003680:	461a      	mov	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b30      	cmp	r3, #48	; 0x30
 800368a:	d001      	beq.n	8003690 <_Z13read_ble_dataPh+0xc8>
 800368c:	2301      	movs	r3, #1
 800368e:	e0f2      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003690:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3305      	adds	r3, #5
 8003696:	425a      	negs	r2, r3
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	bf58      	it	pl
 80036a2:	4253      	negpl	r3, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b5c      	cmp	r3, #92	; 0x5c
 80036ae:	d001      	beq.n	80036b4 <_Z13read_ble_dataPh+0xec>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0e0      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 80036b4:	4b73      	ldr	r3, [pc, #460]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3306      	adds	r3, #6
 80036ba:	425a      	negs	r2, r3
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	f002 021f 	and.w	r2, r2, #31
 80036c4:	bf58      	it	pl
 80036c6:	4253      	negpl	r3, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b17      	cmp	r3, #23
 80036d2:	d001      	beq.n	80036d8 <_Z13read_ble_dataPh+0x110>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0ce      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 80036d8:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	3307      	adds	r3, #7
 80036de:	425a      	negs	r2, r3
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	bf58      	it	pl
 80036ea:	4253      	negpl	r3, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d001      	beq.n	80036fc <_Z13read_ble_dataPh+0x134>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0bc      	b.n	8003876 <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 80036fc:	4b61      	ldr	r3, [pc, #388]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	3309      	adds	r3, #9
 8003702:	425a      	negs	r2, r3
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	bf58      	it	pl
 800370e:	4253      	negpl	r3, r2
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b21a      	sxth	r2, r3
 800371a:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 800371c:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	330b      	adds	r3, #11
 8003724:	425a      	negs	r2, r3
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	bf58      	it	pl
 8003730:	4253      	negpl	r3, r2
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d008      	beq.n	8003750 <_Z13read_ble_dataPh+0x188>
 800373e:	4b52      	ldr	r3, [pc, #328]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	b29b      	uxth	r3, r3
 8003746:	425b      	negs	r3, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	b21a      	sxth	r2, r3
 800374c:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 800374e:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	330e      	adds	r3, #14
 8003756:	425a      	negs	r2, r3
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	bf58      	it	pl
 8003762:	4253      	negpl	r3, r2
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	4619      	mov	r1, r3
 8003770:	4b44      	ldr	r3, [pc, #272]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	330d      	adds	r3, #13
 8003776:	425a      	negs	r2, r3
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	f002 021f 	and.w	r2, r2, #31
 8003780:	bf58      	it	pl
 8003782:	4253      	negpl	r3, r2
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	ea41 0203 	orr.w	r2, r1, r3
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	461a      	mov	r2, r3
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 800379c:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	330f      	adds	r3, #15
 80037a4:	425a      	negs	r2, r3
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	bf58      	it	pl
 80037b0:	4253      	negpl	r3, r2
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80037c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 80037cc:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	3310      	adds	r3, #16
 80037d6:	425a      	negs	r2, r3
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	f002 021f 	and.w	r2, r2, #31
 80037e0:	bf58      	it	pl
 80037e2:	4253      	negpl	r3, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3311      	adds	r3, #17
 80037fa:	425a      	negs	r2, r3
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	bf58      	it	pl
 8003806:	4253      	negpl	r3, r2
 8003808:	461a      	mov	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	430b      	orrs	r3, r1
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800381a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800381e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003822:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 8003828:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	3312      	adds	r3, #18
 8003832:	425a      	negs	r2, r3
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	f002 021f 	and.w	r2, r2, #31
 800383c:	bf58      	it	pl
 800383e:	4253      	negpl	r3, r2
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	b29a      	uxth	r2, r3
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <_Z13read_ble_dataPh+0x2bc>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	3313      	adds	r3, #19
 8003854:	4259      	negs	r1, r3
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	f001 011f 	and.w	r1, r1, #31
 800385e:	bf58      	it	pl
 8003860:	424b      	negpl	r3, r1
 8003862:	4619      	mov	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	440b      	add	r3, r1
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <_Z13read_ble_dataPh+0x2c0>)
 8003872:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2400194c 	.word	0x2400194c
 8003888:	2400186c 	.word	0x2400186c

0800388c <_Z15read_speed_dataPm>:

HAL_StatusTypeDef read_speed_data(uint32_t* data){
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e00a      	b.n	80038b0 <_Z15read_speed_dataPm+0x24>
		if(data[i]==acsr)break;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <_Z15read_speed_dataPm+0x7c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d006      	beq.n	80038b8 <_Z15read_speed_dataPm+0x2c>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	3301      	adds	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d9f1      	bls.n	800389a <_Z15read_speed_dataPm+0xe>
 80038b6:	e000      	b.n	80038ba <_Z15read_speed_dataPm+0x2e>
		if(data[i]==acsr)break;
 80038b8:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b11      	cmp	r3, #17
 80038be:	d101      	bne.n	80038c4 <_Z15read_speed_dataPm+0x38>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e01c      	b.n	80038fe <_Z15read_speed_dataPm+0x72>

	memcpy(speed,&data[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	18d1      	adds	r1, r2, r3
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	f1c3 0310 	rsb	r3, r3, #16
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	461a      	mov	r2, r3
 80038d8:	480c      	ldr	r0, [pc, #48]	; (800390c <_Z15read_speed_dataPm+0x80>)
 80038da:	f010 f9b1 	bl	8013c40 <memcpy>
	if(i){
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <_Z15read_speed_dataPm+0x70>
		memcpy(&speed[SPEED_PIN_COUNT-i],data,i*sizeof(uint32_t));
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	f1c3 0310 	rsb	r3, r3, #16
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <_Z15read_speed_dataPm+0x80>)
 80038ee:	1898      	adds	r0, r3, r2
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	f010 f9a2 	bl	8013c40 <memcpy>
	}
	return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	41435352 	.word	0x41435352
 800390c:	240018e4 	.word	0x240018e4

08003910 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_UART_TxCpltCallback+0x28>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d106      	bne.n	800392e <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003920:	4806      	ldr	r0, [pc, #24]	; (800393c <HAL_UART_TxCpltCallback+0x2c>)
 8003922:	f000 fa64 	bl	8003dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003926:	4603      	mov	r3, r0
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fea5 	bl	8002678 <_ZN13STM32Hardware5flushEv>
	}

}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	24000204 	.word	0x24000204
 800393c:	24000e5c 	.word	0x24000e5c

08003940 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <HAL_UART_RxCpltCallback+0x48>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d107      	bne.n	8003960 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8003950:	480e      	ldr	r0, [pc, #56]	; (800398c <HAL_UART_RxCpltCallback+0x4c>)
 8003952:	f000 fa4c 	bl	8003dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003956:	4603      	mov	r3, r0
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fe4f 	bl	80025fc <_ZN13STM32Hardware10reset_rbufEv>
		read_ble_data(esc_receive);
	}else if(huart==&huart_f103){
		read_speed_data(speed_receive);
	}

}
 800395e:	e00e      	b.n	800397e <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_esc){
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_UART_RxCpltCallback+0x50>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <HAL_UART_RxCpltCallback+0x30>
		read_ble_data(esc_receive);
 8003968:	480a      	ldr	r0, [pc, #40]	; (8003994 <HAL_UART_RxCpltCallback+0x54>)
 800396a:	f7ff fe2d 	bl	80035c8 <_Z13read_ble_dataPh>
}
 800396e:	e006      	b.n	800397e <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_f103){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_UART_RxCpltCallback+0x58>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_UART_RxCpltCallback+0x3e>
		read_speed_data(speed_receive);
 8003978:	4808      	ldr	r0, [pc, #32]	; (800399c <HAL_UART_RxCpltCallback+0x5c>)
 800397a:	f7ff ff87 	bl	800388c <_Z15read_speed_dataPm>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	24000204 	.word	0x24000204
 800398c:	24000e5c 	.word	0x24000e5c
 8003990:	24000170 	.word	0x24000170
 8003994:	24001880 	.word	0x24001880
 8003998:	24000298 	.word	0x24000298
 800399c:	240018a0 	.word	0x240018a0

080039a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==LPUART1) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <HAL_UART_ErrorCallback+0x3c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d105      	bne.n	80039be <HAL_UART_ErrorCallback+0x1e>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80039b2:	2220      	movs	r2, #32
 80039b4:	490a      	ldr	r1, [pc, #40]	; (80039e0 <HAL_UART_ErrorCallback+0x40>)
 80039b6:	480b      	ldr	r0, [pc, #44]	; (80039e4 <HAL_UART_ErrorCallback+0x44>)
 80039b8:	f00d f8e4 	bl	8010b84 <HAL_UART_Receive_DMA>
    }else if(UartHandle->Instance==UART5) {
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
    }
}
 80039bc:	e009      	b.n	80039d2 <HAL_UART_ErrorCallback+0x32>
    }else if(UartHandle->Instance==UART5) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_UART_ErrorCallback+0x48>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d104      	bne.n	80039d2 <HAL_UART_ErrorCallback+0x32>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 80039c8:	2244      	movs	r2, #68	; 0x44
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <HAL_UART_ErrorCallback+0x4c>)
 80039cc:	4808      	ldr	r0, [pc, #32]	; (80039f0 <HAL_UART_ErrorCallback+0x50>)
 80039ce:	f00d f8d9 	bl	8010b84 <HAL_UART_Receive_DMA>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	58000c00 	.word	0x58000c00
 80039e0:	24001880 	.word	0x24001880
 80039e4:	24000170 	.word	0x24000170
 80039e8:	40005000 	.word	0x40005000
 80039ec:	240018a0 	.word	0x240018a0
 80039f0:	24000298 	.word	0x24000298

080039f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
//		freq=temp_freq;
//		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
//	}


}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM3){
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
//
//	}
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	0000      	movs	r0, r0
	...

08003a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a46      	ldr	r2, [pc, #280]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d139      	bne.n	8003aa6 <HAL_TIM_PeriodElapsedCallback+0x86>
		vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 8003a32:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a40:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x120>
 8003a44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a4c:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a4e:	edc3 7a06 	vstr	s15, [r3, #24]
		vesc_state.voltage_input = esc_sensor.voltage;
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a58:	6053      	str	r3, [r2, #4]
		vesc_state.current_input = esc_sensor.current;
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a60:	6113      	str	r3, [r2, #16]
		vesc_state.temperature_pcb = esc_sensor.temperature;
 8003a62:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003a64:	8a1b      	ldrh	r3, [r3, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a70:	edc3 7a02 	vstr	s15, [r3, #8]
		vesc_state.speed = esc_sensor.rpm;
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a82:	edc3 7a05 	vstr	s15, [r3, #20]

		vesc_pub.publish(&vesc_state);
 8003a86:	4932      	ldr	r1, [pc, #200]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003a88:	4832      	ldr	r0, [pc, #200]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003a8a:	f7fe fcba 	bl	8002402 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wheel_speed_pub.publish(&wheel_speed);
 8003a8e:	4932      	ldr	r1, [pc, #200]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003a90:	4832      	ldr	r0, [pc, #200]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003a92:	f7fe fcb6 	bl	8002402 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		force_pub.publish(&forces);
 8003a96:	4932      	ldr	r1, [pc, #200]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003a98:	4832      	ldr	r0, [pc, #200]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003a9a:	f7fe fcb2 	bl	8002402 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003a9e:	4832      	ldr	r0, [pc, #200]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003aa0:	f000 f9b1 	bl	8003e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 8003aa4:	e047      	b.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0x116>
	}else if(htim->Instance==TIM7){
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d142      	bne.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0x116>
		//no esc topic received
		if(pid_its++>10){
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	b2d1      	uxtb	r1, r2
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003aba:	7011      	strb	r1, [r2, #0]
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	bf8c      	ite	hi
 8003ac0:	2301      	movhi	r3, #1
 8003ac2:	2300      	movls	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_TIM_PeriodElapsedCallback+0xbc>
			pid_its=10;
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003acc:	220a      	movs	r2, #10
 8003ace:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,parameters.esc_offset);
 8003ad0:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ad2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003ad4:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
			return;
 8003ada:	e02c      	b.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0x116>
		}

		if(pid_mode==PID_Manual){
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d128      	bne.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0x116>
			uint32_t esc_pulse=esc_duty_cycle_set*(parameters.esc_max-parameters.esc_offset)+parameters.esc_offset;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003af8:	4b21      	ldr	r3, [pc, #132]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b16:	ee17 3a90 	vmov	r3, s15
 8003b1a:	60fb      	str	r3, [r7, #12]
			//if(pre_esc_pulse==esc_pulse) no action needed.
			if(pre_esc_pulse!=esc_pulse){
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d007      	beq.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0x116>
				pre_esc_pulse=esc_pulse;
 8003b26:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pre_esc_pulse);
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38
//	}
//	if(htim->Instance==TIM15){
//		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
//	}
}
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	f3af 8000 	nop.w
 8003b40:	00000000 	.word	0x00000000
 8003b44:	40590000 	.word	0x40590000
 8003b48:	40001000 	.word	0x40001000
 8003b4c:	2400186c 	.word	0x2400186c
 8003b50:	24001798 	.word	0x24001798
 8003b54:	24001830 	.word	0x24001830
 8003b58:	24001800 	.word	0x24001800
 8003b5c:	24001858 	.word	0x24001858
 8003b60:	240017d0 	.word	0x240017d0
 8003b64:	24001844 	.word	0x24001844
 8003b68:	24000e5c 	.word	0x24000e5c
 8003b6c:	40001400 	.word	0x40001400
 8003b70:	24001924 	.word	0x24001924
 8003b74:	24000004 	.word	0x24000004
 8003b78:	240007d0 	.word	0x240007d0
 8003b7c:	24000000 	.word	0x24000000
 8003b80:	24001928 	.word	0x24001928
 8003b84:	24001938 	.word	0x24001938

08003b88 <_Z14speed_callbackRKN8std_msgs7Float32E>:
	default:
		break;
	}
}

void speed_callback(const std_msgs::Float32& msg){
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	pid_mode = PID_Auto;
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <_Z14speed_callbackRKN8std_msgs7Float32E+0x2c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <_Z14speed_callbackRKN8std_msgs7Float32E+0x30>)
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	24000000 	.word	0x24000000
 8003bb4:	24001924 	.word	0x24001924
 8003bb8:	2400192c 	.word	0x2400192c

08003bbc <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

void duty_cycle_callback(const std_msgs::Float32& msg){
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	pid_mode=PID_Manual;
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x28>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
	pid_its=0;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x2c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
	esc_duty_cycle_set = msg.data;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x30>)
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	24000000 	.word	0x24000000
 8003be8:	24001924 	.word	0x24001924
 8003bec:	24001928 	.word	0x24001928

08003bf0 <_Z17steering_callbackRKN8std_msgs7Float32E>:

void steering_callback(const std_msgs::Float32& msg){
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	uint32_t steering_pulse = parameters.steering_ratio*(msg.data-parameters.steering_offset);
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 8003bfa:	ed93 7a07 	vldr	s14, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <_Z17steering_callbackRKN8std_msgs7Float32E+0x58>)
 8003c06:	8b1b      	ldrh	r3, [r3, #24]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	60fb      	str	r3, [r7, #12]
	if(steering_pulse != pre_steering_pulse){
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d007      	beq.n	8003c3c <_Z17steering_callbackRKN8std_msgs7Float32E+0x4c>
		pre_steering_pulse = steering_pulse;
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pre_steering_pulse);
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <_Z17steering_callbackRKN8std_msgs7Float32E+0x60>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <_Z17steering_callbackRKN8std_msgs7Float32E+0x5c>)
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	24000004 	.word	0x24000004
 8003c4c:	24001934 	.word	0x24001934
 8003c50:	240007d0 	.word	0x240007d0

08003c54 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

void brake_callback(const std_msgs::Float32MultiArray& msg){
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*tim2_arr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	ed93 7a00 	vldr	s14, [r3]
 8003c64:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	ee07 3a90 	vmov	s15, r3
 8003c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c78:	ee17 3a90 	vmov	r3, s15
 8003c7c:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 8003c7e:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d006      	beq.n	8003c96 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 8003c88:	4a34      	ldr	r2, [pc, #208]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*tim2_arr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	ed93 7a00 	vldr	s14, [r3]
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb4:	ee17 3a90 	vmov	r3, s15
 8003cb8:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 8003cba:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d006      	beq.n	8003cd2 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 8003cc4:	4a25      	ldr	r2, [pc, #148]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*tim2_arr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf0:	ee17 3a90 	vmov	r3, s15
 8003cf4:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d006      	beq.n	8003d0e <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 8003d00:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*tim2_arr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	330c      	adds	r3, #12
 8003d14:	ed93 7a00 	vldr	s14, [r3]
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2c:	ee17 3a90 	vmov	r3, s15
 8003d30:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d006      	beq.n	8003d4a <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8003d3c:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	24001930 	.word	0x24001930
 8003d5c:	2400193c 	.word	0x2400193c
 8003d60:	24000784 	.word	0x24000784

08003d64 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e00c      	b.n	8003d8e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	fa22 f103 	lsr.w	r1, r2, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	b2ca      	uxtb	r2, r1
 8003d86:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d9ef      	bls.n	8003d74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e010      	b.n	8003dda <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	00d2      	lsls	r2, r2, #3
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d9eb      	bls.n	8003db8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
  }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fcd2 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8003e18:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d903      	bls.n	8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d903      	bls.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d014      	beq.n	8003e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fcab 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf8c      	ite	hi
 8003e76:	2301      	movhi	r3, #1
 8003e78:	2300      	movls	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8003e80:	f06f 0301 	mvn.w	r3, #1
 8003e84:	e194      	b.n	80041b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fbc7 	bl	800261e <_ZN13STM32Hardware4readEv>
 8003e90:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f2c0 8174 	blt.w	8004182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003eb0:	2b07      	cmp	r3, #7
 8003eb2:	d11e      	bne.n	8003ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003eba:	1c59      	adds	r1, r3, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	b2d1      	uxtb	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	460a      	mov	r2, r1
 8003ecc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1b4      	bne.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2208      	movs	r2, #8
 8003eec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ef0:	e7af      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d128      	bne.n	8003f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2bff      	cmp	r3, #255	; 0xff
 8003f00:	d10d      	bne.n	8003f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f103 0214 	add.w	r2, r3, #20
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003f1c:	e799      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fc4a 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bf8c      	ite	hi
 8003f36:	2301      	movhi	r3, #1
 8003f38:	2300      	movls	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d088      	beq.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003f48:	f06f 0301 	mvn.w	r3, #1
 8003f4c:	e130      	b.n	80041b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d118      	bne.n	8003f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f5c:	d107      	bne.n	8003f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f6c:	e771      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f af68 	bne.w	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f970 	bl	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003f88:	e763      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d113      	bne.n	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003fba:	e74a      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d110      	bne.n	8003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003fe6:	e734      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d116      	bne.n	8004020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003ff8:	425a      	negs	r2, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	bf58      	it	pl
 8004000:	4253      	negpl	r3, r2
 8004002:	2bff      	cmp	r3, #255	; 0xff
 8004004:	d107      	bne.n	8004016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004014:	e71d      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800401e:	e718      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10f      	bne.n	800404a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004048:	e703      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004050:	2b06      	cmp	r3, #6
 8004052:	d117      	bne.n	8004084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2207      	movs	r2, #7
 800406a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f aeec 	bne.w	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004082:	e6e6      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800408a:	2b08      	cmp	r3, #8
 800408c:	f47f aee1 	bne.w	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800409e:	425a      	negs	r2, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	bf58      	it	pl
 80040a6:	4253      	negpl	r3, r2
 80040a8:	2bff      	cmp	r3, #255	; 0xff
 80040aa:	f47f aed2 	bne.w	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d110      	bne.n	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8d5 	bl	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8f0 	bl	80042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d8:	e06a      	b.n	80041b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80040e0:	2b0a      	cmp	r3, #10
 80040e2:	d107      	bne.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f9b9 	bl	8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80040f2:	e6ae      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d10e      	bne.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fd ffd4 	bl	80020ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800411a:	e69a      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004122:	2b0b      	cmp	r3, #11
 8004124:	d104      	bne.n	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800412e:	e690      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004136:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f43f ae84 	beq.w	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004150:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f202 2222 	addw	r2, r2, #546	; 0x222
 800415a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004164:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800417c:	4611      	mov	r1, r2
 800417e:	4798      	blx	r3
    while (true)
 8004180:	e667      	b.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004182:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00f      	beq.n	80041ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800419c:	4293      	cmp	r3, r2
 800419e:	d906      	bls.n	80041ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f861 	bl	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 80041ae:	2300      	movs	r3, #0
  }
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	08014108 	.word	0x08014108

080041d8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ffe5 	bl	80041b8 <_ZN3ros11Subscriber_C1Ev>
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	330c      	adds	r3, #12
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fea9 	bl	8002f50 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]
  };
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	08014064 	.word	0x08014064

08004220 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ffc1 	bl	80041b8 <_ZN3ros11Subscriber_C1Ev>
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	330c      	adds	r3, #12
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fd4b 	bl	8002cdc <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]
  };
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	0801404c 	.word	0x0801404c

08004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fa7d 	bl	8001774 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f107 020c 	add.w	r2, r7, #12
 8004284:	210a      	movs	r1, #10
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
    rt_time = hardware_.time();
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fa94 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8004294:	4602      	mov	r2, r0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800429c:	bf00      	nop
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b08b      	sub	sp, #44	; 0x2c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd fb4f 	bl	8001954 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ba:	e062      	b.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d056      	beq.n	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4608      	mov	r0, r1
 800431c:	4798      	blx	r3
 800431e:	4603      	mov	r3, r0
 8004320:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4608      	mov	r0, r1
 800434a:	4798      	blx	r3
 800434c:	4603      	mov	r3, r0
 800434e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004354:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681c      	ldr	r4, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f85d 	bl	800242a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004370:	4601      	mov	r1, r0
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	461a      	mov	r2, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	3301      	adds	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b18      	cmp	r3, #24
 8004386:	dd99      	ble.n	80042bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	e05e      	b.n	800444c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d053      	beq.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4608      	mov	r0, r1
 80043e0:	4798      	blx	r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4608      	mov	r0, r1
 8004406:	4798      	blx	r3
 8004408:	4603      	mov	r3, r0
 800440a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800440c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004410:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681c      	ldr	r4, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	f202 2222 	addw	r2, r2, #546	; 0x222
 800442c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4608      	mov	r0, r1
 8004438:	4798      	blx	r3
 800443a:	4601      	mov	r1, r0
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	461a      	mov	r2, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b18      	cmp	r3, #24
 8004450:	dd9d      	ble.n	800438e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800445a:	bf00      	nop
 800445c:	372c      	adds	r7, #44	; 0x2c
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}
	...

08004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800446e:	f107 0308 	add.w	r3, r7, #8
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd f97e 	bl	8001774 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe f99d 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8004482:	4602      	mov	r2, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd f9dd 	bl	8001854 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4915      	ldr	r1, [pc, #84]	; (80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80044a0:	fba1 1303 	umull	r1, r3, r1, r3
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	4413      	add	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80044aa:	6939      	ldr	r1, [r7, #16]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80044b0:	fba3 0302 	umull	r0, r3, r3, r2
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	440b      	add	r3, r1
 80044c8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80044ca:	f107 0308 	add.w	r3, r7, #8
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8a6 	bl	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe f96d 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	10624dd3 	.word	0x10624dd3
 80044f8:	000f4240 	.word	0x000f4240

080044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b63      	cmp	r3, #99	; 0x63
 800450c:	dd09      	ble.n	8004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800451e:	2300      	movs	r3, #0
 8004520:	e079      	b.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800452e:	3207      	adds	r2, #7
 8004530:	4611      	mov	r1, r2
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
 8004536:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	; 0xff
 800453c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	22fe      	movs	r2, #254	; 0xfe
 8004544:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b29b      	uxth	r3, r3
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29b      	uxth	r3, r3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800456e:	4413      	add	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	b21b      	sxth	r3, r3
 800458a:	121b      	asrs	r3, r3, #8
 800458c:	b21b      	sxth	r3, r3
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800459a:	2305      	movs	r3, #5
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00c      	b.n	80045ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3306      	adds	r3, #6
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	dded      	ble.n	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3307      	adds	r3, #7
 80045c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	425a      	negs	r2, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	bf58      	it	pl
 80045d4:	4253      	negpl	r3, r2
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	6179      	str	r1, [r7, #20]
 80045de:	43d2      	mvns	r2, r2
 80045e0:	b2d1      	uxtb	r1, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	460a      	mov	r2, r1
 80045e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f2:	dc0a      	bgt.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1d18      	adds	r0, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4619      	mov	r1, r3
 8004602:	f7fe f895 	bl	8002730 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e005      	b.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800460a:	4905      	ldr	r1, [pc, #20]	; (8004620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f849 	bl	80046a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	08013f90 	.word	0x08013f90

08004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe f8c2 	bl	80027bc <_ZN13STM32Hardware4timeEv>
 8004638:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4915      	ldr	r1, [pc, #84]	; (8004698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004642:	fba1 1303 	umull	r1, r3, r1, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800465a:	fba3 0302 	umull	r0, r3, r3, r2
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004664:	fb00 f303 	mul.w	r3, r0, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	1aca      	subs	r2, r1, r3
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004674:	4413      	add	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f001 fa0e 	bl	8005aac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	10624dd3 	.word	0x10624dd3
 800469c:	000f4240 	.word	0x000f4240
 80046a0:	3b9aca00 	.word	0x3b9aca00

080046a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	2103      	movs	r1, #3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f804 	bl	80046c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	460b      	mov	r3, r1
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fb02 	bl	8001cdc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
 80046da:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f107 0214 	add.w	r2, r7, #20
 80046ea:	2107      	movs	r1, #7
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	4798      	blx	r3
  }
 80046f0:	bf00      	nop
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_Z41__static_initialization_and_destruction_0ii>:
//  duty1=0;
//  freq2=1;
//  duty2=1;

  HAL_Delay(1000);
}
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d13a      	bne.n	800477e <_Z41__static_initialization_and_destruction_0ii+0x86>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470e:	4293      	cmp	r3, r2
 8004710:	d135      	bne.n	800477e <_Z41__static_initialization_and_destruction_0ii+0x86>
ros::NodeHandle nh;
 8004712:	481d      	ldr	r0, [pc, #116]	; (8004788 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004714:	f7fe fee0 	bl	80034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
vesc_msgs::VescState vesc_state;
 8004718:	481c      	ldr	r0, [pc, #112]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800471a:	f7fe fcb5 	bl	8003088 <_ZN9vesc_msgs9VescStateC1Ev>
std_msgs::Float32MultiArray forces;
 800471e:	481c      	ldr	r0, [pc, #112]	; (8004790 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004720:	f7fe fadc 	bl	8002cdc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wheel_speed;
 8004724:	481b      	ldr	r0, [pc, #108]	; (8004794 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004726:	f7fe fad9 	bl	8002cdc <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher vesc_pub("vesc_sensor", &vesc_state);
 800472a:	2300      	movs	r3, #0
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800472e:	491a      	ldr	r1, [pc, #104]	; (8004798 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004730:	481a      	ldr	r0, [pc, #104]	; (800479c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004732:	f7fd fe4f 	bl	80023d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher force_pub("forces", &forces);
 8004736:	2300      	movs	r3, #0
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800473a:	4919      	ldr	r1, [pc, #100]	; (80047a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800473c:	4819      	ldr	r0, [pc, #100]	; (80047a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800473e:	f7fd fe49 	bl	80023d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wheel_speed_pub("forces", &wheel_speed);
 8004742:	2300      	movs	r3, #0
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004746:	4916      	ldr	r1, [pc, #88]	; (80047a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004748:	4817      	ldr	r0, [pc, #92]	; (80047a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800474a:	f7fd fe43 	bl	80023d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 800474e:	2301      	movs	r3, #1
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004752:	4917      	ldr	r1, [pc, #92]	; (80047b0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004754:	4817      	ldr	r0, [pc, #92]	; (80047b4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004756:	f7ff fd3f 	bl	80041d8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 800475a:	2301      	movs	r3, #1
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800475e:	4917      	ldr	r1, [pc, #92]	; (80047bc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004760:	4817      	ldr	r0, [pc, #92]	; (80047c0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004762:	f7ff fd39 	bl	80041d8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8004766:	2301      	movs	r3, #1
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800476a:	4917      	ldr	r1, [pc, #92]	; (80047c8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800476c:	4817      	ldr	r0, [pc, #92]	; (80047cc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800476e:	f7ff fd33 	bl	80041d8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 8004772:	2301      	movs	r3, #1
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004776:	4917      	ldr	r1, [pc, #92]	; (80047d4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800477a:	f7ff fd51 	bl	8004220 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24000e5c 	.word	0x24000e5c
 800478c:	24001798 	.word	0x24001798
 8004790:	240017d0 	.word	0x240017d0
 8004794:	24001800 	.word	0x24001800
 8004798:	08013fcc 	.word	0x08013fcc
 800479c:	24001830 	.word	0x24001830
 80047a0:	08013fd8 	.word	0x08013fd8
 80047a4:	24001844 	.word	0x24001844
 80047a8:	24001858 	.word	0x24001858
 80047ac:	08003b89 	.word	0x08003b89
 80047b0:	08013fe0 	.word	0x08013fe0
 80047b4:	24001950 	.word	0x24001950
 80047b8:	08003bbd 	.word	0x08003bbd
 80047bc:	08013ff0 	.word	0x08013ff0
 80047c0:	2400196c 	.word	0x2400196c
 80047c4:	08003bf1 	.word	0x08003bf1
 80047c8:	08014004 	.word	0x08014004
 80047cc:	24001988 	.word	0x24001988
 80047d0:	08003c55 	.word	0x08003c55
 80047d4:	08014018 	.word	0x08014018
 80047d8:	240019a4 	.word	0x240019a4

080047dc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	330c      	adds	r3, #12
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fb07 	bl	8002e00 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	320c      	adds	r2, #12
 80047fa:	4610      	mov	r0, r2
 80047fc:	4798      	blx	r3
  }
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	330c      	adds	r3, #12
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fb74 	bl	8002f18 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8004830:	4603      	mov	r3, r0
  }
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	330c      	adds	r3, #12
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fb74 	bl	8002f34 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 800484c:	4603      	mov	r3, r0
  }
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	330c      	adds	r3, #12
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fbba 	bl	8002fe0 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	320c      	adds	r2, #12
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
  }
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
  }
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	330c      	adds	r3, #12
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fbd3 	bl	8003050 <_ZN8std_msgs7Float327getTypeEv>
 80048aa:	4603      	mov	r3, r0
  }
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	330c      	adds	r3, #12
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fbd3 	bl	800306c <_ZN8std_msgs7Float326getMD5Ev>
 80048c6:	4603      	mov	r3, r0
  }
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    return configured_;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <_GLOBAL__sub_I_nh>:
 80048ea:	b580      	push	{r7, lr}
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048f2:	2001      	movs	r0, #1
 80048f4:	f7ff ff00 	bl	80046f8 <_Z41__static_initialization_and_destruction_0ii>
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_MspInit+0x30>)
 8004904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <HAL_MspInit+0x30>)
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_MspInit+0x30>)
 8004914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	58024400 	.word	0x58024400

08004930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004938:	f107 031c 	add.w	r3, r7, #28
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <HAL_ADC_MspInit+0xec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d15f      	bne.n	8004a12 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004958:	4a31      	ldr	r2, [pc, #196]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 80049a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 80049ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_ADC_MspInit+0xf0>)
 80049be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 80049ca:	2333      	movs	r3, #51	; 0x33
 80049cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ce:	2303      	movs	r3, #3
 80049d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d6:	f107 031c 	add.w	r3, r7, #28
 80049da:	4619      	mov	r1, r3
 80049dc:	4811      	ldr	r0, [pc, #68]	; (8004a24 <HAL_ADC_MspInit+0xf4>)
 80049de:	f005 f957 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 80049e2:	2350      	movs	r3, #80	; 0x50
 80049e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049e6:	2303      	movs	r3, #3
 80049e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ee:	f107 031c 	add.w	r3, r7, #28
 80049f2:	4619      	mov	r1, r3
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <HAL_ADC_MspInit+0xf8>)
 80049f6:	f005 f94b 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 80049fa:	2303      	movs	r3, #3
 80049fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049fe:	2303      	movs	r3, #3
 8004a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f107 031c 	add.w	r3, r7, #28
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4807      	ldr	r0, [pc, #28]	; (8004a2c <HAL_ADC_MspInit+0xfc>)
 8004a0e:	f005 f93f 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a12:	bf00      	nop
 8004a14:	3730      	adds	r7, #48	; 0x30
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	58024400 	.word	0x58024400
 8004a24:	58020800 	.word	0x58020800
 8004a28:	58020000 	.word	0x58020000
 8004a2c:	58020400 	.word	0x58020400

08004a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0ba      	sub	sp, #232	; 0xe8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a48:	f107 0310 	add.w	r3, r7, #16
 8004a4c:	22c0      	movs	r2, #192	; 0xc0
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f00f f8b0 	bl	8013bb6 <memset>
  if(hi2c->Instance==I2C1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <HAL_I2C_MspInit+0xc8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d146      	bne.n	8004aee <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a60:	f04f 0208 	mov.w	r2, #8
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a72:	f107 0310 	add.w	r3, r7, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f006 fe2e 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8004a82:	f7fc fd19 	bl	80014b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aac:	2312      	movs	r3, #18
 8004aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004abe:	2304      	movs	r3, #4
 8004ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	480d      	ldr	r0, [pc, #52]	; (8004b00 <HAL_I2C_MspInit+0xd0>)
 8004acc:	f005 f8e0 	bl	8009c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004adc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_I2C_MspInit+0xcc>)
 8004ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004aee:	bf00      	nop
 8004af0:	37e8      	adds	r7, #232	; 0xe8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40005400 	.word	0x40005400
 8004afc:	58024400 	.word	0x58024400
 8004b00:	58020400 	.word	0x58020400

08004b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b0c4      	sub	sp, #272	; 0x110
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b12:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	60da      	str	r2, [r3, #12]
 8004b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b28:	22c0      	movs	r2, #192	; 0xc0
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f00f f842 	bl	8013bb6 <memset>
  if(huart->Instance==LPUART1)
 8004b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4aa6      	ldr	r2, [pc, #664]	; (8004dd8 <HAL_UART_MspInit+0x2d4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	f040 8084 	bne.w	8004c4e <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004b46:	f04f 0204 	mov.w	r2, #4
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f006 fdbb 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8004b68:	f7fc fca6 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004b6c:	4b9b      	ldr	r3, [pc, #620]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b72:	4a9a      	ldr	r2, [pc, #616]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b74:	f043 0308 	orr.w	r3, r3, #8
 8004b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b7c:	4b97      	ldr	r3, [pc, #604]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b90:	4a92      	ldr	r2, [pc, #584]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b9a:	4b90      	ldr	r3, [pc, #576]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ba8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004bac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4884      	ldr	r0, [pc, #528]	; (8004de0 <HAL_UART_MspInit+0x2dc>)
 8004bd0:	f005 f85e 	bl	8009c90 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8004bd4:	4b83      	ldr	r3, [pc, #524]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004bd6:	4a84      	ldr	r2, [pc, #528]	; (8004de8 <HAL_UART_MspInit+0x2e4>)
 8004bd8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8004bda:	4b82      	ldr	r3, [pc, #520]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004bdc:	2209      	movs	r2, #9
 8004bde:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be0:	4b80      	ldr	r3, [pc, #512]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be6:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bec:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bfa:	4b7a      	ldr	r3, [pc, #488]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c06:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c08:	4b76      	ldr	r3, [pc, #472]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004c0e:	4875      	ldr	r0, [pc, #468]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004c10:	f002 fa02 	bl	8007018 <HAL_DMA_Init>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8004c1a:	f7fc fc4d 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6e      	ldr	r2, [pc, #440]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004c2e:	4a6d      	ldr	r2, [pc, #436]	; (8004de4 <HAL_UART_MspInit+0x2e0>)
 8004c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	208e      	movs	r0, #142	; 0x8e
 8004c42:	f002 f9b4 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004c46:	208e      	movs	r0, #142	; 0x8e
 8004c48:	f002 f9cb 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c4c:	e241      	b.n	80050d2 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART4)
 8004c4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a64      	ldr	r2, [pc, #400]	; (8004dec <HAL_UART_MspInit+0x2e8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f040 80d1 	bne.w	8004e04 <HAL_UART_MspInit+0x300>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004c62:	f04f 0202 	mov.w	r2, #2
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f006 fd2d 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8004c84:	f7fc fc18 	bl	80014b8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8004c88:	4b54      	ldr	r3, [pc, #336]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c8e:	4a53      	ldr	r2, [pc, #332]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c98:	4b50      	ldr	r3, [pc, #320]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca6:	4b4d      	ldr	r3, [pc, #308]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cac:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004cae:	f043 0308 	orr.w	r3, r3, #8
 8004cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cb6:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <HAL_UART_MspInit+0x2d8>)
 8004cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ce2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4841      	ldr	r0, [pc, #260]	; (8004df0 <HAL_UART_MspInit+0x2ec>)
 8004cea:	f004 ffd1 	bl	8009c90 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8004cee:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004cf0:	4a41      	ldr	r2, [pc, #260]	; (8004df8 <HAL_UART_MspInit+0x2f4>)
 8004cf2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004cf4:	4b3f      	ldr	r3, [pc, #252]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004cf6:	223f      	movs	r2, #63	; 0x3f
 8004cf8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d06:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d0c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d14:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004d1a:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d20:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d26:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004d2c:	4831      	ldr	r0, [pc, #196]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d2e:	f002 f973 	bl	8007018 <HAL_DMA_Init>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_MspInit+0x238>
      Error_Handler();
 8004d38:	f7fc fbbe 	bl	80014b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_UART_MspInit+0x2f0>)
 8004d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d5c:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_UART_MspInit+0x2fc>)
 8004d5e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8004d60:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d66:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d68:	2240      	movs	r2, #64	; 0x40
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d78:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d92:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004d98:	4818      	ldr	r0, [pc, #96]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004d9a:	f002 f93d 	bl	8007018 <HAL_DMA_Init>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8004da4:	f7fc fb88 	bl	80014b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c
 8004db6:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <HAL_UART_MspInit+0x2f8>)
 8004db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2034      	movs	r0, #52	; 0x34
 8004dca:	f002 f8f0 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004dce:	2034      	movs	r0, #52	; 0x34
 8004dd0:	f002 f907 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
}
 8004dd4:	e17d      	b.n	80050d2 <HAL_UART_MspInit+0x5ce>
 8004dd6:	bf00      	nop
 8004dd8:	58000c00 	.word	0x58000c00
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	58020000 	.word	0x58020000
 8004de4:	24000454 	.word	0x24000454
 8004de8:	58025408 	.word	0x58025408
 8004dec:	40004c00 	.word	0x40004c00
 8004df0:	58020c00 	.word	0x58020c00
 8004df4:	240004cc 	.word	0x240004cc
 8004df8:	40020010 	.word	0x40020010
 8004dfc:	24000544 	.word	0x24000544
 8004e00:	40020028 	.word	0x40020028
  else if(huart->Instance==UART5)
 8004e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4ab2      	ldr	r2, [pc, #712]	; (80050dc <HAL_UART_MspInit+0x5d8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f040 8087 	bne.w	8004f26 <HAL_UART_MspInit+0x422>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004e18:	f04f 0202 	mov.w	r2, #2
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f006 fc52 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8004e3a:	f7fc fb3d 	bl	80014b8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004e3e:	4ba8      	ldr	r3, [pc, #672]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e44:	4aa6      	ldr	r2, [pc, #664]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e4e:	4ba4      	ldr	r3, [pc, #656]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5c:	4ba0      	ldr	r3, [pc, #640]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e62:	4a9f      	ldr	r2, [pc, #636]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e64:	f043 0302 	orr.w	r3, r3, #2
 8004e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e6c:	4b9c      	ldr	r3, [pc, #624]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004e7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e82:	2302      	movs	r3, #2
 8004e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004e94:	230e      	movs	r3, #14
 8004e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4890      	ldr	r0, [pc, #576]	; (80050e4 <HAL_UART_MspInit+0x5e0>)
 8004ea2:	f004 fef5 	bl	8009c90 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8004ea6:	4b90      	ldr	r3, [pc, #576]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ea8:	4a90      	ldr	r2, [pc, #576]	; (80050ec <HAL_UART_MspInit+0x5e8>)
 8004eaa:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004eac:	4b8e      	ldr	r3, [pc, #568]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004eae:	2241      	movs	r2, #65	; 0x41
 8004eb0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eb2:	4b8d      	ldr	r3, [pc, #564]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eb8:	4b8b      	ldr	r3, [pc, #556]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ec6:	4b88      	ldr	r3, [pc, #544]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ecc:	4b86      	ldr	r3, [pc, #536]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004eda:	4b83      	ldr	r3, [pc, #524]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ee0:	4b81      	ldr	r3, [pc, #516]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004ee6:	4880      	ldr	r0, [pc, #512]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004ee8:	f002 f896 	bl	8007018 <HAL_DMA_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8004ef2:	f7fc fae1 	bl	80014b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a79      	ldr	r2, [pc, #484]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f06:	4a78      	ldr	r2, [pc, #480]	; (80050e8 <HAL_UART_MspInit+0x5e4>)
 8004f08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	2035      	movs	r0, #53	; 0x35
 8004f1a:	f002 f848 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004f1e:	2035      	movs	r0, #53	; 0x35
 8004f20:	f002 f85f 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
}
 8004f24:	e0d5      	b.n	80050d2 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART7)
 8004f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6f      	ldr	r2, [pc, #444]	; (80050f0 <HAL_UART_MspInit+0x5ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d16c      	bne.n	8005012 <HAL_UART_MspInit+0x50e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004f38:	f04f 0202 	mov.w	r2, #2
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f006 fbc2 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_UART_MspInit+0x45a>
      Error_Handler();
 8004f5a:	f7fc faad 	bl	80014b8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004f5e:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f64:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f7c:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f82:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f84:	f043 0310 	orr.w	r3, r3, #16
 8004f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f8c:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f9a:	4b51      	ldr	r3, [pc, #324]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa0:	4a4f      	ldr	r2, [pc, #316]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004faa:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8004fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4845      	ldr	r0, [pc, #276]	; (80050f4 <HAL_UART_MspInit+0x5f0>)
 8004fe0:	f004 fe56 	bl	8009c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fec:	2302      	movs	r3, #2
 8004fee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8004ffe:	230b      	movs	r3, #11
 8005000:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005004:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005008:	4619      	mov	r1, r3
 800500a:	483b      	ldr	r0, [pc, #236]	; (80050f8 <HAL_UART_MspInit+0x5f4>)
 800500c:	f004 fe40 	bl	8009c90 <HAL_GPIO_Init>
}
 8005010:	e05f      	b.n	80050d2 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==USART3)
 8005012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005016:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a37      	ldr	r2, [pc, #220]	; (80050fc <HAL_UART_MspInit+0x5f8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d156      	bne.n	80050d2 <HAL_UART_MspInit+0x5ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005024:	f04f 0202 	mov.w	r2, #2
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005030:	2300      	movs	r3, #0
 8005032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800503a:	4618      	mov	r0, r3
 800503c:	f006 fb4c 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_UART_MspInit+0x546>
      Error_Handler();
 8005046:	f7fc fa37 	bl	80014b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800504a:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 800504c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8005052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005056:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800505a:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 800505c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005060:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8005064:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005068:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005072:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005076:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_UART_MspInit+0x5dc>)
 800508a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508e:	f003 0202 	and.w	r2, r3, #2
 8005092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80050c0:	2307      	movs	r3, #7
 80050c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050ca:	4619      	mov	r1, r3
 80050cc:	4805      	ldr	r0, [pc, #20]	; (80050e4 <HAL_UART_MspInit+0x5e0>)
 80050ce:	f004 fddf 	bl	8009c90 <HAL_GPIO_Init>
}
 80050d2:	bf00      	nop
 80050d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40005000 	.word	0x40005000
 80050e0:	58024400 	.word	0x58024400
 80050e4:	58020400 	.word	0x58020400
 80050e8:	240005bc 	.word	0x240005bc
 80050ec:	40020040 	.word	0x40020040
 80050f0:	40007800 	.word	0x40007800
 80050f4:	58021000 	.word	0x58021000
 80050f8:	58020000 	.word	0x58020000
 80050fc:	40004800 	.word	0x40004800

08005100 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b0bc      	sub	sp, #240	; 0xf0
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005118:	f107 0318 	add.w	r3, r7, #24
 800511c:	22c0      	movs	r2, #192	; 0xc0
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f00e fd48 	bl	8013bb6 <memset>
  if(hqspi->Instance==QUADSPI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a55      	ldr	r2, [pc, #340]	; (8005280 <HAL_QSPI_MspInit+0x180>)
 800512c:	4293      	cmp	r3, r2
 800512e:	f040 80a3 	bne.w	8005278 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8005132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800513e:	2300      	movs	r3, #0
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005142:	f107 0318 	add.w	r3, r7, #24
 8005146:	4618      	mov	r0, r3
 8005148:	f006 fac6 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8005152:	f7fc f9b1 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005156:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 8005158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800515c:	4a49      	ldr	r2, [pc, #292]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 800515e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005162:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 8005168:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800516c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005174:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 8005176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517a:	4a42      	ldr	r2, [pc, #264]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 800517c:	f043 0310 	orr.w	r3, r3, #16
 8005180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005184:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 8005186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 8005194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005198:	4a3a      	ldr	r2, [pc, #232]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 800519a:	f043 0302 	orr.w	r3, r3, #2
 800519e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 80051a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 80051b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b6:	4a33      	ldr	r2, [pc, #204]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 80051b8:	f043 0308 	orr.w	r3, r3, #8
 80051bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051c0:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_QSPI_MspInit+0x184>)
 80051c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051ce:	2304      	movs	r3, #4
 80051d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80051e6:	2309      	movs	r3, #9
 80051e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80051f0:	4619      	mov	r1, r3
 80051f2:	4825      	ldr	r0, [pc, #148]	; (8005288 <HAL_QSPI_MspInit+0x188>)
 80051f4:	f004 fd4c 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051f8:	2304      	movs	r3, #4
 80051fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005210:	2309      	movs	r3, #9
 8005212:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005216:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800521a:	4619      	mov	r1, r3
 800521c:	481b      	ldr	r0, [pc, #108]	; (800528c <HAL_QSPI_MspInit+0x18c>)
 800521e:	f004 fd37 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005222:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522a:	2302      	movs	r3, #2
 800522c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800523c:	2309      	movs	r3, #9
 800523e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005242:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005246:	4619      	mov	r1, r3
 8005248:	4811      	ldr	r0, [pc, #68]	; (8005290 <HAL_QSPI_MspInit+0x190>)
 800524a:	f004 fd21 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005254:	2302      	movs	r3, #2
 8005256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525a:	2300      	movs	r3, #0
 800525c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005260:	2300      	movs	r3, #0
 8005262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005266:	230a      	movs	r3, #10
 8005268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005270:	4619      	mov	r1, r3
 8005272:	4806      	ldr	r0, [pc, #24]	; (800528c <HAL_QSPI_MspInit+0x18c>)
 8005274:	f004 fd0c 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005278:	bf00      	nop
 800527a:	37f0      	adds	r7, #240	; 0xf0
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	52005000 	.word	0x52005000
 8005284:	58024400 	.word	0x58024400
 8005288:	58021000 	.word	0x58021000
 800528c:	58020400 	.word	0x58020400
 8005290:	58020c00 	.word	0x58020c00

08005294 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2a      	ldr	r2, [pc, #168]	; (800535c <HAL_SD_MspInit+0xc8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d14d      	bne.n	8005352 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80052bc:	4a28      	ldr	r2, [pc, #160]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80052cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052d4:	4b22      	ldr	r3, [pc, #136]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052da:	4a21      	ldr	r2, [pc, #132]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052e4:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_SD_MspInit+0xcc>)
 80052fa:	f043 0308 	orr.w	r3, r3, #8
 80052fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_SD_MspInit+0xcc>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005310:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005314:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8005322:	230c      	movs	r3, #12
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	4619      	mov	r1, r3
 800532c:	480d      	ldr	r0, [pc, #52]	; (8005364 <HAL_SD_MspInit+0xd0>)
 800532e:	f004 fcaf 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005332:	2304      	movs	r3, #4
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005336:	2302      	movs	r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533e:	2303      	movs	r3, #3
 8005340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8005342:	230c      	movs	r3, #12
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4619      	mov	r1, r3
 800534c:	4806      	ldr	r0, [pc, #24]	; (8005368 <HAL_SD_MspInit+0xd4>)
 800534e:	f004 fc9f 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	52007000 	.word	0x52007000
 8005360:	58024400 	.word	0x58024400
 8005364:	58020800 	.word	0x58020800
 8005368:	58020c00 	.word	0x58020c00

0800536c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b0bc      	sub	sp, #240	; 0xf0
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005384:	f107 0318 	add.w	r3, r7, #24
 8005388:	22c0      	movs	r2, #192	; 0xc0
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f00e fc12 	bl	8013bb6 <memset>
  if(hspi->Instance==SPI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a38      	ldr	r2, [pc, #224]	; (8005478 <HAL_SPI_MspInit+0x10c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d168      	bne.n	800546e <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800539c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053ac:	f107 0318 	add.w	r3, r7, #24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f006 f991 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80053bc:	f7fc f87c 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053c0:	4b2e      	ldr	r3, [pc, #184]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c6:	4a2d      	ldr	r2, [pc, #180]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053de:	4b27      	ldr	r3, [pc, #156]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e4:	4a25      	ldr	r2, [pc, #148]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053e6:	f043 0308 	orr.w	r3, r3, #8
 80053ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053ee:	4b23      	ldr	r3, [pc, #140]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fc:	4b1f      	ldr	r3, [pc, #124]	; (800547c <HAL_SPI_MspInit+0x110>)
 80053fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_SPI_MspInit+0x110>)
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_SPI_MspInit+0x110>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005420:	2302      	movs	r3, #2
 8005422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542c:	2300      	movs	r3, #0
 800542e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005432:	2305      	movs	r3, #5
 8005434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800543c:	4619      	mov	r1, r3
 800543e:	4810      	ldr	r0, [pc, #64]	; (8005480 <HAL_SPI_MspInit+0x114>)
 8005440:	f004 fc26 	bl	8009c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005444:	2318      	movs	r3, #24
 8005446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544a:	2302      	movs	r3, #2
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005456:	2300      	movs	r3, #0
 8005458:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800545c:	2305      	movs	r3, #5
 800545e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005462:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005466:	4619      	mov	r1, r3
 8005468:	4806      	ldr	r0, [pc, #24]	; (8005484 <HAL_SPI_MspInit+0x118>)
 800546a:	f004 fc11 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800546e:	bf00      	nop
 8005470:	37f0      	adds	r7, #240	; 0xf0
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40013000 	.word	0x40013000
 800547c:	58024400 	.word	0x58024400
 8005480:	58020c00 	.word	0x58020c00
 8005484:	58020400 	.word	0x58020400

08005488 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d10f      	bne.n	80054ba <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 800549c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 80054ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80054b8:	e013      	b.n	80054e2 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10e      	bne.n	80054e2 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 80054c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054ca:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <HAL_TIM_PWM_MspInit+0x68>)
 80054d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	68bb      	ldr	r3, [r7, #8]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
 80054f4:	40000400 	.word	0x40000400

080054f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005500:	f107 031c 	add.w	r3, r7, #28
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <HAL_TIM_IC_MspInit+0xf0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d12e      	bne.n	8005578 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 800551c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005520:	4a32      	ldr	r2, [pc, #200]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 8005522:	f043 0308 	orr.w	r3, r3, #8
 8005526:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800552a:	4b30      	ldr	r3, [pc, #192]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 800552c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005538:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 800553a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553e:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005548:	4b28      	ldr	r3, [pc, #160]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 800554a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555a:	2302      	movs	r3, #2
 800555c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005562:	2300      	movs	r3, #0
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005566:	2302      	movs	r3, #2
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	481f      	ldr	r0, [pc, #124]	; (80055f0 <HAL_TIM_IC_MspInit+0xf8>)
 8005572:	f004 fb8d 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005576:	e032      	b.n	80055de <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <HAL_TIM_IC_MspInit+0xfc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d12d      	bne.n	80055de <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 8005584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 800558a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 8005594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 80055a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a6:	4a11      	ldr	r2, [pc, #68]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 80055a8:	f043 0310 	orr.w	r3, r3, #16
 80055ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_TIM_IC_MspInit+0xf4>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 80055be:	2320      	movs	r3, #32
 80055c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ca:	2300      	movs	r3, #0
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80055ce:	2304      	movs	r3, #4
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 80055d2:	f107 031c 	add.w	r3, r7, #28
 80055d6:	4619      	mov	r1, r3
 80055d8:	4807      	ldr	r0, [pc, #28]	; (80055f8 <HAL_TIM_IC_MspInit+0x100>)
 80055da:	f004 fb59 	bl	8009c90 <HAL_GPIO_Init>
}
 80055de:	bf00      	nop
 80055e0:	3730      	adds	r7, #48	; 0x30
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	58024400 	.word	0x58024400
 80055f0:	58020000 	.word	0x58020000
 80055f4:	40014000 	.word	0x40014000
 80055f8:	58021000 	.word	0x58021000

080055fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_TIM_Base_MspInit+0x84>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d117      	bne.n	800563e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 8005610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 8005616:	f043 0310 	orr.w	r3, r3, #16
 800561a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800561e:	4b19      	ldr	r3, [pc, #100]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 8005620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800562c:	2200      	movs	r2, #0
 800562e:	2100      	movs	r1, #0
 8005630:	2036      	movs	r0, #54	; 0x36
 8005632:	f001 fcbc 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005636:	2036      	movs	r0, #54	; 0x36
 8005638:	f001 fcd3 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800563c:	e01b      	b.n	8005676 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a11      	ldr	r2, [pc, #68]	; (8005688 <HAL_TIM_Base_MspInit+0x8c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d116      	bne.n	8005676 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 800564a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 8005650:	f043 0320 	orr.w	r3, r3, #32
 8005654:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_TIM_Base_MspInit+0x88>)
 800565a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	2037      	movs	r0, #55	; 0x37
 800566c:	f001 fc9f 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005670:	2037      	movs	r0, #55	; 0x37
 8005672:	f001 fcb6 	bl	8006fe2 <HAL_NVIC_EnableIRQ>
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40001000 	.word	0x40001000
 8005684:	58024400 	.word	0x58024400
 8005688:	40001400 	.word	0x40001400

0800568c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d120      	bne.n	80056f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ae:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 80056b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b4:	4a22      	ldr	r2, [pc, #136]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 80056c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 80056cc:	f248 030e 	movw	r3, #32782	; 0x800e
 80056d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2302      	movs	r3, #2
 80056d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056da:	2300      	movs	r3, #0
 80056dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056de:	2301      	movs	r3, #1
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e2:	f107 0314 	add.w	r3, r7, #20
 80056e6:	4619      	mov	r1, r3
 80056e8:	4816      	ldr	r0, [pc, #88]	; (8005744 <HAL_TIM_MspPostInit+0xb8>)
 80056ea:	f004 fad1 	bl	8009c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80056ee:	e023      	b.n	8005738 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_TIM_MspPostInit+0xbc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d11e      	bne.n	8005738 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 80056fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005700:	4a0f      	ldr	r2, [pc, #60]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_TIM_MspPostInit+0xb4>)
 800570c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005724:	2300      	movs	r3, #0
 8005726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005728:	2302      	movs	r3, #2
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4619      	mov	r1, r3
 8005732:	4806      	ldr	r0, [pc, #24]	; (800574c <HAL_TIM_MspPostInit+0xc0>)
 8005734:	f004 faac 	bl	8009c90 <HAL_GPIO_Init>
}
 8005738:	bf00      	nop
 800573a:	3728      	adds	r7, #40	; 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58024400 	.word	0x58024400
 8005744:	58020000 	.word	0x58020000
 8005748:	40000400 	.word	0x40000400
 800574c:	58020800 	.word	0x58020800

08005750 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b0ba      	sub	sp, #232	; 0xe8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005768:	f107 0310 	add.w	r3, r7, #16
 800576c:	22c0      	movs	r2, #192	; 0xc0
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f00e fa20 	bl	8013bb6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a28      	ldr	r2, [pc, #160]	; (800581c <HAL_PCD_MspInit+0xcc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d149      	bne.n	8005814 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800578c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005794:	f107 0310 	add.w	r3, r7, #16
 8005798:	4618      	mov	r0, r3
 800579a:	f005 ff9d 	bl	800b6d8 <HAL_RCCEx_PeriphCLKConfig>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80057a4:	f7fb fe88 	bl	80014b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80057a8:	f004 fee6 	bl	800a578 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 80057ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057bc:	4b18      	ldr	r3, [pc, #96]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 80057be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80057e4:	230a      	movs	r3, #10
 80057e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80057ee:	4619      	mov	r1, r3
 80057f0:	480c      	ldr	r0, [pc, #48]	; (8005824 <HAL_PCD_MspInit+0xd4>)
 80057f2:	f004 fa4d 	bl	8009c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 80057f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057fc:	4a08      	ldr	r2, [pc, #32]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 80057fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005802:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_PCD_MspInit+0xd0>)
 8005808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800580c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005814:	bf00      	nop
 8005816:	37e8      	adds	r7, #232	; 0xe8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40080000 	.word	0x40080000
 8005820:	58024400 	.word	0x58024400
 8005824:	58020000 	.word	0x58020000

08005828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800582c:	e7fe      	b.n	800582c <NMI_Handler+0x4>

0800582e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800582e:	b480      	push	{r7}
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005832:	e7fe      	b.n	8005832 <HardFault_Handler+0x4>

08005834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005838:	e7fe      	b.n	8005838 <MemManage_Handler+0x4>

0800583a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800583e:	e7fe      	b.n	800583e <BusFault_Handler+0x4>

08005840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005844:	e7fe      	b.n	8005844 <UsageFault_Handler+0x4>

08005846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005862:	b480      	push	{r7}
 8005864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005874:	f000 f9e2 	bl	8005c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}

0800587c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <DMA1_Stream0_IRQHandler+0x10>)
 8005882:	f002 fef3 	bl	800866c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	240004cc 	.word	0x240004cc

08005890 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <DMA1_Stream1_IRQHandler+0x10>)
 8005896:	f002 fee9 	bl	800866c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	24000544 	.word	0x24000544

080058a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <DMA1_Stream2_IRQHandler+0x10>)
 80058aa:	f002 fedf 	bl	800866c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	240005bc 	.word	0x240005bc

080058b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <UART4_IRQHandler+0x10>)
 80058be:	f00b f9ad 	bl	8010c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	24000204 	.word	0x24000204

080058cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80058d0:	4802      	ldr	r0, [pc, #8]	; (80058dc <UART5_IRQHandler+0x10>)
 80058d2:	f00b f9a3 	bl	8010c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	24000298 	.word	0x24000298

080058e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80058e4:	4802      	ldr	r0, [pc, #8]	; (80058f0 <TIM6_DAC_IRQHandler+0x10>)
 80058e6:	f009 fea7 	bl	800f638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	24000868 	.word	0x24000868

080058f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80058f8:	4802      	ldr	r0, [pc, #8]	; (8005904 <TIM7_IRQHandler+0x10>)
 80058fa:	f009 fe9d 	bl	800f638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	240008b4 	.word	0x240008b4

08005908 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800590c:	4802      	ldr	r0, [pc, #8]	; (8005918 <BDMA_Channel0_IRQHandler+0x10>)
 800590e:	f002 fead 	bl	800866c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	24000454 	.word	0x24000454

0800591c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005920:	4802      	ldr	r0, [pc, #8]	; (800592c <LPUART1_IRQHandler+0x10>)
 8005922:	f00b f97b 	bl	8010c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	24000170 	.word	0x24000170

08005930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <_sbrk+0x5c>)
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <_sbrk+0x60>)
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <_sbrk+0x64>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <_sbrk+0x64>)
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <_sbrk+0x68>)
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <_sbrk+0x64>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	d207      	bcs.n	8005970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005960:	f00e f942 	bl	8013be8 <__errno>
 8005964:	4603      	mov	r3, r0
 8005966:	220c      	movs	r2, #12
 8005968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800596e:	e009      	b.n	8005984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <_sbrk+0x64>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005976:	4b07      	ldr	r3, [pc, #28]	; (8005994 <_sbrk+0x64>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <_sbrk+0x64>)
 8005980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	24080000 	.word	0x24080000
 8005990:	00000400 	.word	0x00000400
 8005994:	240019e8 	.word	0x240019e8
 8005998:	24001b38 	.word	0x24001b38

0800599c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059a0:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <SystemInit+0xe4>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	4a36      	ldr	r2, [pc, #216]	; (8005a80 <SystemInit+0xe4>)
 80059a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <SystemInit+0xe8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d807      	bhi.n	80059cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <SystemInit+0xe8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 030f 	bic.w	r3, r3, #15
 80059c4:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <SystemInit+0xe8>)
 80059c6:	f043 0307 	orr.w	r3, r3, #7
 80059ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <SystemInit+0xec>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2d      	ldr	r2, [pc, #180]	; (8005a88 <SystemInit+0xec>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80059d8:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <SystemInit+0xec>)
 80059da:	2200      	movs	r2, #0
 80059dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80059de:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <SystemInit+0xec>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4929      	ldr	r1, [pc, #164]	; (8005a88 <SystemInit+0xec>)
 80059e4:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <SystemInit+0xf0>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80059ea:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <SystemInit+0xe8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <SystemInit+0xe8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 030f 	bic.w	r3, r3, #15
 80059fe:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <SystemInit+0xe8>)
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <SystemInit+0xec>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <SystemInit+0xec>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <SystemInit+0xec>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <SystemInit+0xec>)
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <SystemInit+0xf4>)
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <SystemInit+0xec>)
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <SystemInit+0xf8>)
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005a24:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <SystemInit+0xec>)
 8005a26:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <SystemInit+0xfc>)
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <SystemInit+0xec>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005a30:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <SystemInit+0xec>)
 8005a32:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <SystemInit+0xfc>)
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <SystemInit+0xec>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005a3c:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <SystemInit+0xec>)
 8005a3e:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <SystemInit+0xfc>)
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <SystemInit+0xec>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <SystemInit+0xec>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <SystemInit+0xec>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <SystemInit+0xec>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <SystemInit+0x100>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <SystemInit+0x104>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a66:	d202      	bcs.n	8005a6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <SystemInit+0x108>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005a6e:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <SystemInit+0x10c>)
 8005a70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005a74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005a76:	bf00      	nop
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	52002000 	.word	0x52002000
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005a90:	02020200 	.word	0x02020200
 8005a94:	01ff0000 	.word	0x01ff0000
 8005a98:	01010280 	.word	0x01010280
 8005a9c:	5c001000 	.word	0x5c001000
 8005aa0:	ffff0000 	.word	0xffff0000
 8005aa4:	51008108 	.word	0x51008108
 8005aa8:	52004000 	.word	0x52004000

08005aac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	0a5a      	lsrs	r2, r3, #9
 8005abc:	490f      	ldr	r1, [pc, #60]	; (8005afc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005abe:	fba1 1202 	umull	r1, r2, r1, r2
 8005ac2:	09d2      	lsrs	r2, r2, #7
 8005ac4:	490e      	ldr	r1, [pc, #56]	; (8005b00 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005ac6:	fb01 f202 	mul.w	r2, r1, r2
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0a5b      	lsrs	r3, r3, #9
 8005ad4:	4a09      	ldr	r2, [pc, #36]	; (8005afc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	601a      	str	r2, [r3, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	00044b83 	.word	0x00044b83
 8005b00:	3b9aca00 	.word	0x3b9aca00

08005b04 <Reset_Handler>:
 8005b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b3c <LoopFillZerobss+0xe>
 8005b08:	f7ff ff48 	bl	800599c <SystemInit>
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <LoopFillZerobss+0x12>)
 8005b0e:	490d      	ldr	r1, [pc, #52]	; (8005b44 <LoopFillZerobss+0x16>)
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <LoopFillZerobss+0x1a>)
 8005b12:	2300      	movs	r3, #0
 8005b14:	e002      	b.n	8005b1c <LoopCopyDataInit>

08005b16 <CopyDataInit>:
 8005b16:	58d4      	ldr	r4, [r2, r3]
 8005b18:	50c4      	str	r4, [r0, r3]
 8005b1a:	3304      	adds	r3, #4

08005b1c <LoopCopyDataInit>:
 8005b1c:	18c4      	adds	r4, r0, r3
 8005b1e:	428c      	cmp	r4, r1
 8005b20:	d3f9      	bcc.n	8005b16 <CopyDataInit>
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <LoopFillZerobss+0x1e>)
 8005b24:	4c0a      	ldr	r4, [pc, #40]	; (8005b50 <LoopFillZerobss+0x22>)
 8005b26:	2300      	movs	r3, #0
 8005b28:	e001      	b.n	8005b2e <LoopFillZerobss>

08005b2a <FillZerobss>:
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	3204      	adds	r2, #4

08005b2e <LoopFillZerobss>:
 8005b2e:	42a2      	cmp	r2, r4
 8005b30:	d3fb      	bcc.n	8005b2a <FillZerobss>
 8005b32:	f00e f85f 	bl	8013bf4 <__libc_init_array>
 8005b36:	f7fa fd55 	bl	80005e4 <main>
 8005b3a:	4770      	bx	lr
 8005b3c:	24080000 	.word	0x24080000
 8005b40:	24000000 	.word	0x24000000
 8005b44:	2400009c 	.word	0x2400009c
 8005b48:	080141f8 	.word	0x080141f8
 8005b4c:	2400009c 	.word	0x2400009c
 8005b50:	24001b38 	.word	0x24001b38

08005b54 <ADC3_IRQHandler>:
 8005b54:	e7fe      	b.n	8005b54 <ADC3_IRQHandler>
	...

08005b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5e:	2003      	movs	r0, #3
 8005b60:	f001 fa1a 	bl	8006f98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b64:	f005 fbe2 	bl	800b32c <HAL_RCC_GetSysClockFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <HAL_Init+0x68>)
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	4913      	ldr	r1, [pc, #76]	; (8005bc4 <HAL_Init+0x6c>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <HAL_Init+0x68>)
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	4a0e      	ldr	r2, [pc, #56]	; (8005bc4 <HAL_Init+0x6c>)
 8005b8c:	5cd3      	ldrb	r3, [r2, r3]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <HAL_Init+0x70>)
 8005b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b9c:	4a0b      	ldr	r2, [pc, #44]	; (8005bcc <HAL_Init+0x74>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ba2:	200f      	movs	r0, #15
 8005ba4:	f000 f814 	bl	8005bd0 <HAL_InitTick>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e002      	b.n	8005bb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005bb2:	f7fe fea3 	bl	80048fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	080141a4 	.word	0x080141a4
 8005bc8:	24000040 	.word	0x24000040
 8005bcc:	2400003c 	.word	0x2400003c

08005bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <HAL_InitTick+0x60>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e021      	b.n	8005c28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005be4:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <HAL_InitTick+0x64>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_InitTick+0x60>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4619      	mov	r1, r3
 8005bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f9ff 	bl	8006ffe <HAL_SYSTICK_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00e      	b.n	8005c28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b0f      	cmp	r3, #15
 8005c0e:	d80a      	bhi.n	8005c26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c10:	2200      	movs	r2, #0
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c18:	f001 f9c9 	bl	8006fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c1c:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <HAL_InitTick+0x68>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	24000048 	.word	0x24000048
 8005c34:	2400003c 	.word	0x2400003c
 8005c38:	24000044 	.word	0x24000044

08005c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_IncTick+0x20>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_IncTick+0x24>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <HAL_IncTick+0x24>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	24000048 	.word	0x24000048
 8005c60:	240019ec 	.word	0x240019ec

08005c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return uwTick;
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <HAL_GetTick+0x14>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	240019ec 	.word	0x240019ec

08005c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c84:	f7ff ffee 	bl	8005c64 <HAL_GetTick>
 8005c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c94:	d005      	beq.n	8005ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_Delay+0x44>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ca2:	bf00      	nop
 8005ca4:	f7ff ffde 	bl	8005c64 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d8f7      	bhi.n	8005ca4 <HAL_Delay+0x28>
  {
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	24000048 	.word	0x24000048

08005cc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_GetREVID+0x14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	5c001000 	.word	0x5c001000

08005cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	609a      	str	r2, [r3, #8]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3360      	adds	r3, #96	; 0x60
 8005d56:	461a      	mov	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	430b      	orrs	r3, r1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	611a      	str	r2, [r3, #16]
}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3360      	adds	r3, #96	; 0x60
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	601a      	str	r2, [r3, #0]
  }
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3330      	adds	r3, #48	; 0x30
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	4413      	add	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	211f      	movs	r1, #31
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	401a      	ands	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	0e9b      	lsrs	r3, r3, #26
 8005e24:	f003 011f 	and.w	r1, r3, #31
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	431a      	orrs	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3314      	adds	r3, #20
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0e5b      	lsrs	r3, r3, #25
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	4413      	add	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	0d1b      	lsrs	r3, r3, #20
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2107      	movs	r1, #7
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	401a      	ands	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	0d1b      	lsrs	r3, r3, #20
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0318 	and.w	r3, r3, #24
 8005ebe:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005ec0:	40d9      	lsrs	r1, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	000fffff 	.word	0x000fffff

08005ee4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6093      	str	r3, [r2, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	5fffffc0 	.word	0x5fffffc0

08005f08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1c:	d101      	bne.n	8005f22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <LL_ADC_EnableInternalRegulator+0x24>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	6fffffc0 	.word	0x6fffffc0

08005f58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6c:	d101      	bne.n	8005f72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <LL_ADC_IsEnabled+0x18>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <LL_ADC_IsEnabled+0x1a>
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d101      	bne.n	8005fbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d101      	bne.n	8005fe4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006000:	2300      	movs	r3, #0
 8006002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e18f      	b.n	800632e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fe fc87 	bl	8004930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff67 	bl	8005f08 <LL_ADC_IsDeepPowerDownEnabled>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff ff4d 	bl	8005ee4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff ff82 	bl	8005f58 <LL_ADC_IsInternalRegulatorEnabled>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d114      	bne.n	8006084 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ff66 	bl	8005f30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006064:	4b87      	ldr	r3, [pc, #540]	; (8006284 <HAL_ADC_Init+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	4a87      	ldr	r2, [pc, #540]	; (8006288 <HAL_ADC_Init+0x294>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	3301      	adds	r3, #1
 8006074:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006076:	e002      	b.n	800607e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	3b01      	subs	r3, #1
 800607c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f9      	bne.n	8006078 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff65 	bl	8005f58 <LL_ADC_IsInternalRegulatorEnabled>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10d      	bne.n	80060b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	f043 0210 	orr.w	r2, r3, #16
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f043 0201 	orr.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff76 	bl	8005fa6 <LL_ADC_REG_IsConversionOngoing>
 80060ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 8129 	bne.w	800631c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 8125 	bne.w	800631c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80060da:	f043 0202 	orr.w	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff ff4a 	bl	8005f80 <LL_ADC_IsEnabled>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d136      	bne.n	8006160 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a65      	ldr	r2, [pc, #404]	; (800628c <HAL_ADC_Init+0x298>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_ADC_Init+0x112>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a63      	ldr	r2, [pc, #396]	; (8006290 <HAL_ADC_Init+0x29c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d10e      	bne.n	8006124 <HAL_ADC_Init+0x130>
 8006106:	4861      	ldr	r0, [pc, #388]	; (800628c <HAL_ADC_Init+0x298>)
 8006108:	f7ff ff3a 	bl	8005f80 <LL_ADC_IsEnabled>
 800610c:	4604      	mov	r4, r0
 800610e:	4860      	ldr	r0, [pc, #384]	; (8006290 <HAL_ADC_Init+0x29c>)
 8006110:	f7ff ff36 	bl	8005f80 <LL_ADC_IsEnabled>
 8006114:	4603      	mov	r3, r0
 8006116:	4323      	orrs	r3, r4
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e008      	b.n	8006136 <HAL_ADC_Init+0x142>
 8006124:	485b      	ldr	r0, [pc, #364]	; (8006294 <HAL_ADC_Init+0x2a0>)
 8006126:	f7ff ff2b 	bl	8005f80 <LL_ADC_IsEnabled>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d012      	beq.n	8006160 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a53      	ldr	r2, [pc, #332]	; (800628c <HAL_ADC_Init+0x298>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_ADC_Init+0x15a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_ADC_Init+0x29c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d101      	bne.n	8006152 <HAL_ADC_Init+0x15e>
 800614e:	4a52      	ldr	r2, [pc, #328]	; (8006298 <HAL_ADC_Init+0x2a4>)
 8006150:	e000      	b.n	8006154 <HAL_ADC_Init+0x160>
 8006152:	4a52      	ldr	r2, [pc, #328]	; (800629c <HAL_ADC_Init+0x2a8>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7ff fdbe 	bl	8005cdc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006160:	f7ff fdb0 	bl	8005cc4 <HAL_GetREVID>
 8006164:	4603      	mov	r3, r0
 8006166:	f241 0203 	movw	r2, #4099	; 0x1003
 800616a:	4293      	cmp	r3, r2
 800616c:	d914      	bls.n	8006198 <HAL_ADC_Init+0x1a4>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b10      	cmp	r3, #16
 8006174:	d110      	bne.n	8006198 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7d5b      	ldrb	r3, [r3, #21]
 800617a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006180:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006186:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7f1b      	ldrb	r3, [r3, #28]
 800618c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800618e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006190:	f043 030c 	orr.w	r3, r3, #12
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	e00d      	b.n	80061b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7d5b      	ldrb	r3, [r3, #21]
 800619c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80061a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7f1b      	ldrb	r3, [r3, #28]
 80061ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7f1b      	ldrb	r3, [r3, #28]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d106      	bne.n	80061ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	045b      	lsls	r3, r3, #17
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <HAL_ADC_Init+0x2ac>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	430b      	orrs	r3, r1
 80061f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fed1 	bl	8005fa6 <LL_ADC_REG_IsConversionOngoing>
 8006204:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fede 	bl	8005fcc <LL_ADC_INJ_IsConversionOngoing>
 8006210:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d15f      	bne.n	80062d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d15c      	bne.n	80062d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7d1b      	ldrb	r3, [r3, #20]
 8006222:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006228:	4313      	orrs	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <HAL_ADC_Init+0x2b0>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	69b9      	ldr	r1, [r7, #24]
 800623c:	430b      	orrs	r3, r1
 800623e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006246:	2b01      	cmp	r3, #1
 8006248:	d130      	bne.n	80062ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <HAL_ADC_Init+0x2b4>)
 8006258:	4013      	ands	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800625e:	3a01      	subs	r2, #1
 8006260:	0411      	lsls	r1, r2, #16
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006266:	4311      	orrs	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800626c:	4311      	orrs	r1, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006272:	430a      	orrs	r2, r1
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	611a      	str	r2, [r3, #16]
 8006280:	e01c      	b.n	80062bc <HAL_ADC_Init+0x2c8>
 8006282:	bf00      	nop
 8006284:	2400003c 	.word	0x2400003c
 8006288:	053e2d63 	.word	0x053e2d63
 800628c:	40022000 	.word	0x40022000
 8006290:	40022100 	.word	0x40022100
 8006294:	58026000 	.word	0x58026000
 8006298:	40022300 	.word	0x40022300
 800629c:	58026300 	.word	0x58026300
 80062a0:	fff0c003 	.word	0xfff0c003
 80062a4:	ffffbffc 	.word	0xffffbffc
 80062a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb80 	bl	80069d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10c      	bne.n	80062fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	f023 010f 	bic.w	r1, r3, #15
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	1e5a      	subs	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
 80062f8:	e007      	b.n	800630a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 020f 	bic.w	r2, r2, #15
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
 800631a:	e007      	b.n	800632c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	f043 0210 	orr.w	r2, r3, #16
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800632c:	7ffb      	ldrb	r3, [r7, #31]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3724      	adds	r7, #36	; 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}
 8006336:	bf00      	nop

08006338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b0a1      	sub	sp, #132	; 0x84
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4a9d      	ldr	r2, [pc, #628]	; (80065c8 <HAL_ADC_ConfigChannel+0x290>)
 8006352:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x2a>
 800635e:	2302      	movs	r3, #2
 8006360:	e321      	b.n	80069a6 <HAL_ADC_ConfigChannel+0x66e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fe19 	bl	8005fa6 <LL_ADC_REG_IsConversionOngoing>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 8306 	bne.w	8006988 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <HAL_ADC_ConfigChannel+0x62>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	0e9b      	lsrs	r3, r3, #26
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2201      	movs	r2, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	e016      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x90>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e003      	b.n	80063be <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80063b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2201      	movs	r2, #1
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	69d1      	ldr	r1, [r2, #28]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	430b      	orrs	r3, r1
 80063d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6859      	ldr	r1, [r3, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f7ff fd02 	bl	8005dec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fdda 	bl	8005fa6 <LL_ADC_REG_IsConversionOngoing>
 80063f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fde7 	bl	8005fcc <LL_ADC_INJ_IsConversionOngoing>
 80063fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 80b3 	bne.w	800656e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 80af 	bne.w	800656e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	461a      	mov	r2, r3
 800641e:	f7ff fd11 	bl	8005e44 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006422:	4b6a      	ldr	r3, [pc, #424]	; (80065cc <HAL_ADC_ConfigChannel+0x294>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800642a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642e:	d10b      	bne.n	8006448 <HAL_ADC_ConfigChannel+0x110>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	e01d      	b.n	8006484 <HAL_ADC_ConfigChannel+0x14c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <HAL_ADC_ConfigChannel+0x136>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	e00a      	b.n	8006484 <HAL_ADC_ConfigChannel+0x14c>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	089b      	lsrs	r3, r3, #2
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d027      	beq.n	80064de <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800649c:	f7ff fc52 	bl	8005d44 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6919      	ldr	r1, [r3, #16]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	7e5b      	ldrb	r3, [r3, #25]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d102      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x17e>
 80064b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064b4:	e000      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x180>
 80064b6:	2300      	movs	r3, #0
 80064b8:	461a      	mov	r2, r3
 80064ba:	f7ff fc7c 	bl	8005db6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6919      	ldr	r1, [r3, #16]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	7e1b      	ldrb	r3, [r3, #24]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d102      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x19c>
 80064ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064d2:	e000      	b.n	80064d6 <HAL_ADC_ConfigChannel+0x19e>
 80064d4:	2300      	movs	r3, #0
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7ff fc54 	bl	8005d84 <LL_ADC_SetDataRightShift>
 80064dc:	e047      	b.n	800656e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	069b      	lsls	r3, r3, #26
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d107      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	069b      	lsls	r3, r3, #26
 8006512:	429a      	cmp	r2, r3
 8006514:	d107      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800652c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	069b      	lsls	r3, r3, #26
 8006536:	429a      	cmp	r2, r3
 8006538:	d107      	bne.n	800654a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006548:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	069b      	lsls	r3, r3, #26
 800655a:	429a      	cmp	r2, r3
 800655c:	d107      	bne.n	800656e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800656c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fd04 	bl	8005f80 <LL_ADC_IsEnabled>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 820d 	bne.w	800699a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6819      	ldr	r1, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	461a      	mov	r2, r3
 800658e:	f7ff fc85 	bl	8005e9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <HAL_ADC_ConfigChannel+0x290>)
 8006598:	4293      	cmp	r3, r2
 800659a:	f040 8133 	bne.w	8006804 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x298>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	0e9b      	lsrs	r3, r3, #26
 80065b4:	3301      	adds	r3, #1
 80065b6:	f003 031f 	and.w	r3, r3, #31
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	bf94      	ite	ls
 80065be:	2301      	movls	r3, #1
 80065c0:	2300      	movhi	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e01e      	b.n	8006604 <HAL_ADC_ConfigChannel+0x2cc>
 80065c6:	bf00      	nop
 80065c8:	47ff0000 	.word	0x47ff0000
 80065cc:	5c001000 	.word	0x5c001000
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d8:	fa93 f3a3 	rbit	r3, r3
 80065dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80065e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80065e8:	2320      	movs	r3, #32
 80065ea:	e003      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80065ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ee:	fab3 f383 	clz	r3, r3
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	3301      	adds	r3, #1
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	bf94      	ite	ls
 80065fe:	2301      	movls	r3, #1
 8006600:	2300      	movhi	r3, #0
 8006602:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006604:	2b00      	cmp	r3, #0
 8006606:	d079      	beq.n	80066fc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <HAL_ADC_ConfigChannel+0x2ec>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	0e9b      	lsrs	r3, r3, #26
 800661a:	3301      	adds	r3, #1
 800661c:	069b      	lsls	r3, r3, #26
 800661e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006622:	e015      	b.n	8006650 <HAL_ADC_ConfigChannel+0x318>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	fa93 f3a3 	rbit	r3, r3
 8006630:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006634:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800663c:	2320      	movs	r3, #32
 800663e:	e003      	b.n	8006648 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006642:	fab3 f383 	clz	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	3301      	adds	r3, #1
 800664a:	069b      	lsls	r3, r3, #26
 800664c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x338>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	0e9b      	lsrs	r3, r3, #26
 8006662:	3301      	adds	r3, #1
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	e017      	b.n	80066a0 <HAL_ADC_ConfigChannel+0x368>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800667e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006688:	2320      	movs	r3, #32
 800668a:	e003      	b.n	8006694 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	fab3 f383 	clz	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	3301      	adds	r3, #1
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	ea42 0103 	orr.w	r1, r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x38e>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	0e9b      	lsrs	r3, r3, #26
 80066b6:	3301      	adds	r3, #1
 80066b8:	f003 021f 	and.w	r2, r3, #31
 80066bc:	4613      	mov	r3, r2
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	4413      	add	r3, r2
 80066c2:	051b      	lsls	r3, r3, #20
 80066c4:	e018      	b.n	80066f8 <HAL_ADC_ConfigChannel+0x3c0>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ce:	fa93 f3a3 	rbit	r3, r3
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80066de:	2320      	movs	r3, #32
 80066e0:	e003      	b.n	80066ea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	fab3 f383 	clz	r3, r3
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	3301      	adds	r3, #1
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	4613      	mov	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4413      	add	r3, r2
 80066f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066f8:	430b      	orrs	r3, r1
 80066fa:	e07e      	b.n	80067fa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x3e0>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	0e9b      	lsrs	r3, r3, #26
 800670e:	3301      	adds	r3, #1
 8006710:	069b      	lsls	r3, r3, #26
 8006712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006716:	e015      	b.n	8006744 <HAL_ADC_ConfigChannel+0x40c>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	fa93 f3a3 	rbit	r3, r3
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006730:	2320      	movs	r3, #32
 8006732:	e003      	b.n	800673c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	fab3 f383 	clz	r3, r3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	3301      	adds	r3, #1
 800673e:	069b      	lsls	r3, r3, #26
 8006740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800674c:	2b00      	cmp	r3, #0
 800674e:	d109      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x42c>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	0e9b      	lsrs	r3, r3, #26
 8006756:	3301      	adds	r3, #1
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	e017      	b.n	8006794 <HAL_ADC_ConfigChannel+0x45c>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	fa93 f3a3 	rbit	r3, r3
 8006770:	61bb      	str	r3, [r7, #24]
  return result;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800677c:	2320      	movs	r3, #32
 800677e:	e003      	b.n	8006788 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	fab3 f383 	clz	r3, r3
 8006786:	b2db      	uxtb	r3, r3
 8006788:	3301      	adds	r3, #1
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2101      	movs	r1, #1
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	ea42 0103 	orr.w	r1, r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x488>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	0e9b      	lsrs	r3, r3, #26
 80067aa:	3301      	adds	r3, #1
 80067ac:	f003 021f 	and.w	r2, r3, #31
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	3b1e      	subs	r3, #30
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067be:	e01b      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x4c0>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	fa93 f3a3 	rbit	r3, r3
 80067cc:	60fb      	str	r3, [r7, #12]
  return result;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80067d8:	2320      	movs	r3, #32
 80067da:	e003      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	fab3 f383 	clz	r3, r3
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	3301      	adds	r3, #1
 80067e6:	f003 021f 	and.w	r2, r3, #31
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	3b1e      	subs	r3, #30
 80067f2:	051b      	lsls	r3, r3, #20
 80067f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067f8:	430b      	orrs	r3, r1
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	6892      	ldr	r2, [r2, #8]
 80067fe:	4619      	mov	r1, r3
 8006800:	f7ff fb20 	bl	8005e44 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f280 80c6 	bge.w	800699a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a67      	ldr	r2, [pc, #412]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_ADC_ConfigChannel+0x4ea>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a65      	ldr	r2, [pc, #404]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x4ee>
 8006822:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_ADC_ConfigChannel+0x680>)
 8006824:	e000      	b.n	8006828 <HAL_ADC_ConfigChannel+0x4f0>
 8006826:	4b65      	ldr	r3, [pc, #404]	; (80069bc <HAL_ADC_ConfigChannel+0x684>)
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fa7d 	bl	8005d28 <LL_ADC_GetCommonPathInternalCh>
 800682e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5e      	ldr	r2, [pc, #376]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_ADC_ConfigChannel+0x50c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a5d      	ldr	r2, [pc, #372]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10e      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x52a>
 8006844:	485a      	ldr	r0, [pc, #360]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 8006846:	f7ff fb9b 	bl	8005f80 <LL_ADC_IsEnabled>
 800684a:	4604      	mov	r4, r0
 800684c:	4859      	ldr	r0, [pc, #356]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 800684e:	f7ff fb97 	bl	8005f80 <LL_ADC_IsEnabled>
 8006852:	4603      	mov	r3, r0
 8006854:	4323      	orrs	r3, r4
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	e008      	b.n	8006874 <HAL_ADC_ConfigChannel+0x53c>
 8006862:	4857      	ldr	r0, [pc, #348]	; (80069c0 <HAL_ADC_ConfigChannel+0x688>)
 8006864:	f7ff fb8c 	bl	8005f80 <LL_ADC_IsEnabled>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d07d      	beq.n	8006974 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a51      	ldr	r2, [pc, #324]	; (80069c4 <HAL_ADC_ConfigChannel+0x68c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d130      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x5ac>
 8006882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d12b      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <HAL_ADC_ConfigChannel+0x688>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f040 8081 	bne.w	800699a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a44      	ldr	r2, [pc, #272]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_ADC_ConfigChannel+0x574>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d101      	bne.n	80068b0 <HAL_ADC_ConfigChannel+0x578>
 80068ac:	4a42      	ldr	r2, [pc, #264]	; (80069b8 <HAL_ADC_ConfigChannel+0x680>)
 80068ae:	e000      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x57a>
 80068b0:	4a42      	ldr	r2, [pc, #264]	; (80069bc <HAL_ADC_ConfigChannel+0x684>)
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7ff fa21 	bl	8005d02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068c0:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <HAL_ADC_ConfigChannel+0x690>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	4a41      	ldr	r2, [pc, #260]	; (80069cc <HAL_ADC_ConfigChannel+0x694>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	099b      	lsrs	r3, r3, #6
 80068ce:	3301      	adds	r3, #1
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80068d4:	e002      	b.n	80068dc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3b01      	subs	r3, #1
 80068da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f9      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068e2:	e05a      	b.n	800699a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a39      	ldr	r2, [pc, #228]	; (80069d0 <HAL_ADC_ConfigChannel+0x698>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d11e      	bne.n	800692c <HAL_ADC_ConfigChannel+0x5f4>
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d119      	bne.n	800692c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a30      	ldr	r2, [pc, #192]	; (80069c0 <HAL_ADC_ConfigChannel+0x688>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d14b      	bne.n	800699a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2a      	ldr	r2, [pc, #168]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_ADC_ConfigChannel+0x5de>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <HAL_ADC_ConfigChannel+0x5e2>
 8006916:	4a28      	ldr	r2, [pc, #160]	; (80069b8 <HAL_ADC_ConfigChannel+0x680>)
 8006918:	e000      	b.n	800691c <HAL_ADC_ConfigChannel+0x5e4>
 800691a:	4a28      	ldr	r2, [pc, #160]	; (80069bc <HAL_ADC_ConfigChannel+0x684>)
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7ff f9ec 	bl	8005d02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800692a:	e036      	b.n	800699a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <HAL_ADC_ConfigChannel+0x69c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d131      	bne.n	800699a <HAL_ADC_ConfigChannel+0x662>
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d12c      	bne.n	800699a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <HAL_ADC_ConfigChannel+0x688>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d127      	bne.n	800699a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_ADC_ConfigChannel+0x678>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_ADC_ConfigChannel+0x626>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a16      	ldr	r2, [pc, #88]	; (80069b4 <HAL_ADC_ConfigChannel+0x67c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_ADC_ConfigChannel+0x62a>
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_ADC_ConfigChannel+0x680>)
 8006960:	e000      	b.n	8006964 <HAL_ADC_ConfigChannel+0x62c>
 8006962:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_ADC_ConfigChannel+0x684>)
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800696a:	4619      	mov	r1, r3
 800696c:	4610      	mov	r0, r2
 800696e:	f7ff f9c8 	bl	8005d02 <LL_ADC_SetCommonPathInternalCh>
 8006972:	e012      	b.n	800699a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f043 0220 	orr.w	r2, r3, #32
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006986:	e008      	b.n	800699a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80069a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3784      	adds	r7, #132	; 0x84
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd90      	pop	{r4, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40022000 	.word	0x40022000
 80069b4:	40022100 	.word	0x40022100
 80069b8:	40022300 	.word	0x40022300
 80069bc:	58026300 	.word	0x58026300
 80069c0:	58026000 	.word	0x58026000
 80069c4:	cb840000 	.word	0xcb840000
 80069c8:	2400003c 	.word	0x2400003c
 80069cc:	053e2d63 	.word	0x053e2d63
 80069d0:	c7520000 	.word	0xc7520000
 80069d4:	cfb80000 	.word	0xcfb80000

080069d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7a      	ldr	r2, [pc, #488]	; (8006bd0 <ADC_ConfigureBoostMode+0x1f8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <ADC_ConfigureBoostMode+0x1c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a79      	ldr	r2, [pc, #484]	; (8006bd4 <ADC_ConfigureBoostMode+0x1fc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d109      	bne.n	8006a08 <ADC_ConfigureBoostMode+0x30>
 80069f4:	4b78      	ldr	r3, [pc, #480]	; (8006bd8 <ADC_ConfigureBoostMode+0x200>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e008      	b.n	8006a1a <ADC_ConfigureBoostMode+0x42>
 8006a08:	4b74      	ldr	r3, [pc, #464]	; (8006bdc <ADC_ConfigureBoostMode+0x204>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01c      	beq.n	8006a58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a1e:	f004 fdff 	bl	800b620 <HAL_RCC_GetHCLKFreq>
 8006a22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a2c:	d010      	beq.n	8006a50 <ADC_ConfigureBoostMode+0x78>
 8006a2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a32:	d873      	bhi.n	8006b1c <ADC_ConfigureBoostMode+0x144>
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d002      	beq.n	8006a40 <ADC_ConfigureBoostMode+0x68>
 8006a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3e:	d16d      	bne.n	8006b1c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	60fb      	str	r3, [r7, #12]
        break;
 8006a4e:	e068      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	60fb      	str	r3, [r7, #12]
        break;
 8006a56:	e064      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a5c:	f04f 0100 	mov.w	r1, #0
 8006a60:	f006 f844 	bl	800caec <HAL_RCCEx_GetPeriphCLKFreq>
 8006a64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a6e:	d051      	beq.n	8006b14 <ADC_ConfigureBoostMode+0x13c>
 8006a70:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a74:	d854      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006a76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a7a:	d047      	beq.n	8006b0c <ADC_ConfigureBoostMode+0x134>
 8006a7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a80:	d84e      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006a82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a86:	d03d      	beq.n	8006b04 <ADC_ConfigureBoostMode+0x12c>
 8006a88:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a8c:	d848      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a92:	d033      	beq.n	8006afc <ADC_ConfigureBoostMode+0x124>
 8006a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a98:	d842      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006a9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a9e:	d029      	beq.n	8006af4 <ADC_ConfigureBoostMode+0x11c>
 8006aa0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006aa4:	d83c      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006aa6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006aaa:	d01a      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x10a>
 8006aac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ab0:	d836      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006ab2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ab6:	d014      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x10a>
 8006ab8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006abc:	d830      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac2:	d00e      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x10a>
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac8:	d82a      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006aca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ace:	d008      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x10a>
 8006ad0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ad4:	d824      	bhi.n	8006b20 <ADC_ConfigureBoostMode+0x148>
 8006ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ada:	d002      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x10a>
 8006adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ae0:	d11e      	bne.n	8006b20 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	0c9b      	lsrs	r3, r3, #18
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	60fb      	str	r3, [r7, #12]
        break;
 8006af2:	e016      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	60fb      	str	r3, [r7, #12]
        break;
 8006afa:	e012      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	60fb      	str	r3, [r7, #12]
        break;
 8006b02:	e00e      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	60fb      	str	r3, [r7, #12]
        break;
 8006b0a:	e00a      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	09db      	lsrs	r3, r3, #7
 8006b10:	60fb      	str	r3, [r7, #12]
        break;
 8006b12:	e006      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	60fb      	str	r3, [r7, #12]
        break;
 8006b1a:	e002      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006b20:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b22:	f7ff f8cf 	bl	8005cc4 <HAL_GetREVID>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d815      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <ADC_ConfigureBoostMode+0x208>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d908      	bls.n	8006b4a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006b48:	e03e      	b.n	8006bc8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b58:	609a      	str	r2, [r3, #8]
}
 8006b5a:	e035      	b.n	8006bc8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a1f      	ldr	r2, [pc, #124]	; (8006be4 <ADC_ConfigureBoostMode+0x20c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d808      	bhi.n	8006b7c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b78:	609a      	str	r2, [r3, #8]
}
 8006b7a:	e025      	b.n	8006bc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <ADC_ConfigureBoostMode+0x210>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d80a      	bhi.n	8006b9a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b96:	609a      	str	r2, [r3, #8]
}
 8006b98:	e016      	b.n	8006bc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <ADC_ConfigureBoostMode+0x214>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d80a      	bhi.n	8006bb8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb4:	609a      	str	r2, [r3, #8]
}
 8006bb6:	e007      	b.n	8006bc8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006bc6:	609a      	str	r2, [r3, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40022000 	.word	0x40022000
 8006bd4:	40022100 	.word	0x40022100
 8006bd8:	40022300 	.word	0x40022300
 8006bdc:	58026300 	.word	0x58026300
 8006be0:	01312d00 	.word	0x01312d00
 8006be4:	005f5e10 	.word	0x005f5e10
 8006be8:	00bebc20 	.word	0x00bebc20
 8006bec:	017d7840 	.word	0x017d7840

08006bf0 <LL_ADC_IsEnabled>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <LL_ADC_IsEnabled+0x18>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <LL_ADC_IsEnabled+0x1a>
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <LL_ADC_REG_IsConversionOngoing>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d101      	bne.n	8006c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b09f      	sub	sp, #124	; 0x7c
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0be      	b.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006c62:	2300      	movs	r3, #0
 8006c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a5c      	ldr	r2, [pc, #368]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d102      	bne.n	8006c7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c74:	4b5b      	ldr	r3, [pc, #364]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	e001      	b.n	8006c7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e09d      	b.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff ffb9 	bl	8006c16 <LL_ADC_REG_IsConversionOngoing>
 8006ca4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff ffb3 	bl	8006c16 <LL_ADC_REG_IsConversionOngoing>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d17f      	bne.n	8006db6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d17c      	bne.n	8006db6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a47      	ldr	r2, [pc, #284]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a46      	ldr	r2, [pc, #280]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006cd0:	4b45      	ldr	r3, [pc, #276]	; (8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006cd2:	e000      	b.n	8006cd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006cd4:	4b45      	ldr	r3, [pc, #276]	; (8006dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006cd6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d039      	beq.n	8006d54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3a      	ldr	r2, [pc, #232]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a38      	ldr	r2, [pc, #224]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10e      	bne.n	8006d24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006d06:	4836      	ldr	r0, [pc, #216]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d08:	f7ff ff72 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	4835      	ldr	r0, [pc, #212]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d10:	f7ff ff6e 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d14:	4603      	mov	r3, r0
 8006d16:	4323      	orrs	r3, r4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e008      	b.n	8006d36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006d24:	4832      	ldr	r0, [pc, #200]	; (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d26:	f7ff ff63 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d047      	beq.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b2d      	ldr	r3, [pc, #180]	; (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d52:	e03a      	b.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10e      	bne.n	8006d92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006d74:	481a      	ldr	r0, [pc, #104]	; (8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d76:	f7ff ff3b 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4819      	ldr	r0, [pc, #100]	; (8006de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d7e:	f7ff ff37 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4323      	orrs	r3, r4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bf0c      	ite	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	2300      	movne	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	e008      	b.n	8006da4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006d92:	4817      	ldr	r0, [pc, #92]	; (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d94:	f7ff ff2c 	bl	8006bf0 <LL_ADC_IsEnabled>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006db2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006db4:	e009      	b.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006dc8:	e000      	b.n	8006dcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	377c      	adds	r7, #124	; 0x7c
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd90      	pop	{r4, r7, pc}
 8006de0:	40022000 	.word	0x40022000
 8006de4:	40022100 	.word	0x40022100
 8006de8:	40022300 	.word	0x40022300
 8006dec:	58026300 	.word	0x58026300
 8006df0:	58026000 	.word	0x58026000
 8006df4:	fffff0e0 	.word	0xfffff0e0

08006df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <__NVIC_SetPriorityGrouping+0x40>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e14:	4013      	ands	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <__NVIC_SetPriorityGrouping+0x44>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <__NVIC_SetPriorityGrouping+0x40>)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	60d3      	str	r3, [r2, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	e000ed00 	.word	0xe000ed00
 8006e3c:	05fa0000 	.word	0x05fa0000

08006e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <__NVIC_GetPriorityGrouping+0x18>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	f003 0307 	and.w	r3, r3, #7
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	e000ed00 	.word	0xe000ed00

08006e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	db0b      	blt.n	8006e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	f003 021f 	and.w	r2, r3, #31
 8006e74:	4907      	ldr	r1, [pc, #28]	; (8006e94 <__NVIC_EnableIRQ+0x38>)
 8006e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	e000e100 	.word	0xe000e100

08006e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	db0a      	blt.n	8006ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	490c      	ldr	r1, [pc, #48]	; (8006ee4 <__NVIC_SetPriority+0x4c>)
 8006eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb6:	0112      	lsls	r2, r2, #4
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	440b      	add	r3, r1
 8006ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ec0:	e00a      	b.n	8006ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	4908      	ldr	r1, [pc, #32]	; (8006ee8 <__NVIC_SetPriority+0x50>)
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	0112      	lsls	r2, r2, #4
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	761a      	strb	r2, [r3, #24]
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	e000e100 	.word	0xe000e100
 8006ee8:	e000ed00 	.word	0xe000ed00

08006eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b089      	sub	sp, #36	; 0x24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f1c3 0307 	rsb	r3, r3, #7
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	bf28      	it	cs
 8006f0a:	2304      	movcs	r3, #4
 8006f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3304      	adds	r3, #4
 8006f12:	2b06      	cmp	r3, #6
 8006f14:	d902      	bls.n	8006f1c <NVIC_EncodePriority+0x30>
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3b03      	subs	r3, #3
 8006f1a:	e000      	b.n	8006f1e <NVIC_EncodePriority+0x32>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	43da      	mvns	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	401a      	ands	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3e:	43d9      	mvns	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f44:	4313      	orrs	r3, r2
         );
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3724      	adds	r7, #36	; 0x24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f64:	d301      	bcc.n	8006f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00f      	b.n	8006f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <SysTick_Config+0x40>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f72:	210f      	movs	r1, #15
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f78:	f7ff ff8e 	bl	8006e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <SysTick_Config+0x40>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <SysTick_Config+0x40>)
 8006f84:	2207      	movs	r2, #7
 8006f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	e000e010 	.word	0xe000e010

08006f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ff29 	bl	8006df8 <__NVIC_SetPriorityGrouping>
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fbc:	f7ff ff40 	bl	8006e40 <__NVIC_GetPriorityGrouping>
 8006fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	6978      	ldr	r0, [r7, #20]
 8006fc8:	f7ff ff90 	bl	8006eec <NVIC_EncodePriority>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ff5f 	bl	8006e98 <__NVIC_SetPriority>
}
 8006fda:	bf00      	nop
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff ff33 	bl	8006e5c <__NVIC_EnableIRQ>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff ffa4 	bl	8006f54 <SysTick_Config>
 800700c:	4603      	mov	r3, r0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007020:	f7fe fe20 	bl	8005c64 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e316      	b.n	800765e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a66      	ldr	r2, [pc, #408]	; (80071d0 <HAL_DMA_Init+0x1b8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d04a      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a65      	ldr	r2, [pc, #404]	; (80071d4 <HAL_DMA_Init+0x1bc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d045      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a63      	ldr	r2, [pc, #396]	; (80071d8 <HAL_DMA_Init+0x1c0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d040      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a62      	ldr	r2, [pc, #392]	; (80071dc <HAL_DMA_Init+0x1c4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d03b      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a60      	ldr	r2, [pc, #384]	; (80071e0 <HAL_DMA_Init+0x1c8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d036      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a5f      	ldr	r2, [pc, #380]	; (80071e4 <HAL_DMA_Init+0x1cc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d031      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a5d      	ldr	r2, [pc, #372]	; (80071e8 <HAL_DMA_Init+0x1d0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d02c      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a5c      	ldr	r2, [pc, #368]	; (80071ec <HAL_DMA_Init+0x1d4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d027      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5a      	ldr	r2, [pc, #360]	; (80071f0 <HAL_DMA_Init+0x1d8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a59      	ldr	r2, [pc, #356]	; (80071f4 <HAL_DMA_Init+0x1dc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01d      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a57      	ldr	r2, [pc, #348]	; (80071f8 <HAL_DMA_Init+0x1e0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a56      	ldr	r2, [pc, #344]	; (80071fc <HAL_DMA_Init+0x1e4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a54      	ldr	r2, [pc, #336]	; (8007200 <HAL_DMA_Init+0x1e8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a53      	ldr	r2, [pc, #332]	; (8007204 <HAL_DMA_Init+0x1ec>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a51      	ldr	r2, [pc, #324]	; (8007208 <HAL_DMA_Init+0x1f0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_DMA_Init+0xb8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a50      	ldr	r2, [pc, #320]	; (800720c <HAL_DMA_Init+0x1f4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <HAL_DMA_Init+0xbc>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <HAL_DMA_Init+0xbe>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 813b 	beq.w	8007352 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a37      	ldr	r2, [pc, #220]	; (80071d0 <HAL_DMA_Init+0x1b8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d04a      	beq.n	800718c <HAL_DMA_Init+0x174>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a36      	ldr	r2, [pc, #216]	; (80071d4 <HAL_DMA_Init+0x1bc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d045      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a34      	ldr	r2, [pc, #208]	; (80071d8 <HAL_DMA_Init+0x1c0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d040      	beq.n	800718c <HAL_DMA_Init+0x174>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a33      	ldr	r2, [pc, #204]	; (80071dc <HAL_DMA_Init+0x1c4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d03b      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a31      	ldr	r2, [pc, #196]	; (80071e0 <HAL_DMA_Init+0x1c8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d036      	beq.n	800718c <HAL_DMA_Init+0x174>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a30      	ldr	r2, [pc, #192]	; (80071e4 <HAL_DMA_Init+0x1cc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d031      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a2e      	ldr	r2, [pc, #184]	; (80071e8 <HAL_DMA_Init+0x1d0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d02c      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a2d      	ldr	r2, [pc, #180]	; (80071ec <HAL_DMA_Init+0x1d4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d027      	beq.n	800718c <HAL_DMA_Init+0x174>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a2b      	ldr	r2, [pc, #172]	; (80071f0 <HAL_DMA_Init+0x1d8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d022      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2a      	ldr	r2, [pc, #168]	; (80071f4 <HAL_DMA_Init+0x1dc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d01d      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a28      	ldr	r2, [pc, #160]	; (80071f8 <HAL_DMA_Init+0x1e0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d018      	beq.n	800718c <HAL_DMA_Init+0x174>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a27      	ldr	r2, [pc, #156]	; (80071fc <HAL_DMA_Init+0x1e4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a25      	ldr	r2, [pc, #148]	; (8007200 <HAL_DMA_Init+0x1e8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00e      	beq.n	800718c <HAL_DMA_Init+0x174>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a24      	ldr	r2, [pc, #144]	; (8007204 <HAL_DMA_Init+0x1ec>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a22      	ldr	r2, [pc, #136]	; (8007208 <HAL_DMA_Init+0x1f0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_DMA_Init+0x174>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a21      	ldr	r2, [pc, #132]	; (800720c <HAL_DMA_Init+0x1f4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d108      	bne.n	800719e <HAL_DMA_Init+0x186>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e007      	b.n	80071ae <HAL_DMA_Init+0x196>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071ae:	e02f      	b.n	8007210 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071b0:	f7fe fd58 	bl	8005c64 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d928      	bls.n	8007210 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e246      	b.n	800765e <HAL_DMA_Init+0x646>
 80071d0:	40020010 	.word	0x40020010
 80071d4:	40020028 	.word	0x40020028
 80071d8:	40020040 	.word	0x40020040
 80071dc:	40020058 	.word	0x40020058
 80071e0:	40020070 	.word	0x40020070
 80071e4:	40020088 	.word	0x40020088
 80071e8:	400200a0 	.word	0x400200a0
 80071ec:	400200b8 	.word	0x400200b8
 80071f0:	40020410 	.word	0x40020410
 80071f4:	40020428 	.word	0x40020428
 80071f8:	40020440 	.word	0x40020440
 80071fc:	40020458 	.word	0x40020458
 8007200:	40020470 	.word	0x40020470
 8007204:	40020488 	.word	0x40020488
 8007208:	400204a0 	.word	0x400204a0
 800720c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1c8      	bne.n	80071b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_DMA_Init+0x420>)
 800722a:	4013      	ands	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007236:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007242:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800724e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b04      	cmp	r3, #4
 8007262:	d107      	bne.n	8007274 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	4313      	orrs	r3, r2
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007274:	4b71      	ldr	r3, [pc, #452]	; (800743c <HAL_DMA_Init+0x424>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b71      	ldr	r3, [pc, #452]	; (8007440 <HAL_DMA_Init+0x428>)
 800727a:	4013      	ands	r3, r2
 800727c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007280:	d328      	bcc.n	80072d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b28      	cmp	r3, #40	; 0x28
 8007288:	d903      	bls.n	8007292 <HAL_DMA_Init+0x27a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b2e      	cmp	r3, #46	; 0x2e
 8007290:	d917      	bls.n	80072c2 <HAL_DMA_Init+0x2aa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b3e      	cmp	r3, #62	; 0x3e
 8007298:	d903      	bls.n	80072a2 <HAL_DMA_Init+0x28a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b42      	cmp	r3, #66	; 0x42
 80072a0:	d90f      	bls.n	80072c2 <HAL_DMA_Init+0x2aa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b46      	cmp	r3, #70	; 0x46
 80072a8:	d903      	bls.n	80072b2 <HAL_DMA_Init+0x29a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b48      	cmp	r3, #72	; 0x48
 80072b0:	d907      	bls.n	80072c2 <HAL_DMA_Init+0x2aa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b4e      	cmp	r3, #78	; 0x4e
 80072b8:	d905      	bls.n	80072c6 <HAL_DMA_Init+0x2ae>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b52      	cmp	r3, #82	; 0x52
 80072c0:	d801      	bhi.n	80072c6 <HAL_DMA_Init+0x2ae>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_DMA_Init+0x2b0>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f023 0307 	bic.w	r3, r3, #7
 80072ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d117      	bne.n	800732e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00e      	beq.n	800732e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f002 fb33 	bl	800997c <DMA_CheckFifoParam>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2240      	movs	r2, #64	; 0x40
 8007320:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e197      	b.n	800765e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fa6e 	bl	8009818 <DMA_CalcBaseAndBitshift>
 800733c:	4603      	mov	r3, r0
 800733e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	223f      	movs	r2, #63	; 0x3f
 800734a:	409a      	lsls	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	e0cd      	b.n	80074ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a3b      	ldr	r2, [pc, #236]	; (8007444 <HAL_DMA_Init+0x42c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a39      	ldr	r2, [pc, #228]	; (8007448 <HAL_DMA_Init+0x430>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a38      	ldr	r2, [pc, #224]	; (800744c <HAL_DMA_Init+0x434>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a36      	ldr	r2, [pc, #216]	; (8007450 <HAL_DMA_Init+0x438>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a35      	ldr	r2, [pc, #212]	; (8007454 <HAL_DMA_Init+0x43c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a33      	ldr	r2, [pc, #204]	; (8007458 <HAL_DMA_Init+0x440>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a32      	ldr	r2, [pc, #200]	; (800745c <HAL_DMA_Init+0x444>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_DMA_Init+0x38a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a30      	ldr	r2, [pc, #192]	; (8007460 <HAL_DMA_Init+0x448>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <HAL_DMA_Init+0x38e>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <HAL_DMA_Init+0x390>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8097 	beq.w	80074dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a24      	ldr	r2, [pc, #144]	; (8007444 <HAL_DMA_Init+0x42c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d021      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a22      	ldr	r2, [pc, #136]	; (8007448 <HAL_DMA_Init+0x430>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01c      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_DMA_Init+0x434>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d017      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <HAL_DMA_Init+0x438>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d012      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <HAL_DMA_Init+0x43c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00d      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_DMA_Init+0x440>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d008      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <HAL_DMA_Init+0x444>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <HAL_DMA_Init+0x3e4>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a19      	ldr	r2, [pc, #100]	; (8007460 <HAL_DMA_Init+0x448>)
 80073fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <HAL_DMA_Init+0x44c>)
 8007418:	4013      	ands	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d021      	beq.n	8007468 <HAL_DMA_Init+0x450>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d102      	bne.n	8007432 <HAL_DMA_Init+0x41a>
 800742c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007430:	e01b      	b.n	800746a <HAL_DMA_Init+0x452>
 8007432:	2300      	movs	r3, #0
 8007434:	e019      	b.n	800746a <HAL_DMA_Init+0x452>
 8007436:	bf00      	nop
 8007438:	fe10803f 	.word	0xfe10803f
 800743c:	5c001000 	.word	0x5c001000
 8007440:	ffff0000 	.word	0xffff0000
 8007444:	58025408 	.word	0x58025408
 8007448:	5802541c 	.word	0x5802541c
 800744c:	58025430 	.word	0x58025430
 8007450:	58025444 	.word	0x58025444
 8007454:	58025458 	.word	0x58025458
 8007458:	5802546c 	.word	0x5802546c
 800745c:	58025480 	.word	0x58025480
 8007460:	58025494 	.word	0x58025494
 8007464:	fffe000f 	.word	0xfffe000f
 8007468:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68d2      	ldr	r2, [r2, #12]
 800746e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007498:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	4b6e      	ldr	r3, [pc, #440]	; (8007668 <HAL_DMA_Init+0x650>)
 80074b0:	4413      	add	r3, r2
 80074b2:	4a6e      	ldr	r2, [pc, #440]	; (800766c <HAL_DMA_Init+0x654>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f002 f9a9 	bl	8009818 <DMA_CalcBaseAndBitshift>
 80074c6:	4603      	mov	r3, r0
 80074c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2201      	movs	r2, #1
 80074d4:	409a      	lsls	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	605a      	str	r2, [r3, #4]
 80074da:	e008      	b.n	80074ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2203      	movs	r2, #3
 80074e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0b7      	b.n	800765e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a5f      	ldr	r2, [pc, #380]	; (8007670 <HAL_DMA_Init+0x658>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d072      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a5d      	ldr	r2, [pc, #372]	; (8007674 <HAL_DMA_Init+0x65c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d06d      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a5c      	ldr	r2, [pc, #368]	; (8007678 <HAL_DMA_Init+0x660>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d068      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a5a      	ldr	r2, [pc, #360]	; (800767c <HAL_DMA_Init+0x664>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d063      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a59      	ldr	r2, [pc, #356]	; (8007680 <HAL_DMA_Init+0x668>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d05e      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a57      	ldr	r2, [pc, #348]	; (8007684 <HAL_DMA_Init+0x66c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d059      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a56      	ldr	r2, [pc, #344]	; (8007688 <HAL_DMA_Init+0x670>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d054      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a54      	ldr	r2, [pc, #336]	; (800768c <HAL_DMA_Init+0x674>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d04f      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a53      	ldr	r2, [pc, #332]	; (8007690 <HAL_DMA_Init+0x678>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a51      	ldr	r2, [pc, #324]	; (8007694 <HAL_DMA_Init+0x67c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a50      	ldr	r2, [pc, #320]	; (8007698 <HAL_DMA_Init+0x680>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a4e      	ldr	r2, [pc, #312]	; (800769c <HAL_DMA_Init+0x684>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a4d      	ldr	r2, [pc, #308]	; (80076a0 <HAL_DMA_Init+0x688>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a4b      	ldr	r2, [pc, #300]	; (80076a4 <HAL_DMA_Init+0x68c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a4a      	ldr	r2, [pc, #296]	; (80076a8 <HAL_DMA_Init+0x690>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a48      	ldr	r2, [pc, #288]	; (80076ac <HAL_DMA_Init+0x694>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a47      	ldr	r2, [pc, #284]	; (80076b0 <HAL_DMA_Init+0x698>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a45      	ldr	r2, [pc, #276]	; (80076b4 <HAL_DMA_Init+0x69c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a44      	ldr	r2, [pc, #272]	; (80076b8 <HAL_DMA_Init+0x6a0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a42      	ldr	r2, [pc, #264]	; (80076bc <HAL_DMA_Init+0x6a4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a41      	ldr	r2, [pc, #260]	; (80076c0 <HAL_DMA_Init+0x6a8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a3f      	ldr	r2, [pc, #252]	; (80076c4 <HAL_DMA_Init+0x6ac>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a3e      	ldr	r2, [pc, #248]	; (80076c8 <HAL_DMA_Init+0x6b0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_DMA_Init+0x5c6>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a3c      	ldr	r2, [pc, #240]	; (80076cc <HAL_DMA_Init+0x6b4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <HAL_DMA_Init+0x5ca>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <HAL_DMA_Init+0x5cc>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d032      	beq.n	800764e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 fa43 	bl	8009a74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d102      	bne.n	80075fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007610:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <HAL_DMA_Init+0x624>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b08      	cmp	r3, #8
 8007620:	d80c      	bhi.n	800763c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f002 fac0 	bl	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	e008      	b.n	800764e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	a7fdabf8 	.word	0xa7fdabf8
 800766c:	cccccccd 	.word	0xcccccccd
 8007670:	40020010 	.word	0x40020010
 8007674:	40020028 	.word	0x40020028
 8007678:	40020040 	.word	0x40020040
 800767c:	40020058 	.word	0x40020058
 8007680:	40020070 	.word	0x40020070
 8007684:	40020088 	.word	0x40020088
 8007688:	400200a0 	.word	0x400200a0
 800768c:	400200b8 	.word	0x400200b8
 8007690:	40020410 	.word	0x40020410
 8007694:	40020428 	.word	0x40020428
 8007698:	40020440 	.word	0x40020440
 800769c:	40020458 	.word	0x40020458
 80076a0:	40020470 	.word	0x40020470
 80076a4:	40020488 	.word	0x40020488
 80076a8:	400204a0 	.word	0x400204a0
 80076ac:	400204b8 	.word	0x400204b8
 80076b0:	58025408 	.word	0x58025408
 80076b4:	5802541c 	.word	0x5802541c
 80076b8:	58025430 	.word	0x58025430
 80076bc:	58025444 	.word	0x58025444
 80076c0:	58025458 	.word	0x58025458
 80076c4:	5802546c 	.word	0x5802546c
 80076c8:	58025480 	.word	0x58025480
 80076cc:	58025494 	.word	0x58025494

080076d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e226      	b.n	8007b3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_DMA_Start_IT+0x2a>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e21f      	b.n	8007b3a <HAL_DMA_Start_IT+0x46a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b01      	cmp	r3, #1
 800770c:	f040 820a 	bne.w	8007b24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a68      	ldr	r2, [pc, #416]	; (80078c4 <HAL_DMA_Start_IT+0x1f4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d04a      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a66      	ldr	r2, [pc, #408]	; (80078c8 <HAL_DMA_Start_IT+0x1f8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d045      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a65      	ldr	r2, [pc, #404]	; (80078cc <HAL_DMA_Start_IT+0x1fc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d040      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a63      	ldr	r2, [pc, #396]	; (80078d0 <HAL_DMA_Start_IT+0x200>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d03b      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a62      	ldr	r2, [pc, #392]	; (80078d4 <HAL_DMA_Start_IT+0x204>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d036      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a60      	ldr	r2, [pc, #384]	; (80078d8 <HAL_DMA_Start_IT+0x208>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d031      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a5f      	ldr	r2, [pc, #380]	; (80078dc <HAL_DMA_Start_IT+0x20c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d02c      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a5d      	ldr	r2, [pc, #372]	; (80078e0 <HAL_DMA_Start_IT+0x210>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d027      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a5c      	ldr	r2, [pc, #368]	; (80078e4 <HAL_DMA_Start_IT+0x214>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d022      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a5a      	ldr	r2, [pc, #360]	; (80078e8 <HAL_DMA_Start_IT+0x218>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01d      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a59      	ldr	r2, [pc, #356]	; (80078ec <HAL_DMA_Start_IT+0x21c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d018      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a57      	ldr	r2, [pc, #348]	; (80078f0 <HAL_DMA_Start_IT+0x220>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a56      	ldr	r2, [pc, #344]	; (80078f4 <HAL_DMA_Start_IT+0x224>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a54      	ldr	r2, [pc, #336]	; (80078f8 <HAL_DMA_Start_IT+0x228>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d009      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a53      	ldr	r2, [pc, #332]	; (80078fc <HAL_DMA_Start_IT+0x22c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d004      	beq.n	80077be <HAL_DMA_Start_IT+0xee>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a51      	ldr	r2, [pc, #324]	; (8007900 <HAL_DMA_Start_IT+0x230>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d108      	bne.n	80077d0 <HAL_DMA_Start_IT+0x100>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e007      	b.n	80077e0 <HAL_DMA_Start_IT+0x110>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0201 	bic.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f001 fe6a 	bl	80094c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <HAL_DMA_Start_IT+0x1f4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04a      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <HAL_DMA_Start_IT+0x1f8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d045      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a31      	ldr	r2, [pc, #196]	; (80078cc <HAL_DMA_Start_IT+0x1fc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d040      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <HAL_DMA_Start_IT+0x200>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d03b      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2e      	ldr	r2, [pc, #184]	; (80078d4 <HAL_DMA_Start_IT+0x204>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d036      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2d      	ldr	r2, [pc, #180]	; (80078d8 <HAL_DMA_Start_IT+0x208>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d031      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <HAL_DMA_Start_IT+0x20c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02c      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <HAL_DMA_Start_IT+0x210>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d027      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <HAL_DMA_Start_IT+0x214>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <HAL_DMA_Start_IT+0x218>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a25      	ldr	r2, [pc, #148]	; (80078ec <HAL_DMA_Start_IT+0x21c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <HAL_DMA_Start_IT+0x220>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <HAL_DMA_Start_IT+0x224>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <HAL_DMA_Start_IT+0x228>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <HAL_DMA_Start_IT+0x22c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_DMA_Start_IT+0x1bc>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <HAL_DMA_Start_IT+0x230>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d101      	bne.n	8007890 <HAL_DMA_Start_IT+0x1c0>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_DMA_Start_IT+0x1c2>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d036      	beq.n	8007904 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f023 021e 	bic.w	r2, r3, #30
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0216 	orr.w	r2, r2, #22
 80078a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d03e      	beq.n	8007930 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0208 	orr.w	r2, r2, #8
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e035      	b.n	8007930 <HAL_DMA_Start_IT+0x260>
 80078c4:	40020010 	.word	0x40020010
 80078c8:	40020028 	.word	0x40020028
 80078cc:	40020040 	.word	0x40020040
 80078d0:	40020058 	.word	0x40020058
 80078d4:	40020070 	.word	0x40020070
 80078d8:	40020088 	.word	0x40020088
 80078dc:	400200a0 	.word	0x400200a0
 80078e0:	400200b8 	.word	0x400200b8
 80078e4:	40020410 	.word	0x40020410
 80078e8:	40020428 	.word	0x40020428
 80078ec:	40020440 	.word	0x40020440
 80078f0:	40020458 	.word	0x40020458
 80078f4:	40020470 	.word	0x40020470
 80078f8:	40020488 	.word	0x40020488
 80078fc:	400204a0 	.word	0x400204a0
 8007900:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f023 020e 	bic.w	r2, r3, #14
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 020a 	orr.w	r2, r2, #10
 8007916:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0204 	orr.w	r2, r2, #4
 800792e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a83      	ldr	r2, [pc, #524]	; (8007b44 <HAL_DMA_Start_IT+0x474>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d072      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a82      	ldr	r2, [pc, #520]	; (8007b48 <HAL_DMA_Start_IT+0x478>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d06d      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a80      	ldr	r2, [pc, #512]	; (8007b4c <HAL_DMA_Start_IT+0x47c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d068      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7f      	ldr	r2, [pc, #508]	; (8007b50 <HAL_DMA_Start_IT+0x480>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d063      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a7d      	ldr	r2, [pc, #500]	; (8007b54 <HAL_DMA_Start_IT+0x484>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d05e      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a7c      	ldr	r2, [pc, #496]	; (8007b58 <HAL_DMA_Start_IT+0x488>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d059      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a7a      	ldr	r2, [pc, #488]	; (8007b5c <HAL_DMA_Start_IT+0x48c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d054      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a79      	ldr	r2, [pc, #484]	; (8007b60 <HAL_DMA_Start_IT+0x490>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d04f      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a77      	ldr	r2, [pc, #476]	; (8007b64 <HAL_DMA_Start_IT+0x494>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d04a      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a76      	ldr	r2, [pc, #472]	; (8007b68 <HAL_DMA_Start_IT+0x498>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d045      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a74      	ldr	r2, [pc, #464]	; (8007b6c <HAL_DMA_Start_IT+0x49c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d040      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a73      	ldr	r2, [pc, #460]	; (8007b70 <HAL_DMA_Start_IT+0x4a0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d03b      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a71      	ldr	r2, [pc, #452]	; (8007b74 <HAL_DMA_Start_IT+0x4a4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d036      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a70      	ldr	r2, [pc, #448]	; (8007b78 <HAL_DMA_Start_IT+0x4a8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d031      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6e      	ldr	r2, [pc, #440]	; (8007b7c <HAL_DMA_Start_IT+0x4ac>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d02c      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a6d      	ldr	r2, [pc, #436]	; (8007b80 <HAL_DMA_Start_IT+0x4b0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d027      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a6b      	ldr	r2, [pc, #428]	; (8007b84 <HAL_DMA_Start_IT+0x4b4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d022      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a6a      	ldr	r2, [pc, #424]	; (8007b88 <HAL_DMA_Start_IT+0x4b8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d01d      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a68      	ldr	r2, [pc, #416]	; (8007b8c <HAL_DMA_Start_IT+0x4bc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a67      	ldr	r2, [pc, #412]	; (8007b90 <HAL_DMA_Start_IT+0x4c0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a65      	ldr	r2, [pc, #404]	; (8007b94 <HAL_DMA_Start_IT+0x4c4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a64      	ldr	r2, [pc, #400]	; (8007b98 <HAL_DMA_Start_IT+0x4c8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a62      	ldr	r2, [pc, #392]	; (8007b9c <HAL_DMA_Start_IT+0x4cc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_DMA_Start_IT+0x350>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a61      	ldr	r2, [pc, #388]	; (8007ba0 <HAL_DMA_Start_IT+0x4d0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d101      	bne.n	8007a24 <HAL_DMA_Start_IT+0x354>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <HAL_DMA_Start_IT+0x356>
 8007a24:	2300      	movs	r3, #0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d01a      	beq.n	8007a60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a37      	ldr	r2, [pc, #220]	; (8007b44 <HAL_DMA_Start_IT+0x474>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d04a      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a36      	ldr	r2, [pc, #216]	; (8007b48 <HAL_DMA_Start_IT+0x478>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d045      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a34      	ldr	r2, [pc, #208]	; (8007b4c <HAL_DMA_Start_IT+0x47c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d040      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a33      	ldr	r2, [pc, #204]	; (8007b50 <HAL_DMA_Start_IT+0x480>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d03b      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a31      	ldr	r2, [pc, #196]	; (8007b54 <HAL_DMA_Start_IT+0x484>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d036      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a30      	ldr	r2, [pc, #192]	; (8007b58 <HAL_DMA_Start_IT+0x488>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d031      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2e      	ldr	r2, [pc, #184]	; (8007b5c <HAL_DMA_Start_IT+0x48c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02c      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a2d      	ldr	r2, [pc, #180]	; (8007b60 <HAL_DMA_Start_IT+0x490>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d027      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	; (8007b64 <HAL_DMA_Start_IT+0x494>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <HAL_DMA_Start_IT+0x498>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01d      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a28      	ldr	r2, [pc, #160]	; (8007b6c <HAL_DMA_Start_IT+0x49c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <HAL_DMA_Start_IT+0x4a0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a25      	ldr	r2, [pc, #148]	; (8007b74 <HAL_DMA_Start_IT+0x4a4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a24      	ldr	r2, [pc, #144]	; (8007b78 <HAL_DMA_Start_IT+0x4a8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <HAL_DMA_Start_IT+0x4ac>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <HAL_DMA_Start_IT+0x430>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <HAL_DMA_Start_IT+0x4b0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d108      	bne.n	8007b12 <HAL_DMA_Start_IT+0x442>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e012      	b.n	8007b38 <HAL_DMA_Start_IT+0x468>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e009      	b.n	8007b38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40020010 	.word	0x40020010
 8007b48:	40020028 	.word	0x40020028
 8007b4c:	40020040 	.word	0x40020040
 8007b50:	40020058 	.word	0x40020058
 8007b54:	40020070 	.word	0x40020070
 8007b58:	40020088 	.word	0x40020088
 8007b5c:	400200a0 	.word	0x400200a0
 8007b60:	400200b8 	.word	0x400200b8
 8007b64:	40020410 	.word	0x40020410
 8007b68:	40020428 	.word	0x40020428
 8007b6c:	40020440 	.word	0x40020440
 8007b70:	40020458 	.word	0x40020458
 8007b74:	40020470 	.word	0x40020470
 8007b78:	40020488 	.word	0x40020488
 8007b7c:	400204a0 	.word	0x400204a0
 8007b80:	400204b8 	.word	0x400204b8
 8007b84:	58025408 	.word	0x58025408
 8007b88:	5802541c 	.word	0x5802541c
 8007b8c:	58025430 	.word	0x58025430
 8007b90:	58025444 	.word	0x58025444
 8007b94:	58025458 	.word	0x58025458
 8007b98:	5802546c 	.word	0x5802546c
 8007b9c:	58025480 	.word	0x58025480
 8007ba0:	58025494 	.word	0x58025494

08007ba4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007bac:	f7fe f85a 	bl	8005c64 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e2dc      	b.n	8008176 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d008      	beq.n	8007bda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2280      	movs	r2, #128	; 0x80
 8007bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e2cd      	b.n	8008176 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a76      	ldr	r2, [pc, #472]	; (8007db8 <HAL_DMA_Abort+0x214>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d04a      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a74      	ldr	r2, [pc, #464]	; (8007dbc <HAL_DMA_Abort+0x218>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d045      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a73      	ldr	r2, [pc, #460]	; (8007dc0 <HAL_DMA_Abort+0x21c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d040      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a71      	ldr	r2, [pc, #452]	; (8007dc4 <HAL_DMA_Abort+0x220>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d03b      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a70      	ldr	r2, [pc, #448]	; (8007dc8 <HAL_DMA_Abort+0x224>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d036      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a6e      	ldr	r2, [pc, #440]	; (8007dcc <HAL_DMA_Abort+0x228>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d031      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a6d      	ldr	r2, [pc, #436]	; (8007dd0 <HAL_DMA_Abort+0x22c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d02c      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6b      	ldr	r2, [pc, #428]	; (8007dd4 <HAL_DMA_Abort+0x230>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d027      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a6a      	ldr	r2, [pc, #424]	; (8007dd8 <HAL_DMA_Abort+0x234>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d022      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a68      	ldr	r2, [pc, #416]	; (8007ddc <HAL_DMA_Abort+0x238>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01d      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a67      	ldr	r2, [pc, #412]	; (8007de0 <HAL_DMA_Abort+0x23c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d018      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a65      	ldr	r2, [pc, #404]	; (8007de4 <HAL_DMA_Abort+0x240>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a64      	ldr	r2, [pc, #400]	; (8007de8 <HAL_DMA_Abort+0x244>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00e      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a62      	ldr	r2, [pc, #392]	; (8007dec <HAL_DMA_Abort+0x248>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d009      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a61      	ldr	r2, [pc, #388]	; (8007df0 <HAL_DMA_Abort+0x24c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_DMA_Abort+0xd6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a5f      	ldr	r2, [pc, #380]	; (8007df4 <HAL_DMA_Abort+0x250>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <HAL_DMA_Abort+0xda>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <HAL_DMA_Abort+0xdc>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d013      	beq.n	8007cac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 021e 	bic.w	r2, r2, #30
 8007c92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ca2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	e00a      	b.n	8007cc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 020e 	bic.w	r2, r2, #14
 8007cba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3c      	ldr	r2, [pc, #240]	; (8007db8 <HAL_DMA_Abort+0x214>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d072      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3a      	ldr	r2, [pc, #232]	; (8007dbc <HAL_DMA_Abort+0x218>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d06d      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a39      	ldr	r2, [pc, #228]	; (8007dc0 <HAL_DMA_Abort+0x21c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d068      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <HAL_DMA_Abort+0x220>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d063      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a36      	ldr	r2, [pc, #216]	; (8007dc8 <HAL_DMA_Abort+0x224>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d05e      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <HAL_DMA_Abort+0x228>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d059      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a33      	ldr	r2, [pc, #204]	; (8007dd0 <HAL_DMA_Abort+0x22c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d054      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a31      	ldr	r2, [pc, #196]	; (8007dd4 <HAL_DMA_Abort+0x230>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d04f      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a30      	ldr	r2, [pc, #192]	; (8007dd8 <HAL_DMA_Abort+0x234>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d04a      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <HAL_DMA_Abort+0x238>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d045      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a2d      	ldr	r2, [pc, #180]	; (8007de0 <HAL_DMA_Abort+0x23c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d040      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <HAL_DMA_Abort+0x240>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d03b      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <HAL_DMA_Abort+0x244>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d036      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a28      	ldr	r2, [pc, #160]	; (8007dec <HAL_DMA_Abort+0x248>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d031      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <HAL_DMA_Abort+0x24c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d02c      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <HAL_DMA_Abort+0x250>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d027      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a24      	ldr	r2, [pc, #144]	; (8007df8 <HAL_DMA_Abort+0x254>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <HAL_DMA_Abort+0x258>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01d      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <HAL_DMA_Abort+0x25c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <HAL_DMA_Abort+0x260>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_DMA_Abort+0x264>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <HAL_DMA_Abort+0x268>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_DMA_Abort+0x26c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_DMA_Abort+0x20e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_DMA_Abort+0x270>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d132      	bne.n	8007e18 <HAL_DMA_Abort+0x274>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e031      	b.n	8007e1a <HAL_DMA_Abort+0x276>
 8007db6:	bf00      	nop
 8007db8:	40020010 	.word	0x40020010
 8007dbc:	40020028 	.word	0x40020028
 8007dc0:	40020040 	.word	0x40020040
 8007dc4:	40020058 	.word	0x40020058
 8007dc8:	40020070 	.word	0x40020070
 8007dcc:	40020088 	.word	0x40020088
 8007dd0:	400200a0 	.word	0x400200a0
 8007dd4:	400200b8 	.word	0x400200b8
 8007dd8:	40020410 	.word	0x40020410
 8007ddc:	40020428 	.word	0x40020428
 8007de0:	40020440 	.word	0x40020440
 8007de4:	40020458 	.word	0x40020458
 8007de8:	40020470 	.word	0x40020470
 8007dec:	40020488 	.word	0x40020488
 8007df0:	400204a0 	.word	0x400204a0
 8007df4:	400204b8 	.word	0x400204b8
 8007df8:	58025408 	.word	0x58025408
 8007dfc:	5802541c 	.word	0x5802541c
 8007e00:	58025430 	.word	0x58025430
 8007e04:	58025444 	.word	0x58025444
 8007e08:	58025458 	.word	0x58025458
 8007e0c:	5802546c 	.word	0x5802546c
 8007e10:	58025480 	.word	0x58025480
 8007e14:	58025494 	.word	0x58025494
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a6d      	ldr	r2, [pc, #436]	; (8007fe8 <HAL_DMA_Abort+0x444>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d04a      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a6b      	ldr	r2, [pc, #428]	; (8007fec <HAL_DMA_Abort+0x448>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d045      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6a      	ldr	r2, [pc, #424]	; (8007ff0 <HAL_DMA_Abort+0x44c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d040      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a68      	ldr	r2, [pc, #416]	; (8007ff4 <HAL_DMA_Abort+0x450>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d03b      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a67      	ldr	r2, [pc, #412]	; (8007ff8 <HAL_DMA_Abort+0x454>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d036      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a65      	ldr	r2, [pc, #404]	; (8007ffc <HAL_DMA_Abort+0x458>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d031      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a64      	ldr	r2, [pc, #400]	; (8008000 <HAL_DMA_Abort+0x45c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d02c      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a62      	ldr	r2, [pc, #392]	; (8008004 <HAL_DMA_Abort+0x460>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d027      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a61      	ldr	r2, [pc, #388]	; (8008008 <HAL_DMA_Abort+0x464>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d022      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a5f      	ldr	r2, [pc, #380]	; (800800c <HAL_DMA_Abort+0x468>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01d      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a5e      	ldr	r2, [pc, #376]	; (8008010 <HAL_DMA_Abort+0x46c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d018      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5c      	ldr	r2, [pc, #368]	; (8008014 <HAL_DMA_Abort+0x470>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a5b      	ldr	r2, [pc, #364]	; (8008018 <HAL_DMA_Abort+0x474>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a59      	ldr	r2, [pc, #356]	; (800801c <HAL_DMA_Abort+0x478>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a58      	ldr	r2, [pc, #352]	; (8008020 <HAL_DMA_Abort+0x47c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_DMA_Abort+0x32a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a56      	ldr	r2, [pc, #344]	; (8008024 <HAL_DMA_Abort+0x480>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d108      	bne.n	8007ee0 <HAL_DMA_Abort+0x33c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <HAL_DMA_Abort+0x34c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ef0:	e013      	b.n	8007f1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ef2:	f7fd feb7 	bl	8005c64 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d90c      	bls.n	8007f1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2203      	movs	r2, #3
 8007f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e12d      	b.n	8008176 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a2f      	ldr	r2, [pc, #188]	; (8007fe8 <HAL_DMA_Abort+0x444>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d04a      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2d      	ldr	r2, [pc, #180]	; (8007fec <HAL_DMA_Abort+0x448>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d045      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2c      	ldr	r2, [pc, #176]	; (8007ff0 <HAL_DMA_Abort+0x44c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d040      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2a      	ldr	r2, [pc, #168]	; (8007ff4 <HAL_DMA_Abort+0x450>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d03b      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a29      	ldr	r2, [pc, #164]	; (8007ff8 <HAL_DMA_Abort+0x454>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d036      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a27      	ldr	r2, [pc, #156]	; (8007ffc <HAL_DMA_Abort+0x458>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d031      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a26      	ldr	r2, [pc, #152]	; (8008000 <HAL_DMA_Abort+0x45c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d02c      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a24      	ldr	r2, [pc, #144]	; (8008004 <HAL_DMA_Abort+0x460>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d027      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a23      	ldr	r2, [pc, #140]	; (8008008 <HAL_DMA_Abort+0x464>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d022      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a21      	ldr	r2, [pc, #132]	; (800800c <HAL_DMA_Abort+0x468>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01d      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <HAL_DMA_Abort+0x46c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d018      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <HAL_DMA_Abort+0x470>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1d      	ldr	r2, [pc, #116]	; (8008018 <HAL_DMA_Abort+0x474>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1b      	ldr	r2, [pc, #108]	; (800801c <HAL_DMA_Abort+0x478>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1a      	ldr	r2, [pc, #104]	; (8008020 <HAL_DMA_Abort+0x47c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_DMA_Abort+0x422>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a18      	ldr	r2, [pc, #96]	; (8008024 <HAL_DMA_Abort+0x480>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d101      	bne.n	8007fca <HAL_DMA_Abort+0x426>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <HAL_DMA_Abort+0x428>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d02b      	beq.n	8008028 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	223f      	movs	r2, #63	; 0x3f
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	609a      	str	r2, [r3, #8]
 8007fe6:	e02a      	b.n	800803e <HAL_DMA_Abort+0x49a>
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2201      	movs	r2, #1
 8008038:	409a      	lsls	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a4f      	ldr	r2, [pc, #316]	; (8008180 <HAL_DMA_Abort+0x5dc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d072      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a4d      	ldr	r2, [pc, #308]	; (8008184 <HAL_DMA_Abort+0x5e0>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d06d      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a4c      	ldr	r2, [pc, #304]	; (8008188 <HAL_DMA_Abort+0x5e4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d068      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a4a      	ldr	r2, [pc, #296]	; (800818c <HAL_DMA_Abort+0x5e8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d063      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a49      	ldr	r2, [pc, #292]	; (8008190 <HAL_DMA_Abort+0x5ec>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d05e      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a47      	ldr	r2, [pc, #284]	; (8008194 <HAL_DMA_Abort+0x5f0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d059      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a46      	ldr	r2, [pc, #280]	; (8008198 <HAL_DMA_Abort+0x5f4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d054      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a44      	ldr	r2, [pc, #272]	; (800819c <HAL_DMA_Abort+0x5f8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d04f      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a43      	ldr	r2, [pc, #268]	; (80081a0 <HAL_DMA_Abort+0x5fc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d04a      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a41      	ldr	r2, [pc, #260]	; (80081a4 <HAL_DMA_Abort+0x600>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d045      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a40      	ldr	r2, [pc, #256]	; (80081a8 <HAL_DMA_Abort+0x604>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d040      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a3e      	ldr	r2, [pc, #248]	; (80081ac <HAL_DMA_Abort+0x608>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d03b      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a3d      	ldr	r2, [pc, #244]	; (80081b0 <HAL_DMA_Abort+0x60c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d036      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a3b      	ldr	r2, [pc, #236]	; (80081b4 <HAL_DMA_Abort+0x610>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d031      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a3a      	ldr	r2, [pc, #232]	; (80081b8 <HAL_DMA_Abort+0x614>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d02c      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a38      	ldr	r2, [pc, #224]	; (80081bc <HAL_DMA_Abort+0x618>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d027      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a37      	ldr	r2, [pc, #220]	; (80081c0 <HAL_DMA_Abort+0x61c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d022      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a35      	ldr	r2, [pc, #212]	; (80081c4 <HAL_DMA_Abort+0x620>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d01d      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a34      	ldr	r2, [pc, #208]	; (80081c8 <HAL_DMA_Abort+0x624>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d018      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a32      	ldr	r2, [pc, #200]	; (80081cc <HAL_DMA_Abort+0x628>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a31      	ldr	r2, [pc, #196]	; (80081d0 <HAL_DMA_Abort+0x62c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2f      	ldr	r2, [pc, #188]	; (80081d4 <HAL_DMA_Abort+0x630>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <HAL_DMA_Abort+0x634>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_DMA_Abort+0x58a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2c      	ldr	r2, [pc, #176]	; (80081dc <HAL_DMA_Abort+0x638>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <HAL_DMA_Abort+0x58e>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <HAL_DMA_Abort+0x590>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d015      	beq.n	8008164 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008140:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008158:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008162:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40020010 	.word	0x40020010
 8008184:	40020028 	.word	0x40020028
 8008188:	40020040 	.word	0x40020040
 800818c:	40020058 	.word	0x40020058
 8008190:	40020070 	.word	0x40020070
 8008194:	40020088 	.word	0x40020088
 8008198:	400200a0 	.word	0x400200a0
 800819c:	400200b8 	.word	0x400200b8
 80081a0:	40020410 	.word	0x40020410
 80081a4:	40020428 	.word	0x40020428
 80081a8:	40020440 	.word	0x40020440
 80081ac:	40020458 	.word	0x40020458
 80081b0:	40020470 	.word	0x40020470
 80081b4:	40020488 	.word	0x40020488
 80081b8:	400204a0 	.word	0x400204a0
 80081bc:	400204b8 	.word	0x400204b8
 80081c0:	58025408 	.word	0x58025408
 80081c4:	5802541c 	.word	0x5802541c
 80081c8:	58025430 	.word	0x58025430
 80081cc:	58025444 	.word	0x58025444
 80081d0:	58025458 	.word	0x58025458
 80081d4:	5802546c 	.word	0x5802546c
 80081d8:	58025480 	.word	0x58025480
 80081dc:	58025494 	.word	0x58025494

080081e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e237      	b.n	8008662 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d004      	beq.n	8008208 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2280      	movs	r2, #128	; 0x80
 8008202:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e22c      	b.n	8008662 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5c      	ldr	r2, [pc, #368]	; (8008380 <HAL_DMA_Abort_IT+0x1a0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d04a      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a5b      	ldr	r2, [pc, #364]	; (8008384 <HAL_DMA_Abort_IT+0x1a4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d045      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a59      	ldr	r2, [pc, #356]	; (8008388 <HAL_DMA_Abort_IT+0x1a8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d040      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a58      	ldr	r2, [pc, #352]	; (800838c <HAL_DMA_Abort_IT+0x1ac>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d03b      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a56      	ldr	r2, [pc, #344]	; (8008390 <HAL_DMA_Abort_IT+0x1b0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d036      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a55      	ldr	r2, [pc, #340]	; (8008394 <HAL_DMA_Abort_IT+0x1b4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d031      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a53      	ldr	r2, [pc, #332]	; (8008398 <HAL_DMA_Abort_IT+0x1b8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d02c      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a52      	ldr	r2, [pc, #328]	; (800839c <HAL_DMA_Abort_IT+0x1bc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d027      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a50      	ldr	r2, [pc, #320]	; (80083a0 <HAL_DMA_Abort_IT+0x1c0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d022      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a4f      	ldr	r2, [pc, #316]	; (80083a4 <HAL_DMA_Abort_IT+0x1c4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d01d      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a4d      	ldr	r2, [pc, #308]	; (80083a8 <HAL_DMA_Abort_IT+0x1c8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d018      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a4c      	ldr	r2, [pc, #304]	; (80083ac <HAL_DMA_Abort_IT+0x1cc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a4a      	ldr	r2, [pc, #296]	; (80083b0 <HAL_DMA_Abort_IT+0x1d0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00e      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a49      	ldr	r2, [pc, #292]	; (80083b4 <HAL_DMA_Abort_IT+0x1d4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d009      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a47      	ldr	r2, [pc, #284]	; (80083b8 <HAL_DMA_Abort_IT+0x1d8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_DMA_Abort_IT+0xc8>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a46      	ldr	r2, [pc, #280]	; (80083bc <HAL_DMA_Abort_IT+0x1dc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d101      	bne.n	80082ac <HAL_DMA_Abort_IT+0xcc>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <HAL_DMA_Abort_IT+0xce>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8086 	beq.w	80083c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2204      	movs	r2, #4
 80082b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2f      	ldr	r2, [pc, #188]	; (8008380 <HAL_DMA_Abort_IT+0x1a0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d04a      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <HAL_DMA_Abort_IT+0x1a4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d045      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2c      	ldr	r2, [pc, #176]	; (8008388 <HAL_DMA_Abort_IT+0x1a8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d040      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a2b      	ldr	r2, [pc, #172]	; (800838c <HAL_DMA_Abort_IT+0x1ac>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d03b      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a29      	ldr	r2, [pc, #164]	; (8008390 <HAL_DMA_Abort_IT+0x1b0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d036      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a28      	ldr	r2, [pc, #160]	; (8008394 <HAL_DMA_Abort_IT+0x1b4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d031      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a26      	ldr	r2, [pc, #152]	; (8008398 <HAL_DMA_Abort_IT+0x1b8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d02c      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a25      	ldr	r2, [pc, #148]	; (800839c <HAL_DMA_Abort_IT+0x1bc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d027      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a23      	ldr	r2, [pc, #140]	; (80083a0 <HAL_DMA_Abort_IT+0x1c0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d022      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <HAL_DMA_Abort_IT+0x1c4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d01d      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <HAL_DMA_Abort_IT+0x1c8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d018      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <HAL_DMA_Abort_IT+0x1cc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d013      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1d      	ldr	r2, [pc, #116]	; (80083b0 <HAL_DMA_Abort_IT+0x1d0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00e      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <HAL_DMA_Abort_IT+0x1d4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d009      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a1a      	ldr	r2, [pc, #104]	; (80083b8 <HAL_DMA_Abort_IT+0x1d8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d004      	beq.n	800835c <HAL_DMA_Abort_IT+0x17c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a19      	ldr	r2, [pc, #100]	; (80083bc <HAL_DMA_Abort_IT+0x1dc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d108      	bne.n	800836e <HAL_DMA_Abort_IT+0x18e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e178      	b.n	8008660 <HAL_DMA_Abort_IT+0x480>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0201 	bic.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e16f      	b.n	8008660 <HAL_DMA_Abort_IT+0x480>
 8008380:	40020010 	.word	0x40020010
 8008384:	40020028 	.word	0x40020028
 8008388:	40020040 	.word	0x40020040
 800838c:	40020058 	.word	0x40020058
 8008390:	40020070 	.word	0x40020070
 8008394:	40020088 	.word	0x40020088
 8008398:	400200a0 	.word	0x400200a0
 800839c:	400200b8 	.word	0x400200b8
 80083a0:	40020410 	.word	0x40020410
 80083a4:	40020428 	.word	0x40020428
 80083a8:	40020440 	.word	0x40020440
 80083ac:	40020458 	.word	0x40020458
 80083b0:	40020470 	.word	0x40020470
 80083b4:	40020488 	.word	0x40020488
 80083b8:	400204a0 	.word	0x400204a0
 80083bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 020e 	bic.w	r2, r2, #14
 80083ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6c      	ldr	r2, [pc, #432]	; (8008588 <HAL_DMA_Abort_IT+0x3a8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d04a      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a6b      	ldr	r2, [pc, #428]	; (800858c <HAL_DMA_Abort_IT+0x3ac>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d045      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a69      	ldr	r2, [pc, #420]	; (8008590 <HAL_DMA_Abort_IT+0x3b0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d040      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a68      	ldr	r2, [pc, #416]	; (8008594 <HAL_DMA_Abort_IT+0x3b4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d03b      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a66      	ldr	r2, [pc, #408]	; (8008598 <HAL_DMA_Abort_IT+0x3b8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d036      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a65      	ldr	r2, [pc, #404]	; (800859c <HAL_DMA_Abort_IT+0x3bc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d031      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a63      	ldr	r2, [pc, #396]	; (80085a0 <HAL_DMA_Abort_IT+0x3c0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d02c      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a62      	ldr	r2, [pc, #392]	; (80085a4 <HAL_DMA_Abort_IT+0x3c4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d027      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a60      	ldr	r2, [pc, #384]	; (80085a8 <HAL_DMA_Abort_IT+0x3c8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d022      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a5f      	ldr	r2, [pc, #380]	; (80085ac <HAL_DMA_Abort_IT+0x3cc>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d01d      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a5d      	ldr	r2, [pc, #372]	; (80085b0 <HAL_DMA_Abort_IT+0x3d0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d018      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a5c      	ldr	r2, [pc, #368]	; (80085b4 <HAL_DMA_Abort_IT+0x3d4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d013      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a5a      	ldr	r2, [pc, #360]	; (80085b8 <HAL_DMA_Abort_IT+0x3d8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00e      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a59      	ldr	r2, [pc, #356]	; (80085bc <HAL_DMA_Abort_IT+0x3dc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d009      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a57      	ldr	r2, [pc, #348]	; (80085c0 <HAL_DMA_Abort_IT+0x3e0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <HAL_DMA_Abort_IT+0x290>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a56      	ldr	r2, [pc, #344]	; (80085c4 <HAL_DMA_Abort_IT+0x3e4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d108      	bne.n	8008482 <HAL_DMA_Abort_IT+0x2a2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e007      	b.n	8008492 <HAL_DMA_Abort_IT+0x2b2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a3c      	ldr	r2, [pc, #240]	; (8008588 <HAL_DMA_Abort_IT+0x3a8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d072      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a3a      	ldr	r2, [pc, #232]	; (800858c <HAL_DMA_Abort_IT+0x3ac>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d06d      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a39      	ldr	r2, [pc, #228]	; (8008590 <HAL_DMA_Abort_IT+0x3b0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d068      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a37      	ldr	r2, [pc, #220]	; (8008594 <HAL_DMA_Abort_IT+0x3b4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d063      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a36      	ldr	r2, [pc, #216]	; (8008598 <HAL_DMA_Abort_IT+0x3b8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d05e      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a34      	ldr	r2, [pc, #208]	; (800859c <HAL_DMA_Abort_IT+0x3bc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d059      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a33      	ldr	r2, [pc, #204]	; (80085a0 <HAL_DMA_Abort_IT+0x3c0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d054      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a31      	ldr	r2, [pc, #196]	; (80085a4 <HAL_DMA_Abort_IT+0x3c4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d04f      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a30      	ldr	r2, [pc, #192]	; (80085a8 <HAL_DMA_Abort_IT+0x3c8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d04a      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a2e      	ldr	r2, [pc, #184]	; (80085ac <HAL_DMA_Abort_IT+0x3cc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d045      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a2d      	ldr	r2, [pc, #180]	; (80085b0 <HAL_DMA_Abort_IT+0x3d0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d040      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <HAL_DMA_Abort_IT+0x3d4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d03b      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a2a      	ldr	r2, [pc, #168]	; (80085b8 <HAL_DMA_Abort_IT+0x3d8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d036      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a28      	ldr	r2, [pc, #160]	; (80085bc <HAL_DMA_Abort_IT+0x3dc>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d031      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <HAL_DMA_Abort_IT+0x3e0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d02c      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a25      	ldr	r2, [pc, #148]	; (80085c4 <HAL_DMA_Abort_IT+0x3e4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d027      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a24      	ldr	r2, [pc, #144]	; (80085c8 <HAL_DMA_Abort_IT+0x3e8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d022      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a22      	ldr	r2, [pc, #136]	; (80085cc <HAL_DMA_Abort_IT+0x3ec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d01d      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a21      	ldr	r2, [pc, #132]	; (80085d0 <HAL_DMA_Abort_IT+0x3f0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d018      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <HAL_DMA_Abort_IT+0x3f4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <HAL_DMA_Abort_IT+0x3f8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00e      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1c      	ldr	r2, [pc, #112]	; (80085dc <HAL_DMA_Abort_IT+0x3fc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_DMA_Abort_IT+0x400>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <HAL_DMA_Abort_IT+0x3a2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a19      	ldr	r2, [pc, #100]	; (80085e4 <HAL_DMA_Abort_IT+0x404>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d132      	bne.n	80085e8 <HAL_DMA_Abort_IT+0x408>
 8008582:	2301      	movs	r3, #1
 8008584:	e031      	b.n	80085ea <HAL_DMA_Abort_IT+0x40a>
 8008586:	bf00      	nop
 8008588:	40020010 	.word	0x40020010
 800858c:	40020028 	.word	0x40020028
 8008590:	40020040 	.word	0x40020040
 8008594:	40020058 	.word	0x40020058
 8008598:	40020070 	.word	0x40020070
 800859c:	40020088 	.word	0x40020088
 80085a0:	400200a0 	.word	0x400200a0
 80085a4:	400200b8 	.word	0x400200b8
 80085a8:	40020410 	.word	0x40020410
 80085ac:	40020428 	.word	0x40020428
 80085b0:	40020440 	.word	0x40020440
 80085b4:	40020458 	.word	0x40020458
 80085b8:	40020470 	.word	0x40020470
 80085bc:	40020488 	.word	0x40020488
 80085c0:	400204a0 	.word	0x400204a0
 80085c4:	400204b8 	.word	0x400204b8
 80085c8:	58025408 	.word	0x58025408
 80085cc:	5802541c 	.word	0x5802541c
 80085d0:	58025430 	.word	0x58025430
 80085d4:	58025444 	.word	0x58025444
 80085d8:	58025458 	.word	0x58025458
 80085dc:	5802546c 	.word	0x5802546c
 80085e0:	58025480 	.word	0x58025480
 80085e4:	58025494 	.word	0x58025494
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d028      	beq.n	8008640 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008608:	f003 031f 	and.w	r3, r3, #31
 800860c:	2201      	movs	r2, #1
 800860e:	409a      	lsls	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800861c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00c      	beq.n	8008640 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008634:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800863e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop

0800866c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008678:	4b67      	ldr	r3, [pc, #412]	; (8008818 <HAL_DMA_IRQHandler+0x1ac>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a67      	ldr	r2, [pc, #412]	; (800881c <HAL_DMA_IRQHandler+0x1b0>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	0a9b      	lsrs	r3, r3, #10
 8008684:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a5f      	ldr	r2, [pc, #380]	; (8008820 <HAL_DMA_IRQHandler+0x1b4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d04a      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a5d      	ldr	r2, [pc, #372]	; (8008824 <HAL_DMA_IRQHandler+0x1b8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d045      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a5c      	ldr	r2, [pc, #368]	; (8008828 <HAL_DMA_IRQHandler+0x1bc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d040      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a5a      	ldr	r2, [pc, #360]	; (800882c <HAL_DMA_IRQHandler+0x1c0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d03b      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a59      	ldr	r2, [pc, #356]	; (8008830 <HAL_DMA_IRQHandler+0x1c4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d036      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a57      	ldr	r2, [pc, #348]	; (8008834 <HAL_DMA_IRQHandler+0x1c8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d031      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a56      	ldr	r2, [pc, #344]	; (8008838 <HAL_DMA_IRQHandler+0x1cc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d02c      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a54      	ldr	r2, [pc, #336]	; (800883c <HAL_DMA_IRQHandler+0x1d0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d027      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a53      	ldr	r2, [pc, #332]	; (8008840 <HAL_DMA_IRQHandler+0x1d4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d022      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a51      	ldr	r2, [pc, #324]	; (8008844 <HAL_DMA_IRQHandler+0x1d8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01d      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a50      	ldr	r2, [pc, #320]	; (8008848 <HAL_DMA_IRQHandler+0x1dc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d018      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a4e      	ldr	r2, [pc, #312]	; (800884c <HAL_DMA_IRQHandler+0x1e0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d013      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a4d      	ldr	r2, [pc, #308]	; (8008850 <HAL_DMA_IRQHandler+0x1e4>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00e      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a4b      	ldr	r2, [pc, #300]	; (8008854 <HAL_DMA_IRQHandler+0x1e8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d009      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a4a      	ldr	r2, [pc, #296]	; (8008858 <HAL_DMA_IRQHandler+0x1ec>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d004      	beq.n	800873e <HAL_DMA_IRQHandler+0xd2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a48      	ldr	r2, [pc, #288]	; (800885c <HAL_DMA_IRQHandler+0x1f0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d101      	bne.n	8008742 <HAL_DMA_IRQHandler+0xd6>
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <HAL_DMA_IRQHandler+0xd8>
 8008742:	2300      	movs	r3, #0
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 842b 	beq.w	8008fa0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874e:	f003 031f 	and.w	r3, r3, #31
 8008752:	2208      	movs	r2, #8
 8008754:	409a      	lsls	r2, r3
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80a2 	beq.w	80088a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <HAL_DMA_IRQHandler+0x1b4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d04a      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <HAL_DMA_IRQHandler+0x1b8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d045      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <HAL_DMA_IRQHandler+0x1bc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d040      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a2a      	ldr	r2, [pc, #168]	; (800882c <HAL_DMA_IRQHandler+0x1c0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d03b      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a28      	ldr	r2, [pc, #160]	; (8008830 <HAL_DMA_IRQHandler+0x1c4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d036      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a27      	ldr	r2, [pc, #156]	; (8008834 <HAL_DMA_IRQHandler+0x1c8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d031      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <HAL_DMA_IRQHandler+0x1cc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d02c      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a24      	ldr	r2, [pc, #144]	; (800883c <HAL_DMA_IRQHandler+0x1d0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d027      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a22      	ldr	r2, [pc, #136]	; (8008840 <HAL_DMA_IRQHandler+0x1d4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a21      	ldr	r2, [pc, #132]	; (8008844 <HAL_DMA_IRQHandler+0x1d8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d01d      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <HAL_DMA_IRQHandler+0x1dc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1e      	ldr	r2, [pc, #120]	; (800884c <HAL_DMA_IRQHandler+0x1e0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1c      	ldr	r2, [pc, #112]	; (8008850 <HAL_DMA_IRQHandler+0x1e4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1b      	ldr	r2, [pc, #108]	; (8008854 <HAL_DMA_IRQHandler+0x1e8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a19      	ldr	r2, [pc, #100]	; (8008858 <HAL_DMA_IRQHandler+0x1ec>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_DMA_IRQHandler+0x194>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_DMA_IRQHandler+0x1f0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d12f      	bne.n	8008860 <HAL_DMA_IRQHandler+0x1f4>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	e02e      	b.n	8008874 <HAL_DMA_IRQHandler+0x208>
 8008816:	bf00      	nop
 8008818:	2400003c 	.word	0x2400003c
 800881c:	1b4e81b5 	.word	0x1b4e81b5
 8008820:	40020010 	.word	0x40020010
 8008824:	40020028 	.word	0x40020028
 8008828:	40020040 	.word	0x40020040
 800882c:	40020058 	.word	0x40020058
 8008830:	40020070 	.word	0x40020070
 8008834:	40020088 	.word	0x40020088
 8008838:	400200a0 	.word	0x400200a0
 800883c:	400200b8 	.word	0x400200b8
 8008840:	40020410 	.word	0x40020410
 8008844:	40020428 	.word	0x40020428
 8008848:	40020440 	.word	0x40020440
 800884c:	40020458 	.word	0x40020458
 8008850:	40020470 	.word	0x40020470
 8008854:	40020488 	.word	0x40020488
 8008858:	400204a0 	.word	0x400204a0
 800885c:	400204b8 	.word	0x400204b8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	bf14      	ite	ne
 800886e:	2301      	movne	r3, #1
 8008870:	2300      	moveq	r3, #0
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d015      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0204 	bic.w	r2, r2, #4
 8008886:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	2208      	movs	r2, #8
 8008892:	409a      	lsls	r2, r3
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889c:	f043 0201 	orr.w	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	fa22 f303 	lsr.w	r3, r2, r3
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d06e      	beq.n	8008998 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a69      	ldr	r2, [pc, #420]	; (8008a64 <HAL_DMA_IRQHandler+0x3f8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d04a      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a67      	ldr	r2, [pc, #412]	; (8008a68 <HAL_DMA_IRQHandler+0x3fc>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d045      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a66      	ldr	r2, [pc, #408]	; (8008a6c <HAL_DMA_IRQHandler+0x400>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d040      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a64      	ldr	r2, [pc, #400]	; (8008a70 <HAL_DMA_IRQHandler+0x404>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d03b      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a63      	ldr	r2, [pc, #396]	; (8008a74 <HAL_DMA_IRQHandler+0x408>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d036      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a61      	ldr	r2, [pc, #388]	; (8008a78 <HAL_DMA_IRQHandler+0x40c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d031      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a60      	ldr	r2, [pc, #384]	; (8008a7c <HAL_DMA_IRQHandler+0x410>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d02c      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a5e      	ldr	r2, [pc, #376]	; (8008a80 <HAL_DMA_IRQHandler+0x414>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d027      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a5d      	ldr	r2, [pc, #372]	; (8008a84 <HAL_DMA_IRQHandler+0x418>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d022      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a5b      	ldr	r2, [pc, #364]	; (8008a88 <HAL_DMA_IRQHandler+0x41c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01d      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a5a      	ldr	r2, [pc, #360]	; (8008a8c <HAL_DMA_IRQHandler+0x420>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d018      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a58      	ldr	r2, [pc, #352]	; (8008a90 <HAL_DMA_IRQHandler+0x424>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d013      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a57      	ldr	r2, [pc, #348]	; (8008a94 <HAL_DMA_IRQHandler+0x428>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00e      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a55      	ldr	r2, [pc, #340]	; (8008a98 <HAL_DMA_IRQHandler+0x42c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d009      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a54      	ldr	r2, [pc, #336]	; (8008a9c <HAL_DMA_IRQHandler+0x430>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d004      	beq.n	800895a <HAL_DMA_IRQHandler+0x2ee>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a52      	ldr	r2, [pc, #328]	; (8008aa0 <HAL_DMA_IRQHandler+0x434>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d10a      	bne.n	8008970 <HAL_DMA_IRQHandler+0x304>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e003      	b.n	8008978 <HAL_DMA_IRQHandler+0x30c>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00d      	beq.n	8008998 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	2201      	movs	r2, #1
 8008986:	409a      	lsls	r2, r3
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	f043 0202 	orr.w	r2, r3, #2
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	f003 031f 	and.w	r3, r3, #31
 80089a0:	2204      	movs	r2, #4
 80089a2:	409a      	lsls	r2, r3
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 808f 	beq.w	8008acc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a2c      	ldr	r2, [pc, #176]	; (8008a64 <HAL_DMA_IRQHandler+0x3f8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d04a      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <HAL_DMA_IRQHandler+0x3fc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d045      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a29      	ldr	r2, [pc, #164]	; (8008a6c <HAL_DMA_IRQHandler+0x400>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d040      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a27      	ldr	r2, [pc, #156]	; (8008a70 <HAL_DMA_IRQHandler+0x404>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d03b      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a26      	ldr	r2, [pc, #152]	; (8008a74 <HAL_DMA_IRQHandler+0x408>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d036      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a24      	ldr	r2, [pc, #144]	; (8008a78 <HAL_DMA_IRQHandler+0x40c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d031      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <HAL_DMA_IRQHandler+0x410>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d02c      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a21      	ldr	r2, [pc, #132]	; (8008a80 <HAL_DMA_IRQHandler+0x414>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d027      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a20      	ldr	r2, [pc, #128]	; (8008a84 <HAL_DMA_IRQHandler+0x418>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d022      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <HAL_DMA_IRQHandler+0x41c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d01d      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <HAL_DMA_IRQHandler+0x420>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d018      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <HAL_DMA_IRQHandler+0x424>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d013      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1a      	ldr	r2, [pc, #104]	; (8008a94 <HAL_DMA_IRQHandler+0x428>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <HAL_DMA_IRQHandler+0x42c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d009      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a17      	ldr	r2, [pc, #92]	; (8008a9c <HAL_DMA_IRQHandler+0x430>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x3e2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <HAL_DMA_IRQHandler+0x434>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d12a      	bne.n	8008aa4 <HAL_DMA_IRQHandler+0x438>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf14      	ite	ne
 8008a5c:	2301      	movne	r3, #1
 8008a5e:	2300      	moveq	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	e023      	b.n	8008aac <HAL_DMA_IRQHandler+0x440>
 8008a64:	40020010 	.word	0x40020010
 8008a68:	40020028 	.word	0x40020028
 8008a6c:	40020040 	.word	0x40020040
 8008a70:	40020058 	.word	0x40020058
 8008a74:	40020070 	.word	0x40020070
 8008a78:	40020088 	.word	0x40020088
 8008a7c:	400200a0 	.word	0x400200a0
 8008a80:	400200b8 	.word	0x400200b8
 8008a84:	40020410 	.word	0x40020410
 8008a88:	40020428 	.word	0x40020428
 8008a8c:	40020440 	.word	0x40020440
 8008a90:	40020458 	.word	0x40020458
 8008a94:	40020470 	.word	0x40020470
 8008a98:	40020488 	.word	0x40020488
 8008a9c:	400204a0 	.word	0x400204a0
 8008aa0:	400204b8 	.word	0x400204b8
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00d      	beq.n	8008acc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab4:	f003 031f 	and.w	r3, r3, #31
 8008ab8:	2204      	movs	r2, #4
 8008aba:	409a      	lsls	r2, r3
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac4:	f043 0204 	orr.w	r2, r3, #4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2210      	movs	r2, #16
 8008ad6:	409a      	lsls	r2, r3
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80a6 	beq.w	8008c2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a85      	ldr	r2, [pc, #532]	; (8008cfc <HAL_DMA_IRQHandler+0x690>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d04a      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a83      	ldr	r2, [pc, #524]	; (8008d00 <HAL_DMA_IRQHandler+0x694>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d045      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a82      	ldr	r2, [pc, #520]	; (8008d04 <HAL_DMA_IRQHandler+0x698>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d040      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a80      	ldr	r2, [pc, #512]	; (8008d08 <HAL_DMA_IRQHandler+0x69c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d03b      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a7f      	ldr	r2, [pc, #508]	; (8008d0c <HAL_DMA_IRQHandler+0x6a0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d036      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a7d      	ldr	r2, [pc, #500]	; (8008d10 <HAL_DMA_IRQHandler+0x6a4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d031      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a7c      	ldr	r2, [pc, #496]	; (8008d14 <HAL_DMA_IRQHandler+0x6a8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d02c      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a7a      	ldr	r2, [pc, #488]	; (8008d18 <HAL_DMA_IRQHandler+0x6ac>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d027      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a79      	ldr	r2, [pc, #484]	; (8008d1c <HAL_DMA_IRQHandler+0x6b0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d022      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a77      	ldr	r2, [pc, #476]	; (8008d20 <HAL_DMA_IRQHandler+0x6b4>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01d      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a76      	ldr	r2, [pc, #472]	; (8008d24 <HAL_DMA_IRQHandler+0x6b8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d018      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a74      	ldr	r2, [pc, #464]	; (8008d28 <HAL_DMA_IRQHandler+0x6bc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d013      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a73      	ldr	r2, [pc, #460]	; (8008d2c <HAL_DMA_IRQHandler+0x6c0>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00e      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a71      	ldr	r2, [pc, #452]	; (8008d30 <HAL_DMA_IRQHandler+0x6c4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d009      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a70      	ldr	r2, [pc, #448]	; (8008d34 <HAL_DMA_IRQHandler+0x6c8>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d004      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x516>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a6e      	ldr	r2, [pc, #440]	; (8008d38 <HAL_DMA_IRQHandler+0x6cc>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10a      	bne.n	8008b98 <HAL_DMA_IRQHandler+0x52c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bf14      	ite	ne
 8008b90:	2301      	movne	r3, #1
 8008b92:	2300      	moveq	r3, #0
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	e009      	b.n	8008bac <HAL_DMA_IRQHandler+0x540>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bf14      	ite	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	2300      	moveq	r3, #0
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d03e      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	2210      	movs	r2, #16
 8008bba:	409a      	lsls	r2, r3
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d018      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d024      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
 8008bec:	e01f      	b.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01b      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
 8008bfe:	e016      	b.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d107      	bne.n	8008c1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0208 	bic.w	r2, r2, #8
 8008c1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2220      	movs	r2, #32
 8008c38:	409a      	lsls	r2, r3
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 8110 	beq.w	8008e64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a2c      	ldr	r2, [pc, #176]	; (8008cfc <HAL_DMA_IRQHandler+0x690>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d04a      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a2b      	ldr	r2, [pc, #172]	; (8008d00 <HAL_DMA_IRQHandler+0x694>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d045      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a29      	ldr	r2, [pc, #164]	; (8008d04 <HAL_DMA_IRQHandler+0x698>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d040      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a28      	ldr	r2, [pc, #160]	; (8008d08 <HAL_DMA_IRQHandler+0x69c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d03b      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a26      	ldr	r2, [pc, #152]	; (8008d0c <HAL_DMA_IRQHandler+0x6a0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d036      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a25      	ldr	r2, [pc, #148]	; (8008d10 <HAL_DMA_IRQHandler+0x6a4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d031      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a23      	ldr	r2, [pc, #140]	; (8008d14 <HAL_DMA_IRQHandler+0x6a8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d02c      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <HAL_DMA_IRQHandler+0x6ac>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d027      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a20      	ldr	r2, [pc, #128]	; (8008d1c <HAL_DMA_IRQHandler+0x6b0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d022      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <HAL_DMA_IRQHandler+0x6b4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d01d      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_DMA_IRQHandler+0x6b8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d018      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_DMA_IRQHandler+0x6bc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d013      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <HAL_DMA_IRQHandler+0x6c0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00e      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a19      	ldr	r2, [pc, #100]	; (8008d30 <HAL_DMA_IRQHandler+0x6c4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d009      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <HAL_DMA_IRQHandler+0x6c8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x678>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <HAL_DMA_IRQHandler+0x6cc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d12b      	bne.n	8008d3c <HAL_DMA_IRQHandler+0x6d0>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0310 	and.w	r3, r3, #16
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	e02a      	b.n	8008d50 <HAL_DMA_IRQHandler+0x6e4>
 8008cfa:	bf00      	nop
 8008cfc:	40020010 	.word	0x40020010
 8008d00:	40020028 	.word	0x40020028
 8008d04:	40020040 	.word	0x40020040
 8008d08:	40020058 	.word	0x40020058
 8008d0c:	40020070 	.word	0x40020070
 8008d10:	40020088 	.word	0x40020088
 8008d14:	400200a0 	.word	0x400200a0
 8008d18:	400200b8 	.word	0x400200b8
 8008d1c:	40020410 	.word	0x40020410
 8008d20:	40020428 	.word	0x40020428
 8008d24:	40020440 	.word	0x40020440
 8008d28:	40020458 	.word	0x40020458
 8008d2c:	40020470 	.word	0x40020470
 8008d30:	40020488 	.word	0x40020488
 8008d34:	400204a0 	.word	0x400204a0
 8008d38:	400204b8 	.word	0x400204b8
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8087 	beq.w	8008e64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2220      	movs	r2, #32
 8008d60:	409a      	lsls	r2, r3
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d139      	bne.n	8008de6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0216 	bic.w	r2, r2, #22
 8008d80:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	695a      	ldr	r2, [r3, #20]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d90:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d103      	bne.n	8008da2 <HAL_DMA_IRQHandler+0x736>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d007      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0208 	bic.w	r2, r2, #8
 8008db0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	223f      	movs	r2, #63	; 0x3f
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 834a 	beq.w	8009470 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
          }
          return;
 8008de4:	e344      	b.n	8009470 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d018      	beq.n	8008e26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d108      	bne.n	8008e14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02c      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	4798      	blx	r3
 8008e12:	e027      	b.n	8008e64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d023      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
 8008e24:	e01e      	b.n	8008e64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10f      	bne.n	8008e54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0210 	bic.w	r2, r2, #16
 8008e42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8306 	beq.w	800947a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8088 	beq.w	8008f8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a7a      	ldr	r2, [pc, #488]	; (8009074 <HAL_DMA_IRQHandler+0xa08>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d04a      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a79      	ldr	r2, [pc, #484]	; (8009078 <HAL_DMA_IRQHandler+0xa0c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d045      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a77      	ldr	r2, [pc, #476]	; (800907c <HAL_DMA_IRQHandler+0xa10>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d040      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a76      	ldr	r2, [pc, #472]	; (8009080 <HAL_DMA_IRQHandler+0xa14>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d03b      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a74      	ldr	r2, [pc, #464]	; (8009084 <HAL_DMA_IRQHandler+0xa18>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d036      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a73      	ldr	r2, [pc, #460]	; (8009088 <HAL_DMA_IRQHandler+0xa1c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d031      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a71      	ldr	r2, [pc, #452]	; (800908c <HAL_DMA_IRQHandler+0xa20>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d02c      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a70      	ldr	r2, [pc, #448]	; (8009090 <HAL_DMA_IRQHandler+0xa24>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d027      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a6e      	ldr	r2, [pc, #440]	; (8009094 <HAL_DMA_IRQHandler+0xa28>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d022      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a6d      	ldr	r2, [pc, #436]	; (8009098 <HAL_DMA_IRQHandler+0xa2c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01d      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a6b      	ldr	r2, [pc, #428]	; (800909c <HAL_DMA_IRQHandler+0xa30>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d018      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a6a      	ldr	r2, [pc, #424]	; (80090a0 <HAL_DMA_IRQHandler+0xa34>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a68      	ldr	r2, [pc, #416]	; (80090a4 <HAL_DMA_IRQHandler+0xa38>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00e      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a67      	ldr	r2, [pc, #412]	; (80090a8 <HAL_DMA_IRQHandler+0xa3c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a65      	ldr	r2, [pc, #404]	; (80090ac <HAL_DMA_IRQHandler+0xa40>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x8b8>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a64      	ldr	r2, [pc, #400]	; (80090b0 <HAL_DMA_IRQHandler+0xa44>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d108      	bne.n	8008f36 <HAL_DMA_IRQHandler+0x8ca>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	e007      	b.n	8008f46 <HAL_DMA_IRQHandler+0x8da>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d307      	bcc.n	8008f62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f2      	bne.n	8008f46 <HAL_DMA_IRQHandler+0x8da>
 8008f60:	e000      	b.n	8008f64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008f62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d004      	beq.n	8008f7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2203      	movs	r2, #3
 8008f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008f7a:	e003      	b.n	8008f84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8272 	beq.w	800947a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
 8008f9e:	e26c      	b.n	800947a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a43      	ldr	r2, [pc, #268]	; (80090b4 <HAL_DMA_IRQHandler+0xa48>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d022      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a42      	ldr	r2, [pc, #264]	; (80090b8 <HAL_DMA_IRQHandler+0xa4c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d01d      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a40      	ldr	r2, [pc, #256]	; (80090bc <HAL_DMA_IRQHandler+0xa50>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d018      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a3f      	ldr	r2, [pc, #252]	; (80090c0 <HAL_DMA_IRQHandler+0xa54>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d013      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a3d      	ldr	r2, [pc, #244]	; (80090c4 <HAL_DMA_IRQHandler+0xa58>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00e      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a3c      	ldr	r2, [pc, #240]	; (80090c8 <HAL_DMA_IRQHandler+0xa5c>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d009      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a3a      	ldr	r2, [pc, #232]	; (80090cc <HAL_DMA_IRQHandler+0xa60>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d004      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x984>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a39      	ldr	r2, [pc, #228]	; (80090d0 <HAL_DMA_IRQHandler+0xa64>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d101      	bne.n	8008ff4 <HAL_DMA_IRQHandler+0x988>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <HAL_DMA_IRQHandler+0x98a>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 823f 	beq.w	800947a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	2204      	movs	r2, #4
 800900e:	409a      	lsls	r2, r3
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4013      	ands	r3, r2
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80cd 	beq.w	80091b4 <HAL_DMA_IRQHandler+0xb48>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80c7 	beq.w	80091b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2204      	movs	r2, #4
 8009030:	409a      	lsls	r2, r3
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d049      	beq.n	80090d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d109      	bne.n	800905e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8210 	beq.w	8009474 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800905c:	e20a      	b.n	8009474 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8206 	beq.w	8009474 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009070:	e200      	b.n	8009474 <HAL_DMA_IRQHandler+0xe08>
 8009072:	bf00      	nop
 8009074:	40020010 	.word	0x40020010
 8009078:	40020028 	.word	0x40020028
 800907c:	40020040 	.word	0x40020040
 8009080:	40020058 	.word	0x40020058
 8009084:	40020070 	.word	0x40020070
 8009088:	40020088 	.word	0x40020088
 800908c:	400200a0 	.word	0x400200a0
 8009090:	400200b8 	.word	0x400200b8
 8009094:	40020410 	.word	0x40020410
 8009098:	40020428 	.word	0x40020428
 800909c:	40020440 	.word	0x40020440
 80090a0:	40020458 	.word	0x40020458
 80090a4:	40020470 	.word	0x40020470
 80090a8:	40020488 	.word	0x40020488
 80090ac:	400204a0 	.word	0x400204a0
 80090b0:	400204b8 	.word	0x400204b8
 80090b4:	58025408 	.word	0x58025408
 80090b8:	5802541c 	.word	0x5802541c
 80090bc:	58025430 	.word	0x58025430
 80090c0:	58025444 	.word	0x58025444
 80090c4:	58025458 	.word	0x58025458
 80090c8:	5802546c 	.word	0x5802546c
 80090cc:	58025480 	.word	0x58025480
 80090d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d160      	bne.n	80091a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a7f      	ldr	r2, [pc, #508]	; (80092e0 <HAL_DMA_IRQHandler+0xc74>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d04a      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a7d      	ldr	r2, [pc, #500]	; (80092e4 <HAL_DMA_IRQHandler+0xc78>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d045      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a7c      	ldr	r2, [pc, #496]	; (80092e8 <HAL_DMA_IRQHandler+0xc7c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d040      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a7a      	ldr	r2, [pc, #488]	; (80092ec <HAL_DMA_IRQHandler+0xc80>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d03b      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a79      	ldr	r2, [pc, #484]	; (80092f0 <HAL_DMA_IRQHandler+0xc84>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d036      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a77      	ldr	r2, [pc, #476]	; (80092f4 <HAL_DMA_IRQHandler+0xc88>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d031      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a76      	ldr	r2, [pc, #472]	; (80092f8 <HAL_DMA_IRQHandler+0xc8c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d02c      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a74      	ldr	r2, [pc, #464]	; (80092fc <HAL_DMA_IRQHandler+0xc90>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d027      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a73      	ldr	r2, [pc, #460]	; (8009300 <HAL_DMA_IRQHandler+0xc94>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d022      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a71      	ldr	r2, [pc, #452]	; (8009304 <HAL_DMA_IRQHandler+0xc98>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d01d      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a70      	ldr	r2, [pc, #448]	; (8009308 <HAL_DMA_IRQHandler+0xc9c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d018      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a6e      	ldr	r2, [pc, #440]	; (800930c <HAL_DMA_IRQHandler+0xca0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a6d      	ldr	r2, [pc, #436]	; (8009310 <HAL_DMA_IRQHandler+0xca4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00e      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a6b      	ldr	r2, [pc, #428]	; (8009314 <HAL_DMA_IRQHandler+0xca8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d009      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a6a      	ldr	r2, [pc, #424]	; (8009318 <HAL_DMA_IRQHandler+0xcac>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d004      	beq.n	800917e <HAL_DMA_IRQHandler+0xb12>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a68      	ldr	r2, [pc, #416]	; (800931c <HAL_DMA_IRQHandler+0xcb0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d108      	bne.n	8009190 <HAL_DMA_IRQHandler+0xb24>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0208 	bic.w	r2, r2, #8
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e007      	b.n	80091a0 <HAL_DMA_IRQHandler+0xb34>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0204 	bic.w	r2, r2, #4
 800919e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8165 	beq.w	8009474 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091b2:	e15f      	b.n	8009474 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b8:	f003 031f 	and.w	r3, r3, #31
 80091bc:	2202      	movs	r2, #2
 80091be:	409a      	lsls	r2, r3
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80c5 	beq.w	8009354 <HAL_DMA_IRQHandler+0xce8>
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80bf 	beq.w	8009354 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091da:	f003 031f 	and.w	r3, r3, #31
 80091de:	2202      	movs	r2, #2
 80091e0:	409a      	lsls	r2, r3
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d018      	beq.n	8009222 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 813a 	beq.w	8009478 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800920c:	e134      	b.n	8009478 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8130 	beq.w	8009478 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009220:	e12a      	b.n	8009478 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	f040 8089 	bne.w	8009340 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a2b      	ldr	r2, [pc, #172]	; (80092e0 <HAL_DMA_IRQHandler+0xc74>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d04a      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <HAL_DMA_IRQHandler+0xc78>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d045      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a28      	ldr	r2, [pc, #160]	; (80092e8 <HAL_DMA_IRQHandler+0xc7c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d040      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a26      	ldr	r2, [pc, #152]	; (80092ec <HAL_DMA_IRQHandler+0xc80>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d03b      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a25      	ldr	r2, [pc, #148]	; (80092f0 <HAL_DMA_IRQHandler+0xc84>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d036      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a23      	ldr	r2, [pc, #140]	; (80092f4 <HAL_DMA_IRQHandler+0xc88>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d031      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a22      	ldr	r2, [pc, #136]	; (80092f8 <HAL_DMA_IRQHandler+0xc8c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d02c      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a20      	ldr	r2, [pc, #128]	; (80092fc <HAL_DMA_IRQHandler+0xc90>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d027      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <HAL_DMA_IRQHandler+0xc94>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d022      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <HAL_DMA_IRQHandler+0xc98>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01d      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <HAL_DMA_IRQHandler+0xc9c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d018      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1a      	ldr	r2, [pc, #104]	; (800930c <HAL_DMA_IRQHandler+0xca0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d013      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a19      	ldr	r2, [pc, #100]	; (8009310 <HAL_DMA_IRQHandler+0xca4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00e      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a17      	ldr	r2, [pc, #92]	; (8009314 <HAL_DMA_IRQHandler+0xca8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d009      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a16      	ldr	r2, [pc, #88]	; (8009318 <HAL_DMA_IRQHandler+0xcac>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d004      	beq.n	80092ce <HAL_DMA_IRQHandler+0xc62>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a14      	ldr	r2, [pc, #80]	; (800931c <HAL_DMA_IRQHandler+0xcb0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d128      	bne.n	8009320 <HAL_DMA_IRQHandler+0xcb4>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0214 	bic.w	r2, r2, #20
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e027      	b.n	8009330 <HAL_DMA_IRQHandler+0xcc4>
 80092e0:	40020010 	.word	0x40020010
 80092e4:	40020028 	.word	0x40020028
 80092e8:	40020040 	.word	0x40020040
 80092ec:	40020058 	.word	0x40020058
 80092f0:	40020070 	.word	0x40020070
 80092f4:	40020088 	.word	0x40020088
 80092f8:	400200a0 	.word	0x400200a0
 80092fc:	400200b8 	.word	0x400200b8
 8009300:	40020410 	.word	0x40020410
 8009304:	40020428 	.word	0x40020428
 8009308:	40020440 	.word	0x40020440
 800930c:	40020458 	.word	0x40020458
 8009310:	40020470 	.word	0x40020470
 8009314:	40020488 	.word	0x40020488
 8009318:	400204a0 	.word	0x400204a0
 800931c:	400204b8 	.word	0x400204b8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 020a 	bic.w	r2, r2, #10
 800932e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 8097 	beq.w	8009478 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009352:	e091      	b.n	8009478 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009358:	f003 031f 	and.w	r3, r3, #31
 800935c:	2208      	movs	r2, #8
 800935e:	409a      	lsls	r2, r3
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	4013      	ands	r3, r2
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8088 	beq.w	800947a <HAL_DMA_IRQHandler+0xe0e>
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f003 0308 	and.w	r3, r3, #8
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8082 	beq.w	800947a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a41      	ldr	r2, [pc, #260]	; (8009480 <HAL_DMA_IRQHandler+0xe14>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d04a      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a3f      	ldr	r2, [pc, #252]	; (8009484 <HAL_DMA_IRQHandler+0xe18>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d045      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a3e      	ldr	r2, [pc, #248]	; (8009488 <HAL_DMA_IRQHandler+0xe1c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d040      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a3c      	ldr	r2, [pc, #240]	; (800948c <HAL_DMA_IRQHandler+0xe20>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d03b      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a3b      	ldr	r2, [pc, #236]	; (8009490 <HAL_DMA_IRQHandler+0xe24>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d036      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a39      	ldr	r2, [pc, #228]	; (8009494 <HAL_DMA_IRQHandler+0xe28>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d031      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a38      	ldr	r2, [pc, #224]	; (8009498 <HAL_DMA_IRQHandler+0xe2c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d02c      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a36      	ldr	r2, [pc, #216]	; (800949c <HAL_DMA_IRQHandler+0xe30>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d027      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a35      	ldr	r2, [pc, #212]	; (80094a0 <HAL_DMA_IRQHandler+0xe34>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d022      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a33      	ldr	r2, [pc, #204]	; (80094a4 <HAL_DMA_IRQHandler+0xe38>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d01d      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a32      	ldr	r2, [pc, #200]	; (80094a8 <HAL_DMA_IRQHandler+0xe3c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d018      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a30      	ldr	r2, [pc, #192]	; (80094ac <HAL_DMA_IRQHandler+0xe40>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d013      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a2f      	ldr	r2, [pc, #188]	; (80094b0 <HAL_DMA_IRQHandler+0xe44>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00e      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a2d      	ldr	r2, [pc, #180]	; (80094b4 <HAL_DMA_IRQHandler+0xe48>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d009      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a2c      	ldr	r2, [pc, #176]	; (80094b8 <HAL_DMA_IRQHandler+0xe4c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d004      	beq.n	8009416 <HAL_DMA_IRQHandler+0xdaa>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a2a      	ldr	r2, [pc, #168]	; (80094bc <HAL_DMA_IRQHandler+0xe50>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d108      	bne.n	8009428 <HAL_DMA_IRQHandler+0xdbc>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 021c 	bic.w	r2, r2, #28
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	e007      	b.n	8009438 <HAL_DMA_IRQHandler+0xdcc>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 020e 	bic.w	r2, r2, #14
 8009436:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943c:	f003 031f 	and.w	r3, r3, #31
 8009440:	2201      	movs	r2, #1
 8009442:	409a      	lsls	r2, r3
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
 800946e:	e004      	b.n	800947a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009470:	bf00      	nop
 8009472:	e002      	b.n	800947a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009478:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800947a:	3728      	adds	r7, #40	; 0x28
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	40020010 	.word	0x40020010
 8009484:	40020028 	.word	0x40020028
 8009488:	40020040 	.word	0x40020040
 800948c:	40020058 	.word	0x40020058
 8009490:	40020070 	.word	0x40020070
 8009494:	40020088 	.word	0x40020088
 8009498:	400200a0 	.word	0x400200a0
 800949c:	400200b8 	.word	0x400200b8
 80094a0:	40020410 	.word	0x40020410
 80094a4:	40020428 	.word	0x40020428
 80094a8:	40020440 	.word	0x40020440
 80094ac:	40020458 	.word	0x40020458
 80094b0:	40020470 	.word	0x40020470
 80094b4:	40020488 	.word	0x40020488
 80094b8:	400204a0 	.word	0x400204a0
 80094bc:	400204b8 	.word	0x400204b8

080094c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a7f      	ldr	r2, [pc, #508]	; (80096dc <DMA_SetConfig+0x21c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d072      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a7d      	ldr	r2, [pc, #500]	; (80096e0 <DMA_SetConfig+0x220>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d06d      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a7c      	ldr	r2, [pc, #496]	; (80096e4 <DMA_SetConfig+0x224>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d068      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a7a      	ldr	r2, [pc, #488]	; (80096e8 <DMA_SetConfig+0x228>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d063      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a79      	ldr	r2, [pc, #484]	; (80096ec <DMA_SetConfig+0x22c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d05e      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a77      	ldr	r2, [pc, #476]	; (80096f0 <DMA_SetConfig+0x230>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d059      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a76      	ldr	r2, [pc, #472]	; (80096f4 <DMA_SetConfig+0x234>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d054      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a74      	ldr	r2, [pc, #464]	; (80096f8 <DMA_SetConfig+0x238>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d04f      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a73      	ldr	r2, [pc, #460]	; (80096fc <DMA_SetConfig+0x23c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d04a      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a71      	ldr	r2, [pc, #452]	; (8009700 <DMA_SetConfig+0x240>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d045      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a70      	ldr	r2, [pc, #448]	; (8009704 <DMA_SetConfig+0x244>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d040      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a6e      	ldr	r2, [pc, #440]	; (8009708 <DMA_SetConfig+0x248>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d03b      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6d      	ldr	r2, [pc, #436]	; (800970c <DMA_SetConfig+0x24c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d036      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a6b      	ldr	r2, [pc, #428]	; (8009710 <DMA_SetConfig+0x250>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d031      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a6a      	ldr	r2, [pc, #424]	; (8009714 <DMA_SetConfig+0x254>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d02c      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a68      	ldr	r2, [pc, #416]	; (8009718 <DMA_SetConfig+0x258>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d027      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a67      	ldr	r2, [pc, #412]	; (800971c <DMA_SetConfig+0x25c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d022      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a65      	ldr	r2, [pc, #404]	; (8009720 <DMA_SetConfig+0x260>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d01d      	beq.n	80095ca <DMA_SetConfig+0x10a>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a64      	ldr	r2, [pc, #400]	; (8009724 <DMA_SetConfig+0x264>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d018      	beq.n	80095ca <DMA_SetConfig+0x10a>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a62      	ldr	r2, [pc, #392]	; (8009728 <DMA_SetConfig+0x268>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d013      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a61      	ldr	r2, [pc, #388]	; (800972c <DMA_SetConfig+0x26c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00e      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5f      	ldr	r2, [pc, #380]	; (8009730 <DMA_SetConfig+0x270>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d009      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a5e      	ldr	r2, [pc, #376]	; (8009734 <DMA_SetConfig+0x274>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d004      	beq.n	80095ca <DMA_SetConfig+0x10a>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a5c      	ldr	r2, [pc, #368]	; (8009738 <DMA_SetConfig+0x278>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d101      	bne.n	80095ce <DMA_SetConfig+0x10e>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <DMA_SetConfig+0x110>
 80095ce:	2300      	movs	r3, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00d      	beq.n	80095f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80095ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a39      	ldr	r2, [pc, #228]	; (80096dc <DMA_SetConfig+0x21c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d04a      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a38      	ldr	r2, [pc, #224]	; (80096e0 <DMA_SetConfig+0x220>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d045      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a36      	ldr	r2, [pc, #216]	; (80096e4 <DMA_SetConfig+0x224>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d040      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a35      	ldr	r2, [pc, #212]	; (80096e8 <DMA_SetConfig+0x228>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d03b      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a33      	ldr	r2, [pc, #204]	; (80096ec <DMA_SetConfig+0x22c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d036      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a32      	ldr	r2, [pc, #200]	; (80096f0 <DMA_SetConfig+0x230>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d031      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a30      	ldr	r2, [pc, #192]	; (80096f4 <DMA_SetConfig+0x234>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d02c      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a2f      	ldr	r2, [pc, #188]	; (80096f8 <DMA_SetConfig+0x238>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d027      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a2d      	ldr	r2, [pc, #180]	; (80096fc <DMA_SetConfig+0x23c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d022      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a2c      	ldr	r2, [pc, #176]	; (8009700 <DMA_SetConfig+0x240>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d01d      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a2a      	ldr	r2, [pc, #168]	; (8009704 <DMA_SetConfig+0x244>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d018      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a29      	ldr	r2, [pc, #164]	; (8009708 <DMA_SetConfig+0x248>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d013      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a27      	ldr	r2, [pc, #156]	; (800970c <DMA_SetConfig+0x24c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00e      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a26      	ldr	r2, [pc, #152]	; (8009710 <DMA_SetConfig+0x250>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d009      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a24      	ldr	r2, [pc, #144]	; (8009714 <DMA_SetConfig+0x254>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d004      	beq.n	8009690 <DMA_SetConfig+0x1d0>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a23      	ldr	r2, [pc, #140]	; (8009718 <DMA_SetConfig+0x258>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d101      	bne.n	8009694 <DMA_SetConfig+0x1d4>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <DMA_SetConfig+0x1d6>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d059      	beq.n	800974e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	223f      	movs	r2, #63	; 0x3f
 80096a4:	409a      	lsls	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d138      	bne.n	800973c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80096da:	e086      	b.n	80097ea <DMA_SetConfig+0x32a>
 80096dc:	40020010 	.word	0x40020010
 80096e0:	40020028 	.word	0x40020028
 80096e4:	40020040 	.word	0x40020040
 80096e8:	40020058 	.word	0x40020058
 80096ec:	40020070 	.word	0x40020070
 80096f0:	40020088 	.word	0x40020088
 80096f4:	400200a0 	.word	0x400200a0
 80096f8:	400200b8 	.word	0x400200b8
 80096fc:	40020410 	.word	0x40020410
 8009700:	40020428 	.word	0x40020428
 8009704:	40020440 	.word	0x40020440
 8009708:	40020458 	.word	0x40020458
 800970c:	40020470 	.word	0x40020470
 8009710:	40020488 	.word	0x40020488
 8009714:	400204a0 	.word	0x400204a0
 8009718:	400204b8 	.word	0x400204b8
 800971c:	58025408 	.word	0x58025408
 8009720:	5802541c 	.word	0x5802541c
 8009724:	58025430 	.word	0x58025430
 8009728:	58025444 	.word	0x58025444
 800972c:	58025458 	.word	0x58025458
 8009730:	5802546c 	.word	0x5802546c
 8009734:	58025480 	.word	0x58025480
 8009738:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	60da      	str	r2, [r3, #12]
}
 800974c:	e04d      	b.n	80097ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a29      	ldr	r2, [pc, #164]	; (80097f8 <DMA_SetConfig+0x338>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d022      	beq.n	800979e <DMA_SetConfig+0x2de>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a27      	ldr	r2, [pc, #156]	; (80097fc <DMA_SetConfig+0x33c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01d      	beq.n	800979e <DMA_SetConfig+0x2de>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a26      	ldr	r2, [pc, #152]	; (8009800 <DMA_SetConfig+0x340>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d018      	beq.n	800979e <DMA_SetConfig+0x2de>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a24      	ldr	r2, [pc, #144]	; (8009804 <DMA_SetConfig+0x344>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d013      	beq.n	800979e <DMA_SetConfig+0x2de>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a23      	ldr	r2, [pc, #140]	; (8009808 <DMA_SetConfig+0x348>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00e      	beq.n	800979e <DMA_SetConfig+0x2de>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a21      	ldr	r2, [pc, #132]	; (800980c <DMA_SetConfig+0x34c>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d009      	beq.n	800979e <DMA_SetConfig+0x2de>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a20      	ldr	r2, [pc, #128]	; (8009810 <DMA_SetConfig+0x350>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d004      	beq.n	800979e <DMA_SetConfig+0x2de>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <DMA_SetConfig+0x354>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d101      	bne.n	80097a2 <DMA_SetConfig+0x2e2>
 800979e:	2301      	movs	r3, #1
 80097a0:	e000      	b.n	80097a4 <DMA_SetConfig+0x2e4>
 80097a2:	2300      	movs	r3, #0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d020      	beq.n	80097ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	2201      	movs	r2, #1
 80097b2:	409a      	lsls	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	2b40      	cmp	r3, #64	; 0x40
 80097c6:	d108      	bne.n	80097da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	60da      	str	r2, [r3, #12]
}
 80097d8:	e007      	b.n	80097ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	60da      	str	r2, [r3, #12]
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	58025408 	.word	0x58025408
 80097fc:	5802541c 	.word	0x5802541c
 8009800:	58025430 	.word	0x58025430
 8009804:	58025444 	.word	0x58025444
 8009808:	58025458 	.word	0x58025458
 800980c:	5802546c 	.word	0x5802546c
 8009810:	58025480 	.word	0x58025480
 8009814:	58025494 	.word	0x58025494

08009818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a42      	ldr	r2, [pc, #264]	; (8009930 <DMA_CalcBaseAndBitshift+0x118>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d04a      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a41      	ldr	r2, [pc, #260]	; (8009934 <DMA_CalcBaseAndBitshift+0x11c>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d045      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a3f      	ldr	r2, [pc, #252]	; (8009938 <DMA_CalcBaseAndBitshift+0x120>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d040      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a3e      	ldr	r2, [pc, #248]	; (800993c <DMA_CalcBaseAndBitshift+0x124>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d03b      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <DMA_CalcBaseAndBitshift+0x128>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d036      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a3b      	ldr	r2, [pc, #236]	; (8009944 <DMA_CalcBaseAndBitshift+0x12c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d031      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a39      	ldr	r2, [pc, #228]	; (8009948 <DMA_CalcBaseAndBitshift+0x130>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d02c      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a38      	ldr	r2, [pc, #224]	; (800994c <DMA_CalcBaseAndBitshift+0x134>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d027      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a36      	ldr	r2, [pc, #216]	; (8009950 <DMA_CalcBaseAndBitshift+0x138>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d022      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a35      	ldr	r2, [pc, #212]	; (8009954 <DMA_CalcBaseAndBitshift+0x13c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d01d      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a33      	ldr	r2, [pc, #204]	; (8009958 <DMA_CalcBaseAndBitshift+0x140>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d018      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a32      	ldr	r2, [pc, #200]	; (800995c <DMA_CalcBaseAndBitshift+0x144>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d013      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a30      	ldr	r2, [pc, #192]	; (8009960 <DMA_CalcBaseAndBitshift+0x148>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d00e      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a2f      	ldr	r2, [pc, #188]	; (8009964 <DMA_CalcBaseAndBitshift+0x14c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d009      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a2d      	ldr	r2, [pc, #180]	; (8009968 <DMA_CalcBaseAndBitshift+0x150>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d004      	beq.n	80098c0 <DMA_CalcBaseAndBitshift+0xa8>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2c      	ldr	r2, [pc, #176]	; (800996c <DMA_CalcBaseAndBitshift+0x154>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d101      	bne.n	80098c4 <DMA_CalcBaseAndBitshift+0xac>
 80098c0:	2301      	movs	r3, #1
 80098c2:	e000      	b.n	80098c6 <DMA_CalcBaseAndBitshift+0xae>
 80098c4:	2300      	movs	r3, #0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d024      	beq.n	8009914 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	3b10      	subs	r3, #16
 80098d2:	4a27      	ldr	r2, [pc, #156]	; (8009970 <DMA_CalcBaseAndBitshift+0x158>)
 80098d4:	fba2 2303 	umull	r2, r3, r2, r3
 80098d8:	091b      	lsrs	r3, r3, #4
 80098da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	4a24      	ldr	r2, [pc, #144]	; (8009974 <DMA_CalcBaseAndBitshift+0x15c>)
 80098e4:	5cd3      	ldrb	r3, [r2, r3]
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d908      	bls.n	8009904 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <DMA_CalcBaseAndBitshift+0x160>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	1d1a      	adds	r2, r3, #4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	659a      	str	r2, [r3, #88]	; 0x58
 8009902:	e00d      	b.n	8009920 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	4b1b      	ldr	r3, [pc, #108]	; (8009978 <DMA_CalcBaseAndBitshift+0x160>)
 800990c:	4013      	ands	r3, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6593      	str	r3, [r2, #88]	; 0x58
 8009912:	e005      	b.n	8009920 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	40020010 	.word	0x40020010
 8009934:	40020028 	.word	0x40020028
 8009938:	40020040 	.word	0x40020040
 800993c:	40020058 	.word	0x40020058
 8009940:	40020070 	.word	0x40020070
 8009944:	40020088 	.word	0x40020088
 8009948:	400200a0 	.word	0x400200a0
 800994c:	400200b8 	.word	0x400200b8
 8009950:	40020410 	.word	0x40020410
 8009954:	40020428 	.word	0x40020428
 8009958:	40020440 	.word	0x40020440
 800995c:	40020458 	.word	0x40020458
 8009960:	40020470 	.word	0x40020470
 8009964:	40020488 	.word	0x40020488
 8009968:	400204a0 	.word	0x400204a0
 800996c:	400204b8 	.word	0x400204b8
 8009970:	aaaaaaab 	.word	0xaaaaaaab
 8009974:	080141b4 	.word	0x080141b4
 8009978:	fffffc00 	.word	0xfffffc00

0800997c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d120      	bne.n	80099d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	2b03      	cmp	r3, #3
 8009996:	d858      	bhi.n	8009a4a <DMA_CheckFifoParam+0xce>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <DMA_CheckFifoParam+0x24>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099b1 	.word	0x080099b1
 80099a4:	080099c3 	.word	0x080099c3
 80099a8:	080099b1 	.word	0x080099b1
 80099ac:	08009a4b 	.word	0x08009a4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d048      	beq.n	8009a4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099c0:	e045      	b.n	8009a4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80099ca:	d142      	bne.n	8009a52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099d0:	e03f      	b.n	8009a52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099da:	d123      	bne.n	8009a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d838      	bhi.n	8009a56 <DMA_CheckFifoParam+0xda>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <DMA_CheckFifoParam+0x70>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	08009a03 	.word	0x08009a03
 80099f4:	080099fd 	.word	0x080099fd
 80099f8:	08009a15 	.word	0x08009a15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009a00:	e030      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d025      	beq.n	8009a5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a12:	e022      	b.n	8009a5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a1c:	d11f      	bne.n	8009a5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a22:	e01c      	b.n	8009a5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d902      	bls.n	8009a32 <DMA_CheckFifoParam+0xb6>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d003      	beq.n	8009a38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009a30:	e018      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	73fb      	strb	r3, [r7, #15]
        break;
 8009a36:	e015      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00e      	beq.n	8009a62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
    break;
 8009a48:	e00b      	b.n	8009a62 <DMA_CheckFifoParam+0xe6>
        break;
 8009a4a:	bf00      	nop
 8009a4c:	e00a      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        break;
 8009a4e:	bf00      	nop
 8009a50:	e008      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        break;
 8009a52:	bf00      	nop
 8009a54:	e006      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        break;
 8009a56:	bf00      	nop
 8009a58:	e004      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        break;
 8009a5a:	bf00      	nop
 8009a5c:	e002      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
        break;
 8009a5e:	bf00      	nop
 8009a60:	e000      	b.n	8009a64 <DMA_CheckFifoParam+0xe8>
    break;
 8009a62:	bf00      	nop
    }
  }

  return status;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop

08009a74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a38      	ldr	r2, [pc, #224]	; (8009b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d022      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a36      	ldr	r2, [pc, #216]	; (8009b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d01d      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a35      	ldr	r2, [pc, #212]	; (8009b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d018      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a33      	ldr	r2, [pc, #204]	; (8009b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d013      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a32      	ldr	r2, [pc, #200]	; (8009b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d00e      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a30      	ldr	r2, [pc, #192]	; (8009b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d009      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a2f      	ldr	r2, [pc, #188]	; (8009b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d004      	beq.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a2d      	ldr	r2, [pc, #180]	; (8009b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d101      	bne.n	8009ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01a      	beq.n	8009b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	3b08      	subs	r3, #8
 8009ae4:	4a28      	ldr	r2, [pc, #160]	; (8009b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	091b      	lsrs	r3, r3, #4
 8009aec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4b26      	ldr	r3, [pc, #152]	; (8009b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a24      	ldr	r2, [pc, #144]	; (8009b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009b00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	2201      	movs	r2, #1
 8009b0a:	409a      	lsls	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009b10:	e024      	b.n	8009b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	3b10      	subs	r3, #16
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	; (8009b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b20:	091b      	lsrs	r3, r3, #4
 8009b22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4a1c      	ldr	r2, [pc, #112]	; (8009b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d806      	bhi.n	8009b3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4a1b      	ldr	r2, [pc, #108]	; (8009b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d902      	bls.n	8009b3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3308      	adds	r3, #8
 8009b38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4b18      	ldr	r3, [pc, #96]	; (8009ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009b4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f003 031f 	and.w	r3, r3, #31
 8009b54:	2201      	movs	r2, #1
 8009b56:	409a      	lsls	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b5c:	bf00      	nop
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	58025408 	.word	0x58025408
 8009b6c:	5802541c 	.word	0x5802541c
 8009b70:	58025430 	.word	0x58025430
 8009b74:	58025444 	.word	0x58025444
 8009b78:	58025458 	.word	0x58025458
 8009b7c:	5802546c 	.word	0x5802546c
 8009b80:	58025480 	.word	0x58025480
 8009b84:	58025494 	.word	0x58025494
 8009b88:	cccccccd 	.word	0xcccccccd
 8009b8c:	16009600 	.word	0x16009600
 8009b90:	58025880 	.word	0x58025880
 8009b94:	aaaaaaab 	.word	0xaaaaaaab
 8009b98:	400204b8 	.word	0x400204b8
 8009b9c:	4002040f 	.word	0x4002040f
 8009ba0:	10008200 	.word	0x10008200
 8009ba4:	40020880 	.word	0x40020880

08009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d04a      	beq.n	8009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d847      	bhi.n	8009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a25      	ldr	r2, [pc, #148]	; (8009c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d022      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a24      	ldr	r2, [pc, #144]	; (8009c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d01d      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a22      	ldr	r2, [pc, #136]	; (8009c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d018      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a21      	ldr	r2, [pc, #132]	; (8009c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	; (8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00e      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a1c      	ldr	r2, [pc, #112]	; (8009c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d004      	beq.n	8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a1b      	ldr	r2, [pc, #108]	; (8009c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d101      	bne.n	8009c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	461a      	mov	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a15      	ldr	r2, [pc, #84]	; (8009c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009c30:	671a      	str	r2, [r3, #112]	; 0x70
 8009c32:	e009      	b.n	8009c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009c46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	409a      	lsls	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009c54:	bf00      	nop
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	58025408 	.word	0x58025408
 8009c64:	5802541c 	.word	0x5802541c
 8009c68:	58025430 	.word	0x58025430
 8009c6c:	58025444 	.word	0x58025444
 8009c70:	58025458 	.word	0x58025458
 8009c74:	5802546c 	.word	0x5802546c
 8009c78:	58025480 	.word	0x58025480
 8009c7c:	58025494 	.word	0x58025494
 8009c80:	1600963f 	.word	0x1600963f
 8009c84:	58025940 	.word	0x58025940
 8009c88:	1000823f 	.word	0x1000823f
 8009c8c:	40020940 	.word	0x40020940

08009c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b089      	sub	sp, #36	; 0x24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009c9e:	4b89      	ldr	r3, [pc, #548]	; (8009ec4 <HAL_GPIO_Init+0x234>)
 8009ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ca2:	e194      	b.n	8009fce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	2101      	movs	r1, #1
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 8186 	beq.w	8009fc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f003 0303 	and.w	r3, r3, #3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d005      	beq.n	8009cd4 <HAL_GPIO_Init+0x44>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d130      	bne.n	8009d36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	2203      	movs	r2, #3
 8009ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	4013      	ands	r3, r2
 8009cea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	68da      	ldr	r2, [r3, #12]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d12:	43db      	mvns	r3, r3
 8009d14:	69ba      	ldr	r2, [r7, #24]
 8009d16:	4013      	ands	r3, r2
 8009d18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	091b      	lsrs	r3, r3, #4
 8009d20:	f003 0201 	and.w	r2, r3, #1
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d017      	beq.n	8009d72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d52:	43db      	mvns	r3, r3
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	4013      	ands	r3, r2
 8009d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	fa02 f303 	lsl.w	r3, r2, r3
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d123      	bne.n	8009dc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	08da      	lsrs	r2, r3, #3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3208      	adds	r2, #8
 8009d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0307 	and.w	r3, r3, #7
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	220f      	movs	r2, #15
 8009d96:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	691a      	ldr	r2, [r3, #16]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	f003 0307 	and.w	r3, r3, #7
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	fa02 f303 	lsl.w	r3, r2, r3
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	08da      	lsrs	r2, r3, #3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3208      	adds	r2, #8
 8009dc0:	69b9      	ldr	r1, [r7, #24]
 8009dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	43db      	mvns	r3, r3
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f003 0203 	and.w	r2, r3, #3
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	fa02 f303 	lsl.w	r3, r2, r3
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80e0 	beq.w	8009fc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e08:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <HAL_GPIO_Init+0x238>)
 8009e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e0e:	4a2e      	ldr	r2, [pc, #184]	; (8009ec8 <HAL_GPIO_Init+0x238>)
 8009e10:	f043 0302 	orr.w	r3, r3, #2
 8009e14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009e18:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <HAL_GPIO_Init+0x238>)
 8009e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e26:	4a29      	ldr	r2, [pc, #164]	; (8009ecc <HAL_GPIO_Init+0x23c>)
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	089b      	lsrs	r3, r3, #2
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	220f      	movs	r2, #15
 8009e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e42:	43db      	mvns	r3, r3
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	4013      	ands	r3, r2
 8009e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a20      	ldr	r2, [pc, #128]	; (8009ed0 <HAL_GPIO_Init+0x240>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d052      	beq.n	8009ef8 <HAL_GPIO_Init+0x268>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a1f      	ldr	r2, [pc, #124]	; (8009ed4 <HAL_GPIO_Init+0x244>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d031      	beq.n	8009ebe <HAL_GPIO_Init+0x22e>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a1e      	ldr	r2, [pc, #120]	; (8009ed8 <HAL_GPIO_Init+0x248>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d02b      	beq.n	8009eba <HAL_GPIO_Init+0x22a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1d      	ldr	r2, [pc, #116]	; (8009edc <HAL_GPIO_Init+0x24c>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d025      	beq.n	8009eb6 <HAL_GPIO_Init+0x226>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <HAL_GPIO_Init+0x250>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d01f      	beq.n	8009eb2 <HAL_GPIO_Init+0x222>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1b      	ldr	r2, [pc, #108]	; (8009ee4 <HAL_GPIO_Init+0x254>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d019      	beq.n	8009eae <HAL_GPIO_Init+0x21e>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ee8 <HAL_GPIO_Init+0x258>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d013      	beq.n	8009eaa <HAL_GPIO_Init+0x21a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a19      	ldr	r2, [pc, #100]	; (8009eec <HAL_GPIO_Init+0x25c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d00d      	beq.n	8009ea6 <HAL_GPIO_Init+0x216>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a18      	ldr	r2, [pc, #96]	; (8009ef0 <HAL_GPIO_Init+0x260>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d007      	beq.n	8009ea2 <HAL_GPIO_Init+0x212>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a17      	ldr	r2, [pc, #92]	; (8009ef4 <HAL_GPIO_Init+0x264>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d101      	bne.n	8009e9e <HAL_GPIO_Init+0x20e>
 8009e9a:	2309      	movs	r3, #9
 8009e9c:	e02d      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009e9e:	230a      	movs	r3, #10
 8009ea0:	e02b      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	e029      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009ea6:	2307      	movs	r3, #7
 8009ea8:	e027      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009eaa:	2306      	movs	r3, #6
 8009eac:	e025      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009eae:	2305      	movs	r3, #5
 8009eb0:	e023      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009eb2:	2304      	movs	r3, #4
 8009eb4:	e021      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e01f      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e01d      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e01b      	b.n	8009efa <HAL_GPIO_Init+0x26a>
 8009ec2:	bf00      	nop
 8009ec4:	58000080 	.word	0x58000080
 8009ec8:	58024400 	.word	0x58024400
 8009ecc:	58000400 	.word	0x58000400
 8009ed0:	58020000 	.word	0x58020000
 8009ed4:	58020400 	.word	0x58020400
 8009ed8:	58020800 	.word	0x58020800
 8009edc:	58020c00 	.word	0x58020c00
 8009ee0:	58021000 	.word	0x58021000
 8009ee4:	58021400 	.word	0x58021400
 8009ee8:	58021800 	.word	0x58021800
 8009eec:	58021c00 	.word	0x58021c00
 8009ef0:	58022000 	.word	0x58022000
 8009ef4:	58022400 	.word	0x58022400
 8009ef8:	2300      	movs	r3, #0
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	f002 0203 	and.w	r2, r2, #3
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	4093      	lsls	r3, r2
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f0a:	4938      	ldr	r1, [pc, #224]	; (8009fec <HAL_GPIO_Init+0x35c>)
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	089b      	lsrs	r3, r3, #2
 8009f10:	3302      	adds	r3, #2
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	43db      	mvns	r3, r3
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	4013      	ands	r3, r2
 8009f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	4013      	ands	r3, r2
 8009f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	4013      	ands	r3, r2
 8009f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	43db      	mvns	r3, r3
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	4013      	ands	r3, r2
 8009fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f47f ae63 	bne.w	8009ca4 <HAL_GPIO_Init+0x14>
  }
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	3724      	adds	r7, #36	; 0x24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	58000400 	.word	0x58000400

08009ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	807b      	strh	r3, [r7, #2]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a000:	787b      	ldrb	r3, [r7, #1]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a006:	887a      	ldrh	r2, [r7, #2]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a00c:	e003      	b.n	800a016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a00e:	887b      	ldrh	r3, [r7, #2]
 800a010:	041a      	lsls	r2, r3, #16
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	619a      	str	r2, [r3, #24]
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e07f      	b.n	800a136 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fa fcf0 	bl	8004a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2224      	movs	r2, #36	; 0x24
 800a054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0201 	bic.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d107      	bne.n	800a09e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a09a:	609a      	str	r2, [r3, #8]
 800a09c:	e006      	b.n	800a0ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a0aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d104      	bne.n	800a0be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6859      	ldr	r1, [r3, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <HAL_I2C_Init+0x11c>)
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	691a      	ldr	r2, [r3, #16]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a1a      	ldr	r2, [r3, #32]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2220      	movs	r2, #32
 800a122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	02008000 	.word	0x02008000

0800a144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b20      	cmp	r3, #32
 800a158:	d138      	bne.n	800a1cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a164:	2302      	movs	r3, #2
 800a166:	e032      	b.n	800a1ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2224      	movs	r2, #36	; 0x24
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0201 	bic.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6819      	ldr	r1, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	d139      	bne.n	800a264 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e033      	b.n	800a266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2224      	movs	r2, #36	; 0x24
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a22c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	e000      	b.n	800a266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a264:	2302      	movs	r3, #2
  }
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a272:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a274:	b08f      	sub	sp, #60	; 0x3c
 800a276:	af0a      	add	r7, sp, #40	; 0x28
 800a278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e116      	b.n	800a4b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7fb fa56 	bl	8005750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f009 f8f8 	bl	80134b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	687e      	ldr	r6, [r7, #4]
 800a2d0:	466d      	mov	r5, sp
 800a2d2:	f106 0410 	add.w	r4, r6, #16
 800a2d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800a2e6:	1d33      	adds	r3, r6, #4
 800a2e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f009 f876 	bl	80133dc <USB_CoreInit>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e0d7      	b.n	800a4b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f009 f8e6 	bl	80134da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a30e:	2300      	movs	r3, #0
 800a310:	73fb      	strb	r3, [r7, #15]
 800a312:	e04a      	b.n	800a3aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a314:	7bfa      	ldrb	r2, [r7, #15]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	333d      	adds	r3, #61	; 0x3d
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a328:	7bfa      	ldrb	r2, [r7, #15]
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	333c      	adds	r3, #60	; 0x3c
 800a338:	7bfa      	ldrb	r2, [r7, #15]
 800a33a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a33c:	7bfa      	ldrb	r2, [r7, #15]
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	b298      	uxth	r0, r3
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4613      	mov	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	3356      	adds	r3, #86	; 0x56
 800a350:	4602      	mov	r2, r0
 800a352:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a354:	7bfa      	ldrb	r2, [r7, #15]
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	440b      	add	r3, r1
 800a362:	3340      	adds	r3, #64	; 0x40
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a368:	7bfa      	ldrb	r2, [r7, #15]
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	440b      	add	r3, r1
 800a376:	3344      	adds	r3, #68	; 0x44
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a37c:	7bfa      	ldrb	r2, [r7, #15]
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4613      	mov	r3, r2
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	440b      	add	r3, r1
 800a38a:	3348      	adds	r3, #72	; 0x48
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a390:	7bfa      	ldrb	r2, [r7, #15]
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	4613      	mov	r3, r2
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	334c      	adds	r3, #76	; 0x4c
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	7bfa      	ldrb	r2, [r7, #15]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d3af      	bcc.n	800a314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
 800a3b8:	e044      	b.n	800a444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a3ba:	7bfa      	ldrb	r2, [r7, #15]
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a3d0:	7bfa      	ldrb	r2, [r7, #15]
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a3e6:	7bfa      	ldrb	r2, [r7, #15]
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a3fc:	7bfa      	ldrb	r2, [r7, #15]
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a412:	7bfa      	ldrb	r2, [r7, #15]
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a424:	2200      	movs	r2, #0
 800a426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a428:	7bfa      	ldrb	r2, [r7, #15]
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4613      	mov	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	3301      	adds	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
 800a444:	7bfa      	ldrb	r2, [r7, #15]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d3b5      	bcc.n	800a3ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	687e      	ldr	r6, [r7, #4]
 800a456:	466d      	mov	r5, sp
 800a458:	f106 0410 	add.w	r4, r6, #16
 800a45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a45e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a464:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a468:	e885 0003 	stmia.w	r5, {r0, r1}
 800a46c:	1d33      	adds	r3, r6, #4
 800a46e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a470:	6838      	ldr	r0, [r7, #0]
 800a472:	f009 f87f 	bl	8013574 <USB_DevInit>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e014      	b.n	800a4b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d102      	bne.n	800a4a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f80b 	bl	800a4bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f009 fa3d 	bl	801392a <USB_DevDisconnect>

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a4bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <HAL_PCDEx_ActivateLPM+0x44>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	10000003 	.word	0x10000003

0800a504 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a50c:	4b19      	ldr	r3, [pc, #100]	; (800a574 <HAL_PWREx_ConfigSupply+0x70>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b04      	cmp	r3, #4
 800a516:	d00a      	beq.n	800a52e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a518:	4b16      	ldr	r3, [pc, #88]	; (800a574 <HAL_PWREx_ConfigSupply+0x70>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d001      	beq.n	800a52a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e01f      	b.n	800a56a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	e01d      	b.n	800a56a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a52e:	4b11      	ldr	r3, [pc, #68]	; (800a574 <HAL_PWREx_ConfigSupply+0x70>)
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f023 0207 	bic.w	r2, r3, #7
 800a536:	490f      	ldr	r1, [pc, #60]	; (800a574 <HAL_PWREx_ConfigSupply+0x70>)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a53e:	f7fb fb91 	bl	8005c64 <HAL_GetTick>
 800a542:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a544:	e009      	b.n	800a55a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a546:	f7fb fb8d 	bl	8005c64 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a554:	d901      	bls.n	800a55a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e007      	b.n	800a56a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a55a:	4b06      	ldr	r3, [pc, #24]	; (800a574 <HAL_PWREx_ConfigSupply+0x70>)
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a566:	d1ee      	bne.n	800a546 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	58024800 	.word	0x58024800

0800a578 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a578:	b480      	push	{r7}
 800a57a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	4a04      	ldr	r2, [pc, #16]	; (800a594 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a586:	60d3      	str	r3, [r2, #12]
}
 800a588:	bf00      	nop
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	58024800 	.word	0x58024800

0800a598 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a5a0:	f7fb fb60 	bl	8005c64 <HAL_GetTick>
 800a5a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e05f      	b.n	800a670 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d107      	bne.n	800a5cc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7fa fd9f 	bl	8005100 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a5c2:	f241 3188 	movw	r1, #5000	; 0x1388
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f85a 	bl	800a680 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	021a      	lsls	r2, r3, #8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2120      	movs	r1, #32
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f852 	bl	800a69c <QSPI_WaitFlagStateUntilTimeout>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d135      	bne.n	800a66e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <HAL_QSPI_Init+0xe0>)
 800a60a:	4013      	ands	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6852      	ldr	r2, [r2, #4]
 800a610:	0611      	lsls	r1, r2, #24
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	68d2      	ldr	r2, [r2, #12]
 800a616:	4311      	orrs	r1, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	69d2      	ldr	r2, [r2, #28]
 800a61c:	4311      	orrs	r1, r2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6a12      	ldr	r2, [r2, #32]
 800a622:	4311      	orrs	r1, r2
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	430b      	orrs	r3, r1
 800a62a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <HAL_QSPI_Init+0xe4>)
 800a634:	4013      	ands	r3, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	6912      	ldr	r2, [r2, #16]
 800a63a:	0411      	lsls	r1, r2, #16
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6952      	ldr	r2, [r2, #20]
 800a640:	4311      	orrs	r1, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	6992      	ldr	r2, [r2, #24]
 800a646:	4311      	orrs	r1, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	430b      	orrs	r3, r1
 800a64e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a66e:	7afb      	ldrb	r3, [r7, #11]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	00ffff2f 	.word	0x00ffff2f
 800a67c:	ffe0f8fe 	.word	0xffe0f8fe

0800a680 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a6ac:	e01a      	b.n	800a6e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b4:	d016      	beq.n	800a6e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b6:	f7fb fad5 	bl	8005c64 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d302      	bcc.n	800a6cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2204      	movs	r2, #4
 800a6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d8:	f043 0201 	orr.w	r2, r3, #1
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e00e      	b.n	800a702 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bf14      	ite	ne
 800a6f2:	2301      	movne	r3, #1
 800a6f4:	2300      	moveq	r3, #0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d1d6      	bne.n	800a6ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08c      	sub	sp, #48	; 0x30
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d102      	bne.n	800a720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f000 bc48 	b.w	800afb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 8088 	beq.w	800a83e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a72e:	4b99      	ldr	r3, [pc, #612]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a738:	4b96      	ldr	r3, [pc, #600]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	2b10      	cmp	r3, #16
 800a742:	d007      	beq.n	800a754 <HAL_RCC_OscConfig+0x48>
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2b18      	cmp	r3, #24
 800a748:	d111      	bne.n	800a76e <HAL_RCC_OscConfig+0x62>
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	2b02      	cmp	r3, #2
 800a752:	d10c      	bne.n	800a76e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a754:	4b8f      	ldr	r3, [pc, #572]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d06d      	beq.n	800a83c <HAL_RCC_OscConfig+0x130>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d169      	bne.n	800a83c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	f000 bc21 	b.w	800afb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a776:	d106      	bne.n	800a786 <HAL_RCC_OscConfig+0x7a>
 800a778:	4b86      	ldr	r3, [pc, #536]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a85      	ldr	r2, [pc, #532]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a77e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	e02e      	b.n	800a7e4 <HAL_RCC_OscConfig+0xd8>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10c      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x9c>
 800a78e:	4b81      	ldr	r3, [pc, #516]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a80      	ldr	r2, [pc, #512]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	4b7e      	ldr	r3, [pc, #504]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a7d      	ldr	r2, [pc, #500]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	e01d      	b.n	800a7e4 <HAL_RCC_OscConfig+0xd8>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7b0:	d10c      	bne.n	800a7cc <HAL_RCC_OscConfig+0xc0>
 800a7b2:	4b78      	ldr	r3, [pc, #480]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a77      	ldr	r2, [pc, #476]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	4b75      	ldr	r3, [pc, #468]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a74      	ldr	r2, [pc, #464]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	e00b      	b.n	800a7e4 <HAL_RCC_OscConfig+0xd8>
 800a7cc:	4b71      	ldr	r3, [pc, #452]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a70      	ldr	r2, [pc, #448]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	4b6e      	ldr	r3, [pc, #440]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a6d      	ldr	r2, [pc, #436]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a7de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d013      	beq.n	800a814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ec:	f7fb fa3a 	bl	8005c64 <HAL_GetTick>
 800a7f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f2:	e008      	b.n	800a806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7f4:	f7fb fa36 	bl	8005c64 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b64      	cmp	r3, #100	; 0x64
 800a800:	d901      	bls.n	800a806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e3d4      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a806:	4b63      	ldr	r3, [pc, #396]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0f0      	beq.n	800a7f4 <HAL_RCC_OscConfig+0xe8>
 800a812:	e014      	b.n	800a83e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a814:	f7fb fa26 	bl	8005c64 <HAL_GetTick>
 800a818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a81a:	e008      	b.n	800a82e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a81c:	f7fb fa22 	bl	8005c64 <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b64      	cmp	r3, #100	; 0x64
 800a828:	d901      	bls.n	800a82e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e3c0      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a82e:	4b59      	ldr	r3, [pc, #356]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1f0      	bne.n	800a81c <HAL_RCC_OscConfig+0x110>
 800a83a:	e000      	b.n	800a83e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a83c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80ca 	beq.w	800a9e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a84c:	4b51      	ldr	r3, [pc, #324]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a856:	4b4f      	ldr	r3, [pc, #316]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <HAL_RCC_OscConfig+0x166>
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	2b18      	cmp	r3, #24
 800a866:	d156      	bne.n	800a916 <HAL_RCC_OscConfig+0x20a>
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d151      	bne.n	800a916 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a872:	4b48      	ldr	r3, [pc, #288]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <HAL_RCC_OscConfig+0x17e>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e392      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a88a:	4b42      	ldr	r3, [pc, #264]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f023 0219 	bic.w	r2, r3, #25
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	493f      	ldr	r1, [pc, #252]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89c:	f7fb f9e2 	bl	8005c64 <HAL_GetTick>
 800a8a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a2:	e008      	b.n	800a8b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8a4:	f7fb f9de 	bl	8005c64 <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d901      	bls.n	800a8b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e37c      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8b6:	4b37      	ldr	r3, [pc, #220]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0304 	and.w	r3, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0f0      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8c2:	f7fb f9ff 	bl	8005cc4 <HAL_GetREVID>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d817      	bhi.n	800a900 <HAL_RCC_OscConfig+0x1f4>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d108      	bne.n	800a8ea <HAL_RCC_OscConfig+0x1de>
 800a8d8:	4b2e      	ldr	r3, [pc, #184]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a8e0:	4a2c      	ldr	r2, [pc, #176]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a8e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8e8:	e07a      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ea:	4b2a      	ldr	r3, [pc, #168]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	031b      	lsls	r3, r3, #12
 800a8f8:	4926      	ldr	r1, [pc, #152]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8fe:	e06f      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a900:	4b24      	ldr	r3, [pc, #144]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	061b      	lsls	r3, r3, #24
 800a90e:	4921      	ldr	r1, [pc, #132]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a910:	4313      	orrs	r3, r2
 800a912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a914:	e064      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d047      	beq.n	800a9ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a91e:	4b1d      	ldr	r3, [pc, #116]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f023 0219 	bic.w	r2, r3, #25
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	491a      	ldr	r1, [pc, #104]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a930:	f7fb f998 	bl	8005c64 <HAL_GetTick>
 800a934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a936:	e008      	b.n	800a94a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a938:	f7fb f994 	bl	8005c64 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b02      	cmp	r3, #2
 800a944:	d901      	bls.n	800a94a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e332      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a94a:	4b12      	ldr	r3, [pc, #72]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f0      	beq.n	800a938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a956:	f7fb f9b5 	bl	8005cc4 <HAL_GetREVID>
 800a95a:	4603      	mov	r3, r0
 800a95c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a960:	4293      	cmp	r3, r2
 800a962:	d819      	bhi.n	800a998 <HAL_RCC_OscConfig+0x28c>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d108      	bne.n	800a97e <HAL_RCC_OscConfig+0x272>
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a974:	4a07      	ldr	r2, [pc, #28]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a97a:	6053      	str	r3, [r2, #4]
 800a97c:	e030      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	031b      	lsls	r3, r3, #12
 800a98c:	4901      	ldr	r1, [pc, #4]	; (800a994 <HAL_RCC_OscConfig+0x288>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	604b      	str	r3, [r1, #4]
 800a992:	e025      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
 800a994:	58024400 	.word	0x58024400
 800a998:	4b9a      	ldr	r3, [pc, #616]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	061b      	lsls	r3, r3, #24
 800a9a6:	4997      	ldr	r1, [pc, #604]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	604b      	str	r3, [r1, #4]
 800a9ac:	e018      	b.n	800a9e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9ae:	4b95      	ldr	r3, [pc, #596]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a94      	ldr	r2, [pc, #592]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9b4:	f023 0301 	bic.w	r3, r3, #1
 800a9b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ba:	f7fb f953 	bl	8005c64 <HAL_GetTick>
 800a9be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9c2:	f7fb f94f 	bl	8005c64 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e2ed      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a9d4:	4b8b      	ldr	r3, [pc, #556]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f0      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 80a9 	beq.w	800ab40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ee:	4b85      	ldr	r3, [pc, #532]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9f8:	4b82      	ldr	r3, [pc, #520]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d007      	beq.n	800aa14 <HAL_RCC_OscConfig+0x308>
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b18      	cmp	r3, #24
 800aa08:	d13a      	bne.n	800aa80 <HAL_RCC_OscConfig+0x374>
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d135      	bne.n	800aa80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa14:	4b7b      	ldr	r3, [pc, #492]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <HAL_RCC_OscConfig+0x320>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d001      	beq.n	800aa2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e2c1      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa2c:	f7fb f94a 	bl	8005cc4 <HAL_GetREVID>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d817      	bhi.n	800aa6a <HAL_RCC_OscConfig+0x35e>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d108      	bne.n	800aa54 <HAL_RCC_OscConfig+0x348>
 800aa42:	4b70      	ldr	r3, [pc, #448]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aa4a:	4a6e      	ldr	r2, [pc, #440]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa52:	e075      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa54:	4b6b      	ldr	r3, [pc, #428]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	069b      	lsls	r3, r3, #26
 800aa62:	4968      	ldr	r1, [pc, #416]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa68:	e06a      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa6a:	4b66      	ldr	r3, [pc, #408]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	061b      	lsls	r3, r3, #24
 800aa78:	4962      	ldr	r1, [pc, #392]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa7e:	e05f      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d042      	beq.n	800ab0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aa88:	4b5e      	ldr	r3, [pc, #376]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a5d      	ldr	r2, [pc, #372]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aa8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa94:	f7fb f8e6 	bl	8005c64 <HAL_GetTick>
 800aa98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa9a:	e008      	b.n	800aaae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa9c:	f7fb f8e2 	bl	8005c64 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d901      	bls.n	800aaae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e280      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaae:	4b55      	ldr	r3, [pc, #340]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f0      	beq.n	800aa9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aaba:	f7fb f903 	bl	8005cc4 <HAL_GetREVID>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f241 0203 	movw	r2, #4099	; 0x1003
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d817      	bhi.n	800aaf8 <HAL_RCC_OscConfig+0x3ec>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d108      	bne.n	800aae2 <HAL_RCC_OscConfig+0x3d6>
 800aad0:	4b4c      	ldr	r3, [pc, #304]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aad8:	4a4a      	ldr	r2, [pc, #296]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aade:	6053      	str	r3, [r2, #4]
 800aae0:	e02e      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
 800aae2:	4b48      	ldr	r3, [pc, #288]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	069b      	lsls	r3, r3, #26
 800aaf0:	4944      	ldr	r1, [pc, #272]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	604b      	str	r3, [r1, #4]
 800aaf6:	e023      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
 800aaf8:	4b42      	ldr	r3, [pc, #264]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	061b      	lsls	r3, r3, #24
 800ab06:	493f      	ldr	r1, [pc, #252]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60cb      	str	r3, [r1, #12]
 800ab0c:	e018      	b.n	800ab40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ab0e:	4b3d      	ldr	r3, [pc, #244]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a3c      	ldr	r2, [pc, #240]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab1a:	f7fb f8a3 	bl	8005c64 <HAL_GetTick>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab20:	e008      	b.n	800ab34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab22:	f7fb f89f 	bl	8005c64 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e23d      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab34:	4b33      	ldr	r3, [pc, #204]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1f0      	bne.n	800ab22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d036      	beq.n	800abba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d019      	beq.n	800ab88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab54:	4b2b      	ldr	r3, [pc, #172]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab58:	4a2a      	ldr	r2, [pc, #168]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab5a:	f043 0301 	orr.w	r3, r3, #1
 800ab5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab60:	f7fb f880 	bl	8005c64 <HAL_GetTick>
 800ab64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab66:	e008      	b.n	800ab7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab68:	f7fb f87c 	bl	8005c64 <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d901      	bls.n	800ab7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e21a      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab7a:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0f0      	beq.n	800ab68 <HAL_RCC_OscConfig+0x45c>
 800ab86:	e018      	b.n	800abba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab88:	4b1e      	ldr	r3, [pc, #120]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8c:	4a1d      	ldr	r2, [pc, #116]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800ab8e:	f023 0301 	bic.w	r3, r3, #1
 800ab92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab94:	f7fb f866 	bl	8005c64 <HAL_GetTick>
 800ab98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab9a:	e008      	b.n	800abae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab9c:	f7fb f862 	bl	8005c64 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d901      	bls.n	800abae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e200      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800abb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1f0      	bne.n	800ab9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d039      	beq.n	800ac3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01c      	beq.n	800ac08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800abce:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a0c      	ldr	r2, [pc, #48]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800abd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abda:	f7fb f843 	bl	8005c64 <HAL_GetTick>
 800abde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abe0:	e008      	b.n	800abf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abe2:	f7fb f83f 	bl	8005c64 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e1dd      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abf4:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <HAL_RCC_OscConfig+0x4f8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0f0      	beq.n	800abe2 <HAL_RCC_OscConfig+0x4d6>
 800ac00:	e01b      	b.n	800ac3a <HAL_RCC_OscConfig+0x52e>
 800ac02:	bf00      	nop
 800ac04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac08:	4b9b      	ldr	r3, [pc, #620]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a9a      	ldr	r2, [pc, #616]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac14:	f7fb f826 	bl	8005c64 <HAL_GetTick>
 800ac18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac1a:	e008      	b.n	800ac2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac1c:	f7fb f822 	bl	8005c64 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e1c0      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac2e:	4b92      	ldr	r3, [pc, #584]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f0      	bne.n	800ac1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8081 	beq.w	800ad4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac48:	4b8c      	ldr	r3, [pc, #560]	; (800ae7c <HAL_RCC_OscConfig+0x770>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a8b      	ldr	r2, [pc, #556]	; (800ae7c <HAL_RCC_OscConfig+0x770>)
 800ac4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac54:	f7fb f806 	bl	8005c64 <HAL_GetTick>
 800ac58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac5a:	e008      	b.n	800ac6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac5c:	f7fb f802 	bl	8005c64 <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b64      	cmp	r3, #100	; 0x64
 800ac68:	d901      	bls.n	800ac6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e1a0      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac6e:	4b83      	ldr	r3, [pc, #524]	; (800ae7c <HAL_RCC_OscConfig+0x770>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0f0      	beq.n	800ac5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d106      	bne.n	800ac90 <HAL_RCC_OscConfig+0x584>
 800ac82:	4b7d      	ldr	r3, [pc, #500]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	4a7c      	ldr	r2, [pc, #496]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac8e:	e02d      	b.n	800acec <HAL_RCC_OscConfig+0x5e0>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10c      	bne.n	800acb2 <HAL_RCC_OscConfig+0x5a6>
 800ac98:	4b77      	ldr	r3, [pc, #476]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9c:	4a76      	ldr	r2, [pc, #472]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ac9e:	f023 0301 	bic.w	r3, r3, #1
 800aca2:	6713      	str	r3, [r2, #112]	; 0x70
 800aca4:	4b74      	ldr	r3, [pc, #464]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca8:	4a73      	ldr	r2, [pc, #460]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acaa:	f023 0304 	bic.w	r3, r3, #4
 800acae:	6713      	str	r3, [r2, #112]	; 0x70
 800acb0:	e01c      	b.n	800acec <HAL_RCC_OscConfig+0x5e0>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d10c      	bne.n	800acd4 <HAL_RCC_OscConfig+0x5c8>
 800acba:	4b6f      	ldr	r3, [pc, #444]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbe:	4a6e      	ldr	r2, [pc, #440]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acc0:	f043 0304 	orr.w	r3, r3, #4
 800acc4:	6713      	str	r3, [r2, #112]	; 0x70
 800acc6:	4b6c      	ldr	r3, [pc, #432]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acca:	4a6b      	ldr	r2, [pc, #428]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800accc:	f043 0301 	orr.w	r3, r3, #1
 800acd0:	6713      	str	r3, [r2, #112]	; 0x70
 800acd2:	e00b      	b.n	800acec <HAL_RCC_OscConfig+0x5e0>
 800acd4:	4b68      	ldr	r3, [pc, #416]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd8:	4a67      	ldr	r2, [pc, #412]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800acda:	f023 0301 	bic.w	r3, r3, #1
 800acde:	6713      	str	r3, [r2, #112]	; 0x70
 800ace0:	4b65      	ldr	r3, [pc, #404]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ace2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace4:	4a64      	ldr	r2, [pc, #400]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ace6:	f023 0304 	bic.w	r3, r3, #4
 800acea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d015      	beq.n	800ad20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acf4:	f7fa ffb6 	bl	8005c64 <HAL_GetTick>
 800acf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acfa:	e00a      	b.n	800ad12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acfc:	f7fa ffb2 	bl	8005c64 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e14e      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad12:	4b59      	ldr	r3, [pc, #356]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0ee      	beq.n	800acfc <HAL_RCC_OscConfig+0x5f0>
 800ad1e:	e014      	b.n	800ad4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad20:	f7fa ffa0 	bl	8005c64 <HAL_GetTick>
 800ad24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad26:	e00a      	b.n	800ad3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad28:	f7fa ff9c 	bl	8005c64 <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d901      	bls.n	800ad3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e138      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad3e:	4b4e      	ldr	r3, [pc, #312]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	f003 0302 	and.w	r3, r3, #2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1ee      	bne.n	800ad28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 812d 	beq.w	800afae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ad54:	4b48      	ldr	r3, [pc, #288]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad5c:	2b18      	cmp	r3, #24
 800ad5e:	f000 80bd 	beq.w	800aedc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	f040 809e 	bne.w	800aea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad6c:	4b42      	ldr	r3, [pc, #264]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a41      	ldr	r2, [pc, #260]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad78:	f7fa ff74 	bl	8005c64 <HAL_GetTick>
 800ad7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad80:	f7fa ff70 	bl	8005c64 <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e10e      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad92:	4b39      	ldr	r3, [pc, #228]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1f0      	bne.n	800ad80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad9e:	4b36      	ldr	r3, [pc, #216]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ada0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ada2:	4b37      	ldr	r3, [pc, #220]	; (800ae80 <HAL_RCC_OscConfig+0x774>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800adae:	0112      	lsls	r2, r2, #4
 800adb0:	430a      	orrs	r2, r1
 800adb2:	4931      	ldr	r1, [pc, #196]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800adb4:	4313      	orrs	r3, r2
 800adb6:	628b      	str	r3, [r1, #40]	; 0x28
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	3b01      	subs	r3, #1
 800adbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc6:	3b01      	subs	r3, #1
 800adc8:	025b      	lsls	r3, r3, #9
 800adca:	b29b      	uxth	r3, r3
 800adcc:	431a      	orrs	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	3b01      	subs	r3, #1
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade0:	3b01      	subs	r3, #1
 800ade2:	061b      	lsls	r3, r3, #24
 800ade4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ade8:	4923      	ldr	r1, [pc, #140]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800adea:	4313      	orrs	r3, r2
 800adec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800adee:	4b22      	ldr	r3, [pc, #136]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	4a21      	ldr	r2, [pc, #132]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adfa:	4b1f      	ldr	r3, [pc, #124]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800adfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adfe:	4b21      	ldr	r3, [pc, #132]	; (800ae84 <HAL_RCC_OscConfig+0x778>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae06:	00d2      	lsls	r2, r2, #3
 800ae08:	491b      	ldr	r1, [pc, #108]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae12:	f023 020c 	bic.w	r2, r3, #12
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	4917      	ldr	r1, [pc, #92]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae20:	4b15      	ldr	r3, [pc, #84]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	f023 0202 	bic.w	r2, r3, #2
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2c:	4912      	ldr	r1, [pc, #72]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae32:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae36:	4a10      	ldr	r2, [pc, #64]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae3e:	4b0e      	ldr	r3, [pc, #56]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	4a0d      	ldr	r2, [pc, #52]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ae56:	4b08      	ldr	r3, [pc, #32]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	4a07      	ldr	r2, [pc, #28]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae5c:	f043 0301 	orr.w	r3, r3, #1
 800ae60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a04      	ldr	r2, [pc, #16]	; (800ae78 <HAL_RCC_OscConfig+0x76c>)
 800ae68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae6e:	f7fa fef9 	bl	8005c64 <HAL_GetTick>
 800ae72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae74:	e011      	b.n	800ae9a <HAL_RCC_OscConfig+0x78e>
 800ae76:	bf00      	nop
 800ae78:	58024400 	.word	0x58024400
 800ae7c:	58024800 	.word	0x58024800
 800ae80:	fffffc0c 	.word	0xfffffc0c
 800ae84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae88:	f7fa feec 	bl	8005c64 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d901      	bls.n	800ae9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e08a      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae9a:	4b47      	ldr	r3, [pc, #284]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0f0      	beq.n	800ae88 <HAL_RCC_OscConfig+0x77c>
 800aea6:	e082      	b.n	800afae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aea8:	4b43      	ldr	r3, [pc, #268]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a42      	ldr	r2, [pc, #264]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800aeae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb4:	f7fa fed6 	bl	8005c64 <HAL_GetTick>
 800aeb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aeba:	e008      	b.n	800aece <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aebc:	f7fa fed2 	bl	8005c64 <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d901      	bls.n	800aece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e070      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aece:	4b3a      	ldr	r3, [pc, #232]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f0      	bne.n	800aebc <HAL_RCC_OscConfig+0x7b0>
 800aeda:	e068      	b.n	800afae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aedc:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800aede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aee2:	4b35      	ldr	r3, [pc, #212]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d031      	beq.n	800af54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f003 0203 	and.w	r2, r3, #3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d12a      	bne.n	800af54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	091b      	lsrs	r3, r3, #4
 800af02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d122      	bne.n	800af54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d11a      	bne.n	800af54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	0a5b      	lsrs	r3, r3, #9
 800af22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d111      	bne.n	800af54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	0c1b      	lsrs	r3, r3, #16
 800af34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af3e:	429a      	cmp	r2, r3
 800af40:	d108      	bne.n	800af54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0e1b      	lsrs	r3, r3, #24
 800af46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af50:	429a      	cmp	r2, r3
 800af52:	d001      	beq.n	800af58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e02b      	b.n	800afb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800af5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5c:	08db      	lsrs	r3, r3, #3
 800af5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d01f      	beq.n	800afae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	4a11      	ldr	r2, [pc, #68]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af7a:	f7fa fe73 	bl	8005c64 <HAL_GetTick>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800af80:	bf00      	nop
 800af82:	f7fa fe6f 	bl	8005c64 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d0f9      	beq.n	800af82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af8e:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800af90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af92:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <HAL_RCC_OscConfig+0x8b0>)
 800af94:	4013      	ands	r3, r2
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af9a:	00d2      	lsls	r2, r2, #3
 800af9c:	4906      	ldr	r1, [pc, #24]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800af9e:	4313      	orrs	r3, r2
 800afa0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	4a04      	ldr	r2, [pc, #16]	; (800afb8 <HAL_RCC_OscConfig+0x8ac>)
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3730      	adds	r7, #48	; 0x30
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	58024400 	.word	0x58024400
 800afbc:	ffff0007 	.word	0xffff0007

0800afc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e19c      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800afd4:	4b8a      	ldr	r3, [pc, #552]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d910      	bls.n	800b004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afe2:	4b87      	ldr	r3, [pc, #540]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f023 020f 	bic.w	r2, r3, #15
 800afea:	4985      	ldr	r1, [pc, #532]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	4313      	orrs	r3, r2
 800aff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aff2:	4b83      	ldr	r3, [pc, #524]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 030f 	and.w	r3, r3, #15
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d001      	beq.n	800b004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e184      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	4b7b      	ldr	r3, [pc, #492]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d908      	bls.n	800b032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b020:	4b78      	ldr	r3, [pc, #480]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	4975      	ldr	r1, [pc, #468]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	695a      	ldr	r2, [r3, #20]
 800b042:	4b70      	ldr	r3, [pc, #448]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d908      	bls.n	800b060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b04e:	4b6d      	ldr	r3, [pc, #436]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	496a      	ldr	r1, [pc, #424]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d010      	beq.n	800b08e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	4b64      	ldr	r3, [pc, #400]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b078:	429a      	cmp	r2, r3
 800b07a:	d908      	bls.n	800b08e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b07c:	4b61      	ldr	r3, [pc, #388]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	495e      	ldr	r1, [pc, #376]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b00      	cmp	r3, #0
 800b098:	d010      	beq.n	800b0bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69da      	ldr	r2, [r3, #28]
 800b09e:	4b59      	ldr	r3, [pc, #356]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d908      	bls.n	800b0bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0aa:	4b56      	ldr	r3, [pc, #344]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	4953      	ldr	r1, [pc, #332]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d010      	beq.n	800b0ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	4b4d      	ldr	r3, [pc, #308]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	f003 030f 	and.w	r3, r3, #15
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d908      	bls.n	800b0ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0d8:	4b4a      	ldr	r3, [pc, #296]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	f023 020f 	bic.w	r2, r3, #15
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	4947      	ldr	r1, [pc, #284]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d055      	beq.n	800b1a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b0f6:	4b43      	ldr	r3, [pc, #268]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	4940      	ldr	r1, [pc, #256]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b104:	4313      	orrs	r3, r2
 800b106:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d107      	bne.n	800b120 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b110:	4b3c      	ldr	r3, [pc, #240]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d121      	bne.n	800b160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e0f6      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b03      	cmp	r3, #3
 800b126:	d107      	bne.n	800b138 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b128:	4b36      	ldr	r3, [pc, #216]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d115      	bne.n	800b160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e0ea      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d107      	bne.n	800b150 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b140:	4b30      	ldr	r3, [pc, #192]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d109      	bne.n	800b160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e0de      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b150:	4b2c      	ldr	r3, [pc, #176]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e0d6      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	f023 0207 	bic.w	r2, r3, #7
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	4925      	ldr	r1, [pc, #148]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b172:	f7fa fd77 	bl	8005c64 <HAL_GetTick>
 800b176:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b178:	e00a      	b.n	800b190 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b17a:	f7fa fd73 	bl	8005c64 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	f241 3288 	movw	r2, #5000	; 0x1388
 800b188:	4293      	cmp	r3, r2
 800b18a:	d901      	bls.n	800b190 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e0be      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b190:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d1eb      	bne.n	800b17a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0302 	and.w	r3, r3, #2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d010      	beq.n	800b1d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68da      	ldr	r2, [r3, #12]
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f003 030f 	and.w	r3, r3, #15
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d208      	bcs.n	800b1d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f023 020f 	bic.w	r2, r3, #15
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	490e      	ldr	r1, [pc, #56]	; (800b204 <HAL_RCC_ClockConfig+0x244>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d214      	bcs.n	800b208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1de:	4b08      	ldr	r3, [pc, #32]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f023 020f 	bic.w	r2, r3, #15
 800b1e6:	4906      	ldr	r1, [pc, #24]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ee:	4b04      	ldr	r3, [pc, #16]	; (800b200 <HAL_RCC_ClockConfig+0x240>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 030f 	and.w	r3, r3, #15
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d005      	beq.n	800b208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e086      	b.n	800b30e <HAL_RCC_ClockConfig+0x34e>
 800b200:	52002000 	.word	0x52002000
 800b204:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	4b3f      	ldr	r3, [pc, #252]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b220:	429a      	cmp	r2, r3
 800b222:	d208      	bcs.n	800b236 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b224:	4b3c      	ldr	r3, [pc, #240]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	4939      	ldr	r1, [pc, #228]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b232:	4313      	orrs	r3, r2
 800b234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0308 	and.w	r3, r3, #8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d010      	beq.n	800b264 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	695a      	ldr	r2, [r3, #20]
 800b246:	4b34      	ldr	r3, [pc, #208]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b24e:	429a      	cmp	r2, r3
 800b250:	d208      	bcs.n	800b264 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b252:	4b31      	ldr	r3, [pc, #196]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	492e      	ldr	r1, [pc, #184]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b260:	4313      	orrs	r3, r2
 800b262:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0310 	and.w	r3, r3, #16
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d010      	beq.n	800b292 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b276:	69db      	ldr	r3, [r3, #28]
 800b278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d208      	bcs.n	800b292 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	4922      	ldr	r1, [pc, #136]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69da      	ldr	r2, [r3, #28]
 800b2a2:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d208      	bcs.n	800b2c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	4917      	ldr	r1, [pc, #92]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b2c0:	f000 f834 	bl	800b32c <HAL_RCC_GetSysClockFreq>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	0a1b      	lsrs	r3, r3, #8
 800b2cc:	f003 030f 	and.w	r3, r3, #15
 800b2d0:	4912      	ldr	r1, [pc, #72]	; (800b31c <HAL_RCC_ClockConfig+0x35c>)
 800b2d2:	5ccb      	ldrb	r3, [r1, r3]
 800b2d4:	f003 031f 	and.w	r3, r3, #31
 800b2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2de:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <HAL_RCC_ClockConfig+0x358>)
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <HAL_RCC_ClockConfig+0x35c>)
 800b2e8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f4:	4a0a      	ldr	r2, [pc, #40]	; (800b320 <HAL_RCC_ClockConfig+0x360>)
 800b2f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2f8:	4a0a      	ldr	r2, [pc, #40]	; (800b324 <HAL_RCC_ClockConfig+0x364>)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b2fe:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <HAL_RCC_ClockConfig+0x368>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4618      	mov	r0, r3
 800b304:	f7fa fc64 	bl	8005bd0 <HAL_InitTick>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	58024400 	.word	0x58024400
 800b31c:	080141a4 	.word	0x080141a4
 800b320:	24000040 	.word	0x24000040
 800b324:	2400003c 	.word	0x2400003c
 800b328:	24000044 	.word	0x24000044

0800b32c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b089      	sub	sp, #36	; 0x24
 800b330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b332:	4bb3      	ldr	r3, [pc, #716]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b33a:	2b18      	cmp	r3, #24
 800b33c:	f200 8155 	bhi.w	800b5ea <HAL_RCC_GetSysClockFreq+0x2be>
 800b340:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b3ad 	.word	0x0800b3ad
 800b34c:	0800b5eb 	.word	0x0800b5eb
 800b350:	0800b5eb 	.word	0x0800b5eb
 800b354:	0800b5eb 	.word	0x0800b5eb
 800b358:	0800b5eb 	.word	0x0800b5eb
 800b35c:	0800b5eb 	.word	0x0800b5eb
 800b360:	0800b5eb 	.word	0x0800b5eb
 800b364:	0800b5eb 	.word	0x0800b5eb
 800b368:	0800b3d3 	.word	0x0800b3d3
 800b36c:	0800b5eb 	.word	0x0800b5eb
 800b370:	0800b5eb 	.word	0x0800b5eb
 800b374:	0800b5eb 	.word	0x0800b5eb
 800b378:	0800b5eb 	.word	0x0800b5eb
 800b37c:	0800b5eb 	.word	0x0800b5eb
 800b380:	0800b5eb 	.word	0x0800b5eb
 800b384:	0800b5eb 	.word	0x0800b5eb
 800b388:	0800b3d9 	.word	0x0800b3d9
 800b38c:	0800b5eb 	.word	0x0800b5eb
 800b390:	0800b5eb 	.word	0x0800b5eb
 800b394:	0800b5eb 	.word	0x0800b5eb
 800b398:	0800b5eb 	.word	0x0800b5eb
 800b39c:	0800b5eb 	.word	0x0800b5eb
 800b3a0:	0800b5eb 	.word	0x0800b5eb
 800b3a4:	0800b5eb 	.word	0x0800b5eb
 800b3a8:	0800b3df 	.word	0x0800b3df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ac:	4b94      	ldr	r3, [pc, #592]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0320 	and.w	r3, r3, #32
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d009      	beq.n	800b3cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b8:	4b91      	ldr	r3, [pc, #580]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	08db      	lsrs	r3, r3, #3
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	4a90      	ldr	r2, [pc, #576]	; (800b604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b3ca:	e111      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3cc:	4b8d      	ldr	r3, [pc, #564]	; (800b604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3ce:	61bb      	str	r3, [r7, #24]
      break;
 800b3d0:	e10e      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b3d2:	4b8d      	ldr	r3, [pc, #564]	; (800b608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3d4:	61bb      	str	r3, [r7, #24]
      break;
 800b3d6:	e10b      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b3d8:	4b8c      	ldr	r3, [pc, #560]	; (800b60c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b3da:	61bb      	str	r3, [r7, #24]
      break;
 800b3dc:	e108      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3de:	4b88      	ldr	r3, [pc, #544]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e2:	f003 0303 	and.w	r3, r3, #3
 800b3e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b3e8:	4b85      	ldr	r3, [pc, #532]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ec:	091b      	lsrs	r3, r3, #4
 800b3ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b3f4:	4b82      	ldr	r3, [pc, #520]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3fe:	4b80      	ldr	r3, [pc, #512]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b402:	08db      	lsrs	r3, r3, #3
 800b404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	fb02 f303 	mul.w	r3, r2, r3
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80e1 	beq.w	800b5e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b02      	cmp	r3, #2
 800b426:	f000 8083 	beq.w	800b530 <HAL_RCC_GetSysClockFreq+0x204>
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	f200 80a1 	bhi.w	800b574 <HAL_RCC_GetSysClockFreq+0x248>
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <HAL_RCC_GetSysClockFreq+0x114>
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d056      	beq.n	800b4ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800b43e:	e099      	b.n	800b574 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b440:	4b6f      	ldr	r3, [pc, #444]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0320 	and.w	r3, r3, #32
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d02d      	beq.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b44c:	4b6c      	ldr	r3, [pc, #432]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	08db      	lsrs	r3, r3, #3
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	4a6b      	ldr	r2, [pc, #428]	; (800b604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b458:	fa22 f303 	lsr.w	r3, r2, r3
 800b45c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b476:	4b62      	ldr	r3, [pc, #392]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b486:	ed97 6a02 	vldr	s12, [r7, #8]
 800b48a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b4a6:	e087      	b.n	800b5b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	ee07 3a90 	vmov	s15, r3
 800b4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b614 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b4b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ba:	4b51      	ldr	r3, [pc, #324]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4ea:	e065      	b.n	800b5b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	ee07 3a90 	vmov	s15, r3
 800b4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b618 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4fe:	4b40      	ldr	r3, [pc, #256]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b50e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b52e:	e043      	b.n	800b5b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b61c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b542:	4b2f      	ldr	r3, [pc, #188]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b552:	ed97 6a02 	vldr	s12, [r7, #8]
 800b556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b56e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b572:	e021      	b.n	800b5b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b618 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b586:	4b1e      	ldr	r3, [pc, #120]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b596:	ed97 6a02 	vldr	s12, [r7, #8]
 800b59a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b59e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b5b8:	4b11      	ldr	r3, [pc, #68]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5bc:	0a5b      	lsrs	r3, r3, #9
 800b5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5dc:	ee17 3a90 	vmov	r3, s15
 800b5e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b5e2:	e005      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61bb      	str	r3, [r7, #24]
      break;
 800b5e8:	e002      	b.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b5ea:	4b07      	ldr	r3, [pc, #28]	; (800b608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5ec:	61bb      	str	r3, [r7, #24]
      break;
 800b5ee:	bf00      	nop
  }

  return sysclockfreq;
 800b5f0:	69bb      	ldr	r3, [r7, #24]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3724      	adds	r7, #36	; 0x24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	58024400 	.word	0x58024400
 800b604:	03d09000 	.word	0x03d09000
 800b608:	003d0900 	.word	0x003d0900
 800b60c:	017d7840 	.word	0x017d7840
 800b610:	46000000 	.word	0x46000000
 800b614:	4c742400 	.word	0x4c742400
 800b618:	4a742400 	.word	0x4a742400
 800b61c:	4bbebc20 	.word	0x4bbebc20

0800b620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b626:	f7ff fe81 	bl	800b32c <HAL_RCC_GetSysClockFreq>
 800b62a:	4602      	mov	r2, r0
 800b62c:	4b10      	ldr	r3, [pc, #64]	; (800b670 <HAL_RCC_GetHCLKFreq+0x50>)
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	0a1b      	lsrs	r3, r3, #8
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	490f      	ldr	r1, [pc, #60]	; (800b674 <HAL_RCC_GetHCLKFreq+0x54>)
 800b638:	5ccb      	ldrb	r3, [r1, r3]
 800b63a:	f003 031f 	and.w	r3, r3, #31
 800b63e:	fa22 f303 	lsr.w	r3, r2, r3
 800b642:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <HAL_RCC_GetHCLKFreq+0x50>)
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	f003 030f 	and.w	r3, r3, #15
 800b64c:	4a09      	ldr	r2, [pc, #36]	; (800b674 <HAL_RCC_GetHCLKFreq+0x54>)
 800b64e:	5cd3      	ldrb	r3, [r2, r3]
 800b650:	f003 031f 	and.w	r3, r3, #31
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	fa22 f303 	lsr.w	r3, r2, r3
 800b65a:	4a07      	ldr	r2, [pc, #28]	; (800b678 <HAL_RCC_GetHCLKFreq+0x58>)
 800b65c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b65e:	4a07      	ldr	r2, [pc, #28]	; (800b67c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b664:	4b04      	ldr	r3, [pc, #16]	; (800b678 <HAL_RCC_GetHCLKFreq+0x58>)
 800b666:	681b      	ldr	r3, [r3, #0]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	58024400 	.word	0x58024400
 800b674:	080141a4 	.word	0x080141a4
 800b678:	24000040 	.word	0x24000040
 800b67c:	2400003c 	.word	0x2400003c

0800b680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b684:	f7ff ffcc 	bl	800b620 <HAL_RCC_GetHCLKFreq>
 800b688:	4602      	mov	r2, r0
 800b68a:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	091b      	lsrs	r3, r3, #4
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	4904      	ldr	r1, [pc, #16]	; (800b6a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b696:	5ccb      	ldrb	r3, [r1, r3]
 800b698:	f003 031f 	and.w	r3, r3, #31
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	58024400 	.word	0x58024400
 800b6a8:	080141a4 	.word	0x080141a4

0800b6ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b6b0:	f7ff ffb6 	bl	800b620 <HAL_RCC_GetHCLKFreq>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	0a1b      	lsrs	r3, r3, #8
 800b6bc:	f003 0307 	and.w	r3, r3, #7
 800b6c0:	4904      	ldr	r1, [pc, #16]	; (800b6d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b6c2:	5ccb      	ldrb	r3, [r1, r3]
 800b6c4:	f003 031f 	and.w	r3, r3, #31
 800b6c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	080141a4 	.word	0x080141a4

0800b6d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6dc:	b0ca      	sub	sp, #296	; 0x128
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b6fc:	2500      	movs	r5, #0
 800b6fe:	ea54 0305 	orrs.w	r3, r4, r5
 800b702:	d049      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b70a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b70e:	d02f      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b714:	d828      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b71a:	d01a      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b71c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b720:	d822      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b72a:	d007      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b72c:	e01c      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b72e:	4bb8      	ldr	r3, [pc, #736]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	4ab7      	ldr	r2, [pc, #732]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b73a:	e01a      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	3308      	adds	r3, #8
 800b742:	2102      	movs	r1, #2
 800b744:	4618      	mov	r0, r3
 800b746:	f002 fb61 	bl	800de0c <RCCEx_PLL2_Config>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b750:	e00f      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	3328      	adds	r3, #40	; 0x28
 800b758:	2102      	movs	r1, #2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 fc08 	bl	800df70 <RCCEx_PLL3_Config>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b766:	e004      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b76e:	e000      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b770:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b77a:	4ba5      	ldr	r3, [pc, #660]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b788:	4aa1      	ldr	r2, [pc, #644]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b78a:	430b      	orrs	r3, r1
 800b78c:	6513      	str	r3, [r2, #80]	; 0x50
 800b78e:	e003      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b7a4:	f04f 0900 	mov.w	r9, #0
 800b7a8:	ea58 0309 	orrs.w	r3, r8, r9
 800b7ac:	d047      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	2b04      	cmp	r3, #4
 800b7b6:	d82a      	bhi.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b7b8:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b7d5 	.word	0x0800b7d5
 800b7c4:	0800b7e3 	.word	0x0800b7e3
 800b7c8:	0800b7f9 	.word	0x0800b7f9
 800b7cc:	0800b817 	.word	0x0800b817
 800b7d0:	0800b817 	.word	0x0800b817
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d4:	4b8e      	ldr	r3, [pc, #568]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	4a8d      	ldr	r2, [pc, #564]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7e0:	e01a      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f002 fb0e 	bl	800de0c <RCCEx_PLL2_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7f6:	e00f      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7fc:	3328      	adds	r3, #40	; 0x28
 800b7fe:	2100      	movs	r1, #0
 800b800:	4618      	mov	r0, r3
 800b802:	f002 fbb5 	bl	800df70 <RCCEx_PLL3_Config>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b80c:	e004      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b814:	e000      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b820:	4b7b      	ldr	r3, [pc, #492]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	f023 0107 	bic.w	r1, r3, #7
 800b828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82e:	4a78      	ldr	r2, [pc, #480]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b830:	430b      	orrs	r3, r1
 800b832:	6513      	str	r3, [r2, #80]	; 0x50
 800b834:	e003      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b83a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b84a:	f04f 0b00 	mov.w	fp, #0
 800b84e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b852:	d04c      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85e:	d030      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b864:	d829      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b866:	2bc0      	cmp	r3, #192	; 0xc0
 800b868:	d02d      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b86a:	2bc0      	cmp	r3, #192	; 0xc0
 800b86c:	d825      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b86e:	2b80      	cmp	r3, #128	; 0x80
 800b870:	d018      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b872:	2b80      	cmp	r3, #128	; 0x80
 800b874:	d821      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d007      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b87e:	e01c      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b880:	4b63      	ldr	r3, [pc, #396]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	4a62      	ldr	r2, [pc, #392]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b88c:	e01c      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b892:	3308      	adds	r3, #8
 800b894:	2100      	movs	r1, #0
 800b896:	4618      	mov	r0, r3
 800b898:	f002 fab8 	bl	800de0c <RCCEx_PLL2_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8a2:	e011      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a8:	3328      	adds	r3, #40	; 0x28
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 fb5f 	bl	800df70 <RCCEx_PLL3_Config>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8b8:	e006      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8c0:	e002      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b8c2:	bf00      	nop
 800b8c4:	e000      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b8d0:	4b4f      	ldr	r3, [pc, #316]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8de:	4a4c      	ldr	r2, [pc, #304]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	6513      	str	r3, [r2, #80]	; 0x50
 800b8e4:	e003      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b8fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b8fe:	2300      	movs	r3, #0
 800b900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b904:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b908:	460b      	mov	r3, r1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	d053      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b91a:	d035      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b91c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b920:	d82e      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b922:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b926:	d031      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b92c:	d828      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b932:	d01a      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b938:	d822      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b93e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b942:	d007      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b944:	e01c      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b946:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	4a31      	ldr	r2, [pc, #196]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b94c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b952:	e01c      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b958:	3308      	adds	r3, #8
 800b95a:	2100      	movs	r1, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f002 fa55 	bl	800de0c <RCCEx_PLL2_Config>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b968:	e011      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	3328      	adds	r3, #40	; 0x28
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f002 fafc 	bl	800df70 <RCCEx_PLL3_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b97e:	e006      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b986:	e002      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b988:	bf00      	nop
 800b98a:	e000      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b996:	4b1e      	ldr	r3, [pc, #120]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b99a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9a6:	4a1a      	ldr	r2, [pc, #104]	; (800ba10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ac:	e003      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b9c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b9cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	d056      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b9de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9e2:	d038      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b9e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9e8:	d831      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b9ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9ee:	d034      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b9f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9f4:	d82b      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b9f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9fa:	d01d      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b9fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba00:	d825      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d006      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ba06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba0a:	d00a      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ba0c:	e01f      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba0e:	bf00      	nop
 800ba10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba14:	4ba2      	ldr	r3, [pc, #648]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba18:	4aa1      	ldr	r2, [pc, #644]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba20:	e01c      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba26:	3308      	adds	r3, #8
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 f9ee 	bl	800de0c <RCCEx_PLL2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba36:	e011      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3c:	3328      	adds	r3, #40	; 0x28
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f002 fa95 	bl	800df70 <RCCEx_PLL3_Config>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba4c:	e006      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba54:	e002      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ba56:	bf00      	nop
 800ba58:	e000      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ba5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10b      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba64:	4b8e      	ldr	r3, [pc, #568]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba68:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ba6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba74:	4a8a      	ldr	r2, [pc, #552]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba76:	430b      	orrs	r3, r1
 800ba78:	6593      	str	r3, [r2, #88]	; 0x58
 800ba7a:	e003      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ba90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4313      	orrs	r3, r2
 800baa2:	d03a      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800baa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baaa:	2b30      	cmp	r3, #48	; 0x30
 800baac:	d01f      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x416>
 800baae:	2b30      	cmp	r3, #48	; 0x30
 800bab0:	d819      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bab2:	2b20      	cmp	r3, #32
 800bab4:	d00c      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bab6:	2b20      	cmp	r3, #32
 800bab8:	d815      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d019      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800babe:	2b10      	cmp	r3, #16
 800bac0:	d111      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bac2:	4b77      	ldr	r3, [pc, #476]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac6:	4a76      	ldr	r2, [pc, #472]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bacc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bace:	e011      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad4:	3308      	adds	r3, #8
 800bad6:	2102      	movs	r1, #2
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 f997 	bl	800de0c <RCCEx_PLL2_Config>
 800bade:	4603      	mov	r3, r0
 800bae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bae4:	e006      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baec:	e002      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800baee:	bf00      	nop
 800baf0:	e000      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800baf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bafc:	4b68      	ldr	r3, [pc, #416]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bafe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0a:	4a65      	ldr	r2, [pc, #404]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb10:	e003      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bb26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4313      	orrs	r3, r2
 800bb38:	d051      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb44:	d035      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bb46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb4a:	d82e      	bhi.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bb4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb50:	d031      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bb52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb56:	d828      	bhi.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bb58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb5c:	d01a      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bb5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb62:	d822      	bhi.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bb68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb6c:	d007      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800bb6e:	e01c      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb70:	4b4b      	ldr	r3, [pc, #300]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	4a4a      	ldr	r2, [pc, #296]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb7c:	e01c      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb82:	3308      	adds	r3, #8
 800bb84:	2100      	movs	r1, #0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f002 f940 	bl	800de0c <RCCEx_PLL2_Config>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb92:	e011      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb98:	3328      	adds	r3, #40	; 0x28
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f002 f9e7 	bl	800df70 <RCCEx_PLL3_Config>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bba8:	e006      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbb0:	e002      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bbb2:	bf00      	nop
 800bbb4:	e000      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bbb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10a      	bne.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbc0:	4b37      	ldr	r3, [pc, #220]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbce:	4a34      	ldr	r2, [pc, #208]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	6513      	str	r3, [r2, #80]	; 0x50
 800bbd4:	e003      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bbea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbf4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	d056      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc08:	d033      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bc0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc0e:	d82c      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc14:	d02f      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800bc16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc1a:	d826      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc20:	d02b      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bc22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc26:	d820      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc2c:	d012      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800bc2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc32:	d81a      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d022      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc3c:	d115      	bne.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc42:	3308      	adds	r3, #8
 800bc44:	2101      	movs	r1, #1
 800bc46:	4618      	mov	r0, r3
 800bc48:	f002 f8e0 	bl	800de0c <RCCEx_PLL2_Config>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc52:	e015      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc58:	3328      	adds	r3, #40	; 0x28
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 f987 	bl	800df70 <RCCEx_PLL3_Config>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc68:	e00a      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc70:	e006      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bc72:	bf00      	nop
 800bc74:	e004      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bc76:	bf00      	nop
 800bc78:	e002      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bc7a:	bf00      	nop
 800bc7c:	e000      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bc7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10d      	bne.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc96:	4a02      	ldr	r2, [pc, #8]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	6513      	str	r3, [r2, #80]	; 0x50
 800bc9c:	e006      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc9e:	bf00      	nop
 800bca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bcb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bcc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d055      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcd8:	d033      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bcda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcde:	d82c      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce4:	d02f      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcea:	d826      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bcec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcf0:	d02b      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bcf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcf6:	d820      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bcf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfc:	d012      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bcfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd02:	d81a      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d022      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bd08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd0c:	d115      	bne.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd12:	3308      	adds	r3, #8
 800bd14:	2101      	movs	r1, #1
 800bd16:	4618      	mov	r0, r3
 800bd18:	f002 f878 	bl	800de0c <RCCEx_PLL2_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd22:	e015      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd28:	3328      	adds	r3, #40	; 0x28
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f002 f91f 	bl	800df70 <RCCEx_PLL3_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd38:	e00a      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd40:	e006      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd42:	bf00      	nop
 800bd44:	e004      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd46:	bf00      	nop
 800bd48:	e002      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd4a:	bf00      	nop
 800bd4c:	e000      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10b      	bne.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd58:	4ba3      	ldr	r3, [pc, #652]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd5c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd68:	4a9f      	ldr	r2, [pc, #636]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	6593      	str	r3, [r2, #88]	; 0x58
 800bd6e:	e003      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bd84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bd92:	460b      	mov	r3, r1
 800bd94:	4313      	orrs	r3, r2
 800bd96:	d037      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bda2:	d00e      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bda4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bda8:	d816      	bhi.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d018      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800bdae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdb2:	d111      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdb4:	4b8c      	ldr	r3, [pc, #560]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	4a8b      	ldr	r2, [pc, #556]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdc0:	e00f      	b.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	2101      	movs	r1, #1
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f002 f81e 	bl	800de0c <RCCEx_PLL2_Config>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdd6:	e004      	b.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdde:	e000      	b.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800bde0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bde2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10a      	bne.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdea:	4b7f      	ldr	r3, [pc, #508]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf8:	4a7b      	ldr	r2, [pc, #492]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdfa:	430b      	orrs	r3, r1
 800bdfc:	6513      	str	r3, [r2, #80]	; 0x50
 800bdfe:	e003      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800be14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be18:	2300      	movs	r3, #0
 800be1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800be22:	460b      	mov	r3, r1
 800be24:	4313      	orrs	r3, r2
 800be26:	d039      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d81c      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800be32:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be75 	.word	0x0800be75
 800be3c:	0800be49 	.word	0x0800be49
 800be40:	0800be57 	.word	0x0800be57
 800be44:	0800be75 	.word	0x0800be75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be48:	4b67      	ldr	r3, [pc, #412]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	4a66      	ldr	r2, [pc, #408]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be54:	e00f      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	3308      	adds	r3, #8
 800be5c:	2102      	movs	r1, #2
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 ffd4 	bl	800de0c <RCCEx_PLL2_Config>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be6a:	e004      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be72:	e000      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800be74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10a      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be7e:	4b5a      	ldr	r3, [pc, #360]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be82:	f023 0103 	bic.w	r1, r3, #3
 800be86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be8c:	4a56      	ldr	r2, [pc, #344]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be8e:	430b      	orrs	r3, r1
 800be90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be92:	e003      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800beac:	2300      	movs	r3, #0
 800beae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800beb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800beb6:	460b      	mov	r3, r1
 800beb8:	4313      	orrs	r3, r2
 800beba:	f000 809f 	beq.w	800bffc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bebe:	4b4b      	ldr	r3, [pc, #300]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a4a      	ldr	r2, [pc, #296]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800beca:	f7f9 fecb 	bl	8005c64 <HAL_GetTick>
 800bece:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bed2:	e00b      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bed4:	f7f9 fec6 	bl	8005c64 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b64      	cmp	r3, #100	; 0x64
 800bee2:	d903      	bls.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beea:	e005      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beec:	4b3f      	ldr	r3, [pc, #252]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d0ed      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800befc:	2b00      	cmp	r3, #0
 800befe:	d179      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf00:	4b39      	ldr	r3, [pc, #228]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf0c:	4053      	eors	r3, r2
 800bf0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d015      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf16:	4b34      	ldr	r3, [pc, #208]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf22:	4b31      	ldr	r3, [pc, #196]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf26:	4a30      	ldr	r2, [pc, #192]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf2e:	4b2e      	ldr	r3, [pc, #184]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf32:	4a2d      	ldr	r2, [pc, #180]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf3a:	4a2b      	ldr	r2, [pc, #172]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	d118      	bne.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf50:	f7f9 fe88 	bl	8005c64 <HAL_GetTick>
 800bf54:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf58:	e00d      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf5a:	f7f9 fe83 	bl	8005c64 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bf64:	1ad2      	subs	r2, r2, r3
 800bf66:	f241 3388 	movw	r3, #5000	; 0x1388
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d903      	bls.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bf74:	e005      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf76:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7a:	f003 0302 	and.w	r3, r3, #2
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0eb      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bf82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d129      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf9a:	d10e      	bne.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bf9c:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfac:	091a      	lsrs	r2, r3, #4
 800bfae:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	4a0d      	ldr	r2, [pc, #52]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	6113      	str	r3, [r2, #16]
 800bfb8:	e005      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bfba:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	4a0a      	ldr	r2, [pc, #40]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfc4:	6113      	str	r3, [r2, #16]
 800bfc6:	4b08      	ldr	r3, [pc, #32]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfd6:	4a04      	ldr	r2, [pc, #16]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	6713      	str	r3, [r2, #112]	; 0x70
 800bfdc:	e00e      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bfde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bfe6:	e009      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bfe8:	58024400 	.word	0x58024400
 800bfec:	58024800 	.word	0x58024800
 800bff0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f002 0301 	and.w	r3, r2, #1
 800c008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c00c:	2300      	movs	r3, #0
 800c00e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c012:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c016:	460b      	mov	r3, r1
 800c018:	4313      	orrs	r3, r2
 800c01a:	f000 8089 	beq.w	800c130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c024:	2b28      	cmp	r3, #40	; 0x28
 800c026:	d86b      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c028:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02e:	bf00      	nop
 800c030:	0800c109 	.word	0x0800c109
 800c034:	0800c101 	.word	0x0800c101
 800c038:	0800c101 	.word	0x0800c101
 800c03c:	0800c101 	.word	0x0800c101
 800c040:	0800c101 	.word	0x0800c101
 800c044:	0800c101 	.word	0x0800c101
 800c048:	0800c101 	.word	0x0800c101
 800c04c:	0800c101 	.word	0x0800c101
 800c050:	0800c0d5 	.word	0x0800c0d5
 800c054:	0800c101 	.word	0x0800c101
 800c058:	0800c101 	.word	0x0800c101
 800c05c:	0800c101 	.word	0x0800c101
 800c060:	0800c101 	.word	0x0800c101
 800c064:	0800c101 	.word	0x0800c101
 800c068:	0800c101 	.word	0x0800c101
 800c06c:	0800c101 	.word	0x0800c101
 800c070:	0800c0eb 	.word	0x0800c0eb
 800c074:	0800c101 	.word	0x0800c101
 800c078:	0800c101 	.word	0x0800c101
 800c07c:	0800c101 	.word	0x0800c101
 800c080:	0800c101 	.word	0x0800c101
 800c084:	0800c101 	.word	0x0800c101
 800c088:	0800c101 	.word	0x0800c101
 800c08c:	0800c101 	.word	0x0800c101
 800c090:	0800c109 	.word	0x0800c109
 800c094:	0800c101 	.word	0x0800c101
 800c098:	0800c101 	.word	0x0800c101
 800c09c:	0800c101 	.word	0x0800c101
 800c0a0:	0800c101 	.word	0x0800c101
 800c0a4:	0800c101 	.word	0x0800c101
 800c0a8:	0800c101 	.word	0x0800c101
 800c0ac:	0800c101 	.word	0x0800c101
 800c0b0:	0800c109 	.word	0x0800c109
 800c0b4:	0800c101 	.word	0x0800c101
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c101 	.word	0x0800c101
 800c0c0:	0800c101 	.word	0x0800c101
 800c0c4:	0800c101 	.word	0x0800c101
 800c0c8:	0800c101 	.word	0x0800c101
 800c0cc:	0800c101 	.word	0x0800c101
 800c0d0:	0800c109 	.word	0x0800c109
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d8:	3308      	adds	r3, #8
 800c0da:	2101      	movs	r1, #1
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 fe95 	bl	800de0c <RCCEx_PLL2_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c0e8:	e00f      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ee:	3328      	adds	r3, #40	; 0x28
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f001 ff3c 	bl	800df70 <RCCEx_PLL3_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c0fe:	e004      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c106:	e000      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c112:	4bbf      	ldr	r3, [pc, #764]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c120:	4abb      	ldr	r2, [pc, #748]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c122:	430b      	orrs	r3, r1
 800c124:	6553      	str	r3, [r2, #84]	; 0x54
 800c126:	e003      	b.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c12c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f002 0302 	and.w	r3, r2, #2
 800c13c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c140:	2300      	movs	r3, #0
 800c142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c146:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c14a:	460b      	mov	r3, r1
 800c14c:	4313      	orrs	r3, r2
 800c14e:	d041      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c156:	2b05      	cmp	r3, #5
 800c158:	d824      	bhi.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c1ad 	.word	0x0800c1ad
 800c164:	0800c179 	.word	0x0800c179
 800c168:	0800c18f 	.word	0x0800c18f
 800c16c:	0800c1ad 	.word	0x0800c1ad
 800c170:	0800c1ad 	.word	0x0800c1ad
 800c174:	0800c1ad 	.word	0x0800c1ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17c:	3308      	adds	r3, #8
 800c17e:	2101      	movs	r1, #1
 800c180:	4618      	mov	r0, r3
 800c182:	f001 fe43 	bl	800de0c <RCCEx_PLL2_Config>
 800c186:	4603      	mov	r3, r0
 800c188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c18c:	e00f      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c192:	3328      	adds	r3, #40	; 0x28
 800c194:	2101      	movs	r1, #1
 800c196:	4618      	mov	r0, r3
 800c198:	f001 feea 	bl	800df70 <RCCEx_PLL3_Config>
 800c19c:	4603      	mov	r3, r0
 800c19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1a2:	e004      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1aa:	e000      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1b6:	4b96      	ldr	r3, [pc, #600]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ba:	f023 0107 	bic.w	r1, r3, #7
 800c1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1c4:	4a92      	ldr	r2, [pc, #584]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	6553      	str	r3, [r2, #84]	; 0x54
 800c1ca:	e003      	b.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1dc:	f002 0304 	and.w	r3, r2, #4
 800c1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	d044      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1fc:	2b05      	cmp	r3, #5
 800c1fe:	d825      	bhi.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c200:	a201      	add	r2, pc, #4	; (adr r2, 800c208 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c255 	.word	0x0800c255
 800c20c:	0800c221 	.word	0x0800c221
 800c210:	0800c237 	.word	0x0800c237
 800c214:	0800c255 	.word	0x0800c255
 800c218:	0800c255 	.word	0x0800c255
 800c21c:	0800c255 	.word	0x0800c255
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c224:	3308      	adds	r3, #8
 800c226:	2101      	movs	r1, #1
 800c228:	4618      	mov	r0, r3
 800c22a:	f001 fdef 	bl	800de0c <RCCEx_PLL2_Config>
 800c22e:	4603      	mov	r3, r0
 800c230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c234:	e00f      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23a:	3328      	adds	r3, #40	; 0x28
 800c23c:	2101      	movs	r1, #1
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fe96 	bl	800df70 <RCCEx_PLL3_Config>
 800c244:	4603      	mov	r3, r0
 800c246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c24a:	e004      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c252:	e000      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c25e:	4b6c      	ldr	r3, [pc, #432]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c262:	f023 0107 	bic.w	r1, r3, #7
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c26e:	4a68      	ldr	r2, [pc, #416]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c270:	430b      	orrs	r3, r1
 800c272:	6593      	str	r3, [r2, #88]	; 0x58
 800c274:	e003      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c27a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 0320 	and.w	r3, r2, #32
 800c28a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c28e:	2300      	movs	r3, #0
 800c290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c298:	460b      	mov	r3, r1
 800c29a:	4313      	orrs	r3, r2
 800c29c:	d055      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2aa:	d033      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c2ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2b0:	d82c      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2b6:	d02f      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2bc:	d826      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c2be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2c2:	d02b      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c2c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2c8:	d820      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ce:	d012      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d4:	d81a      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d022      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2de:	d115      	bne.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 fd8f 	bl	800de0c <RCCEx_PLL2_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c2f4:	e015      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fa:	3328      	adds	r3, #40	; 0x28
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 fe36 	bl	800df70 <RCCEx_PLL3_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c30a:	e00a      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c312:	e006      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c314:	bf00      	nop
 800c316:	e004      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c318:	bf00      	nop
 800c31a:	e002      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c31c:	bf00      	nop
 800c31e:	e000      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c32a:	4b39      	ldr	r3, [pc, #228]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c33a:	4a35      	ldr	r2, [pc, #212]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6553      	str	r3, [r2, #84]	; 0x54
 800c340:	e003      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c35a:	2300      	movs	r3, #0
 800c35c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c360:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c364:	460b      	mov	r3, r1
 800c366:	4313      	orrs	r3, r2
 800c368:	d058      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c36e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c372:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c376:	d033      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c378:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c37c:	d82c      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c382:	d02f      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c388:	d826      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c38a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c38e:	d02b      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c394:	d820      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c39a:	d012      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c39c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3a0:	d81a      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d022      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3aa:	d115      	bne.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f001 fd29 	bl	800de0c <RCCEx_PLL2_Config>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3c0:	e015      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c6:	3328      	adds	r3, #40	; 0x28
 800c3c8:	2102      	movs	r1, #2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 fdd0 	bl	800df70 <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3d6:	e00a      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c3de:	e006      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c3e0:	bf00      	nop
 800c3e2:	e004      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c3e4:	bf00      	nop
 800c3e6:	e002      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10e      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3f6:	4b06      	ldr	r3, [pc, #24]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c406:	4a02      	ldr	r2, [pc, #8]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c408:	430b      	orrs	r3, r1
 800c40a:	6593      	str	r3, [r2, #88]	; 0x58
 800c40c:	e006      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c40e:	bf00      	nop
 800c410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c432:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d055      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c444:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c448:	d033      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c44a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c44e:	d82c      	bhi.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c454:	d02f      	beq.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c45a:	d826      	bhi.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c45c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c460:	d02b      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c462:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c466:	d820      	bhi.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c46c:	d012      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c46e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c472:	d81a      	bhi.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c474:	2b00      	cmp	r3, #0
 800c476:	d022      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c47c:	d115      	bne.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c482:	3308      	adds	r3, #8
 800c484:	2100      	movs	r1, #0
 800c486:	4618      	mov	r0, r3
 800c488:	f001 fcc0 	bl	800de0c <RCCEx_PLL2_Config>
 800c48c:	4603      	mov	r3, r0
 800c48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c492:	e015      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c498:	3328      	adds	r3, #40	; 0x28
 800c49a:	2102      	movs	r1, #2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 fd67 	bl	800df70 <RCCEx_PLL3_Config>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4a8:	e00a      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4b0:	e006      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4b2:	bf00      	nop
 800c4b4:	e004      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4b6:	bf00      	nop
 800c4b8:	e002      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4ba:	bf00      	nop
 800c4bc:	e000      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10b      	bne.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c4c8:	4ba1      	ldr	r3, [pc, #644]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4d8:	4a9d      	ldr	r2, [pc, #628]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	6593      	str	r3, [r2, #88]	; 0x58
 800c4de:	e003      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f002 0308 	and.w	r3, r2, #8
 800c4f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c502:	460b      	mov	r3, r1
 800c504:	4313      	orrs	r3, r2
 800c506:	d01e      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c514:	d10c      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c51a:	3328      	adds	r3, #40	; 0x28
 800c51c:	2102      	movs	r1, #2
 800c51e:	4618      	mov	r0, r3
 800c520:	f001 fd26 	bl	800df70 <RCCEx_PLL3_Config>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c530:	4b87      	ldr	r3, [pc, #540]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c534:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c540:	4a83      	ldr	r2, [pc, #524]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c542:	430b      	orrs	r3, r1
 800c544:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f002 0310 	and.w	r3, r2, #16
 800c552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c556:	2300      	movs	r3, #0
 800c558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c55c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c560:	460b      	mov	r3, r1
 800c562:	4313      	orrs	r3, r2
 800c564:	d01e      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c56a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c572:	d10c      	bne.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c578:	3328      	adds	r3, #40	; 0x28
 800c57a:	2102      	movs	r1, #2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f001 fcf7 	bl	800df70 <RCCEx_PLL3_Config>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c58e:	4b70      	ldr	r3, [pc, #448]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c59a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c59e:	4a6c      	ldr	r2, [pc, #432]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c5b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	d03e      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d0:	d022      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d6:	d81b      	bhi.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e0:	d00b      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c5e2:	e015      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fc0d 	bl	800de0c <RCCEx_PLL2_Config>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c5f8:	e00f      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5fe:	3328      	adds	r3, #40	; 0x28
 800c600:	2102      	movs	r1, #2
 800c602:	4618      	mov	r0, r3
 800c604:	f001 fcb4 	bl	800df70 <RCCEx_PLL3_Config>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c60e:	e004      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c616:	e000      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c61a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10b      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c622:	4b4b      	ldr	r3, [pc, #300]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c626:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c62e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c632:	4a47      	ldr	r2, [pc, #284]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c634:	430b      	orrs	r3, r1
 800c636:	6593      	str	r3, [r2, #88]	; 0x58
 800c638:	e003      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c63e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c64e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c650:	2300      	movs	r3, #0
 800c652:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c654:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c658:	460b      	mov	r3, r1
 800c65a:	4313      	orrs	r3, r2
 800c65c:	d03b      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c66a:	d01f      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c66c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c670:	d818      	bhi.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c676:	d003      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c67c:	d007      	beq.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c67e:	e011      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c680:	4b33      	ldr	r3, [pc, #204]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	4a32      	ldr	r2, [pc, #200]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c68a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c68c:	e00f      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c692:	3328      	adds	r3, #40	; 0x28
 800c694:	2101      	movs	r1, #1
 800c696:	4618      	mov	r0, r3
 800c698:	f001 fc6a 	bl	800df70 <RCCEx_PLL3_Config>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6a2:	e004      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c6aa:	e000      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6b6:	4b26      	ldr	r3, [pc, #152]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c6:	4a22      	ldr	r2, [pc, #136]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	6553      	str	r3, [r2, #84]	; 0x54
 800c6cc:	e003      	b.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c6e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	677b      	str	r3, [r7, #116]	; 0x74
 800c6e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	d034      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d003      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c700:	d007      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c702:	e011      	b.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c708:	4a11      	ldr	r2, [pc, #68]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c70e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c710:	e00e      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c716:	3308      	adds	r3, #8
 800c718:	2102      	movs	r1, #2
 800c71a:	4618      	mov	r0, r3
 800c71c:	f001 fb76 	bl	800de0c <RCCEx_PLL2_Config>
 800c720:	4603      	mov	r3, r0
 800c722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c726:	e003      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10d      	bne.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c746:	4a02      	ldr	r2, [pc, #8]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c748:	430b      	orrs	r3, r1
 800c74a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c74c:	e006      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c74e:	bf00      	nop
 800c750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c768:	66bb      	str	r3, [r7, #104]	; 0x68
 800c76a:	2300      	movs	r3, #0
 800c76c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c76e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d00c      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c77c:	3328      	adds	r3, #40	; 0x28
 800c77e:	2102      	movs	r1, #2
 800c780:	4618      	mov	r0, r3
 800c782:	f001 fbf5 	bl	800df70 <RCCEx_PLL3_Config>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c79e:	663b      	str	r3, [r7, #96]	; 0x60
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	667b      	str	r3, [r7, #100]	; 0x64
 800c7a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	d038      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ba:	d018      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c7bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7c0:	d811      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c6:	d014      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7cc:	d80b      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d011      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d6:	d106      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7d8:	4bc3      	ldr	r3, [pc, #780]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	4ac2      	ldr	r2, [pc, #776]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c7e4:	e008      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c7ec:	e004      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c7ee:	bf00      	nop
 800c7f0:	e002      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c7f2:	bf00      	nop
 800c7f4:	e000      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10b      	bne.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c800:	4bb9      	ldr	r3, [pc, #740]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c804:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c810:	4ab5      	ldr	r2, [pc, #724]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c812:	430b      	orrs	r3, r1
 800c814:	6553      	str	r3, [r2, #84]	; 0x54
 800c816:	e003      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c81c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c82c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c82e:	2300      	movs	r3, #0
 800c830:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c832:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c836:	460b      	mov	r3, r1
 800c838:	4313      	orrs	r3, r2
 800c83a:	d009      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c83c:	4baa      	ldr	r3, [pc, #680]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c84a:	4aa7      	ldr	r2, [pc, #668]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c84c:	430b      	orrs	r3, r1
 800c84e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c85c:	653b      	str	r3, [r7, #80]	; 0x50
 800c85e:	2300      	movs	r3, #0
 800c860:	657b      	str	r3, [r7, #84]	; 0x54
 800c862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c866:	460b      	mov	r3, r1
 800c868:	4313      	orrs	r3, r2
 800c86a:	d00a      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c86c:	4b9e      	ldr	r3, [pc, #632]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c878:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c87c:	4a9a      	ldr	r2, [pc, #616]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c87e:	430b      	orrs	r3, r1
 800c880:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c890:	2300      	movs	r3, #0
 800c892:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c894:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c898:	460b      	mov	r3, r1
 800c89a:	4313      	orrs	r3, r2
 800c89c:	d009      	beq.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c89e:	4b92      	ldr	r3, [pc, #584]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ac:	4a8e      	ldr	r2, [pc, #568]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8ae:	430b      	orrs	r3, r1
 800c8b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c8be:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c8c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	d00e      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8ce:	4b86      	ldr	r3, [pc, #536]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	4a85      	ldr	r2, [pc, #532]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8d8:	6113      	str	r3, [r2, #16]
 800c8da:	4b83      	ldr	r3, [pc, #524]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8dc:	6919      	ldr	r1, [r3, #16]
 800c8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c8e6:	4a80      	ldr	r2, [pc, #512]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8e8:	430b      	orrs	r3, r1
 800c8ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c8f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c902:	460b      	mov	r3, r1
 800c904:	4313      	orrs	r3, r2
 800c906:	d009      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c908:	4b77      	ldr	r3, [pc, #476]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c90c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c916:	4a74      	ldr	r2, [pc, #464]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c918:	430b      	orrs	r3, r1
 800c91a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c928:	633b      	str	r3, [r7, #48]	; 0x30
 800c92a:	2300      	movs	r3, #0
 800c92c:	637b      	str	r3, [r7, #52]	; 0x34
 800c92e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c932:	460b      	mov	r3, r1
 800c934:	4313      	orrs	r3, r2
 800c936:	d00a      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c938:	4b6b      	ldr	r3, [pc, #428]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c948:	4a67      	ldr	r2, [pc, #412]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c94a:	430b      	orrs	r3, r1
 800c94c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	2100      	movs	r1, #0
 800c958:	62b9      	str	r1, [r7, #40]	; 0x28
 800c95a:	f003 0301 	and.w	r3, r3, #1
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c960:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c964:	460b      	mov	r3, r1
 800c966:	4313      	orrs	r3, r2
 800c968:	d011      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c96e:	3308      	adds	r3, #8
 800c970:	2100      	movs	r1, #0
 800c972:	4618      	mov	r0, r3
 800c974:	f001 fa4a 	bl	800de0c <RCCEx_PLL2_Config>
 800c978:	4603      	mov	r3, r0
 800c97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c97e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c982:	2b00      	cmp	r3, #0
 800c984:	d003      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c98a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	2100      	movs	r1, #0
 800c998:	6239      	str	r1, [r7, #32]
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
 800c9a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	d011      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f001 fa2a 	bl	800de0c <RCCEx_PLL2_Config>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d003      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	61b9      	str	r1, [r7, #24]
 800c9da:	f003 0304 	and.w	r3, r3, #4
 800c9de:	61fb      	str	r3, [r7, #28]
 800c9e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	d011      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	2102      	movs	r1, #2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f001 fa0a 	bl	800de0c <RCCEx_PLL2_Config>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	2100      	movs	r1, #0
 800ca18:	6139      	str	r1, [r7, #16]
 800ca1a:	f003 0308 	and.w	r3, r3, #8
 800ca1e:	617b      	str	r3, [r7, #20]
 800ca20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca24:	460b      	mov	r3, r1
 800ca26:	4313      	orrs	r3, r2
 800ca28:	d011      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca2e:	3328      	adds	r3, #40	; 0x28
 800ca30:	2100      	movs	r1, #0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 fa9c 	bl	800df70 <RCCEx_PLL3_Config>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ca3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d003      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	2100      	movs	r1, #0
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	f003 0310 	and.w	r3, r3, #16
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca64:	460b      	mov	r3, r1
 800ca66:	4313      	orrs	r3, r2
 800ca68:	d011      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca6e:	3328      	adds	r3, #40	; 0x28
 800ca70:	2101      	movs	r1, #1
 800ca72:	4618      	mov	r0, r3
 800ca74:	f001 fa7c 	bl	800df70 <RCCEx_PLL3_Config>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ca7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ca8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	2100      	movs	r1, #0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	f003 0320 	and.w	r3, r3, #32
 800ca9e:	607b      	str	r3, [r7, #4]
 800caa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800caa4:	460b      	mov	r3, r1
 800caa6:	4313      	orrs	r3, r2
 800caa8:	d011      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800caaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caae:	3328      	adds	r3, #40	; 0x28
 800cab0:	2102      	movs	r1, #2
 800cab2:	4618      	mov	r0, r3
 800cab4:	f001 fa5c 	bl	800df70 <RCCEx_PLL3_Config>
 800cab8:	4603      	mov	r3, r0
 800caba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800caca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800cace:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e000      	b.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
}
 800cadc:	4618      	mov	r0, r3
 800cade:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800cae2:	46bd      	mov	sp, r7
 800cae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cae8:	58024400 	.word	0x58024400

0800caec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b090      	sub	sp, #64	; 0x40
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800caf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cafa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cafe:	430b      	orrs	r3, r1
 800cb00:	f040 8094 	bne.w	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cb04:	4b9e      	ldr	r3, [pc, #632]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb08:	f003 0307 	and.w	r3, r3, #7
 800cb0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	2b04      	cmp	r3, #4
 800cb12:	f200 8087 	bhi.w	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cb16:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb31 	.word	0x0800cb31
 800cb20:	0800cb59 	.word	0x0800cb59
 800cb24:	0800cb81 	.word	0x0800cb81
 800cb28:	0800cc1d 	.word	0x0800cc1d
 800cb2c:	0800cba9 	.word	0x0800cba9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb30:	4b93      	ldr	r3, [pc, #588]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb3c:	d108      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb42:	4618      	mov	r0, r3
 800cb44:	f001 f810 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4c:	f000 bd45 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	f000 bd41 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb58:	4b89      	ldr	r3, [pc, #548]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb64:	d108      	bne.n	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb66:	f107 0318 	add.w	r3, r7, #24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 fd54 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb74:	f000 bd31 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	f000 bd2d 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb80:	4b7f      	ldr	r3, [pc, #508]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb8c:	d108      	bne.n	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb8e:	f107 030c 	add.w	r3, r7, #12
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 fe94 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb9c:	f000 bd1d 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba4:	f000 bd19 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cba8:	4b75      	ldr	r3, [pc, #468]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbb0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbb2:	4b73      	ldr	r3, [pc, #460]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0304 	and.w	r3, r3, #4
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	d10c      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d109      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbc4:	4b6e      	ldr	r3, [pc, #440]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	08db      	lsrs	r3, r3, #3
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	4a6d      	ldr	r2, [pc, #436]	; (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd6:	e01f      	b.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbd8:	4b69      	ldr	r3, [pc, #420]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe4:	d106      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbec:	d102      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbee:	4b66      	ldr	r3, [pc, #408]	; (800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf2:	e011      	b.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbf4:	4b62      	ldr	r3, [pc, #392]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc00:	d106      	bne.n	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc08:	d102      	bne.n	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc0a:	4b60      	ldr	r3, [pc, #384]	; (800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc0e:	e003      	b.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc14:	f000 bce1 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc18:	f000 bcdf 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc1c:	4b5c      	ldr	r3, [pc, #368]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc20:	f000 bcdb 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc28:	f000 bcd7 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800cc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc30:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800cc34:	430b      	orrs	r3, r1
 800cc36:	f040 80ad 	bne.w	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800cc3a:	4b51      	ldr	r3, [pc, #324]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800cc42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc4a:	d056      	beq.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800cc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc52:	f200 8090 	bhi.w	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	2bc0      	cmp	r3, #192	; 0xc0
 800cc5a:	f000 8088 	beq.w	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	2bc0      	cmp	r3, #192	; 0xc0
 800cc62:	f200 8088 	bhi.w	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	2b80      	cmp	r3, #128	; 0x80
 800cc6a:	d032      	beq.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	2b80      	cmp	r3, #128	; 0x80
 800cc70:	f200 8081 	bhi.w	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	2b40      	cmp	r3, #64	; 0x40
 800cc7e:	d014      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800cc80:	e079      	b.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc82:	4b3f      	ldr	r3, [pc, #252]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc8e:	d108      	bne.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 ff67 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc9e:	f000 bc9c 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca6:	f000 bc98 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccaa:	4b35      	ldr	r3, [pc, #212]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccb6:	d108      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb8:	f107 0318 	add.w	r3, r7, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 fcab 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc6:	f000 bc88 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccce:	f000 bc84 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccd2:	4b2b      	ldr	r3, [pc, #172]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccde:	d108      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cce0:	f107 030c 	add.w	r3, r7, #12
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fdeb 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccee:	f000 bc74 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf6:	f000 bc70 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccfa:	4b21      	ldr	r3, [pc, #132]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ccfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd04:	4b1e      	ldr	r3, [pc, #120]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d10c      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d109      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd16:	4b1a      	ldr	r3, [pc, #104]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	08db      	lsrs	r3, r3, #3
 800cd1c:	f003 0303 	and.w	r3, r3, #3
 800cd20:	4a18      	ldr	r2, [pc, #96]	; (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd22:	fa22 f303 	lsr.w	r3, r2, r3
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd28:	e01f      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd2a:	4b15      	ldr	r3, [pc, #84]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd36:	d106      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800cd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd3e:	d102      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd40:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd44:	e011      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd46:	4b0e      	ldr	r3, [pc, #56]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd52:	d106      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800cd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5a:	d102      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd60:	e003      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd66:	f000 bc38 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd6a:	f000 bc36 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd6e:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd72:	f000 bc32 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7a:	f000 bc2e 	b.w	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd7e:	bf00      	nop
 800cd80:	58024400 	.word	0x58024400
 800cd84:	03d09000 	.word	0x03d09000
 800cd88:	003d0900 	.word	0x003d0900
 800cd8c:	017d7840 	.word	0x017d7840
 800cd90:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd98:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cd9c:	430b      	orrs	r3, r1
 800cd9e:	f040 809c 	bne.w	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cda2:	4b9e      	ldr	r3, [pc, #632]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cdaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdb2:	d054      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdba:	f200 808b 	bhi.w	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdc4:	f000 8083 	beq.w	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdce:	f200 8081 	bhi.w	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdd8:	d02f      	beq.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cde0:	d878      	bhi.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdee:	d012      	beq.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cdf0:	e070      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdf2:	4b8a      	ldr	r3, [pc, #552]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdfe:	d107      	bne.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 feaf 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce0e:	e3e4      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce14:	e3e1      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce16:	4b81      	ldr	r3, [pc, #516]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce22:	d107      	bne.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce24:	f107 0318 	add.w	r3, r7, #24
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fbf5 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce32:	e3d2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce38:	e3cf      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce3a:	4b78      	ldr	r3, [pc, #480]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce46:	d107      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce48:	f107 030c 	add.w	r3, r7, #12
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fd37 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce56:	e3c0      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce5c:	e3bd      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce5e:	4b6f      	ldr	r3, [pc, #444]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce68:	4b6c      	ldr	r3, [pc, #432]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b04      	cmp	r3, #4
 800ce72:	d10c      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d109      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce7a:	4b68      	ldr	r3, [pc, #416]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	08db      	lsrs	r3, r3, #3
 800ce80:	f003 0303 	and.w	r3, r3, #3
 800ce84:	4a66      	ldr	r2, [pc, #408]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce86:	fa22 f303 	lsr.w	r3, r2, r3
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce8c:	e01e      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce8e:	4b63      	ldr	r3, [pc, #396]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce9a:	d106      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ce9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cea2:	d102      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cea4:	4b5f      	ldr	r3, [pc, #380]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cea8:	e010      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ceaa:	4b5c      	ldr	r3, [pc, #368]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceb6:	d106      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ceb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cebe:	d102      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cec0:	4b59      	ldr	r3, [pc, #356]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec4:	e002      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ceca:	e386      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cecc:	e385      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cece:	4b57      	ldr	r3, [pc, #348]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced2:	e382      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced8:	e37f      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ceda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cede:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cee2:	430b      	orrs	r3, r1
 800cee4:	f040 80a7 	bne.w	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cee8:	4b4c      	ldr	r3, [pc, #304]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ceea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cef0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cef8:	d055      	beq.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf00:	f200 8096 	bhi.w	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf0a:	f000 8084 	beq.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf14:	f200 808c 	bhi.w	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf1e:	d030      	beq.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf26:	f200 8083 	bhi.w	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf36:	d012      	beq.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800cf38:	e07a      	b.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf3a:	4b38      	ldr	r3, [pc, #224]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf46:	d107      	bne.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fe0b 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf56:	e340      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5c:	e33d      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf5e:	4b2f      	ldr	r3, [pc, #188]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf6a:	d107      	bne.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf6c:	f107 0318 	add.w	r3, r7, #24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fb51 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf7a:	e32e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf80:	e32b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf82:	4b26      	ldr	r3, [pc, #152]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf8e:	d107      	bne.n	800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf90:	f107 030c 	add.w	r3, r7, #12
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 fc93 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf9e:	e31c      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa4:	e319      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	d10c      	bne.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d109      	bne.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfc2:	4b16      	ldr	r3, [pc, #88]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	08db      	lsrs	r3, r3, #3
 800cfc8:	f003 0303 	and.w	r3, r3, #3
 800cfcc:	4a14      	ldr	r2, [pc, #80]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cfce:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfd4:	e01e      	b.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfd6:	4b11      	ldr	r3, [pc, #68]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe2:	d106      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfea:	d102      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cfee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff0:	e010      	b.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cff2:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cffe:	d106      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d006:	d102      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d008:	4b07      	ldr	r3, [pc, #28]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d00c:	e002      	b.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d012:	e2e2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d014:	e2e1      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01a:	e2de      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d01c:	58024400 	.word	0x58024400
 800d020:	03d09000 	.word	0x03d09000
 800d024:	003d0900 	.word	0x003d0900
 800d028:	017d7840 	.word	0x017d7840
 800d02c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d034:	e2d1      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d03a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800d03e:	430b      	orrs	r3, r1
 800d040:	f040 809c 	bne.w	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d044:	4b93      	ldr	r3, [pc, #588]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d04c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d054:	d054      	beq.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d05c:	f200 808b 	bhi.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d066:	f000 8083 	beq.w	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d070:	f200 8081 	bhi.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d07a:	d02f      	beq.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d082:	d878      	bhi.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d090:	d012      	beq.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800d092:	e070      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d094:	4b7f      	ldr	r3, [pc, #508]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d09c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0a0:	d107      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 fd5e 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0b0:	e293      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b6:	e290      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0b8:	4b76      	ldr	r3, [pc, #472]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0c4:	d107      	bne.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c6:	f107 0318 	add.w	r3, r7, #24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 faa4 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d4:	e281      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0da:	e27e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0dc:	4b6d      	ldr	r3, [pc, #436]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0e8:	d107      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ea:	f107 030c 	add.w	r3, r7, #12
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fbe6 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0f8:	e26f      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0fe:	e26c      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d100:	4b64      	ldr	r3, [pc, #400]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d108:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d10a:	4b62      	ldr	r3, [pc, #392]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 0304 	and.w	r3, r3, #4
 800d112:	2b04      	cmp	r3, #4
 800d114:	d10c      	bne.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d109      	bne.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d11c:	4b5d      	ldr	r3, [pc, #372]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	08db      	lsrs	r3, r3, #3
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	4a5c      	ldr	r2, [pc, #368]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800d128:	fa22 f303 	lsr.w	r3, r2, r3
 800d12c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d12e:	e01e      	b.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d130:	4b58      	ldr	r3, [pc, #352]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d13c:	d106      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d144:	d102      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d146:	4b55      	ldr	r3, [pc, #340]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d14a:	e010      	b.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d14c:	4b51      	ldr	r3, [pc, #324]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d158:	d106      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800d15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d160:	d102      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d162:	4b4f      	ldr	r3, [pc, #316]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d166:	e002      	b.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d16c:	e235      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d16e:	e234      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d170:	4b4c      	ldr	r3, [pc, #304]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d174:	e231      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d17a:	e22e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d180:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d184:	430b      	orrs	r3, r1
 800d186:	f040 808f 	bne.w	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d18a:	4b42      	ldr	r3, [pc, #264]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d18e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d192:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d19a:	d06b      	beq.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1a2:	d874      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d1aa:	d056      	beq.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d1b2:	d86c      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d1ba:	d03b      	beq.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d1c2:	d864      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1ca:	d021      	beq.n	800d210 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1d2:	d85c      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d004      	beq.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e0:	d004      	beq.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800d1e2:	e054      	b.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d1e4:	f7fe fa4c 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 800d1e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1ea:	e1f6      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1ec:	4b29      	ldr	r3, [pc, #164]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1f8:	d107      	bne.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1fa:	f107 0318 	add.w	r3, r7, #24
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 fa0a 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d208:	e1e7      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d20e:	e1e4      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d210:	4b20      	ldr	r3, [pc, #128]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d21c:	d107      	bne.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d21e:	f107 030c 	add.w	r3, r7, #12
 800d222:	4618      	mov	r0, r3
 800d224:	f000 fb4c 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d22c:	e1d5      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d232:	e1d2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d234:	4b17      	ldr	r3, [pc, #92]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d109      	bne.n	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d240:	4b14      	ldr	r3, [pc, #80]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	08db      	lsrs	r3, r3, #3
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	4a13      	ldr	r2, [pc, #76]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800d24c:	fa22 f303 	lsr.w	r3, r2, r3
 800d250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d252:	e1c2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d258:	e1bf      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d25a:	4b0e      	ldr	r3, [pc, #56]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d266:	d102      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800d268:	4b0c      	ldr	r3, [pc, #48]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d26c:	e1b5      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d272:	e1b2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d274:	4b07      	ldr	r3, [pc, #28]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d280:	d102      	bne.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800d282:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d286:	e1a8      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28c:	e1a5      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d292:	e1a2      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d294:	58024400 	.word	0x58024400
 800d298:	03d09000 	.word	0x03d09000
 800d29c:	003d0900 	.word	0x003d0900
 800d2a0:	017d7840 	.word	0x017d7840
 800d2a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	d173      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d2b4:	4b9c      	ldr	r3, [pc, #624]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d2bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2c4:	d02f      	beq.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2cc:	d863      	bhi.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d004      	beq.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2da:	d012      	beq.n	800d302 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800d2dc:	e05b      	b.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2de:	4b92      	ldr	r3, [pc, #584]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2ea:	d107      	bne.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2ec:	f107 0318 	add.w	r3, r7, #24
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 f991 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2fa:	e16e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d300:	e16b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d302:	4b89      	ldr	r3, [pc, #548]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d30e:	d107      	bne.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d310:	f107 030c 	add.w	r3, r7, #12
 800d314:	4618      	mov	r0, r3
 800d316:	f000 fad3 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d31e:	e15c      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d324:	e159      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d326:	4b80      	ldr	r3, [pc, #512]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d32e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d330:	4b7d      	ldr	r3, [pc, #500]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d10c      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d109      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d342:	4b79      	ldr	r3, [pc, #484]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	08db      	lsrs	r3, r3, #3
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	4a77      	ldr	r2, [pc, #476]	; (800d52c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d34e:	fa22 f303 	lsr.w	r3, r2, r3
 800d352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d354:	e01e      	b.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d356:	4b74      	ldr	r3, [pc, #464]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d362:	d106      	bne.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800d364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d36a:	d102      	bne.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d36c:	4b70      	ldr	r3, [pc, #448]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d370:	e010      	b.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d372:	4b6d      	ldr	r3, [pc, #436]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d37e:	d106      	bne.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800d380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d386:	d102      	bne.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d388:	4b6a      	ldr	r3, [pc, #424]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d38c:	e002      	b.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d392:	e122      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d394:	e121      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d39a:	e11e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	d133      	bne.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d3a8:	4b5f      	ldr	r3, [pc, #380]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d004      	beq.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3be:	d012      	beq.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800d3c0:	e023      	b.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3c2:	4b59      	ldr	r3, [pc, #356]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ce:	d107      	bne.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fbc7 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3de:	e0fc      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3e4:	e0f9      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3e6:	4b50      	ldr	r3, [pc, #320]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3f2:	d107      	bne.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3f4:	f107 0318 	add.w	r3, r7, #24
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f90d 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d402:	e0ea      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d408:	e0e7      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d40e:	e0e4      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d414:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d418:	430b      	orrs	r3, r1
 800d41a:	f040 808d 	bne.w	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d41e:	4b42      	ldr	r3, [pc, #264]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d422:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d426:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d42e:	d06b      	beq.n	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d436:	d874      	bhi.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d43e:	d056      	beq.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d446:	d86c      	bhi.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d44e:	d03b      	beq.n	800d4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d456:	d864      	bhi.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d45e:	d021      	beq.n	800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d466:	d85c      	bhi.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d004      	beq.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d474:	d004      	beq.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d476:	e054      	b.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d478:	f000 f8b8 	bl	800d5ec <HAL_RCCEx_GetD3PCLK1Freq>
 800d47c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d47e:	e0ac      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d480:	4b29      	ldr	r3, [pc, #164]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d48c:	d107      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d48e:	f107 0318 	add.w	r3, r7, #24
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f8c0 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d49c:	e09d      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4a2:	e09a      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4a4:	4b20      	ldr	r3, [pc, #128]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4b0:	d107      	bne.n	800d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4b2:	f107 030c 	add.w	r3, r7, #12
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 fa02 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4c0:	e08b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4c6:	e088      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4c8:	4b17      	ldr	r3, [pc, #92]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0304 	and.w	r3, r3, #4
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d109      	bne.n	800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4d4:	4b14      	ldr	r3, [pc, #80]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	08db      	lsrs	r3, r3, #3
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	4a13      	ldr	r2, [pc, #76]	; (800d52c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4e6:	e078      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4ec:	e075      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d4ee:	4b0e      	ldr	r3, [pc, #56]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4fa:	d102      	bne.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d4fc:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d500:	e06b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d506:	e068      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d508:	4b07      	ldr	r3, [pc, #28]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d514:	d102      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d516:	4b07      	ldr	r3, [pc, #28]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d51a:	e05e      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d520:	e05b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d526:	e058      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d528:	58024400 	.word	0x58024400
 800d52c:	03d09000 	.word	0x03d09000
 800d530:	003d0900 	.word	0x003d0900
 800d534:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d53c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d540:	430b      	orrs	r3, r1
 800d542:	d148      	bne.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d544:	4b27      	ldr	r3, [pc, #156]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d54c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d554:	d02a      	beq.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d55c:	d838      	bhi.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	2b00      	cmp	r3, #0
 800d562:	d004      	beq.n	800d56e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d56a:	d00d      	beq.n	800d588 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d56c:	e030      	b.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d56e:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d57a:	d102      	bne.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d57c:	4b1a      	ldr	r3, [pc, #104]	; (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d580:	e02b      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d586:	e028      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d588:	4b16      	ldr	r3, [pc, #88]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d594:	d107      	bne.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 fae4 	bl	800db68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5a4:	e019      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5aa:	e016      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5b8:	d107      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ba:	f107 0318 	add.w	r3, r7, #24
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 f82a 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5c8:	e007      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ce:	e004      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5d4:	e001      	b.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3740      	adds	r7, #64	; 0x40
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	017d7840 	.word	0x017d7840

0800d5ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d5f0:	f7fe f816 	bl	800b620 <HAL_RCC_GetHCLKFreq>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	4b06      	ldr	r3, [pc, #24]	; (800d610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	091b      	lsrs	r3, r3, #4
 800d5fc:	f003 0307 	and.w	r3, r3, #7
 800d600:	4904      	ldr	r1, [pc, #16]	; (800d614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d602:	5ccb      	ldrb	r3, [r1, r3]
 800d604:	f003 031f 	and.w	r3, r3, #31
 800d608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	58024400 	.word	0x58024400
 800d614:	080141a4 	.word	0x080141a4

0800d618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d618:	b480      	push	{r7}
 800d61a:	b089      	sub	sp, #36	; 0x24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d620:	4ba1      	ldr	r3, [pc, #644]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d624:	f003 0303 	and.w	r3, r3, #3
 800d628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d62a:	4b9f      	ldr	r3, [pc, #636]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	0b1b      	lsrs	r3, r3, #12
 800d630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d634:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d636:	4b9c      	ldr	r3, [pc, #624]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	091b      	lsrs	r3, r3, #4
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d642:	4b99      	ldr	r3, [pc, #612]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d646:	08db      	lsrs	r3, r3, #3
 800d648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d64c:	693a      	ldr	r2, [r7, #16]
 800d64e:	fb02 f303 	mul.w	r3, r2, r3
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 8111 	beq.w	800d888 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	f000 8083 	beq.w	800d774 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	2b02      	cmp	r3, #2
 800d672:	f200 80a1 	bhi.w	800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d056      	beq.n	800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d682:	e099      	b.n	800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d684:	4b88      	ldr	r3, [pc, #544]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0320 	and.w	r3, r3, #32
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d02d      	beq.n	800d6ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d690:	4b85      	ldr	r3, [pc, #532]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	08db      	lsrs	r3, r3, #3
 800d696:	f003 0303 	and.w	r3, r3, #3
 800d69a:	4a84      	ldr	r2, [pc, #528]	; (800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d69c:	fa22 f303 	lsr.w	r3, r2, r3
 800d6a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	ee07 3a90 	vmov	s15, r3
 800d6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	ee07 3a90 	vmov	s15, r3
 800d6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ba:	4b7b      	ldr	r3, [pc, #492]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c2:	ee07 3a90 	vmov	s15, r3
 800d6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6ea:	e087      	b.n	800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	ee07 3a90 	vmov	s15, r3
 800d6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fe:	4b6a      	ldr	r3, [pc, #424]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d712:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d72e:	e065      	b.n	800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	ee07 3a90 	vmov	s15, r3
 800d736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d742:	4b59      	ldr	r3, [pc, #356]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74a:	ee07 3a90 	vmov	s15, r3
 800d74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d752:	ed97 6a03 	vldr	s12, [r7, #12]
 800d756:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d76e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d772:	e043      	b.n	800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d786:	4b48      	ldr	r3, [pc, #288]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d78e:	ee07 3a90 	vmov	s15, r3
 800d792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d796:	ed97 6a03 	vldr	s12, [r7, #12]
 800d79a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7b6:	e021      	b.n	800d7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ca:	4b37      	ldr	r3, [pc, #220]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d7fc:	4b2a      	ldr	r3, [pc, #168]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d800:	0a5b      	lsrs	r3, r3, #9
 800d802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d806:	ee07 3a90 	vmov	s15, r3
 800d80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d812:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d816:	edd7 6a07 	vldr	s13, [r7, #28]
 800d81a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d81e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d822:	ee17 2a90 	vmov	r2, s15
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d82a:	4b1f      	ldr	r3, [pc, #124]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82e:	0c1b      	lsrs	r3, r3, #16
 800d830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d834:	ee07 3a90 	vmov	s15, r3
 800d838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d83c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d840:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d844:	edd7 6a07 	vldr	s13, [r7, #28]
 800d848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d84c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d850:	ee17 2a90 	vmov	r2, s15
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d858:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85c:	0e1b      	lsrs	r3, r3, #24
 800d85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d862:	ee07 3a90 	vmov	s15, r3
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d86e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d872:	edd7 6a07 	vldr	s13, [r7, #28]
 800d876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d87e:	ee17 2a90 	vmov	r2, s15
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d886:	e008      	b.n	800d89a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	609a      	str	r2, [r3, #8]
}
 800d89a:	bf00      	nop
 800d89c:	3724      	adds	r7, #36	; 0x24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	58024400 	.word	0x58024400
 800d8ac:	03d09000 	.word	0x03d09000
 800d8b0:	46000000 	.word	0x46000000
 800d8b4:	4c742400 	.word	0x4c742400
 800d8b8:	4a742400 	.word	0x4a742400
 800d8bc:	4bbebc20 	.word	0x4bbebc20

0800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b089      	sub	sp, #36	; 0x24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8c8:	4ba1      	ldr	r3, [pc, #644]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8cc:	f003 0303 	and.w	r3, r3, #3
 800d8d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d8d2:	4b9f      	ldr	r3, [pc, #636]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d6:	0d1b      	lsrs	r3, r3, #20
 800d8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d8de:	4b9c      	ldr	r3, [pc, #624]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e2:	0a1b      	lsrs	r3, r3, #8
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d8ea:	4b99      	ldr	r3, [pc, #612]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ee:	08db      	lsrs	r3, r3, #3
 800d8f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	fb02 f303 	mul.w	r3, r2, r3
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 8111 	beq.w	800db30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	2b02      	cmp	r3, #2
 800d912:	f000 8083 	beq.w	800da1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	2b02      	cmp	r3, #2
 800d91a:	f200 80a1 	bhi.w	800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d056      	beq.n	800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d92a:	e099      	b.n	800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d92c:	4b88      	ldr	r3, [pc, #544]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f003 0320 	and.w	r3, r3, #32
 800d934:	2b00      	cmp	r3, #0
 800d936:	d02d      	beq.n	800d994 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d938:	4b85      	ldr	r3, [pc, #532]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	08db      	lsrs	r3, r3, #3
 800d93e:	f003 0303 	and.w	r3, r3, #3
 800d942:	4a84      	ldr	r2, [pc, #528]	; (800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d944:	fa22 f303 	lsr.w	r3, r2, r3
 800d948:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	ee07 3a90 	vmov	s15, r3
 800d950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	ee07 3a90 	vmov	s15, r3
 800d95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d962:	4b7b      	ldr	r3, [pc, #492]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d96a:	ee07 3a90 	vmov	s15, r3
 800d96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d972:	ed97 6a03 	vldr	s12, [r7, #12]
 800d976:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d98e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d992:	e087      	b.n	800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	ee07 3a90 	vmov	s15, r3
 800d99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a6:	4b6a      	ldr	r3, [pc, #424]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ae:	ee07 3a90 	vmov	s15, r3
 800d9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9d6:	e065      	b.n	800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	ee07 3a90 	vmov	s15, r3
 800d9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ea:	4b59      	ldr	r3, [pc, #356]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f2:	ee07 3a90 	vmov	s15, r3
 800d9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da1a:	e043      	b.n	800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	ee07 3a90 	vmov	s15, r3
 800da22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800da2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da2e:	4b48      	ldr	r3, [pc, #288]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da36:	ee07 3a90 	vmov	s15, r3
 800da3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da5e:	e021      	b.n	800daa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	ee07 3a90 	vmov	s15, r3
 800da66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da72:	4b37      	ldr	r3, [pc, #220]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da7a:	ee07 3a90 	vmov	s15, r3
 800da7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da82:	ed97 6a03 	vldr	s12, [r7, #12]
 800da86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800daa4:	4b2a      	ldr	r3, [pc, #168]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa8:	0a5b      	lsrs	r3, r3, #9
 800daaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800daba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dabe:	edd7 6a07 	vldr	s13, [r7, #28]
 800dac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daca:	ee17 2a90 	vmov	r2, s15
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dad2:	4b1f      	ldr	r3, [pc, #124]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad6:	0c1b      	lsrs	r3, r3, #16
 800dad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daec:	edd7 6a07 	vldr	s13, [r7, #28]
 800daf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daf8:	ee17 2a90 	vmov	r2, s15
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800db00:	4b13      	ldr	r3, [pc, #76]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db04:	0e1b      	lsrs	r3, r3, #24
 800db06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db0a:	ee07 3a90 	vmov	s15, r3
 800db0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db26:	ee17 2a90 	vmov	r2, s15
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800db2e:	e008      	b.n	800db42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	609a      	str	r2, [r3, #8]
}
 800db42:	bf00      	nop
 800db44:	3724      	adds	r7, #36	; 0x24
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	58024400 	.word	0x58024400
 800db54:	03d09000 	.word	0x03d09000
 800db58:	46000000 	.word	0x46000000
 800db5c:	4c742400 	.word	0x4c742400
 800db60:	4a742400 	.word	0x4a742400
 800db64:	4bbebc20 	.word	0x4bbebc20

0800db68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800db68:	b480      	push	{r7}
 800db6a:	b089      	sub	sp, #36	; 0x24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db70:	4ba0      	ldr	r3, [pc, #640]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db74:	f003 0303 	and.w	r3, r3, #3
 800db78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800db7a:	4b9e      	ldr	r3, [pc, #632]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7e:	091b      	lsrs	r3, r3, #4
 800db80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800db86:	4b9b      	ldr	r3, [pc, #620]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800db90:	4b98      	ldr	r3, [pc, #608]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db94:	08db      	lsrs	r3, r3, #3
 800db96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	fb02 f303 	mul.w	r3, r2, r3
 800dba0:	ee07 3a90 	vmov	s15, r3
 800dba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 8111 	beq.w	800ddd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	f000 8083 	beq.w	800dcc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	f200 80a1 	bhi.w	800dd06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d056      	beq.n	800dc7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dbd0:	e099      	b.n	800dd06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbd2:	4b88      	ldr	r3, [pc, #544]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0320 	and.w	r3, r3, #32
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d02d      	beq.n	800dc3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbde:	4b85      	ldr	r3, [pc, #532]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	08db      	lsrs	r3, r3, #3
 800dbe4:	f003 0303 	and.w	r3, r3, #3
 800dbe8:	4a83      	ldr	r2, [pc, #524]	; (800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dbea:	fa22 f303 	lsr.w	r3, r2, r3
 800dbee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	ee07 3a90 	vmov	s15, r3
 800dbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	ee07 3a90 	vmov	s15, r3
 800dc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc08:	4b7a      	ldr	r3, [pc, #488]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc10:	ee07 3a90 	vmov	s15, r3
 800dc14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc18:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dc38:	e087      	b.n	800dd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	ee07 3a90 	vmov	s15, r3
 800dc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800de00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc4c:	4b69      	ldr	r3, [pc, #420]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc54:	ee07 3a90 	vmov	s15, r3
 800dc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc60:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc7c:	e065      	b.n	800dd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	ee07 3a90 	vmov	s15, r3
 800dc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800de04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dc8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc90:	4b58      	ldr	r3, [pc, #352]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc98:	ee07 3a90 	vmov	s15, r3
 800dc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dca0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dca4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcc0:	e043      	b.n	800dd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	ee07 3a90 	vmov	s15, r3
 800dcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dccc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800de08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dcd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcd4:	4b47      	ldr	r3, [pc, #284]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcdc:	ee07 3a90 	vmov	s15, r3
 800dce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dce4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dce8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dcec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd04:	e021      	b.n	800dd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	ee07 3a90 	vmov	s15, r3
 800dd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd10:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800de00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd18:	4b36      	ldr	r3, [pc, #216]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd20:	ee07 3a90 	vmov	s15, r3
 800dd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dd4a:	4b2a      	ldr	r3, [pc, #168]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4e:	0a5b      	lsrs	r3, r3, #9
 800dd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd54:	ee07 3a90 	vmov	s15, r3
 800dd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd64:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd70:	ee17 2a90 	vmov	r2, s15
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dd78:	4b1e      	ldr	r3, [pc, #120]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7c:	0c1b      	lsrs	r3, r3, #16
 800dd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd82:	ee07 3a90 	vmov	s15, r3
 800dd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd92:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd9e:	ee17 2a90 	vmov	r2, s15
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dda6:	4b13      	ldr	r3, [pc, #76]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddaa:	0e1b      	lsrs	r3, r3, #24
 800ddac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddb0:	ee07 3a90 	vmov	s15, r3
 800ddb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddcc:	ee17 2a90 	vmov	r2, s15
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ddd4:	e008      	b.n	800dde8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	609a      	str	r2, [r3, #8]
}
 800dde8:	bf00      	nop
 800ddea:	3724      	adds	r7, #36	; 0x24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	58024400 	.word	0x58024400
 800ddf8:	03d09000 	.word	0x03d09000
 800ddfc:	46000000 	.word	0x46000000
 800de00:	4c742400 	.word	0x4c742400
 800de04:	4a742400 	.word	0x4a742400
 800de08:	4bbebc20 	.word	0x4bbebc20

0800de0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de1a:	4b53      	ldr	r3, [pc, #332]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1e:	f003 0303 	and.w	r3, r3, #3
 800de22:	2b03      	cmp	r3, #3
 800de24:	d101      	bne.n	800de2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e099      	b.n	800df5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de2a:	4b4f      	ldr	r3, [pc, #316]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a4e      	ldr	r2, [pc, #312]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de36:	f7f7 ff15 	bl	8005c64 <HAL_GetTick>
 800de3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de3c:	e008      	b.n	800de50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de3e:	f7f7 ff11 	bl	8005c64 <HAL_GetTick>
 800de42:	4602      	mov	r2, r0
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d901      	bls.n	800de50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de4c:	2303      	movs	r3, #3
 800de4e:	e086      	b.n	800df5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de50:	4b45      	ldr	r3, [pc, #276]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1f0      	bne.n	800de3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de5c:	4b42      	ldr	r3, [pc, #264]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	031b      	lsls	r3, r3, #12
 800de6a:	493f      	ldr	r1, [pc, #252]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800de6c:	4313      	orrs	r3, r2
 800de6e:	628b      	str	r3, [r1, #40]	; 0x28
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	3b01      	subs	r3, #1
 800de76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	3b01      	subs	r3, #1
 800de80:	025b      	lsls	r3, r3, #9
 800de82:	b29b      	uxth	r3, r3
 800de84:	431a      	orrs	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	041b      	lsls	r3, r3, #16
 800de8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de92:	431a      	orrs	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	3b01      	subs	r3, #1
 800de9a:	061b      	lsls	r3, r3, #24
 800de9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dea0:	4931      	ldr	r1, [pc, #196]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dea6:	4b30      	ldr	r3, [pc, #192]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800dea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	492d      	ldr	r1, [pc, #180]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800deb4:	4313      	orrs	r3, r2
 800deb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800deb8:	4b2b      	ldr	r3, [pc, #172]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debc:	f023 0220 	bic.w	r2, r3, #32
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	4928      	ldr	r1, [pc, #160]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800deca:	4b27      	ldr	r3, [pc, #156]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	4a26      	ldr	r2, [pc, #152]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800ded0:	f023 0310 	bic.w	r3, r3, #16
 800ded4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ded6:	4b24      	ldr	r3, [pc, #144]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800ded8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800deda:	4b24      	ldr	r3, [pc, #144]	; (800df6c <RCCEx_PLL2_Config+0x160>)
 800dedc:	4013      	ands	r3, r2
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	69d2      	ldr	r2, [r2, #28]
 800dee2:	00d2      	lsls	r2, r2, #3
 800dee4:	4920      	ldr	r1, [pc, #128]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800deea:	4b1f      	ldr	r3, [pc, #124]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800deec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deee:	4a1e      	ldr	r2, [pc, #120]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800def0:	f043 0310 	orr.w	r3, r3, #16
 800def4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800defc:	4b1a      	ldr	r3, [pc, #104]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800defe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df00:	4a19      	ldr	r2, [pc, #100]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df08:	e00f      	b.n	800df2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d106      	bne.n	800df1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df10:	4b15      	ldr	r3, [pc, #84]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	4a14      	ldr	r2, [pc, #80]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df1c:	e005      	b.n	800df2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df1e:	4b12      	ldr	r3, [pc, #72]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df22:	4a11      	ldr	r2, [pc, #68]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df2a:	4b0f      	ldr	r3, [pc, #60]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a0e      	ldr	r2, [pc, #56]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df36:	f7f7 fe95 	bl	8005c64 <HAL_GetTick>
 800df3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df3c:	e008      	b.n	800df50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df3e:	f7f7 fe91 	bl	8005c64 <HAL_GetTick>
 800df42:	4602      	mov	r2, r0
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d901      	bls.n	800df50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df4c:	2303      	movs	r3, #3
 800df4e:	e006      	b.n	800df5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <RCCEx_PLL2_Config+0x15c>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d0f0      	beq.n	800df3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	58024400 	.word	0x58024400
 800df6c:	ffff0007 	.word	0xffff0007

0800df70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df7e:	4b53      	ldr	r3, [pc, #332]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df82:	f003 0303 	and.w	r3, r3, #3
 800df86:	2b03      	cmp	r3, #3
 800df88:	d101      	bne.n	800df8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e099      	b.n	800e0c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800df8e:	4b4f      	ldr	r3, [pc, #316]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a4e      	ldr	r2, [pc, #312]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800df94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df9a:	f7f7 fe63 	bl	8005c64 <HAL_GetTick>
 800df9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfa0:	e008      	b.n	800dfb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dfa2:	f7f7 fe5f 	bl	8005c64 <HAL_GetTick>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d901      	bls.n	800dfb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e086      	b.n	800e0c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfb4:	4b45      	ldr	r3, [pc, #276]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1f0      	bne.n	800dfa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dfc0:	4b42      	ldr	r3, [pc, #264]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	051b      	lsls	r3, r3, #20
 800dfce:	493f      	ldr	r1, [pc, #252]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	628b      	str	r3, [r1, #40]	; 0x28
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	025b      	lsls	r3, r3, #9
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	041b      	lsls	r3, r3, #16
 800dff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dff6:	431a      	orrs	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	061b      	lsls	r3, r3, #24
 800e000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e004:	4931      	ldr	r1, [pc, #196]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e006:	4313      	orrs	r3, r2
 800e008:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e00a:	4b30      	ldr	r3, [pc, #192]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	492d      	ldr	r1, [pc, #180]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e018:	4313      	orrs	r3, r2
 800e01a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e01c:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	4928      	ldr	r1, [pc, #160]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e02a:	4313      	orrs	r3, r2
 800e02c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e02e:	4b27      	ldr	r3, [pc, #156]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e032:	4a26      	ldr	r2, [pc, #152]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e03a:	4b24      	ldr	r3, [pc, #144]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e03e:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <RCCEx_PLL3_Config+0x160>)
 800e040:	4013      	ands	r3, r2
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	69d2      	ldr	r2, [r2, #28]
 800e046:	00d2      	lsls	r2, r2, #3
 800e048:	4920      	ldr	r1, [pc, #128]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e04e:	4b1f      	ldr	r3, [pc, #124]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e052:	4a1e      	ldr	r2, [pc, #120]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d106      	bne.n	800e06e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e060:	4b1a      	ldr	r3, [pc, #104]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e064:	4a19      	ldr	r2, [pc, #100]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e066:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e06a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e06c:	e00f      	b.n	800e08e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d106      	bne.n	800e082 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e074:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e078:	4a14      	ldr	r2, [pc, #80]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e07a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e080:	e005      	b.n	800e08e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e082:	4b12      	ldr	r3, [pc, #72]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	4a11      	ldr	r2, [pc, #68]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e08c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e08e:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a0e      	ldr	r2, [pc, #56]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e09a:	f7f7 fde3 	bl	8005c64 <HAL_GetTick>
 800e09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0a0:	e008      	b.n	800e0b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e0a2:	f7f7 fddf 	bl	8005c64 <HAL_GetTick>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d901      	bls.n	800e0b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e006      	b.n	800e0c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0b4:	4b05      	ldr	r3, [pc, #20]	; (800e0cc <RCCEx_PLL3_Config+0x15c>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d0f0      	beq.n	800e0a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	58024400 	.word	0x58024400
 800e0d0:	ffff0007 	.word	0xffff0007

0800e0d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08a      	sub	sp, #40	; 0x28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e075      	b.n	800e1d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d105      	bne.n	800e0fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7f7 f8cb 	bl	8005294 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2204      	movs	r2, #4
 800e102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f868 	bl	800e1dc <HAL_SD_InitCard>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e05d      	b.n	800e1d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e116:	f107 0308 	add.w	r3, r7, #8
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fa9d 	bl	800e65c <HAL_SD_GetCardStatus>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	e052      	b.n	800e1d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e12c:	7e3b      	ldrb	r3, [r7, #24]
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e132:	7e7b      	ldrb	r3, [r7, #25]
 800e134:	b2db      	uxtb	r3, r3
 800e136:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d10a      	bne.n	800e156 <HAL_SD_Init+0x82>
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <HAL_SD_Init+0x78>
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d004      	beq.n	800e156 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e152:	659a      	str	r2, [r3, #88]	; 0x58
 800e154:	e00b      	b.n	800e16e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d104      	bne.n	800e168 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e164:	659a      	str	r2, [r3, #88]	; 0x58
 800e166:	e002      	b.n	800e16e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fb2f 	bl	800e7d8 <HAL_SD_ConfigWideBusOperation>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e026      	b.n	800e1d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e184:	f7f7 fd6e 	bl	8005c64 <HAL_GetTick>
 800e188:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e18a:	e011      	b.n	800e1b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e18c:	f7f7 fd6a 	bl	8005c64 <HAL_GetTick>
 800e190:	4602      	mov	r2, r0
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e19a:	d109      	bne.n	800e1b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e1a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e010      	b.n	800e1d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 fc23 	bl	800e9fc <HAL_SD_GetCardState>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d1e7      	bne.n	800e18c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3728      	adds	r7, #40	; 0x28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
	...

0800e1dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e1dc:	b590      	push	{r4, r7, lr}
 800e1de:	b08d      	sub	sp, #52	; 0x34
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e1f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e1f8:	f04f 0100 	mov.w	r1, #0
 800e1fc:	f7fe fc76 	bl	800caec <HAL_RCCEx_GetPeriphCLKFreq>
 800e200:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	2b00      	cmp	r3, #0
 800e206:	d109      	bne.n	800e21c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e216:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e070      	b.n	800e2fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	0a1b      	lsrs	r3, r3, #8
 800e220:	4a39      	ldr	r2, [pc, #228]	; (800e308 <HAL_SD_InitCard+0x12c>)
 800e222:	fba2 2303 	umull	r2, r3, r2, r3
 800e226:	091b      	lsrs	r3, r3, #4
 800e228:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681c      	ldr	r4, [r3, #0]
 800e22e:	466a      	mov	r2, sp
 800e230:	f107 0318 	add.w	r3, r7, #24
 800e234:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e238:	e882 0003 	stmia.w	r2, {r0, r1}
 800e23c:	f107 030c 	add.w	r3, r7, #12
 800e240:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e242:	4620      	mov	r0, r4
 800e244:	f004 fbdc 	bl	8012a00 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f004 fc0e 	bl	8012a6e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e262:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	2b00      	cmp	r3, #0
 800e268:	d007      	beq.n	800e27a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e26a:	4a28      	ldr	r2, [pc, #160]	; (800e30c <HAL_SD_InitCard+0x130>)
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e272:	3301      	adds	r3, #1
 800e274:	4618      	mov	r0, r3
 800e276:	f7f7 fd01 	bl	8005c7c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fcac 	bl	800ebd8 <SD_PowerON>
 800e280:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	431a      	orrs	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e29c:	2301      	movs	r3, #1
 800e29e:	e02e      	b.n	800e2fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 fbcb 	bl	800ea3c <SD_InitCard>
 800e2a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ba:	6a3b      	ldr	r3, [r7, #32]
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e01b      	b.n	800e2fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f004 fc62 	bl	8012b98 <SDMMC_CmdBlockLength>
 800e2d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00f      	beq.n	800e2fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a0b      	ldr	r2, [pc, #44]	; (800e310 <HAL_SD_InitCard+0x134>)
 800e2e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2e8:	6a3b      	ldr	r3, [r7, #32]
 800e2ea:	431a      	orrs	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	372c      	adds	r7, #44	; 0x2c
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop
 800e308:	014f8b59 	.word	0x014f8b59
 800e30c:	00012110 	.word	0x00012110
 800e310:	1fe00fff 	.word	0x1fe00fff

0800e314 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e322:	0f9b      	lsrs	r3, r3, #30
 800e324:	b2da      	uxtb	r2, r3
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e32e:	0e9b      	lsrs	r3, r3, #26
 800e330:	b2db      	uxtb	r3, r3
 800e332:	f003 030f 	and.w	r3, r3, #15
 800e336:	b2da      	uxtb	r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e340:	0e1b      	lsrs	r3, r3, #24
 800e342:	b2db      	uxtb	r3, r3
 800e344:	f003 0303 	and.w	r3, r3, #3
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e352:	0c1b      	lsrs	r3, r3, #16
 800e354:	b2da      	uxtb	r2, r3
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e35e:	0a1b      	lsrs	r3, r3, #8
 800e360:	b2da      	uxtb	r2, r3
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e374:	0d1b      	lsrs	r3, r3, #20
 800e376:	b29a      	uxth	r2, r3
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e380:	0c1b      	lsrs	r3, r3, #16
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f003 030f 	and.w	r3, r3, #15
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e392:	0bdb      	lsrs	r3, r3, #15
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a4:	0b9b      	lsrs	r3, r3, #14
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3b6:	0b5b      	lsrs	r3, r3, #13
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3c8:	0b1b      	lsrs	r3, r3, #12
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d163      	bne.n	800e4ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3e8:	009a      	lsls	r2, r3, #2
 800e3ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e3f4:	0f92      	lsrs	r2, r2, #30
 800e3f6:	431a      	orrs	r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e400:	0edb      	lsrs	r3, r3, #27
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0307 	and.w	r3, r3, #7
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e412:	0e1b      	lsrs	r3, r3, #24
 800e414:	b2db      	uxtb	r3, r3
 800e416:	f003 0307 	and.w	r3, r3, #7
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e424:	0d5b      	lsrs	r3, r3, #21
 800e426:	b2db      	uxtb	r3, r3
 800e428:	f003 0307 	and.w	r3, r3, #7
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e436:	0c9b      	lsrs	r3, r3, #18
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	f003 0307 	and.w	r3, r3, #7
 800e43e:	b2da      	uxtb	r2, r3
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e448:	0bdb      	lsrs	r3, r3, #15
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	f003 0307 	and.w	r3, r3, #7
 800e450:	b2da      	uxtb	r2, r3
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	7e1b      	ldrb	r3, [r3, #24]
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	3302      	adds	r3, #2
 800e46c:	2201      	movs	r2, #1
 800e46e:	fa02 f303 	lsl.w	r3, r2, r3
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e476:	fb03 f202 	mul.w	r2, r3, r2
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	7a1b      	ldrb	r3, [r3, #8]
 800e482:	b2db      	uxtb	r3, r3
 800e484:	f003 030f 	and.w	r3, r3, #15
 800e488:	2201      	movs	r2, #1
 800e48a:	409a      	lsls	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e498:	0a52      	lsrs	r2, r2, #9
 800e49a:	fb03 f202 	mul.w	r2, r3, r2
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4a8:	655a      	str	r2, [r3, #84]	; 0x54
 800e4aa:	e031      	b.n	800e510 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d11d      	bne.n	800e4f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4b8:	041b      	lsls	r3, r3, #16
 800e4ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c2:	0c1b      	lsrs	r3, r3, #16
 800e4c4:	431a      	orrs	r2, r3
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	029a      	lsls	r2, r3, #10
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	655a      	str	r2, [r3, #84]	; 0x54
 800e4ee:	e00f      	b.n	800e510 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a58      	ldr	r2, [pc, #352]	; (800e658 <HAL_SD_GetCardCSD+0x344>)
 800e4f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	e09d      	b.n	800e64c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e514:	0b9b      	lsrs	r3, r3, #14
 800e516:	b2db      	uxtb	r3, r3
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e526:	09db      	lsrs	r3, r3, #7
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e52e:	b2da      	uxtb	r2, r3
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e548:	0fdb      	lsrs	r3, r3, #31
 800e54a:	b2da      	uxtb	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e554:	0f5b      	lsrs	r3, r3, #29
 800e556:	b2db      	uxtb	r3, r3
 800e558:	f003 0303 	and.w	r3, r3, #3
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e566:	0e9b      	lsrs	r3, r3, #26
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	f003 0307 	and.w	r3, r3, #7
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e578:	0d9b      	lsrs	r3, r3, #22
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	f003 030f 	and.w	r3, r3, #15
 800e580:	b2da      	uxtb	r2, r3
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e58a:	0d5b      	lsrs	r3, r3, #21
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	b2da      	uxtb	r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5a6:	0c1b      	lsrs	r3, r3, #16
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5ba:	0bdb      	lsrs	r3, r3, #15
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	b2da      	uxtb	r2, r3
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5ce:	0b9b      	lsrs	r3, r3, #14
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5e2:	0b5b      	lsrs	r3, r3, #13
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5f6:	0b1b      	lsrs	r3, r3, #12
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e60a:	0a9b      	lsrs	r3, r3, #10
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	f003 0303 	and.w	r3, r3, #3
 800e612:	b2da      	uxtb	r2, r3
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e61e:	0a1b      	lsrs	r3, r3, #8
 800e620:	b2db      	uxtb	r3, r3
 800e622:	f003 0303 	and.w	r3, r3, #3
 800e626:	b2da      	uxtb	r2, r3
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e632:	085b      	lsrs	r3, r3, #1
 800e634:	b2db      	uxtb	r3, r3
 800e636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr
 800e658:	1fe00fff 	.word	0x1fe00fff

0800e65c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b094      	sub	sp, #80	; 0x50
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e666:	2300      	movs	r3, #0
 800e668:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e672:	b2db      	uxtb	r3, r3
 800e674:	2b03      	cmp	r3, #3
 800e676:	d101      	bne.n	800e67c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	e0a7      	b.n	800e7cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e67c:	f107 0308 	add.w	r3, r7, #8
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fb36 	bl	800ecf4 <SD_SendSDStatus>
 800e688:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d011      	beq.n	800e6b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a4f      	ldr	r2, [pc, #316]	; (800e7d4 <HAL_SD_GetCardStatus+0x178>)
 800e696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e6b2:	e070      	b.n	800e796 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	099b      	lsrs	r3, r3, #6
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	f003 0303 	and.w	r3, r3, #3
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	095b      	lsrs	r3, r3, #5
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	0a1b      	lsrs	r3, r3, #8
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e6de:	b29a      	uxth	r2, r3
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	0e1b      	lsrs	r3, r3, #24
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	061a      	lsls	r2, r3, #24
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	0a1b      	lsrs	r3, r3, #8
 800e700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e704:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	0e1b      	lsrs	r3, r3, #24
 800e70a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	b2da      	uxtb	r2, r3
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	0a1b      	lsrs	r3, r3, #8
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	0d1b      	lsrs	r3, r3, #20
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 030f 	and.w	r3, r3, #15
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	b29b      	uxth	r3, r3
 800e738:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	b29b      	uxth	r3, r3
 800e742:	b2db      	uxtb	r3, r3
 800e744:	b29b      	uxth	r3, r3
 800e746:	4313      	orrs	r3, r2
 800e748:	b29a      	uxth	r2, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	0a9b      	lsrs	r3, r3, #10
 800e752:	b2db      	uxtb	r3, r3
 800e754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	b2db      	uxtb	r3, r3
 800e764:	f003 0303 	and.w	r3, r3, #3
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	091b      	lsrs	r3, r3, #4
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 030f 	and.w	r3, r3, #15
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	b2db      	uxtb	r3, r3
 800e782:	f003 030f 	and.w	r3, r3, #15
 800e786:	b2da      	uxtb	r2, r3
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	0e1b      	lsrs	r3, r3, #24
 800e790:	b2da      	uxtb	r2, r3
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f004 f9fa 	bl	8012b98 <SDMMC_CmdBlockLength>
 800e7a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00d      	beq.n	800e7c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <HAL_SD_GetCardStatus+0x178>)
 800e7b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e7c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3750      	adds	r7, #80	; 0x50
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	1fe00fff 	.word	0x1fe00fff

0800e7d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e7d8:	b590      	push	{r4, r7, lr}
 800e7da:	b08d      	sub	sp, #52	; 0x34
 800e7dc:	af02      	add	r7, sp, #8
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d02e      	beq.n	800e856 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7fe:	d106      	bne.n	800e80e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e804:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	635a      	str	r2, [r3, #52]	; 0x34
 800e80c:	e029      	b.n	800e862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e814:	d10a      	bne.n	800e82c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fb64 	bl	800eee4 <SD_WideBus_Enable>
 800e81c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	431a      	orrs	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	635a      	str	r2, [r3, #52]	; 0x34
 800e82a:	e01a      	b.n	800e862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10a      	bne.n	800e848 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 fba1 	bl	800ef7a <SD_WideBus_Disable>
 800e838:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e83e:	6a3b      	ldr	r3, [r7, #32]
 800e840:	431a      	orrs	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	635a      	str	r2, [r3, #52]	; 0x34
 800e846:	e00c      	b.n	800e862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	635a      	str	r2, [r3, #52]	; 0x34
 800e854:	e005      	b.n	800e862 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a5f      	ldr	r2, [pc, #380]	; (800e9ec <HAL_SD_ConfigWideBusOperation+0x214>)
 800e870:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e872:	2301      	movs	r3, #1
 800e874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e878:	e096      	b.n	800e9a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e87a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e87e:	f04f 0100 	mov.w	r1, #0
 800e882:	f7fe f933 	bl	800caec <HAL_RCCEx_GetPeriphCLKFreq>
 800e886:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 8083 	beq.w	800e996 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	695a      	ldr	r2, [r3, #20]
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	4950      	ldr	r1, [pc, #320]	; (800e9f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e8ae:	fba1 1303 	umull	r1, r3, r1, r3
 800e8b2:	0e1b      	lsrs	r3, r3, #24
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d303      	bcc.n	800e8c0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	695b      	ldr	r3, [r3, #20]
 800e8bc:	61bb      	str	r3, [r7, #24]
 800e8be:	e05a      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c8:	d103      	bne.n	800e8d2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	61bb      	str	r3, [r7, #24]
 800e8d0:	e051      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8da:	d126      	bne.n	800e92a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10e      	bne.n	800e902 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	4a43      	ldr	r2, [pc, #268]	; (800e9f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d906      	bls.n	800e8fa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	4a40      	ldr	r2, [pc, #256]	; (800e9f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e8f4:	0e5b      	lsrs	r3, r3, #25
 800e8f6:	61bb      	str	r3, [r7, #24]
 800e8f8:	e03d      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	61bb      	str	r3, [r7, #24]
 800e900:	e039      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	695b      	ldr	r3, [r3, #20]
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90e:	4a39      	ldr	r2, [pc, #228]	; (800e9f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d906      	bls.n	800e922 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	4a36      	ldr	r2, [pc, #216]	; (800e9f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e918:	fba2 2303 	umull	r2, r3, r2, r3
 800e91c:	0e5b      	lsrs	r3, r3, #25
 800e91e:	61bb      	str	r3, [r7, #24]
 800e920:	e029      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	695b      	ldr	r3, [r3, #20]
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	e025      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10e      	bne.n	800e950 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	4a30      	ldr	r2, [pc, #192]	; (800e9f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d906      	bls.n	800e948 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	4a2c      	ldr	r2, [pc, #176]	; (800e9f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e93e:	fba2 2303 	umull	r2, r3, r2, r3
 800e942:	0e1b      	lsrs	r3, r3, #24
 800e944:	61bb      	str	r3, [r7, #24]
 800e946:	e016      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	695b      	ldr	r3, [r3, #20]
 800e94c:	61bb      	str	r3, [r7, #24]
 800e94e:	e012      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	69fa      	ldr	r2, [r7, #28]
 800e958:	fbb2 f3f3 	udiv	r3, r2, r3
 800e95c:	4a26      	ldr	r2, [pc, #152]	; (800e9f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d906      	bls.n	800e970 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	4a22      	ldr	r2, [pc, #136]	; (800e9f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e966:	fba2 2303 	umull	r2, r3, r2, r3
 800e96a:	0e1b      	lsrs	r3, r3, #24
 800e96c:	61bb      	str	r3, [r7, #24]
 800e96e:	e002      	b.n	800e976 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	695b      	ldr	r3, [r3, #20]
 800e974:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681c      	ldr	r4, [r3, #0]
 800e97a:	466a      	mov	r2, sp
 800e97c:	f107 0314 	add.w	r3, r7, #20
 800e980:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e984:	e882 0003 	stmia.w	r2, {r0, r1}
 800e988:	f107 0308 	add.w	r3, r7, #8
 800e98c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e98e:	4620      	mov	r0, r4
 800e990:	f004 f836 	bl	8012a00 <SDMMC_Init>
 800e994:	e008      	b.n	800e9a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f004 f8f1 	bl	8012b98 <SDMMC_CmdBlockLength>
 800e9b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00c      	beq.n	800e9d8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a0a      	ldr	r2, [pc, #40]	; (800e9ec <HAL_SD_ConfigWideBusOperation+0x214>)
 800e9c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	372c      	adds	r7, #44	; 0x2c
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd90      	pop	{r4, r7, pc}
 800e9ec:	1fe00fff 	.word	0x1fe00fff
 800e9f0:	55e63b89 	.word	0x55e63b89
 800e9f4:	02faf080 	.word	0x02faf080
 800e9f8:	017d7840 	.word	0x017d7840

0800e9fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ea08:	f107 030c 	add.w	r3, r7, #12
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 fa40 	bl	800ee94 <SD_SendStatus>
 800ea14:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	431a      	orrs	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	0a5b      	lsrs	r3, r3, #9
 800ea2c:	f003 030f 	and.w	r3, r3, #15
 800ea30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ea32:	693b      	ldr	r3, [r7, #16]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b090      	sub	sp, #64	; 0x40
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ea44:	2300      	movs	r3, #0
 800ea46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ea48:	f7f7 f90c 	bl	8005c64 <HAL_GetTick>
 800ea4c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f004 f81c 	bl	8012a90 <SDMMC_GetPowerState>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d102      	bne.n	800ea64 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ea62:	e0b5      	b.n	800ebd0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d02e      	beq.n	800eaca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f004 f99d 	bl	8012db0 <SDMMC_CmdSendCID>
 800ea76:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <SD_InitCard+0x46>
    {
      return errorstate;
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	e0a6      	b.n	800ebd0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2100      	movs	r1, #0
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f004 f846 	bl	8012b1a <SDMMC_GetResponse>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2104      	movs	r1, #4
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f004 f83d 	bl	8012b1a <SDMMC_GetResponse>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2108      	movs	r1, #8
 800eaac:	4618      	mov	r0, r3
 800eaae:	f004 f834 	bl	8012b1a <SDMMC_GetResponse>
 800eab2:	4602      	mov	r2, r0
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	210c      	movs	r1, #12
 800eabe:	4618      	mov	r0, r3
 800eac0:	f004 f82b 	bl	8012b1a <SDMMC_GetResponse>
 800eac4:	4602      	mov	r2, r0
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	2b03      	cmp	r3, #3
 800ead0:	d01d      	beq.n	800eb0e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ead2:	e019      	b.n	800eb08 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f107 020a 	add.w	r2, r7, #10
 800eadc:	4611      	mov	r1, r2
 800eade:	4618      	mov	r0, r3
 800eae0:	f004 f9a5 	bl	8012e2e <SDMMC_CmdSetRelAdd>
 800eae4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800eae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d001      	beq.n	800eaf0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	e06f      	b.n	800ebd0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800eaf0:	f7f7 f8b8 	bl	8005c64 <HAL_GetTick>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	f241 3287 	movw	r2, #4999	; 0x1387
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d902      	bls.n	800eb08 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800eb02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb06:	e063      	b.n	800ebd0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800eb08:	897b      	ldrh	r3, [r7, #10]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0e2      	beq.n	800ead4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d036      	beq.n	800eb84 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800eb16:	897b      	ldrh	r3, [r7, #10]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb26:	041b      	lsls	r3, r3, #16
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f004 f95f 	bl	8012dee <SDMMC_CmdSendCSD>
 800eb30:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d001      	beq.n	800eb3c <SD_InitCard+0x100>
    {
      return errorstate;
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	e049      	b.n	800ebd0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2100      	movs	r1, #0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f003 ffe9 	bl	8012b1a <SDMMC_GetResponse>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2104      	movs	r1, #4
 800eb54:	4618      	mov	r0, r3
 800eb56:	f003 ffe0 	bl	8012b1a <SDMMC_GetResponse>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2108      	movs	r1, #8
 800eb66:	4618      	mov	r0, r3
 800eb68:	f003 ffd7 	bl	8012b1a <SDMMC_GetResponse>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	210c      	movs	r1, #12
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f003 ffce 	bl	8012b1a <SDMMC_GetResponse>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2104      	movs	r1, #4
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f003 ffc5 	bl	8012b1a <SDMMC_GetResponse>
 800eb90:	4603      	mov	r3, r0
 800eb92:	0d1a      	lsrs	r2, r3, #20
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800eb98:	f107 030c 	add.w	r3, r7, #12
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fbb8 	bl	800e314 <HAL_SD_GetCardCSD>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ebae:	e00f      	b.n	800ebd0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb8:	041b      	lsls	r3, r3, #16
 800ebba:	4619      	mov	r1, r3
 800ebbc:	4610      	mov	r0, r2
 800ebbe:	f004 f80e 	bl	8012bde <SDMMC_CmdSelDesel>
 800ebc2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <SD_InitCard+0x192>
  {
    return errorstate;
 800ebca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebcc:	e000      	b.n	800ebd0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3740      	adds	r7, #64	; 0x40
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f004 f817 	bl	8012c24 <SDMMC_CmdGoIdleState>
 800ebf6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	e072      	b.n	800ece8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f004 f82a 	bl	8012c60 <SDMMC_CmdOperCond>
 800ec0c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec14:	d10d      	bne.n	800ec32 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f003 ffff 	bl	8012c24 <SDMMC_CmdGoIdleState>
 800ec26:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d004      	beq.n	800ec38 <SD_PowerON+0x60>
    {
      return errorstate;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	e05a      	b.n	800ece8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d137      	bne.n	800ecb0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f004 f82a 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800ec4c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d02d      	beq.n	800ecb0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec58:	e046      	b.n	800ece8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2100      	movs	r1, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f004 f81d 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800ec66:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	e03a      	b.n	800ece8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	491e      	ldr	r1, [pc, #120]	; (800ecf0 <SD_PowerON+0x118>)
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f004 f834 	bl	8012ce6 <SDMMC_CmdAppOperCommand>
 800ec7e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec8a:	e02d      	b.n	800ece8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2100      	movs	r1, #0
 800ec92:	4618      	mov	r0, r3
 800ec94:	f003 ff41 	bl	8012b1a <SDMMC_GetResponse>
 800ec98:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	0fdb      	lsrs	r3, r3, #31
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d101      	bne.n	800eca6 <SD_PowerON+0xce>
 800eca2:	2301      	movs	r3, #1
 800eca4:	e000      	b.n	800eca8 <SD_PowerON+0xd0>
 800eca6:	2300      	movs	r3, #0
 800eca8:	613b      	str	r3, [r7, #16]

    count++;
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d802      	bhi.n	800ecc0 <SD_PowerON+0xe8>
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0cc      	beq.n	800ec5a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d902      	bls.n	800ecd0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ecca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ecce:	e00b      	b.n	800ece8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	c1100000 	.word	0xc1100000

0800ecf4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08c      	sub	sp, #48	; 0x30
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ecfe:	f7f6 ffb1 	bl	8005c64 <HAL_GetTick>
 800ed02:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f003 ff03 	bl	8012b1a <SDMMC_GetResponse>
 800ed14:	4603      	mov	r3, r0
 800ed16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed1e:	d102      	bne.n	800ed26 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed24:	e0b0      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2140      	movs	r1, #64	; 0x40
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f003 ff33 	bl	8012b98 <SDMMC_CmdBlockLength>
 800ed32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d005      	beq.n	800ed46 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	e0a0      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed4e:	041b      	lsls	r3, r3, #16
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f003 ffa4 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800ed58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d005      	beq.n	800ed6c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ed68:	6a3b      	ldr	r3, [r7, #32]
 800ed6a:	e08d      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ed6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed70:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ed72:	2340      	movs	r3, #64	; 0x40
 800ed74:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ed76:	2360      	movs	r3, #96	; 0x60
 800ed78:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f107 0208 	add.w	r2, r7, #8
 800ed8e:	4611      	mov	r1, r2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f003 fed5 	bl	8012b40 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f004 f88c 	bl	8012eb8 <SDMMC_CmdStatusRegister>
 800eda0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d02b      	beq.n	800ee00 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	e069      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d013      	beq.n	800edea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800edc2:	2300      	movs	r3, #0
 800edc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edc6:	e00d      	b.n	800ede4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4618      	mov	r0, r3
 800edce:	f003 fe41 	bl	8012a54 <SDMMC_ReadFIFO>
 800edd2:	4602      	mov	r2, r0
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	601a      	str	r2, [r3, #0]
        pData++;
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	3304      	adds	r3, #4
 800eddc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800edde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede0:	3301      	adds	r3, #1
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	d9ee      	bls.n	800edc8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800edea:	f7f6 ff3b 	bl	8005c64 <HAL_GetTick>
 800edee:	4602      	mov	r2, r0
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edf8:	d102      	bne.n	800ee00 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800edfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edfe:	e043      	b.n	800ee88 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee06:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d0d2      	beq.n	800edb4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee14:	f003 0308 	and.w	r3, r3, #8
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ee1c:	2308      	movs	r3, #8
 800ee1e:	e033      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee26:	f003 0302 	and.w	r3, r3, #2
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ee2e:	2302      	movs	r3, #2
 800ee30:	e02a      	b.n	800ee88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee38:	f003 0320 	and.w	r3, r3, #32
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d017      	beq.n	800ee70 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ee40:	2320      	movs	r3, #32
 800ee42:	e021      	b.n	800ee88 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f003 fe03 	bl	8012a54 <SDMMC_ReadFIFO>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	601a      	str	r2, [r3, #0]
    pData++;
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	3304      	adds	r3, #4
 800ee58:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee5a:	f7f6 ff03 	bl	8005c64 <HAL_GetTick>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee68:	d102      	bne.n	800ee70 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee6e:	e00b      	b.n	800ee88 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1e2      	bne.n	800ee44 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4a03      	ldr	r2, [pc, #12]	; (800ee90 <SD_SendSDStatus+0x19c>)
 800ee84:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3730      	adds	r7, #48	; 0x30
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	18000f3a 	.word	0x18000f3a

0800ee94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d102      	bne.n	800eeaa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800eea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eea8:	e018      	b.n	800eedc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb2:	041b      	lsls	r3, r3, #16
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4610      	mov	r0, r2
 800eeb8:	f003 ffdb 	bl	8012e72 <SDMMC_CmdSendStatus>
 800eebc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	e009      	b.n	800eedc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f003 fe23 	bl	8012b1a <SDMMC_GetResponse>
 800eed4:	4602      	mov	r2, r0
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eeda:	2300      	movs	r3, #0
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	2300      	movs	r3, #0
 800eef2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2100      	movs	r1, #0
 800eefa:	4618      	mov	r0, r3
 800eefc:	f003 fe0d 	bl	8012b1a <SDMMC_GetResponse>
 800ef00:	4603      	mov	r3, r0
 800ef02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef0a:	d102      	bne.n	800ef12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ef0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef10:	e02f      	b.n	800ef72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ef12:	f107 030c 	add.w	r3, r7, #12
 800ef16:	4619      	mov	r1, r3
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 f879 	bl	800f010 <SD_FindSCR>
 800ef1e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	e023      	b.n	800ef72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d01c      	beq.n	800ef6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef3c:	041b      	lsls	r3, r3, #16
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4610      	mov	r0, r2
 800ef42:	f003 fead 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800ef46:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	e00f      	b.n	800ef72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2102      	movs	r1, #2
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f003 fee4 	bl	8012d26 <SDMMC_CmdBusWidth>
 800ef5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	e003      	b.n	800ef72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	e001      	b.n	800ef72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b086      	sub	sp, #24
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ef82:	2300      	movs	r3, #0
 800ef84:	60fb      	str	r3, [r7, #12]
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f003 fdc2 	bl	8012b1a <SDMMC_GetResponse>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efa0:	d102      	bne.n	800efa8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800efa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efa6:	e02f      	b.n	800f008 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800efa8:	f107 030c 	add.w	r3, r7, #12
 800efac:	4619      	mov	r1, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f82e 	bl	800f010 <SD_FindSCR>
 800efb4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	e023      	b.n	800f008 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d01c      	beq.n	800f004 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efd2:	041b      	lsls	r3, r3, #16
 800efd4:	4619      	mov	r1, r3
 800efd6:	4610      	mov	r0, r2
 800efd8:	f003 fe62 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800efdc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	e00f      	b.n	800f008 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2100      	movs	r1, #0
 800efee:	4618      	mov	r0, r3
 800eff0:	f003 fe99 	bl	8012d26 <SDMMC_CmdBusWidth>
 800eff4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	e003      	b.n	800f008 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f000:	2300      	movs	r3, #0
 800f002:	e001      	b.n	800f008 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3718      	adds	r7, #24
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08e      	sub	sp, #56	; 0x38
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f01a:	f7f6 fe23 	bl	8005c64 <HAL_GetTick>
 800f01e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f020:	2300      	movs	r3, #0
 800f022:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f024:	2300      	movs	r3, #0
 800f026:	60bb      	str	r3, [r7, #8]
 800f028:	2300      	movs	r3, #0
 800f02a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2108      	movs	r1, #8
 800f036:	4618      	mov	r0, r3
 800f038:	f003 fdae 	bl	8012b98 <SDMMC_CmdBlockLength>
 800f03c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f046:	e0ad      	b.n	800f1a4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f050:	041b      	lsls	r3, r3, #16
 800f052:	4619      	mov	r1, r3
 800f054:	4610      	mov	r0, r2
 800f056:	f003 fe23 	bl	8012ca0 <SDMMC_CmdAppCommand>
 800f05a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f064:	e09e      	b.n	800f1a4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f06a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f06c:	2308      	movs	r3, #8
 800f06e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f070:	2330      	movs	r3, #48	; 0x30
 800f072:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f074:	2302      	movs	r3, #2
 800f076:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f078:	2300      	movs	r3, #0
 800f07a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f07c:	2301      	movs	r3, #1
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f107 0210 	add.w	r2, r7, #16
 800f088:	4611      	mov	r1, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f003 fd58 	bl	8012b40 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4618      	mov	r0, r3
 800f096:	f003 fe69 	bl	8012d6c <SDMMC_CmdSendSCR>
 800f09a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d027      	beq.n	800f0f2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	e07e      	b.n	800f1a4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d113      	bne.n	800f0dc <SD_FindSCR+0xcc>
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d110      	bne.n	800f0dc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f003 fcc8 	bl	8012a54 <SDMMC_ReadFIFO>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f003 fcc1 	bl	8012a54 <SDMMC_ReadFIFO>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	60fb      	str	r3, [r7, #12]
      index++;
 800f0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d8:	3301      	adds	r3, #1
 800f0da:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f0dc:	f7f6 fdc2 	bl	8005c64 <HAL_GetTick>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ea:	d102      	bne.n	800f0f2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f0ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0f0:	e058      	b.n	800f1a4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0f8:	f240 532a 	movw	r3, #1322	; 0x52a
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0d1      	beq.n	800f0a6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f108:	f003 0308 	and.w	r3, r3, #8
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d005      	beq.n	800f11c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2208      	movs	r2, #8
 800f116:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f118:	2308      	movs	r3, #8
 800f11a:	e043      	b.n	800f1a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f122:	f003 0302 	and.w	r3, r3, #2
 800f126:	2b00      	cmp	r3, #0
 800f128:	d005      	beq.n	800f136 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2202      	movs	r2, #2
 800f130:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f132:	2302      	movs	r3, #2
 800f134:	e036      	b.n	800f1a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13c:	f003 0320 	and.w	r3, r3, #32
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2220      	movs	r2, #32
 800f14a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f14c:	2320      	movs	r3, #32
 800f14e:	e029      	b.n	800f1a4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a15      	ldr	r2, [pc, #84]	; (800f1ac <SD_FindSCR+0x19c>)
 800f156:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	061a      	lsls	r2, r3, #24
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	021b      	lsls	r3, r3, #8
 800f160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f164:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	0a1b      	lsrs	r3, r3, #8
 800f16a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f16e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	0e1b      	lsrs	r3, r3, #24
 800f174:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	601a      	str	r2, [r3, #0]
    scr++;
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	3304      	adds	r3, #4
 800f17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	061a      	lsls	r2, r3, #24
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	021b      	lsls	r3, r3, #8
 800f188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f18c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	0a1b      	lsrs	r3, r3, #8
 800f192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f196:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	0e1b      	lsrs	r3, r3, #24
 800f19c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3738      	adds	r7, #56	; 0x38
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	18000f3a 	.word	0x18000f3a

0800f1b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e10f      	b.n	800f3e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a87      	ldr	r2, [pc, #540]	; (800f3ec <HAL_SPI_Init+0x23c>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d00f      	beq.n	800f1f2 <HAL_SPI_Init+0x42>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a86      	ldr	r2, [pc, #536]	; (800f3f0 <HAL_SPI_Init+0x240>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d00a      	beq.n	800f1f2 <HAL_SPI_Init+0x42>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a84      	ldr	r2, [pc, #528]	; (800f3f4 <HAL_SPI_Init+0x244>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d005      	beq.n	800f1f2 <HAL_SPI_Init+0x42>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	2b0f      	cmp	r3, #15
 800f1ec:	d901      	bls.n	800f1f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e0f7      	b.n	800f3e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 f900 	bl	800f3f8 <SPI_GetPacketSize>
 800f1f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a7b      	ldr	r2, [pc, #492]	; (800f3ec <HAL_SPI_Init+0x23c>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d00c      	beq.n	800f21e <HAL_SPI_Init+0x6e>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a79      	ldr	r2, [pc, #484]	; (800f3f0 <HAL_SPI_Init+0x240>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d007      	beq.n	800f21e <HAL_SPI_Init+0x6e>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4a78      	ldr	r2, [pc, #480]	; (800f3f4 <HAL_SPI_Init+0x244>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d002      	beq.n	800f21e <HAL_SPI_Init+0x6e>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b08      	cmp	r3, #8
 800f21c:	d811      	bhi.n	800f242 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f222:	4a72      	ldr	r2, [pc, #456]	; (800f3ec <HAL_SPI_Init+0x23c>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d009      	beq.n	800f23c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a70      	ldr	r2, [pc, #448]	; (800f3f0 <HAL_SPI_Init+0x240>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d004      	beq.n	800f23c <HAL_SPI_Init+0x8c>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a6f      	ldr	r2, [pc, #444]	; (800f3f4 <HAL_SPI_Init+0x244>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d104      	bne.n	800f246 <HAL_SPI_Init+0x96>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b10      	cmp	r3, #16
 800f240:	d901      	bls.n	800f246 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f242:	2301      	movs	r3, #1
 800f244:	e0cd      	b.n	800f3e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d106      	bne.n	800f260 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7f6 f886 	bl	800536c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2202      	movs	r2, #2
 800f264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f022 0201 	bic.w	r2, r2, #1
 800f276:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f282:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f28c:	d119      	bne.n	800f2c2 <HAL_SPI_Init+0x112>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f296:	d103      	bne.n	800f2a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d008      	beq.n	800f2b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10c      	bne.n	800f2c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f2ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2b0:	d107      	bne.n	800f2c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00f      	beq.n	800f2ee <HAL_SPI_Init+0x13e>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	2b06      	cmp	r3, #6
 800f2d4:	d90b      	bls.n	800f2ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	430a      	orrs	r2, r1
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	e007      	b.n	800f2fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f2fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	69da      	ldr	r2, [r3, #28]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f306:	431a      	orrs	r2, r3
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f310:	ea42 0103 	orr.w	r1, r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	68da      	ldr	r2, [r3, #12]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	430a      	orrs	r2, r1
 800f31e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f328:	431a      	orrs	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32e:	431a      	orrs	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	699b      	ldr	r3, [r3, #24]
 800f334:	431a      	orrs	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	431a      	orrs	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	431a      	orrs	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	431a      	orrs	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	431a      	orrs	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f352:	431a      	orrs	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	431a      	orrs	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f35e:	ea42 0103 	orr.w	r1, r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d113      	bne.n	800f39e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f388:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f39c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f022 0201 	bic.w	r2, r2, #1
 800f3ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00a      	beq.n	800f3d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	40013000 	.word	0x40013000
 800f3f0:	40003800 	.word	0x40003800
 800f3f4:	40003c00 	.word	0x40003c00

0800f3f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f404:	095b      	lsrs	r3, r3, #5
 800f406:	3301      	adds	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	3301      	adds	r3, #1
 800f410:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3307      	adds	r3, #7
 800f416:	08db      	lsrs	r3, r3, #3
 800f418:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f422:	4618      	mov	r0, r3
 800f424:	3714      	adds	r7, #20
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b082      	sub	sp, #8
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f43c:	2301      	movs	r3, #1
 800f43e:	e049      	b.n	800f4d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f446:	b2db      	uxtb	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d106      	bne.n	800f45a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7f6 f8d1 	bl	80055fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2202      	movs	r2, #2
 800f45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3304      	adds	r3, #4
 800f46a:	4619      	mov	r1, r3
 800f46c:	4610      	mov	r0, r2
 800f46e:	f000 fc09 	bl	800fc84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2201      	movs	r2, #1
 800f496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4d2:	2300      	movs	r3, #0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e049      	b.n	800f582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d106      	bne.n	800f508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7f5 ffc0 	bl	8005488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2202      	movs	r2, #2
 800f50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3304      	adds	r3, #4
 800f518:	4619      	mov	r1, r3
 800f51a:	4610      	mov	r0, r2
 800f51c:	f000 fbb2 	bl	800fc84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b082      	sub	sp, #8
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d101      	bne.n	800f59c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	e049      	b.n	800f630 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d106      	bne.n	800f5b6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7f5 ffa1 	bl	80054f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	4610      	mov	r0, r2
 800f5ca:	f000 fb5b 	bl	800fc84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2201      	movs	r2, #1
 800f602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2201      	movs	r2, #1
 800f62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f003 0302 	and.w	r3, r3, #2
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d122      	bne.n	800f694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	f003 0302 	and.w	r3, r3, #2
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d11b      	bne.n	800f694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f06f 0202 	mvn.w	r2, #2
 800f664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2201      	movs	r2, #1
 800f66a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	f003 0303 	and.w	r3, r3, #3
 800f676:	2b00      	cmp	r3, #0
 800f678:	d003      	beq.n	800f682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7f4 f9ba 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800f680:	e005      	b.n	800f68e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 faea 	bl	800fc5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7f4 f9bd 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2200      	movs	r2, #0
 800f692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	f003 0304 	and.w	r3, r3, #4
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d122      	bne.n	800f6e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	f003 0304 	and.w	r3, r3, #4
 800f6ac:	2b04      	cmp	r3, #4
 800f6ae:	d11b      	bne.n	800f6e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f06f 0204 	mvn.w	r2, #4
 800f6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d003      	beq.n	800f6d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7f4 f990 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800f6d4:	e005      	b.n	800f6e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fac0 	bl	800fc5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7f4 f993 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	f003 0308 	and.w	r3, r3, #8
 800f6f2:	2b08      	cmp	r3, #8
 800f6f4:	d122      	bne.n	800f73c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	f003 0308 	and.w	r3, r3, #8
 800f700:	2b08      	cmp	r3, #8
 800f702:	d11b      	bne.n	800f73c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f06f 0208 	mvn.w	r2, #8
 800f70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2204      	movs	r2, #4
 800f712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	69db      	ldr	r3, [r3, #28]
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d003      	beq.n	800f72a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7f4 f966 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800f728:	e005      	b.n	800f736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f000 fa96 	bl	800fc5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7f4 f969 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2200      	movs	r2, #0
 800f73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	f003 0310 	and.w	r3, r3, #16
 800f746:	2b10      	cmp	r3, #16
 800f748:	d122      	bne.n	800f790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	f003 0310 	and.w	r3, r3, #16
 800f754:	2b10      	cmp	r3, #16
 800f756:	d11b      	bne.n	800f790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f06f 0210 	mvn.w	r2, #16
 800f760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2208      	movs	r2, #8
 800f766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f772:	2b00      	cmp	r3, #0
 800f774:	d003      	beq.n	800f77e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7f4 f93c 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800f77c:	e005      	b.n	800f78a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 fa6c 	bl	800fc5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7f4 f93f 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	f003 0301 	and.w	r3, r3, #1
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d10e      	bne.n	800f7bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	f003 0301 	and.w	r3, r3, #1
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d107      	bne.n	800f7bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f06f 0201 	mvn.w	r2, #1
 800f7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7f4 f932 	bl	8003a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c6:	2b80      	cmp	r3, #128	; 0x80
 800f7c8:	d10e      	bne.n	800f7e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7d4:	2b80      	cmp	r3, #128	; 0x80
 800f7d6:	d107      	bne.n	800f7e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f001 f8ea 	bl	80109bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7f6:	d10e      	bne.n	800f816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f802:	2b80      	cmp	r3, #128	; 0x80
 800f804:	d107      	bne.n	800f816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f001 f8dd 	bl	80109d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f820:	2b40      	cmp	r3, #64	; 0x40
 800f822:	d10e      	bne.n	800f842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f82e:	2b40      	cmp	r3, #64	; 0x40
 800f830:	d107      	bne.n	800f842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 fa17 	bl	800fc70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	f003 0320 	and.w	r3, r3, #32
 800f84c:	2b20      	cmp	r3, #32
 800f84e:	d10e      	bne.n	800f86e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	f003 0320 	and.w	r3, r3, #32
 800f85a:	2b20      	cmp	r3, #32
 800f85c:	d107      	bne.n	800f86e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f06f 0220 	mvn.w	r2, #32
 800f866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f001 f89d 	bl	80109a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f86e:	bf00      	nop
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b086      	sub	sp, #24
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	60f8      	str	r0, [r7, #12]
 800f87e:	60b9      	str	r1, [r7, #8]
 800f880:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f882:	2300      	movs	r3, #0
 800f884:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d101      	bne.n	800f894 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f890:	2302      	movs	r3, #2
 800f892:	e088      	b.n	800f9a6 <HAL_TIM_IC_ConfigChannel+0x130>
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d11b      	bne.n	800f8da <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800f8b2:	f000 fe41 	bl	8010538 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	699a      	ldr	r2, [r3, #24]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f022 020c 	bic.w	r2, r2, #12
 800f8c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6999      	ldr	r1, [r3, #24]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	689a      	ldr	r2, [r3, #8]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	430a      	orrs	r2, r1
 800f8d6:	619a      	str	r2, [r3, #24]
 800f8d8:	e060      	b.n	800f99c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b04      	cmp	r3, #4
 800f8de:	d11c      	bne.n	800f91a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800f8f0:	f000 fec5 	bl	801067e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	699a      	ldr	r2, [r3, #24]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f902:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6999      	ldr	r1, [r3, #24]
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	021a      	lsls	r2, r3, #8
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	430a      	orrs	r2, r1
 800f916:	619a      	str	r2, [r3, #24]
 800f918:	e040      	b.n	800f99c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2b08      	cmp	r3, #8
 800f91e:	d11b      	bne.n	800f958 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f930:	f000 ff12 	bl	8010758 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	69da      	ldr	r2, [r3, #28]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f022 020c 	bic.w	r2, r2, #12
 800f942:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	69d9      	ldr	r1, [r3, #28]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	689a      	ldr	r2, [r3, #8]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	430a      	orrs	r2, r1
 800f954:	61da      	str	r2, [r3, #28]
 800f956:	e021      	b.n	800f99c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b0c      	cmp	r3, #12
 800f95c:	d11c      	bne.n	800f998 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f96e:	f000 ff2f 	bl	80107d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	69da      	ldr	r2, [r3, #28]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f980:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69d9      	ldr	r1, [r3, #28]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	021a      	lsls	r2, r3, #8
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	430a      	orrs	r2, r1
 800f994:	61da      	str	r2, [r3, #28]
 800f996:	e001      	b.n	800f99c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d101      	bne.n	800f9ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f9ca:	2302      	movs	r3, #2
 800f9cc:	e0ff      	b.n	800fbce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b14      	cmp	r3, #20
 800f9da:	f200 80f0 	bhi.w	800fbbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f9de:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e4:	0800fa39 	.word	0x0800fa39
 800f9e8:	0800fbbf 	.word	0x0800fbbf
 800f9ec:	0800fbbf 	.word	0x0800fbbf
 800f9f0:	0800fbbf 	.word	0x0800fbbf
 800f9f4:	0800fa79 	.word	0x0800fa79
 800f9f8:	0800fbbf 	.word	0x0800fbbf
 800f9fc:	0800fbbf 	.word	0x0800fbbf
 800fa00:	0800fbbf 	.word	0x0800fbbf
 800fa04:	0800fabb 	.word	0x0800fabb
 800fa08:	0800fbbf 	.word	0x0800fbbf
 800fa0c:	0800fbbf 	.word	0x0800fbbf
 800fa10:	0800fbbf 	.word	0x0800fbbf
 800fa14:	0800fafb 	.word	0x0800fafb
 800fa18:	0800fbbf 	.word	0x0800fbbf
 800fa1c:	0800fbbf 	.word	0x0800fbbf
 800fa20:	0800fbbf 	.word	0x0800fbbf
 800fa24:	0800fb3d 	.word	0x0800fb3d
 800fa28:	0800fbbf 	.word	0x0800fbbf
 800fa2c:	0800fbbf 	.word	0x0800fbbf
 800fa30:	0800fbbf 	.word	0x0800fbbf
 800fa34:	0800fb7d 	.word	0x0800fb7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 f9ba 	bl	800fdb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	699a      	ldr	r2, [r3, #24]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f042 0208 	orr.w	r2, r2, #8
 800fa52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	699a      	ldr	r2, [r3, #24]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f022 0204 	bic.w	r2, r2, #4
 800fa62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	6999      	ldr	r1, [r3, #24]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	691a      	ldr	r2, [r3, #16]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	619a      	str	r2, [r3, #24]
      break;
 800fa76:	e0a5      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 fa2a 	bl	800fed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	699a      	ldr	r2, [r3, #24]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	699a      	ldr	r2, [r3, #24]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6999      	ldr	r1, [r3, #24]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	021a      	lsls	r2, r3, #8
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	430a      	orrs	r2, r1
 800fab6:	619a      	str	r2, [r3, #24]
      break;
 800fab8:	e084      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68b9      	ldr	r1, [r7, #8]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 fa93 	bl	800ffec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	69da      	ldr	r2, [r3, #28]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f042 0208 	orr.w	r2, r2, #8
 800fad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	69da      	ldr	r2, [r3, #28]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f022 0204 	bic.w	r2, r2, #4
 800fae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	69d9      	ldr	r1, [r3, #28]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	691a      	ldr	r2, [r3, #16]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	430a      	orrs	r2, r1
 800faf6:	61da      	str	r2, [r3, #28]
      break;
 800faf8:	e064      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 fafb 	bl	80100fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	69da      	ldr	r2, [r3, #28]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	69da      	ldr	r2, [r3, #28]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	69d9      	ldr	r1, [r3, #28]
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	021a      	lsls	r2, r3, #8
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	430a      	orrs	r2, r1
 800fb38:	61da      	str	r2, [r3, #28]
      break;
 800fb3a:	e043      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68b9      	ldr	r1, [r7, #8]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fb44 	bl	80101d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f042 0208 	orr.w	r2, r2, #8
 800fb56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f022 0204 	bic.w	r2, r2, #4
 800fb66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	691a      	ldr	r2, [r3, #16]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	430a      	orrs	r2, r1
 800fb78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb7a:	e023      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 fb88 	bl	8010298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	021a      	lsls	r2, r3, #8
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fbbc:	e002      	b.n	800fbc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	75fb      	strb	r3, [r7, #23]
      break;
 800fbc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3718      	adds	r7, #24
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop

0800fbd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d101      	bne.n	800fbf0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800fbec:	2302      	movs	r3, #2
 800fbee:	e031      	b.n	800fc54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2202      	movs	r2, #2
 800fbfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fc00:	6839      	ldr	r1, [r7, #0]
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fbae 	bl	8010364 <TIM_SlaveTimer_SetConfig>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d009      	beq.n	800fc22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2201      	movs	r2, #1
 800fc12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e018      	b.n	800fc54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	68da      	ldr	r2, [r3, #12]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68da      	ldr	r2, [r3, #12]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fc40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc64:	bf00      	nop
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a40      	ldr	r2, [pc, #256]	; (800fd98 <TIM_Base_SetConfig+0x114>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d013      	beq.n	800fcc4 <TIM_Base_SetConfig+0x40>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fca2:	d00f      	beq.n	800fcc4 <TIM_Base_SetConfig+0x40>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	4a3d      	ldr	r2, [pc, #244]	; (800fd9c <TIM_Base_SetConfig+0x118>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d00b      	beq.n	800fcc4 <TIM_Base_SetConfig+0x40>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4a3c      	ldr	r2, [pc, #240]	; (800fda0 <TIM_Base_SetConfig+0x11c>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d007      	beq.n	800fcc4 <TIM_Base_SetConfig+0x40>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4a3b      	ldr	r2, [pc, #236]	; (800fda4 <TIM_Base_SetConfig+0x120>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d003      	beq.n	800fcc4 <TIM_Base_SetConfig+0x40>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4a3a      	ldr	r2, [pc, #232]	; (800fda8 <TIM_Base_SetConfig+0x124>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d108      	bne.n	800fcd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4a2f      	ldr	r2, [pc, #188]	; (800fd98 <TIM_Base_SetConfig+0x114>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d01f      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fce4:	d01b      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4a2c      	ldr	r2, [pc, #176]	; (800fd9c <TIM_Base_SetConfig+0x118>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d017      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4a2b      	ldr	r2, [pc, #172]	; (800fda0 <TIM_Base_SetConfig+0x11c>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d013      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4a2a      	ldr	r2, [pc, #168]	; (800fda4 <TIM_Base_SetConfig+0x120>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d00f      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4a29      	ldr	r2, [pc, #164]	; (800fda8 <TIM_Base_SetConfig+0x124>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d00b      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4a28      	ldr	r2, [pc, #160]	; (800fdac <TIM_Base_SetConfig+0x128>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d007      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4a27      	ldr	r2, [pc, #156]	; (800fdb0 <TIM_Base_SetConfig+0x12c>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d003      	beq.n	800fd1e <TIM_Base_SetConfig+0x9a>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4a26      	ldr	r2, [pc, #152]	; (800fdb4 <TIM_Base_SetConfig+0x130>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d108      	bne.n	800fd30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	695b      	ldr	r3, [r3, #20]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	689a      	ldr	r2, [r3, #8]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a10      	ldr	r2, [pc, #64]	; (800fd98 <TIM_Base_SetConfig+0x114>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d00f      	beq.n	800fd7c <TIM_Base_SetConfig+0xf8>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a12      	ldr	r2, [pc, #72]	; (800fda8 <TIM_Base_SetConfig+0x124>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d00b      	beq.n	800fd7c <TIM_Base_SetConfig+0xf8>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a11      	ldr	r2, [pc, #68]	; (800fdac <TIM_Base_SetConfig+0x128>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d007      	beq.n	800fd7c <TIM_Base_SetConfig+0xf8>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a10      	ldr	r2, [pc, #64]	; (800fdb0 <TIM_Base_SetConfig+0x12c>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d003      	beq.n	800fd7c <TIM_Base_SetConfig+0xf8>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a0f      	ldr	r2, [pc, #60]	; (800fdb4 <TIM_Base_SetConfig+0x130>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d103      	bne.n	800fd84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	615a      	str	r2, [r3, #20]
}
 800fd8a:	bf00      	nop
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	40010000 	.word	0x40010000
 800fd9c:	40000400 	.word	0x40000400
 800fda0:	40000800 	.word	0x40000800
 800fda4:	40000c00 	.word	0x40000c00
 800fda8:	40010400 	.word	0x40010400
 800fdac:	40014000 	.word	0x40014000
 800fdb0:	40014400 	.word	0x40014400
 800fdb4:	40014800 	.word	0x40014800

0800fdb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a1b      	ldr	r3, [r3, #32]
 800fdc6:	f023 0201 	bic.w	r2, r3, #1
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	4b37      	ldr	r3, [pc, #220]	; (800fec0 <TIM_OC1_SetConfig+0x108>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f023 0303 	bic.w	r3, r3, #3
 800fdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	f023 0302 	bic.w	r3, r3, #2
 800fe00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4a2d      	ldr	r2, [pc, #180]	; (800fec4 <TIM_OC1_SetConfig+0x10c>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d00f      	beq.n	800fe34 <TIM_OC1_SetConfig+0x7c>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a2c      	ldr	r2, [pc, #176]	; (800fec8 <TIM_OC1_SetConfig+0x110>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d00b      	beq.n	800fe34 <TIM_OC1_SetConfig+0x7c>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a2b      	ldr	r2, [pc, #172]	; (800fecc <TIM_OC1_SetConfig+0x114>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d007      	beq.n	800fe34 <TIM_OC1_SetConfig+0x7c>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a2a      	ldr	r2, [pc, #168]	; (800fed0 <TIM_OC1_SetConfig+0x118>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d003      	beq.n	800fe34 <TIM_OC1_SetConfig+0x7c>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a29      	ldr	r2, [pc, #164]	; (800fed4 <TIM_OC1_SetConfig+0x11c>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d10c      	bne.n	800fe4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	f023 0308 	bic.w	r3, r3, #8
 800fe3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	697a      	ldr	r2, [r7, #20]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f023 0304 	bic.w	r3, r3, #4
 800fe4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a1c      	ldr	r2, [pc, #112]	; (800fec4 <TIM_OC1_SetConfig+0x10c>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d00f      	beq.n	800fe76 <TIM_OC1_SetConfig+0xbe>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4a1b      	ldr	r2, [pc, #108]	; (800fec8 <TIM_OC1_SetConfig+0x110>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d00b      	beq.n	800fe76 <TIM_OC1_SetConfig+0xbe>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4a1a      	ldr	r2, [pc, #104]	; (800fecc <TIM_OC1_SetConfig+0x114>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d007      	beq.n	800fe76 <TIM_OC1_SetConfig+0xbe>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4a19      	ldr	r2, [pc, #100]	; (800fed0 <TIM_OC1_SetConfig+0x118>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d003      	beq.n	800fe76 <TIM_OC1_SetConfig+0xbe>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4a18      	ldr	r2, [pc, #96]	; (800fed4 <TIM_OC1_SetConfig+0x11c>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d111      	bne.n	800fe9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	695b      	ldr	r3, [r3, #20]
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	697a      	ldr	r2, [r7, #20]
 800feb2:	621a      	str	r2, [r3, #32]
}
 800feb4:	bf00      	nop
 800feb6:	371c      	adds	r7, #28
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	fffeff8f 	.word	0xfffeff8f
 800fec4:	40010000 	.word	0x40010000
 800fec8:	40010400 	.word	0x40010400
 800fecc:	40014000 	.word	0x40014000
 800fed0:	40014400 	.word	0x40014400
 800fed4:	40014800 	.word	0x40014800

0800fed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	f023 0210 	bic.w	r2, r3, #16
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	4b34      	ldr	r3, [pc, #208]	; (800ffd4 <TIM_OC2_SetConfig+0xfc>)
 800ff04:	4013      	ands	r3, r2
 800ff06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	021b      	lsls	r3, r3, #8
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f023 0320 	bic.w	r3, r3, #32
 800ff22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	011b      	lsls	r3, r3, #4
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a29      	ldr	r2, [pc, #164]	; (800ffd8 <TIM_OC2_SetConfig+0x100>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d003      	beq.n	800ff40 <TIM_OC2_SetConfig+0x68>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a28      	ldr	r2, [pc, #160]	; (800ffdc <TIM_OC2_SetConfig+0x104>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d10d      	bne.n	800ff5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	011b      	lsls	r3, r3, #4
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a1e      	ldr	r2, [pc, #120]	; (800ffd8 <TIM_OC2_SetConfig+0x100>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d00f      	beq.n	800ff84 <TIM_OC2_SetConfig+0xac>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a1d      	ldr	r2, [pc, #116]	; (800ffdc <TIM_OC2_SetConfig+0x104>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d00b      	beq.n	800ff84 <TIM_OC2_SetConfig+0xac>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4a1c      	ldr	r2, [pc, #112]	; (800ffe0 <TIM_OC2_SetConfig+0x108>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d007      	beq.n	800ff84 <TIM_OC2_SetConfig+0xac>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4a1b      	ldr	r2, [pc, #108]	; (800ffe4 <TIM_OC2_SetConfig+0x10c>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d003      	beq.n	800ff84 <TIM_OC2_SetConfig+0xac>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a1a      	ldr	r2, [pc, #104]	; (800ffe8 <TIM_OC2_SetConfig+0x110>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d113      	bne.n	800ffac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	699b      	ldr	r3, [r3, #24]
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	621a      	str	r2, [r3, #32]
}
 800ffc6:	bf00      	nop
 800ffc8:	371c      	adds	r7, #28
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop
 800ffd4:	feff8fff 	.word	0xfeff8fff
 800ffd8:	40010000 	.word	0x40010000
 800ffdc:	40010400 	.word	0x40010400
 800ffe0:	40014000 	.word	0x40014000
 800ffe4:	40014400 	.word	0x40014400
 800ffe8:	40014800 	.word	0x40014800

0800ffec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b087      	sub	sp, #28
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a1b      	ldr	r3, [r3, #32]
 8010006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010014:	68fa      	ldr	r2, [r7, #12]
 8010016:	4b33      	ldr	r3, [pc, #204]	; (80100e4 <TIM_OC3_SetConfig+0xf8>)
 8010018:	4013      	ands	r3, r2
 801001a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f023 0303 	bic.w	r3, r3, #3
 8010022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	4313      	orrs	r3, r2
 801002c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	021b      	lsls	r3, r3, #8
 801003c:	697a      	ldr	r2, [r7, #20]
 801003e:	4313      	orrs	r3, r2
 8010040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4a28      	ldr	r2, [pc, #160]	; (80100e8 <TIM_OC3_SetConfig+0xfc>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d003      	beq.n	8010052 <TIM_OC3_SetConfig+0x66>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a27      	ldr	r2, [pc, #156]	; (80100ec <TIM_OC3_SetConfig+0x100>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d10d      	bne.n	801006e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	021b      	lsls	r3, r3, #8
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	4313      	orrs	r3, r2
 8010064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801006c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a1d      	ldr	r2, [pc, #116]	; (80100e8 <TIM_OC3_SetConfig+0xfc>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d00f      	beq.n	8010096 <TIM_OC3_SetConfig+0xaa>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4a1c      	ldr	r2, [pc, #112]	; (80100ec <TIM_OC3_SetConfig+0x100>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d00b      	beq.n	8010096 <TIM_OC3_SetConfig+0xaa>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4a1b      	ldr	r2, [pc, #108]	; (80100f0 <TIM_OC3_SetConfig+0x104>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d007      	beq.n	8010096 <TIM_OC3_SetConfig+0xaa>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4a1a      	ldr	r2, [pc, #104]	; (80100f4 <TIM_OC3_SetConfig+0x108>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d003      	beq.n	8010096 <TIM_OC3_SetConfig+0xaa>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4a19      	ldr	r2, [pc, #100]	; (80100f8 <TIM_OC3_SetConfig+0x10c>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d113      	bne.n	80100be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801009c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	695b      	ldr	r3, [r3, #20]
 80100aa:	011b      	lsls	r3, r3, #4
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	4313      	orrs	r3, r2
 80100b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	699b      	ldr	r3, [r3, #24]
 80100b6:	011b      	lsls	r3, r3, #4
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	697a      	ldr	r2, [r7, #20]
 80100d6:	621a      	str	r2, [r3, #32]
}
 80100d8:	bf00      	nop
 80100da:	371c      	adds	r7, #28
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	fffeff8f 	.word	0xfffeff8f
 80100e8:	40010000 	.word	0x40010000
 80100ec:	40010400 	.word	0x40010400
 80100f0:	40014000 	.word	0x40014000
 80100f4:	40014400 	.word	0x40014400
 80100f8:	40014800 	.word	0x40014800

080100fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b087      	sub	sp, #28
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a1b      	ldr	r3, [r3, #32]
 801010a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	69db      	ldr	r3, [r3, #28]
 8010122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	4b24      	ldr	r3, [pc, #144]	; (80101b8 <TIM_OC4_SetConfig+0xbc>)
 8010128:	4013      	ands	r3, r2
 801012a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	021b      	lsls	r3, r3, #8
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	4313      	orrs	r3, r2
 801013e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	031b      	lsls	r3, r3, #12
 801014e:	693a      	ldr	r2, [r7, #16]
 8010150:	4313      	orrs	r3, r2
 8010152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a19      	ldr	r2, [pc, #100]	; (80101bc <TIM_OC4_SetConfig+0xc0>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d00f      	beq.n	801017c <TIM_OC4_SetConfig+0x80>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a18      	ldr	r2, [pc, #96]	; (80101c0 <TIM_OC4_SetConfig+0xc4>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d00b      	beq.n	801017c <TIM_OC4_SetConfig+0x80>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a17      	ldr	r2, [pc, #92]	; (80101c4 <TIM_OC4_SetConfig+0xc8>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d007      	beq.n	801017c <TIM_OC4_SetConfig+0x80>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a16      	ldr	r2, [pc, #88]	; (80101c8 <TIM_OC4_SetConfig+0xcc>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d003      	beq.n	801017c <TIM_OC4_SetConfig+0x80>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4a15      	ldr	r2, [pc, #84]	; (80101cc <TIM_OC4_SetConfig+0xd0>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d109      	bne.n	8010190 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	695b      	ldr	r3, [r3, #20]
 8010188:	019b      	lsls	r3, r3, #6
 801018a:	697a      	ldr	r2, [r7, #20]
 801018c:	4313      	orrs	r3, r2
 801018e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	685a      	ldr	r2, [r3, #4]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	693a      	ldr	r2, [r7, #16]
 80101a8:	621a      	str	r2, [r3, #32]
}
 80101aa:	bf00      	nop
 80101ac:	371c      	adds	r7, #28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	feff8fff 	.word	0xfeff8fff
 80101bc:	40010000 	.word	0x40010000
 80101c0:	40010400 	.word	0x40010400
 80101c4:	40014000 	.word	0x40014000
 80101c8:	40014400 	.word	0x40014400
 80101cc:	40014800 	.word	0x40014800

080101d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b087      	sub	sp, #28
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a1b      	ldr	r3, [r3, #32]
 80101de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	4b21      	ldr	r3, [pc, #132]	; (8010280 <TIM_OC5_SetConfig+0xb0>)
 80101fc:	4013      	ands	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	4313      	orrs	r3, r2
 8010208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010210:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	041b      	lsls	r3, r3, #16
 8010218:	693a      	ldr	r2, [r7, #16]
 801021a:	4313      	orrs	r3, r2
 801021c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a18      	ldr	r2, [pc, #96]	; (8010284 <TIM_OC5_SetConfig+0xb4>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d00f      	beq.n	8010246 <TIM_OC5_SetConfig+0x76>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4a17      	ldr	r2, [pc, #92]	; (8010288 <TIM_OC5_SetConfig+0xb8>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d00b      	beq.n	8010246 <TIM_OC5_SetConfig+0x76>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4a16      	ldr	r2, [pc, #88]	; (801028c <TIM_OC5_SetConfig+0xbc>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d007      	beq.n	8010246 <TIM_OC5_SetConfig+0x76>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4a15      	ldr	r2, [pc, #84]	; (8010290 <TIM_OC5_SetConfig+0xc0>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d003      	beq.n	8010246 <TIM_OC5_SetConfig+0x76>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4a14      	ldr	r2, [pc, #80]	; (8010294 <TIM_OC5_SetConfig+0xc4>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d109      	bne.n	801025a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801024c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	021b      	lsls	r3, r3, #8
 8010254:	697a      	ldr	r2, [r7, #20]
 8010256:	4313      	orrs	r3, r2
 8010258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68fa      	ldr	r2, [r7, #12]
 8010264:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	685a      	ldr	r2, [r3, #4]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	621a      	str	r2, [r3, #32]
}
 8010274:	bf00      	nop
 8010276:	371c      	adds	r7, #28
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	fffeff8f 	.word	0xfffeff8f
 8010284:	40010000 	.word	0x40010000
 8010288:	40010400 	.word	0x40010400
 801028c:	40014000 	.word	0x40014000
 8010290:	40014400 	.word	0x40014400
 8010294:	40014800 	.word	0x40014800

08010298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010298:	b480      	push	{r7}
 801029a:	b087      	sub	sp, #28
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6a1b      	ldr	r3, [r3, #32]
 80102b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	4b22      	ldr	r3, [pc, #136]	; (801034c <TIM_OC6_SetConfig+0xb4>)
 80102c4:	4013      	ands	r3, r2
 80102c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	021b      	lsls	r3, r3, #8
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	4313      	orrs	r3, r2
 80102d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80102da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	051b      	lsls	r3, r3, #20
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a19      	ldr	r2, [pc, #100]	; (8010350 <TIM_OC6_SetConfig+0xb8>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d00f      	beq.n	8010310 <TIM_OC6_SetConfig+0x78>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a18      	ldr	r2, [pc, #96]	; (8010354 <TIM_OC6_SetConfig+0xbc>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d00b      	beq.n	8010310 <TIM_OC6_SetConfig+0x78>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4a17      	ldr	r2, [pc, #92]	; (8010358 <TIM_OC6_SetConfig+0xc0>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d007      	beq.n	8010310 <TIM_OC6_SetConfig+0x78>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4a16      	ldr	r2, [pc, #88]	; (801035c <TIM_OC6_SetConfig+0xc4>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d003      	beq.n	8010310 <TIM_OC6_SetConfig+0x78>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4a15      	ldr	r2, [pc, #84]	; (8010360 <TIM_OC6_SetConfig+0xc8>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d109      	bne.n	8010324 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	695b      	ldr	r3, [r3, #20]
 801031c:	029b      	lsls	r3, r3, #10
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	4313      	orrs	r3, r2
 8010322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	685a      	ldr	r2, [r3, #4]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	693a      	ldr	r2, [r7, #16]
 801033c:	621a      	str	r2, [r3, #32]
}
 801033e:	bf00      	nop
 8010340:	371c      	adds	r7, #28
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	feff8fff 	.word	0xfeff8fff
 8010350:	40010000 	.word	0x40010000
 8010354:	40010400 	.word	0x40010400
 8010358:	40014000 	.word	0x40014000
 801035c:	40014400 	.word	0x40014400
 8010360:	40014800 	.word	0x40014800

08010364 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b086      	sub	sp, #24
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	4b65      	ldr	r3, [pc, #404]	; (8010514 <TIM_SlaveTimer_SetConfig+0x1b0>)
 801037e:	4013      	ands	r3, r2
 8010380:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	4313      	orrs	r3, r2
 801038a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	4b62      	ldr	r3, [pc, #392]	; (8010518 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010390:	4013      	ands	r3, r2
 8010392:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	4313      	orrs	r3, r2
 801039c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	693a      	ldr	r2, [r7, #16]
 80103a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	4a5c      	ldr	r2, [pc, #368]	; (801051c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	f000 80ab 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103b2:	4a5a      	ldr	r2, [pc, #360]	; (801051c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	f200 80a4 	bhi.w	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 80103ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103be:	f000 80a3 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103c6:	f200 809c 	bhi.w	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 80103ca:	4a55      	ldr	r2, [pc, #340]	; (8010520 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	f000 809b 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103d2:	4a53      	ldr	r2, [pc, #332]	; (8010520 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	f200 8094 	bhi.w	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 80103da:	4a52      	ldr	r2, [pc, #328]	; (8010524 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	f000 8093 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103e2:	4a50      	ldr	r2, [pc, #320]	; (8010524 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	f200 808c 	bhi.w	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 80103ea:	4a4f      	ldr	r2, [pc, #316]	; (8010528 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	f000 808b 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 80103f2:	4a4d      	ldr	r2, [pc, #308]	; (8010528 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	f200 8084 	bhi.w	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 80103fa:	4a4c      	ldr	r2, [pc, #304]	; (801052c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	f000 8083 	beq.w	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010402:	4a4a      	ldr	r2, [pc, #296]	; (801052c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d87c      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010408:	4a49      	ldr	r2, [pc, #292]	; (8010530 <TIM_SlaveTimer_SetConfig+0x1cc>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d07c      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 801040e:	4a48      	ldr	r2, [pc, #288]	; (8010530 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d876      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010414:	4a47      	ldr	r2, [pc, #284]	; (8010534 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d076      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 801041a:	4a46      	ldr	r2, [pc, #280]	; (8010534 <TIM_SlaveTimer_SetConfig+0x1d0>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d870      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010424:	d070      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010426:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801042a:	d86a      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 801042c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010430:	d06a      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010436:	d864      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010438:	2b70      	cmp	r3, #112	; 0x70
 801043a:	d01a      	beq.n	8010472 <TIM_SlaveTimer_SetConfig+0x10e>
 801043c:	2b70      	cmp	r3, #112	; 0x70
 801043e:	d860      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010440:	2b60      	cmp	r3, #96	; 0x60
 8010442:	d054      	beq.n	80104ee <TIM_SlaveTimer_SetConfig+0x18a>
 8010444:	2b60      	cmp	r3, #96	; 0x60
 8010446:	d85c      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010448:	2b50      	cmp	r3, #80	; 0x50
 801044a:	d046      	beq.n	80104da <TIM_SlaveTimer_SetConfig+0x176>
 801044c:	2b50      	cmp	r3, #80	; 0x50
 801044e:	d858      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010450:	2b40      	cmp	r3, #64	; 0x40
 8010452:	d019      	beq.n	8010488 <TIM_SlaveTimer_SetConfig+0x124>
 8010454:	2b40      	cmp	r3, #64	; 0x40
 8010456:	d854      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010458:	2b30      	cmp	r3, #48	; 0x30
 801045a:	d055      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 801045c:	2b30      	cmp	r3, #48	; 0x30
 801045e:	d850      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010460:	2b20      	cmp	r3, #32
 8010462:	d051      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010464:	2b20      	cmp	r3, #32
 8010466:	d84c      	bhi.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
 8010468:	2b00      	cmp	r3, #0
 801046a:	d04d      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 801046c:	2b10      	cmp	r3, #16
 801046e:	d04b      	beq.n	8010508 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010470:	e047      	b.n	8010502 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010482:	f000 f9e2 	bl	801084a <TIM_ETR_SetConfig>
      break;
 8010486:	e040      	b.n	801050a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b05      	cmp	r3, #5
 801048e:	d101      	bne.n	8010494 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8010490:	2301      	movs	r3, #1
 8010492:	e03b      	b.n	801050c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	6a1a      	ldr	r2, [r3, #32]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f022 0201 	bic.w	r2, r2, #1
 80104aa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80104ba:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	691b      	ldr	r3, [r3, #16]
 80104c0:	011b      	lsls	r3, r3, #4
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68ba      	ldr	r2, [r7, #8]
 80104ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	621a      	str	r2, [r3, #32]
      break;
 80104d8:	e017      	b.n	801050a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104e6:	461a      	mov	r2, r3
 80104e8:	f000 f89a 	bl	8010620 <TIM_TI1_ConfigInputStage>
      break;
 80104ec:	e00d      	b.n	801050a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80104fa:	461a      	mov	r2, r3
 80104fc:	f000 f8fc 	bl	80106f8 <TIM_TI2_ConfigInputStage>
      break;
 8010500:	e003      	b.n	801050a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	75fb      	strb	r3, [r7, #23]
      break;
 8010506:	e000      	b.n	801050a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010508:	bf00      	nop
  }

  return status;
 801050a:	7dfb      	ldrb	r3, [r7, #23]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3718      	adds	r7, #24
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	ffcfff8f 	.word	0xffcfff8f
 8010518:	fffefff8 	.word	0xfffefff8
 801051c:	00200010 	.word	0x00200010
 8010520:	00100070 	.word	0x00100070
 8010524:	00100060 	.word	0x00100060
 8010528:	00100050 	.word	0x00100050
 801052c:	00100040 	.word	0x00100040
 8010530:	00100030 	.word	0x00100030
 8010534:	00100020 	.word	0x00100020

08010538 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010538:	b480      	push	{r7}
 801053a:	b087      	sub	sp, #28
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	f023 0201 	bic.w	r2, r3, #1
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	699b      	ldr	r3, [r3, #24]
 8010556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6a1b      	ldr	r3, [r3, #32]
 801055c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	4a28      	ldr	r2, [pc, #160]	; (8010604 <TIM_TI1_SetConfig+0xcc>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d01b      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801056c:	d017      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	4a25      	ldr	r2, [pc, #148]	; (8010608 <TIM_TI1_SetConfig+0xd0>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d013      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	4a24      	ldr	r2, [pc, #144]	; (801060c <TIM_TI1_SetConfig+0xd4>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d00f      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	4a23      	ldr	r2, [pc, #140]	; (8010610 <TIM_TI1_SetConfig+0xd8>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d00b      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4a22      	ldr	r2, [pc, #136]	; (8010614 <TIM_TI1_SetConfig+0xdc>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d007      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	4a21      	ldr	r2, [pc, #132]	; (8010618 <TIM_TI1_SetConfig+0xe0>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d003      	beq.n	801059e <TIM_TI1_SetConfig+0x66>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	4a20      	ldr	r2, [pc, #128]	; (801061c <TIM_TI1_SetConfig+0xe4>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d101      	bne.n	80105a2 <TIM_TI1_SetConfig+0x6a>
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <TIM_TI1_SetConfig+0x6c>
 80105a2:	2300      	movs	r3, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d008      	beq.n	80105ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 0303 	bic.w	r3, r3, #3
 80105ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	4313      	orrs	r3, r2
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	e003      	b.n	80105c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f043 0301 	orr.w	r3, r3, #1
 80105c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80105c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	011b      	lsls	r3, r3, #4
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	697a      	ldr	r2, [r7, #20]
 80105d2:	4313      	orrs	r3, r2
 80105d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	f023 030a 	bic.w	r3, r3, #10
 80105dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	f003 030a 	and.w	r3, r3, #10
 80105e4:	693a      	ldr	r2, [r7, #16]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	621a      	str	r2, [r3, #32]
}
 80105f6:	bf00      	nop
 80105f8:	371c      	adds	r7, #28
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	40010000 	.word	0x40010000
 8010608:	40000400 	.word	0x40000400
 801060c:	40000800 	.word	0x40000800
 8010610:	40000c00 	.word	0x40000c00
 8010614:	40010400 	.word	0x40010400
 8010618:	40001800 	.word	0x40001800
 801061c:	40014000 	.word	0x40014000

08010620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010620:	b480      	push	{r7}
 8010622:	b087      	sub	sp, #28
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6a1b      	ldr	r3, [r3, #32]
 8010630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	f023 0201 	bic.w	r2, r3, #1
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801064a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	011b      	lsls	r3, r3, #4
 8010650:	693a      	ldr	r2, [r7, #16]
 8010652:	4313      	orrs	r3, r2
 8010654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	f023 030a 	bic.w	r3, r3, #10
 801065c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	4313      	orrs	r3, r2
 8010664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	693a      	ldr	r2, [r7, #16]
 801066a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	621a      	str	r2, [r3, #32]
}
 8010672:	bf00      	nop
 8010674:	371c      	adds	r7, #28
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801067e:	b480      	push	{r7}
 8010680:	b087      	sub	sp, #28
 8010682:	af00      	add	r7, sp, #0
 8010684:	60f8      	str	r0, [r7, #12]
 8010686:	60b9      	str	r1, [r7, #8]
 8010688:	607a      	str	r2, [r7, #4]
 801068a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6a1b      	ldr	r3, [r3, #32]
 8010690:	f023 0210 	bic.w	r2, r3, #16
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	021b      	lsls	r3, r3, #8
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	4313      	orrs	r3, r2
 80106b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	031b      	lsls	r3, r3, #12
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80106d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	011b      	lsls	r3, r3, #4
 80106d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80106da:	693a      	ldr	r2, [r7, #16]
 80106dc:	4313      	orrs	r3, r2
 80106de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	693a      	ldr	r2, [r7, #16]
 80106ea:	621a      	str	r2, [r3, #32]
}
 80106ec:	bf00      	nop
 80106ee:	371c      	adds	r7, #28
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b087      	sub	sp, #28
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6a1b      	ldr	r3, [r3, #32]
 8010708:	f023 0210 	bic.w	r2, r3, #16
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	699b      	ldr	r3, [r3, #24]
 8010714:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010722:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	031b      	lsls	r3, r3, #12
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	011b      	lsls	r3, r3, #4
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	4313      	orrs	r3, r2
 801073e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	621a      	str	r2, [r3, #32]
}
 801074c:	bf00      	nop
 801074e:	371c      	adds	r7, #28
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010758:	b480      	push	{r7}
 801075a:	b087      	sub	sp, #28
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
 8010764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6a1b      	ldr	r3, [r3, #32]
 801076a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	69db      	ldr	r3, [r3, #28]
 8010776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6a1b      	ldr	r3, [r3, #32]
 801077c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	f023 0303 	bic.w	r3, r3, #3
 8010784:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4313      	orrs	r3, r2
 801078c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010794:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	011b      	lsls	r3, r3, #4
 801079a:	b2db      	uxtb	r3, r3
 801079c:	697a      	ldr	r2, [r7, #20]
 801079e:	4313      	orrs	r3, r2
 80107a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80107a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	021b      	lsls	r3, r3, #8
 80107ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80107b2:	693a      	ldr	r2, [r7, #16]
 80107b4:	4313      	orrs	r3, r2
 80107b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	621a      	str	r2, [r3, #32]
}
 80107c4:	bf00      	nop
 80107c6:	371c      	adds	r7, #28
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b087      	sub	sp, #28
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
 80107dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6a1b      	ldr	r3, [r3, #32]
 80107e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6a1b      	ldr	r3, [r3, #32]
 80107f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	021b      	lsls	r3, r3, #8
 8010802:	697a      	ldr	r2, [r7, #20]
 8010804:	4313      	orrs	r3, r2
 8010806:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801080e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	031b      	lsls	r3, r3, #12
 8010814:	b29b      	uxth	r3, r3
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	4313      	orrs	r3, r2
 801081a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010822:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	031b      	lsls	r3, r3, #12
 8010828:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801082c:	693a      	ldr	r2, [r7, #16]
 801082e:	4313      	orrs	r3, r2
 8010830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	693a      	ldr	r2, [r7, #16]
 801083c:	621a      	str	r2, [r3, #32]
}
 801083e:	bf00      	nop
 8010840:	371c      	adds	r7, #28
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801084a:	b480      	push	{r7}
 801084c:	b087      	sub	sp, #28
 801084e:	af00      	add	r7, sp, #0
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	60b9      	str	r1, [r7, #8]
 8010854:	607a      	str	r2, [r7, #4]
 8010856:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010864:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	021a      	lsls	r2, r3, #8
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	431a      	orrs	r2, r3
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	4313      	orrs	r3, r2
 8010872:	697a      	ldr	r2, [r7, #20]
 8010874:	4313      	orrs	r3, r2
 8010876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	609a      	str	r2, [r3, #8]
}
 801087e:	bf00      	nop
 8010880:	371c      	adds	r7, #28
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
	...

0801088c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801089c:	2b01      	cmp	r3, #1
 801089e:	d101      	bne.n	80108a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108a0:	2302      	movs	r3, #2
 80108a2:	e06d      	b.n	8010980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2202      	movs	r2, #2
 80108b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a30      	ldr	r2, [pc, #192]	; (801098c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d004      	beq.n	80108d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a2f      	ldr	r2, [pc, #188]	; (8010990 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d108      	bne.n	80108ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80108de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4a20      	ldr	r2, [pc, #128]	; (801098c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d022      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010916:	d01d      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a1d      	ldr	r2, [pc, #116]	; (8010994 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d018      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a1c      	ldr	r2, [pc, #112]	; (8010998 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d013      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a1a      	ldr	r2, [pc, #104]	; (801099c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d00e      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a15      	ldr	r2, [pc, #84]	; (8010990 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d009      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a16      	ldr	r2, [pc, #88]	; (80109a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d004      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a15      	ldr	r2, [pc, #84]	; (80109a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d10c      	bne.n	801096e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801095a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	4313      	orrs	r3, r2
 8010964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2201      	movs	r2, #1
 8010972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr
 801098c:	40010000 	.word	0x40010000
 8010990:	40010400 	.word	0x40010400
 8010994:	40000400 	.word	0x40000400
 8010998:	40000800 	.word	0x40000800
 801099c:	40000c00 	.word	0x40000c00
 80109a0:	40001800 	.word	0x40001800
 80109a4:	40014000 	.word	0x40014000

080109a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80109b0:	bf00      	nop
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109c4:	bf00      	nop
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80109d8:	bf00      	nop
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109f2:	2301      	movs	r3, #1
 80109f4:	e042      	b.n	8010a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7f4 f87b 	bl	8004b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2224      	movs	r2, #36	; 0x24
 8010a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f022 0201 	bic.w	r2, r2, #1
 8010a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fcd2 	bl	80113d0 <UART_SetConfig>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d101      	bne.n	8010a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010a32:	2301      	movs	r3, #1
 8010a34:	e022      	b.n	8010a7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f001 fa2e 	bl	8011ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	685a      	ldr	r2, [r3, #4]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f042 0201 	orr.w	r2, r2, #1
 8010a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f001 fab5 	bl	8011fe4 <UART_CheckIdleState>
 8010a7a:	4603      	mov	r3, r0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b08a      	sub	sp, #40	; 0x28
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a98:	2b20      	cmp	r3, #32
 8010a9a:	d167      	bne.n	8010b6c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d002      	beq.n	8010aa8 <HAL_UART_Transmit_DMA+0x24>
 8010aa2:	88fb      	ldrh	r3, [r7, #6]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d101      	bne.n	8010aac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e060      	b.n	8010b6e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	88fa      	ldrh	r2, [r7, #6]
 8010ab6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	88fa      	ldrh	r2, [r7, #6]
 8010abe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2221      	movs	r2, #33	; 0x21
 8010ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d028      	beq.n	8010b2c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ade:	4a26      	ldr	r2, [pc, #152]	; (8010b78 <HAL_UART_Transmit_DMA+0xf4>)
 8010ae0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ae6:	4a25      	ldr	r2, [pc, #148]	; (8010b7c <HAL_UART_Transmit_DMA+0xf8>)
 8010ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010aee:	4a24      	ldr	r2, [pc, #144]	; (8010b80 <HAL_UART_Transmit_DMA+0xfc>)
 8010af0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010af6:	2200      	movs	r2, #0
 8010af8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b02:	4619      	mov	r1, r3
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	3328      	adds	r3, #40	; 0x28
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	88fb      	ldrh	r3, [r7, #6]
 8010b0e:	f7f6 fddf 	bl	80076d0 <HAL_DMA_Start_IT>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d009      	beq.n	8010b2c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2210      	movs	r2, #16
 8010b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2220      	movs	r2, #32
 8010b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e020      	b.n	8010b6e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2240      	movs	r2, #64	; 0x40
 8010b32:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	3308      	adds	r3, #8
 8010b3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	e853 3f00 	ldrex	r3, [r3]
 8010b42:	613b      	str	r3, [r7, #16]
   return(result);
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3308      	adds	r3, #8
 8010b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b54:	623a      	str	r2, [r7, #32]
 8010b56:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	69f9      	ldr	r1, [r7, #28]
 8010b5a:	6a3a      	ldr	r2, [r7, #32]
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e5      	bne.n	8010b34 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e000      	b.n	8010b6e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010b6c:	2302      	movs	r3, #2
  }
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3728      	adds	r7, #40	; 0x28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	080124a5 	.word	0x080124a5
 8010b7c:	0801253b 	.word	0x0801253b
 8010b80:	080126bd 	.word	0x080126bd

08010b84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08a      	sub	sp, #40	; 0x28
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	4613      	mov	r3, r2
 8010b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b98:	2b20      	cmp	r3, #32
 8010b9a:	d137      	bne.n	8010c0c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <HAL_UART_Receive_DMA+0x24>
 8010ba2:	88fb      	ldrh	r3, [r7, #6]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d101      	bne.n	8010bac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	e030      	b.n	8010c0e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a18      	ldr	r2, [pc, #96]	; (8010c18 <HAL_UART_Receive_DMA+0x94>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d01f      	beq.n	8010bfc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d018      	beq.n	8010bfc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	e853 3f00 	ldrex	r3, [r3]
 8010bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010bde:	627b      	str	r3, [r7, #36]	; 0x24
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	461a      	mov	r2, r3
 8010be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be8:	623b      	str	r3, [r7, #32]
 8010bea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bec:	69f9      	ldr	r1, [r7, #28]
 8010bee:	6a3a      	ldr	r2, [r7, #32]
 8010bf0:	e841 2300 	strex	r3, r2, [r1]
 8010bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1e6      	bne.n	8010bca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010bfc:	88fb      	ldrh	r3, [r7, #6]
 8010bfe:	461a      	mov	r2, r3
 8010c00:	68b9      	ldr	r1, [r7, #8]
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f001 fb00 	bl	8012208 <UART_Start_Receive_DMA>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	e000      	b.n	8010c0e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010c0c:	2302      	movs	r3, #2
  }
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3728      	adds	r7, #40	; 0x28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	58000c00 	.word	0x58000c00

08010c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b0ba      	sub	sp, #232	; 0xe8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8010c4a:	4013      	ands	r3, r2
 8010c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d11b      	bne.n	8010c90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c5c:	f003 0320 	and.w	r3, r3, #32
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d015      	beq.n	8010c90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c68:	f003 0320 	and.w	r3, r3, #32
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d105      	bne.n	8010c7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d009      	beq.n	8010c90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 8377 	beq.w	8011374 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	4798      	blx	r3
      }
      return;
 8010c8e:	e371      	b.n	8011374 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 8123 	beq.w	8010ee0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010c9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c9e:	4b8d      	ldr	r3, [pc, #564]	; (8010ed4 <HAL_UART_IRQHandler+0x2b8>)
 8010ca0:	4013      	ands	r3, r2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010caa:	4b8b      	ldr	r3, [pc, #556]	; (8010ed8 <HAL_UART_IRQHandler+0x2bc>)
 8010cac:	4013      	ands	r3, r2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f000 8116 	beq.w	8010ee0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d011      	beq.n	8010ce4 <HAL_UART_IRQHandler+0xc8>
 8010cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00b      	beq.n	8010ce4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cda:	f043 0201 	orr.w	r2, r3, #1
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ce8:	f003 0302 	and.w	r3, r3, #2
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d011      	beq.n	8010d14 <HAL_UART_IRQHandler+0xf8>
 8010cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00b      	beq.n	8010d14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2202      	movs	r2, #2
 8010d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d0a:	f043 0204 	orr.w	r2, r3, #4
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d18:	f003 0304 	and.w	r3, r3, #4
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d011      	beq.n	8010d44 <HAL_UART_IRQHandler+0x128>
 8010d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00b      	beq.n	8010d44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2204      	movs	r2, #4
 8010d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d3a:	f043 0202 	orr.w	r2, r3, #2
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d48:	f003 0308 	and.w	r3, r3, #8
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d017      	beq.n	8010d80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d54:	f003 0320 	and.w	r3, r3, #32
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d105      	bne.n	8010d68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010d5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010d60:	4b5c      	ldr	r3, [pc, #368]	; (8010ed4 <HAL_UART_IRQHandler+0x2b8>)
 8010d62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00b      	beq.n	8010d80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2208      	movs	r2, #8
 8010d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d76:	f043 0208 	orr.w	r2, r3, #8
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d012      	beq.n	8010db2 <HAL_UART_IRQHandler+0x196>
 8010d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00c      	beq.n	8010db2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010da8:	f043 0220 	orr.w	r2, r3, #32
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 82dd 	beq.w	8011378 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dc2:	f003 0320 	and.w	r3, r3, #32
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d013      	beq.n	8010df2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dce:	f003 0320 	and.w	r3, r3, #32
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d105      	bne.n	8010de2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d007      	beq.n	8010df2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d003      	beq.n	8010df2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e06:	2b40      	cmp	r3, #64	; 0x40
 8010e08:	d005      	beq.n	8010e16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d054      	beq.n	8010ec0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 fade 	bl	80123d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	689b      	ldr	r3, [r3, #8]
 8010e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e26:	2b40      	cmp	r3, #64	; 0x40
 8010e28:	d146      	bne.n	8010eb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	3308      	adds	r3, #8
 8010e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e38:	e853 3f00 	ldrex	r3, [r3]
 8010e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	3308      	adds	r3, #8
 8010e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010e66:	e841 2300 	strex	r3, r2, [r1]
 8010e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d1d9      	bne.n	8010e2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d017      	beq.n	8010eb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e86:	4a15      	ldr	r2, [pc, #84]	; (8010edc <HAL_UART_IRQHandler+0x2c0>)
 8010e88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f7 f9a5 	bl	80081e0 <HAL_DMA_Abort_IT>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d019      	beq.n	8010ed0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010eaa:	4610      	mov	r0, r2
 8010eac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eae:	e00f      	b.n	8010ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7f2 fd75 	bl	80039a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eb6:	e00b      	b.n	8010ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7f2 fd71 	bl	80039a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ebe:	e007      	b.n	8010ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f7f2 fd6d 	bl	80039a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010ece:	e253      	b.n	8011378 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ed0:	bf00      	nop
    return;
 8010ed2:	e251      	b.n	8011378 <HAL_UART_IRQHandler+0x75c>
 8010ed4:	10000001 	.word	0x10000001
 8010ed8:	04000120 	.word	0x04000120
 8010edc:	0801273d 	.word	0x0801273d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	f040 81e7 	bne.w	80112b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eee:	f003 0310 	and.w	r3, r3, #16
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 81e0 	beq.w	80112b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010efc:	f003 0310 	and.w	r3, r3, #16
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 81d9 	beq.w	80112b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2210      	movs	r2, #16
 8010f0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f18:	2b40      	cmp	r3, #64	; 0x40
 8010f1a:	f040 8151 	bne.w	80111c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4a96      	ldr	r2, [pc, #600]	; (8011180 <HAL_UART_IRQHandler+0x564>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d068      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a93      	ldr	r2, [pc, #588]	; (8011184 <HAL_UART_IRQHandler+0x568>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d061      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a91      	ldr	r2, [pc, #580]	; (8011188 <HAL_UART_IRQHandler+0x56c>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d05a      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4a8e      	ldr	r2, [pc, #568]	; (801118c <HAL_UART_IRQHandler+0x570>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d053      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a8c      	ldr	r2, [pc, #560]	; (8011190 <HAL_UART_IRQHandler+0x574>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d04c      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a89      	ldr	r2, [pc, #548]	; (8011194 <HAL_UART_IRQHandler+0x578>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d045      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	4a87      	ldr	r2, [pc, #540]	; (8011198 <HAL_UART_IRQHandler+0x57c>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d03e      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4a84      	ldr	r2, [pc, #528]	; (801119c <HAL_UART_IRQHandler+0x580>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d037      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a82      	ldr	r2, [pc, #520]	; (80111a0 <HAL_UART_IRQHandler+0x584>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d030      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a7f      	ldr	r2, [pc, #508]	; (80111a4 <HAL_UART_IRQHandler+0x588>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d029      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4a7d      	ldr	r2, [pc, #500]	; (80111a8 <HAL_UART_IRQHandler+0x58c>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d022      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a7a      	ldr	r2, [pc, #488]	; (80111ac <HAL_UART_IRQHandler+0x590>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d01b      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a78      	ldr	r2, [pc, #480]	; (80111b0 <HAL_UART_IRQHandler+0x594>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d014      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a75      	ldr	r2, [pc, #468]	; (80111b4 <HAL_UART_IRQHandler+0x598>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d00d      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4a73      	ldr	r2, [pc, #460]	; (80111b8 <HAL_UART_IRQHandler+0x59c>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d006      	beq.n	8010ffe <HAL_UART_IRQHandler+0x3e2>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a70      	ldr	r2, [pc, #448]	; (80111bc <HAL_UART_IRQHandler+0x5a0>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d106      	bne.n	801100c <HAL_UART_IRQHandler+0x3f0>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	b29b      	uxth	r3, r3
 801100a:	e005      	b.n	8011018 <HAL_UART_IRQHandler+0x3fc>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	b29b      	uxth	r3, r3
 8011018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801101c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 81ab 	beq.w	801137c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801102c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011030:	429a      	cmp	r2, r3
 8011032:	f080 81a3 	bcs.w	801137c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801103c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011046:	69db      	ldr	r3, [r3, #28]
 8011048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801104c:	f000 8087 	beq.w	801115e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801105c:	e853 3f00 	ldrex	r3, [r3]
 8011060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801106c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	461a      	mov	r2, r3
 8011076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801107a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801107e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801108a:	e841 2300 	strex	r3, r2, [r1]
 801108e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d1da      	bne.n	8011050 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	3308      	adds	r3, #8
 80110a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110a4:	e853 3f00 	ldrex	r3, [r3]
 80110a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80110aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110ac:	f023 0301 	bic.w	r3, r3, #1
 80110b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	3308      	adds	r3, #8
 80110ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80110be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80110c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80110c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80110ca:	e841 2300 	strex	r3, r2, [r1]
 80110ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80110d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1e1      	bne.n	801109a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3308      	adds	r3, #8
 80110dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110e0:	e853 3f00 	ldrex	r3, [r3]
 80110e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80110e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	3308      	adds	r3, #8
 80110f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80110fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80110fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011102:	e841 2300 	strex	r3, r2, [r1]
 8011106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1e3      	bne.n	80110d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2220      	movs	r2, #32
 8011112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011124:	e853 3f00 	ldrex	r3, [r3]
 8011128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801112a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801112c:	f023 0310 	bic.w	r3, r3, #16
 8011130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	461a      	mov	r2, r3
 801113a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801113e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011140:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011146:	e841 2300 	strex	r3, r2, [r1]
 801114a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801114c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114e:	2b00      	cmp	r3, #0
 8011150:	d1e4      	bne.n	801111c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011158:	4618      	mov	r0, r3
 801115a:	f7f6 fd23 	bl	8007ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2202      	movs	r2, #2
 8011162:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011170:	b29b      	uxth	r3, r3
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	b29b      	uxth	r3, r3
 8011176:	4619      	mov	r1, r3
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 f91d 	bl	80113b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801117e:	e0fd      	b.n	801137c <HAL_UART_IRQHandler+0x760>
 8011180:	40020010 	.word	0x40020010
 8011184:	40020028 	.word	0x40020028
 8011188:	40020040 	.word	0x40020040
 801118c:	40020058 	.word	0x40020058
 8011190:	40020070 	.word	0x40020070
 8011194:	40020088 	.word	0x40020088
 8011198:	400200a0 	.word	0x400200a0
 801119c:	400200b8 	.word	0x400200b8
 80111a0:	40020410 	.word	0x40020410
 80111a4:	40020428 	.word	0x40020428
 80111a8:	40020440 	.word	0x40020440
 80111ac:	40020458 	.word	0x40020458
 80111b0:	40020470 	.word	0x40020470
 80111b4:	40020488 	.word	0x40020488
 80111b8:	400204a0 	.word	0x400204a0
 80111bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111da:	b29b      	uxth	r3, r3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 80cf 	beq.w	8011380 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80111e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 80ca 	beq.w	8011380 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f4:	e853 3f00 	ldrex	r3, [r3]
 80111f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80111fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	461a      	mov	r2, r3
 801120a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801120e:	647b      	str	r3, [r7, #68]	; 0x44
 8011210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011216:	e841 2300 	strex	r3, r2, [r1]
 801121a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1e4      	bne.n	80111ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	3308      	adds	r3, #8
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122c:	e853 3f00 	ldrex	r3, [r3]
 8011230:	623b      	str	r3, [r7, #32]
   return(result);
 8011232:	6a3a      	ldr	r2, [r7, #32]
 8011234:	4b55      	ldr	r3, [pc, #340]	; (801138c <HAL_UART_IRQHandler+0x770>)
 8011236:	4013      	ands	r3, r2
 8011238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3308      	adds	r3, #8
 8011242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011246:	633a      	str	r2, [r7, #48]	; 0x30
 8011248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801124a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801124c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801124e:	e841 2300 	strex	r3, r2, [r1]
 8011252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	2b00      	cmp	r3, #0
 8011258:	d1e3      	bne.n	8011222 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2220      	movs	r2, #32
 801125e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2200      	movs	r2, #0
 801126c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	e853 3f00 	ldrex	r3, [r3]
 801127a:	60fb      	str	r3, [r7, #12]
   return(result);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f023 0310 	bic.w	r3, r3, #16
 8011282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	461a      	mov	r2, r3
 801128c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011290:	61fb      	str	r3, [r7, #28]
 8011292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011294:	69b9      	ldr	r1, [r7, #24]
 8011296:	69fa      	ldr	r2, [r7, #28]
 8011298:	e841 2300 	strex	r3, r2, [r1]
 801129c:	617b      	str	r3, [r7, #20]
   return(result);
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d1e4      	bne.n	801126e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2202      	movs	r2, #2
 80112a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80112aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80112ae:	4619      	mov	r1, r3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 f881 	bl	80113b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80112b6:	e063      	b.n	8011380 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80112b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00e      	beq.n	80112e2 <HAL_UART_IRQHandler+0x6c6>
 80112c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80112c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d008      	beq.n	80112e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80112d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f001 fa6f 	bl	80127be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112e0:	e051      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80112e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d014      	beq.n	8011318 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80112ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d105      	bne.n	8011306 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80112fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80112fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011302:	2b00      	cmp	r3, #0
 8011304:	d008      	beq.n	8011318 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801130a:	2b00      	cmp	r3, #0
 801130c:	d03a      	beq.n	8011384 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	4798      	blx	r3
    }
    return;
 8011316:	e035      	b.n	8011384 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011320:	2b00      	cmp	r3, #0
 8011322:	d009      	beq.n	8011338 <HAL_UART_IRQHandler+0x71c>
 8011324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801132c:	2b00      	cmp	r3, #0
 801132e:	d003      	beq.n	8011338 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f001 fa19 	bl	8012768 <UART_EndTransmit_IT>
    return;
 8011336:	e026      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801133c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011340:	2b00      	cmp	r3, #0
 8011342:	d009      	beq.n	8011358 <HAL_UART_IRQHandler+0x73c>
 8011344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011348:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801134c:	2b00      	cmp	r3, #0
 801134e:	d003      	beq.n	8011358 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f001 fa48 	bl	80127e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011356:	e016      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801135c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011360:	2b00      	cmp	r3, #0
 8011362:	d010      	beq.n	8011386 <HAL_UART_IRQHandler+0x76a>
 8011364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011368:	2b00      	cmp	r3, #0
 801136a:	da0c      	bge.n	8011386 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f001 fa30 	bl	80127d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011372:	e008      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
      return;
 8011374:	bf00      	nop
 8011376:	e006      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
    return;
 8011378:	bf00      	nop
 801137a:	e004      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
      return;
 801137c:	bf00      	nop
 801137e:	e002      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
      return;
 8011380:	bf00      	nop
 8011382:	e000      	b.n	8011386 <HAL_UART_IRQHandler+0x76a>
    return;
 8011384:	bf00      	nop
  }
}
 8011386:	37e8      	adds	r7, #232	; 0xe8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	effffffe 	.word	0xeffffffe

08011390 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011398:	bf00      	nop
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80113ac:	bf00      	nop
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	460b      	mov	r3, r1
 80113c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80113d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113d4:	b092      	sub	sp, #72	; 0x48
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	689a      	ldr	r2, [r3, #8]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	691b      	ldr	r3, [r3, #16]
 80113e8:	431a      	orrs	r2, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	695b      	ldr	r3, [r3, #20]
 80113ee:	431a      	orrs	r2, r3
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	69db      	ldr	r3, [r3, #28]
 80113f4:	4313      	orrs	r3, r2
 80113f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	4bbe      	ldr	r3, [pc, #760]	; (80116f8 <UART_SetConfig+0x328>)
 8011400:	4013      	ands	r3, r2
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	6812      	ldr	r2, [r2, #0]
 8011406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011408:	430b      	orrs	r3, r1
 801140a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	68da      	ldr	r2, [r3, #12]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	430a      	orrs	r2, r1
 8011420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	699b      	ldr	r3, [r3, #24]
 8011426:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4ab3      	ldr	r2, [pc, #716]	; (80116fc <UART_SetConfig+0x32c>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d004      	beq.n	801143c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	6a1b      	ldr	r3, [r3, #32]
 8011436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011438:	4313      	orrs	r3, r2
 801143a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	689a      	ldr	r2, [r3, #8]
 8011442:	4baf      	ldr	r3, [pc, #700]	; (8011700 <UART_SetConfig+0x330>)
 8011444:	4013      	ands	r3, r2
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	6812      	ldr	r2, [r2, #0]
 801144a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801144c:	430b      	orrs	r3, r1
 801144e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011456:	f023 010f 	bic.w	r1, r3, #15
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	430a      	orrs	r2, r1
 8011464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4aa6      	ldr	r2, [pc, #664]	; (8011704 <UART_SetConfig+0x334>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d177      	bne.n	8011560 <UART_SetConfig+0x190>
 8011470:	4ba5      	ldr	r3, [pc, #660]	; (8011708 <UART_SetConfig+0x338>)
 8011472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011478:	2b28      	cmp	r3, #40	; 0x28
 801147a:	d86d      	bhi.n	8011558 <UART_SetConfig+0x188>
 801147c:	a201      	add	r2, pc, #4	; (adr r2, 8011484 <UART_SetConfig+0xb4>)
 801147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011482:	bf00      	nop
 8011484:	08011529 	.word	0x08011529
 8011488:	08011559 	.word	0x08011559
 801148c:	08011559 	.word	0x08011559
 8011490:	08011559 	.word	0x08011559
 8011494:	08011559 	.word	0x08011559
 8011498:	08011559 	.word	0x08011559
 801149c:	08011559 	.word	0x08011559
 80114a0:	08011559 	.word	0x08011559
 80114a4:	08011531 	.word	0x08011531
 80114a8:	08011559 	.word	0x08011559
 80114ac:	08011559 	.word	0x08011559
 80114b0:	08011559 	.word	0x08011559
 80114b4:	08011559 	.word	0x08011559
 80114b8:	08011559 	.word	0x08011559
 80114bc:	08011559 	.word	0x08011559
 80114c0:	08011559 	.word	0x08011559
 80114c4:	08011539 	.word	0x08011539
 80114c8:	08011559 	.word	0x08011559
 80114cc:	08011559 	.word	0x08011559
 80114d0:	08011559 	.word	0x08011559
 80114d4:	08011559 	.word	0x08011559
 80114d8:	08011559 	.word	0x08011559
 80114dc:	08011559 	.word	0x08011559
 80114e0:	08011559 	.word	0x08011559
 80114e4:	08011541 	.word	0x08011541
 80114e8:	08011559 	.word	0x08011559
 80114ec:	08011559 	.word	0x08011559
 80114f0:	08011559 	.word	0x08011559
 80114f4:	08011559 	.word	0x08011559
 80114f8:	08011559 	.word	0x08011559
 80114fc:	08011559 	.word	0x08011559
 8011500:	08011559 	.word	0x08011559
 8011504:	08011549 	.word	0x08011549
 8011508:	08011559 	.word	0x08011559
 801150c:	08011559 	.word	0x08011559
 8011510:	08011559 	.word	0x08011559
 8011514:	08011559 	.word	0x08011559
 8011518:	08011559 	.word	0x08011559
 801151c:	08011559 	.word	0x08011559
 8011520:	08011559 	.word	0x08011559
 8011524:	08011551 	.word	0x08011551
 8011528:	2301      	movs	r3, #1
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152e:	e222      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011530:	2304      	movs	r3, #4
 8011532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011536:	e21e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011538:	2308      	movs	r3, #8
 801153a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153e:	e21a      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011540:	2310      	movs	r3, #16
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e216      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011548:	2320      	movs	r3, #32
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e212      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011550:	2340      	movs	r3, #64	; 0x40
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e20e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011558:	2380      	movs	r3, #128	; 0x80
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e20a      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	4a69      	ldr	r2, [pc, #420]	; (801170c <UART_SetConfig+0x33c>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d130      	bne.n	80115cc <UART_SetConfig+0x1fc>
 801156a:	4b67      	ldr	r3, [pc, #412]	; (8011708 <UART_SetConfig+0x338>)
 801156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801156e:	f003 0307 	and.w	r3, r3, #7
 8011572:	2b05      	cmp	r3, #5
 8011574:	d826      	bhi.n	80115c4 <UART_SetConfig+0x1f4>
 8011576:	a201      	add	r2, pc, #4	; (adr r2, 801157c <UART_SetConfig+0x1ac>)
 8011578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157c:	08011595 	.word	0x08011595
 8011580:	0801159d 	.word	0x0801159d
 8011584:	080115a5 	.word	0x080115a5
 8011588:	080115ad 	.word	0x080115ad
 801158c:	080115b5 	.word	0x080115b5
 8011590:	080115bd 	.word	0x080115bd
 8011594:	2300      	movs	r3, #0
 8011596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159a:	e1ec      	b.n	8011976 <UART_SetConfig+0x5a6>
 801159c:	2304      	movs	r3, #4
 801159e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a2:	e1e8      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115a4:	2308      	movs	r3, #8
 80115a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115aa:	e1e4      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115ac:	2310      	movs	r3, #16
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e1e0      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115b4:	2320      	movs	r3, #32
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e1dc      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115bc:	2340      	movs	r3, #64	; 0x40
 80115be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c2:	e1d8      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115c4:	2380      	movs	r3, #128	; 0x80
 80115c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ca:	e1d4      	b.n	8011976 <UART_SetConfig+0x5a6>
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4a4f      	ldr	r2, [pc, #316]	; (8011710 <UART_SetConfig+0x340>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d130      	bne.n	8011638 <UART_SetConfig+0x268>
 80115d6:	4b4c      	ldr	r3, [pc, #304]	; (8011708 <UART_SetConfig+0x338>)
 80115d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115da:	f003 0307 	and.w	r3, r3, #7
 80115de:	2b05      	cmp	r3, #5
 80115e0:	d826      	bhi.n	8011630 <UART_SetConfig+0x260>
 80115e2:	a201      	add	r2, pc, #4	; (adr r2, 80115e8 <UART_SetConfig+0x218>)
 80115e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e8:	08011601 	.word	0x08011601
 80115ec:	08011609 	.word	0x08011609
 80115f0:	08011611 	.word	0x08011611
 80115f4:	08011619 	.word	0x08011619
 80115f8:	08011621 	.word	0x08011621
 80115fc:	08011629 	.word	0x08011629
 8011600:	2300      	movs	r3, #0
 8011602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011606:	e1b6      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011608:	2304      	movs	r3, #4
 801160a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160e:	e1b2      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011610:	2308      	movs	r3, #8
 8011612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011616:	e1ae      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011618:	2310      	movs	r3, #16
 801161a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161e:	e1aa      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011620:	2320      	movs	r3, #32
 8011622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011626:	e1a6      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011628:	2340      	movs	r3, #64	; 0x40
 801162a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162e:	e1a2      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011630:	2380      	movs	r3, #128	; 0x80
 8011632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011636:	e19e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4a35      	ldr	r2, [pc, #212]	; (8011714 <UART_SetConfig+0x344>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d130      	bne.n	80116a4 <UART_SetConfig+0x2d4>
 8011642:	4b31      	ldr	r3, [pc, #196]	; (8011708 <UART_SetConfig+0x338>)
 8011644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011646:	f003 0307 	and.w	r3, r3, #7
 801164a:	2b05      	cmp	r3, #5
 801164c:	d826      	bhi.n	801169c <UART_SetConfig+0x2cc>
 801164e:	a201      	add	r2, pc, #4	; (adr r2, 8011654 <UART_SetConfig+0x284>)
 8011650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011654:	0801166d 	.word	0x0801166d
 8011658:	08011675 	.word	0x08011675
 801165c:	0801167d 	.word	0x0801167d
 8011660:	08011685 	.word	0x08011685
 8011664:	0801168d 	.word	0x0801168d
 8011668:	08011695 	.word	0x08011695
 801166c:	2300      	movs	r3, #0
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e180      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011674:	2304      	movs	r3, #4
 8011676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167a:	e17c      	b.n	8011976 <UART_SetConfig+0x5a6>
 801167c:	2308      	movs	r3, #8
 801167e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011682:	e178      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011684:	2310      	movs	r3, #16
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e174      	b.n	8011976 <UART_SetConfig+0x5a6>
 801168c:	2320      	movs	r3, #32
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e170      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011694:	2340      	movs	r3, #64	; 0x40
 8011696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169a:	e16c      	b.n	8011976 <UART_SetConfig+0x5a6>
 801169c:	2380      	movs	r3, #128	; 0x80
 801169e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a2:	e168      	b.n	8011976 <UART_SetConfig+0x5a6>
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	4a1b      	ldr	r2, [pc, #108]	; (8011718 <UART_SetConfig+0x348>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d142      	bne.n	8011734 <UART_SetConfig+0x364>
 80116ae:	4b16      	ldr	r3, [pc, #88]	; (8011708 <UART_SetConfig+0x338>)
 80116b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116b2:	f003 0307 	and.w	r3, r3, #7
 80116b6:	2b05      	cmp	r3, #5
 80116b8:	d838      	bhi.n	801172c <UART_SetConfig+0x35c>
 80116ba:	a201      	add	r2, pc, #4	; (adr r2, 80116c0 <UART_SetConfig+0x2f0>)
 80116bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c0:	080116d9 	.word	0x080116d9
 80116c4:	080116e1 	.word	0x080116e1
 80116c8:	080116e9 	.word	0x080116e9
 80116cc:	080116f1 	.word	0x080116f1
 80116d0:	0801171d 	.word	0x0801171d
 80116d4:	08011725 	.word	0x08011725
 80116d8:	2300      	movs	r3, #0
 80116da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116de:	e14a      	b.n	8011976 <UART_SetConfig+0x5a6>
 80116e0:	2304      	movs	r3, #4
 80116e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116e6:	e146      	b.n	8011976 <UART_SetConfig+0x5a6>
 80116e8:	2308      	movs	r3, #8
 80116ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ee:	e142      	b.n	8011976 <UART_SetConfig+0x5a6>
 80116f0:	2310      	movs	r3, #16
 80116f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f6:	e13e      	b.n	8011976 <UART_SetConfig+0x5a6>
 80116f8:	cfff69f3 	.word	0xcfff69f3
 80116fc:	58000c00 	.word	0x58000c00
 8011700:	11fff4ff 	.word	0x11fff4ff
 8011704:	40011000 	.word	0x40011000
 8011708:	58024400 	.word	0x58024400
 801170c:	40004400 	.word	0x40004400
 8011710:	40004800 	.word	0x40004800
 8011714:	40004c00 	.word	0x40004c00
 8011718:	40005000 	.word	0x40005000
 801171c:	2320      	movs	r3, #32
 801171e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011722:	e128      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011724:	2340      	movs	r3, #64	; 0x40
 8011726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172a:	e124      	b.n	8011976 <UART_SetConfig+0x5a6>
 801172c:	2380      	movs	r3, #128	; 0x80
 801172e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011732:	e120      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4acb      	ldr	r2, [pc, #812]	; (8011a68 <UART_SetConfig+0x698>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d176      	bne.n	801182c <UART_SetConfig+0x45c>
 801173e:	4bcb      	ldr	r3, [pc, #812]	; (8011a6c <UART_SetConfig+0x69c>)
 8011740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011746:	2b28      	cmp	r3, #40	; 0x28
 8011748:	d86c      	bhi.n	8011824 <UART_SetConfig+0x454>
 801174a:	a201      	add	r2, pc, #4	; (adr r2, 8011750 <UART_SetConfig+0x380>)
 801174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011750:	080117f5 	.word	0x080117f5
 8011754:	08011825 	.word	0x08011825
 8011758:	08011825 	.word	0x08011825
 801175c:	08011825 	.word	0x08011825
 8011760:	08011825 	.word	0x08011825
 8011764:	08011825 	.word	0x08011825
 8011768:	08011825 	.word	0x08011825
 801176c:	08011825 	.word	0x08011825
 8011770:	080117fd 	.word	0x080117fd
 8011774:	08011825 	.word	0x08011825
 8011778:	08011825 	.word	0x08011825
 801177c:	08011825 	.word	0x08011825
 8011780:	08011825 	.word	0x08011825
 8011784:	08011825 	.word	0x08011825
 8011788:	08011825 	.word	0x08011825
 801178c:	08011825 	.word	0x08011825
 8011790:	08011805 	.word	0x08011805
 8011794:	08011825 	.word	0x08011825
 8011798:	08011825 	.word	0x08011825
 801179c:	08011825 	.word	0x08011825
 80117a0:	08011825 	.word	0x08011825
 80117a4:	08011825 	.word	0x08011825
 80117a8:	08011825 	.word	0x08011825
 80117ac:	08011825 	.word	0x08011825
 80117b0:	0801180d 	.word	0x0801180d
 80117b4:	08011825 	.word	0x08011825
 80117b8:	08011825 	.word	0x08011825
 80117bc:	08011825 	.word	0x08011825
 80117c0:	08011825 	.word	0x08011825
 80117c4:	08011825 	.word	0x08011825
 80117c8:	08011825 	.word	0x08011825
 80117cc:	08011825 	.word	0x08011825
 80117d0:	08011815 	.word	0x08011815
 80117d4:	08011825 	.word	0x08011825
 80117d8:	08011825 	.word	0x08011825
 80117dc:	08011825 	.word	0x08011825
 80117e0:	08011825 	.word	0x08011825
 80117e4:	08011825 	.word	0x08011825
 80117e8:	08011825 	.word	0x08011825
 80117ec:	08011825 	.word	0x08011825
 80117f0:	0801181d 	.word	0x0801181d
 80117f4:	2301      	movs	r3, #1
 80117f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fa:	e0bc      	b.n	8011976 <UART_SetConfig+0x5a6>
 80117fc:	2304      	movs	r3, #4
 80117fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011802:	e0b8      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011804:	2308      	movs	r3, #8
 8011806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180a:	e0b4      	b.n	8011976 <UART_SetConfig+0x5a6>
 801180c:	2310      	movs	r3, #16
 801180e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011812:	e0b0      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011814:	2320      	movs	r3, #32
 8011816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181a:	e0ac      	b.n	8011976 <UART_SetConfig+0x5a6>
 801181c:	2340      	movs	r3, #64	; 0x40
 801181e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011822:	e0a8      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011824:	2380      	movs	r3, #128	; 0x80
 8011826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801182a:	e0a4      	b.n	8011976 <UART_SetConfig+0x5a6>
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a8f      	ldr	r2, [pc, #572]	; (8011a70 <UART_SetConfig+0x6a0>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d130      	bne.n	8011898 <UART_SetConfig+0x4c8>
 8011836:	4b8d      	ldr	r3, [pc, #564]	; (8011a6c <UART_SetConfig+0x69c>)
 8011838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183a:	f003 0307 	and.w	r3, r3, #7
 801183e:	2b05      	cmp	r3, #5
 8011840:	d826      	bhi.n	8011890 <UART_SetConfig+0x4c0>
 8011842:	a201      	add	r2, pc, #4	; (adr r2, 8011848 <UART_SetConfig+0x478>)
 8011844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011848:	08011861 	.word	0x08011861
 801184c:	08011869 	.word	0x08011869
 8011850:	08011871 	.word	0x08011871
 8011854:	08011879 	.word	0x08011879
 8011858:	08011881 	.word	0x08011881
 801185c:	08011889 	.word	0x08011889
 8011860:	2300      	movs	r3, #0
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e086      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011868:	2304      	movs	r3, #4
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e082      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011870:	2308      	movs	r3, #8
 8011872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011876:	e07e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011878:	2310      	movs	r3, #16
 801187a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187e:	e07a      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011880:	2320      	movs	r3, #32
 8011882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011886:	e076      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011888:	2340      	movs	r3, #64	; 0x40
 801188a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188e:	e072      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011890:	2380      	movs	r3, #128	; 0x80
 8011892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011896:	e06e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a75      	ldr	r2, [pc, #468]	; (8011a74 <UART_SetConfig+0x6a4>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d130      	bne.n	8011904 <UART_SetConfig+0x534>
 80118a2:	4b72      	ldr	r3, [pc, #456]	; (8011a6c <UART_SetConfig+0x69c>)
 80118a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118a6:	f003 0307 	and.w	r3, r3, #7
 80118aa:	2b05      	cmp	r3, #5
 80118ac:	d826      	bhi.n	80118fc <UART_SetConfig+0x52c>
 80118ae:	a201      	add	r2, pc, #4	; (adr r2, 80118b4 <UART_SetConfig+0x4e4>)
 80118b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b4:	080118cd 	.word	0x080118cd
 80118b8:	080118d5 	.word	0x080118d5
 80118bc:	080118dd 	.word	0x080118dd
 80118c0:	080118e5 	.word	0x080118e5
 80118c4:	080118ed 	.word	0x080118ed
 80118c8:	080118f5 	.word	0x080118f5
 80118cc:	2300      	movs	r3, #0
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e050      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118d4:	2304      	movs	r3, #4
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118da:	e04c      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118dc:	2308      	movs	r3, #8
 80118de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e2:	e048      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118e4:	2310      	movs	r3, #16
 80118e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ea:	e044      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118ec:	2320      	movs	r3, #32
 80118ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118f2:	e040      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118f4:	2340      	movs	r3, #64	; 0x40
 80118f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118fa:	e03c      	b.n	8011976 <UART_SetConfig+0x5a6>
 80118fc:	2380      	movs	r3, #128	; 0x80
 80118fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011902:	e038      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4a5b      	ldr	r2, [pc, #364]	; (8011a78 <UART_SetConfig+0x6a8>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d130      	bne.n	8011970 <UART_SetConfig+0x5a0>
 801190e:	4b57      	ldr	r3, [pc, #348]	; (8011a6c <UART_SetConfig+0x69c>)
 8011910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011912:	f003 0307 	and.w	r3, r3, #7
 8011916:	2b05      	cmp	r3, #5
 8011918:	d826      	bhi.n	8011968 <UART_SetConfig+0x598>
 801191a:	a201      	add	r2, pc, #4	; (adr r2, 8011920 <UART_SetConfig+0x550>)
 801191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011920:	08011939 	.word	0x08011939
 8011924:	08011941 	.word	0x08011941
 8011928:	08011949 	.word	0x08011949
 801192c:	08011951 	.word	0x08011951
 8011930:	08011959 	.word	0x08011959
 8011934:	08011961 	.word	0x08011961
 8011938:	2302      	movs	r3, #2
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193e:	e01a      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011940:	2304      	movs	r3, #4
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011946:	e016      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011948:	2308      	movs	r3, #8
 801194a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801194e:	e012      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011950:	2310      	movs	r3, #16
 8011952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011956:	e00e      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011958:	2320      	movs	r3, #32
 801195a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801195e:	e00a      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011960:	2340      	movs	r3, #64	; 0x40
 8011962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011966:	e006      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801196e:	e002      	b.n	8011976 <UART_SetConfig+0x5a6>
 8011970:	2380      	movs	r3, #128	; 0x80
 8011972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a3f      	ldr	r2, [pc, #252]	; (8011a78 <UART_SetConfig+0x6a8>)
 801197c:	4293      	cmp	r3, r2
 801197e:	f040 80f8 	bne.w	8011b72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011986:	2b20      	cmp	r3, #32
 8011988:	dc46      	bgt.n	8011a18 <UART_SetConfig+0x648>
 801198a:	2b02      	cmp	r3, #2
 801198c:	f2c0 8082 	blt.w	8011a94 <UART_SetConfig+0x6c4>
 8011990:	3b02      	subs	r3, #2
 8011992:	2b1e      	cmp	r3, #30
 8011994:	d87e      	bhi.n	8011a94 <UART_SetConfig+0x6c4>
 8011996:	a201      	add	r2, pc, #4	; (adr r2, 801199c <UART_SetConfig+0x5cc>)
 8011998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199c:	08011a1f 	.word	0x08011a1f
 80119a0:	08011a95 	.word	0x08011a95
 80119a4:	08011a27 	.word	0x08011a27
 80119a8:	08011a95 	.word	0x08011a95
 80119ac:	08011a95 	.word	0x08011a95
 80119b0:	08011a95 	.word	0x08011a95
 80119b4:	08011a37 	.word	0x08011a37
 80119b8:	08011a95 	.word	0x08011a95
 80119bc:	08011a95 	.word	0x08011a95
 80119c0:	08011a95 	.word	0x08011a95
 80119c4:	08011a95 	.word	0x08011a95
 80119c8:	08011a95 	.word	0x08011a95
 80119cc:	08011a95 	.word	0x08011a95
 80119d0:	08011a95 	.word	0x08011a95
 80119d4:	08011a47 	.word	0x08011a47
 80119d8:	08011a95 	.word	0x08011a95
 80119dc:	08011a95 	.word	0x08011a95
 80119e0:	08011a95 	.word	0x08011a95
 80119e4:	08011a95 	.word	0x08011a95
 80119e8:	08011a95 	.word	0x08011a95
 80119ec:	08011a95 	.word	0x08011a95
 80119f0:	08011a95 	.word	0x08011a95
 80119f4:	08011a95 	.word	0x08011a95
 80119f8:	08011a95 	.word	0x08011a95
 80119fc:	08011a95 	.word	0x08011a95
 8011a00:	08011a95 	.word	0x08011a95
 8011a04:	08011a95 	.word	0x08011a95
 8011a08:	08011a95 	.word	0x08011a95
 8011a0c:	08011a95 	.word	0x08011a95
 8011a10:	08011a95 	.word	0x08011a95
 8011a14:	08011a87 	.word	0x08011a87
 8011a18:	2b40      	cmp	r3, #64	; 0x40
 8011a1a:	d037      	beq.n	8011a8c <UART_SetConfig+0x6bc>
 8011a1c:	e03a      	b.n	8011a94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011a1e:	f7fb fde5 	bl	800d5ec <HAL_RCCEx_GetD3PCLK1Freq>
 8011a22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a24:	e03c      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fb fdf4 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a34:	e034      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a36:	f107 0318 	add.w	r3, r7, #24
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fb ff40 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a44:	e02c      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a46:	4b09      	ldr	r3, [pc, #36]	; (8011a6c <UART_SetConfig+0x69c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f003 0320 	and.w	r3, r3, #32
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d016      	beq.n	8011a80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a52:	4b06      	ldr	r3, [pc, #24]	; (8011a6c <UART_SetConfig+0x69c>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	08db      	lsrs	r3, r3, #3
 8011a58:	f003 0303 	and.w	r3, r3, #3
 8011a5c:	4a07      	ldr	r2, [pc, #28]	; (8011a7c <UART_SetConfig+0x6ac>)
 8011a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8011a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a64:	e01c      	b.n	8011aa0 <UART_SetConfig+0x6d0>
 8011a66:	bf00      	nop
 8011a68:	40011400 	.word	0x40011400
 8011a6c:	58024400 	.word	0x58024400
 8011a70:	40007800 	.word	0x40007800
 8011a74:	40007c00 	.word	0x40007c00
 8011a78:	58000c00 	.word	0x58000c00
 8011a7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011a80:	4b9d      	ldr	r3, [pc, #628]	; (8011cf8 <UART_SetConfig+0x928>)
 8011a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a84:	e00c      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a86:	4b9d      	ldr	r3, [pc, #628]	; (8011cfc <UART_SetConfig+0x92c>)
 8011a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a8a:	e009      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a92:	e005      	b.n	8011aa0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011a94:	2300      	movs	r3, #0
 8011a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f000 81de 	beq.w	8011e64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aac:	4a94      	ldr	r2, [pc, #592]	; (8011d00 <UART_SetConfig+0x930>)
 8011aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011aba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	4413      	add	r3, r2
 8011ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d305      	bcc.n	8011ad8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d903      	bls.n	8011ae0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ade:	e1c1      	b.n	8011e64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	60bb      	str	r3, [r7, #8]
 8011ae6:	60fa      	str	r2, [r7, #12]
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aec:	4a84      	ldr	r2, [pc, #528]	; (8011d00 <UART_SetConfig+0x930>)
 8011aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	2200      	movs	r2, #0
 8011af6:	603b      	str	r3, [r7, #0]
 8011af8:	607a      	str	r2, [r7, #4]
 8011afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b02:	f7ee fbf1 	bl	80002e8 <__aeabi_uldivmod>
 8011b06:	4602      	mov	r2, r0
 8011b08:	460b      	mov	r3, r1
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	f04f 0200 	mov.w	r2, #0
 8011b12:	f04f 0300 	mov.w	r3, #0
 8011b16:	020b      	lsls	r3, r1, #8
 8011b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b1c:	0202      	lsls	r2, r0, #8
 8011b1e:	6979      	ldr	r1, [r7, #20]
 8011b20:	6849      	ldr	r1, [r1, #4]
 8011b22:	0849      	lsrs	r1, r1, #1
 8011b24:	2000      	movs	r0, #0
 8011b26:	460c      	mov	r4, r1
 8011b28:	4605      	mov	r5, r0
 8011b2a:	eb12 0804 	adds.w	r8, r2, r4
 8011b2e:	eb43 0905 	adc.w	r9, r3, r5
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	469a      	mov	sl, r3
 8011b3a:	4693      	mov	fp, r2
 8011b3c:	4652      	mov	r2, sl
 8011b3e:	465b      	mov	r3, fp
 8011b40:	4640      	mov	r0, r8
 8011b42:	4649      	mov	r1, r9
 8011b44:	f7ee fbd0 	bl	80002e8 <__aeabi_uldivmod>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b56:	d308      	bcc.n	8011b6a <UART_SetConfig+0x79a>
 8011b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b5e:	d204      	bcs.n	8011b6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b66:	60da      	str	r2, [r3, #12]
 8011b68:	e17c      	b.n	8011e64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b70:	e178      	b.n	8011e64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	69db      	ldr	r3, [r3, #28]
 8011b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b7a:	f040 80c5 	bne.w	8011d08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b82:	2b20      	cmp	r3, #32
 8011b84:	dc48      	bgt.n	8011c18 <UART_SetConfig+0x848>
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	db7b      	blt.n	8011c82 <UART_SetConfig+0x8b2>
 8011b8a:	2b20      	cmp	r3, #32
 8011b8c:	d879      	bhi.n	8011c82 <UART_SetConfig+0x8b2>
 8011b8e:	a201      	add	r2, pc, #4	; (adr r2, 8011b94 <UART_SetConfig+0x7c4>)
 8011b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b94:	08011c1f 	.word	0x08011c1f
 8011b98:	08011c27 	.word	0x08011c27
 8011b9c:	08011c83 	.word	0x08011c83
 8011ba0:	08011c83 	.word	0x08011c83
 8011ba4:	08011c2f 	.word	0x08011c2f
 8011ba8:	08011c83 	.word	0x08011c83
 8011bac:	08011c83 	.word	0x08011c83
 8011bb0:	08011c83 	.word	0x08011c83
 8011bb4:	08011c3f 	.word	0x08011c3f
 8011bb8:	08011c83 	.word	0x08011c83
 8011bbc:	08011c83 	.word	0x08011c83
 8011bc0:	08011c83 	.word	0x08011c83
 8011bc4:	08011c83 	.word	0x08011c83
 8011bc8:	08011c83 	.word	0x08011c83
 8011bcc:	08011c83 	.word	0x08011c83
 8011bd0:	08011c83 	.word	0x08011c83
 8011bd4:	08011c4f 	.word	0x08011c4f
 8011bd8:	08011c83 	.word	0x08011c83
 8011bdc:	08011c83 	.word	0x08011c83
 8011be0:	08011c83 	.word	0x08011c83
 8011be4:	08011c83 	.word	0x08011c83
 8011be8:	08011c83 	.word	0x08011c83
 8011bec:	08011c83 	.word	0x08011c83
 8011bf0:	08011c83 	.word	0x08011c83
 8011bf4:	08011c83 	.word	0x08011c83
 8011bf8:	08011c83 	.word	0x08011c83
 8011bfc:	08011c83 	.word	0x08011c83
 8011c00:	08011c83 	.word	0x08011c83
 8011c04:	08011c83 	.word	0x08011c83
 8011c08:	08011c83 	.word	0x08011c83
 8011c0c:	08011c83 	.word	0x08011c83
 8011c10:	08011c83 	.word	0x08011c83
 8011c14:	08011c75 	.word	0x08011c75
 8011c18:	2b40      	cmp	r3, #64	; 0x40
 8011c1a:	d02e      	beq.n	8011c7a <UART_SetConfig+0x8aa>
 8011c1c:	e031      	b.n	8011c82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c1e:	f7f9 fd2f 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 8011c22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c24:	e033      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c26:	f7f9 fd41 	bl	800b6ac <HAL_RCC_GetPCLK2Freq>
 8011c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c2c:	e02f      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fb fcf0 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c3c:	e027      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c3e:	f107 0318 	add.w	r3, r7, #24
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7fb fe3c 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c4c:	e01f      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c4e:	4b2d      	ldr	r3, [pc, #180]	; (8011d04 <UART_SetConfig+0x934>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f003 0320 	and.w	r3, r3, #32
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d009      	beq.n	8011c6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c5a:	4b2a      	ldr	r3, [pc, #168]	; (8011d04 <UART_SetConfig+0x934>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	08db      	lsrs	r3, r3, #3
 8011c60:	f003 0303 	and.w	r3, r3, #3
 8011c64:	4a24      	ldr	r2, [pc, #144]	; (8011cf8 <UART_SetConfig+0x928>)
 8011c66:	fa22 f303 	lsr.w	r3, r2, r3
 8011c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c6c:	e00f      	b.n	8011c8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011c6e:	4b22      	ldr	r3, [pc, #136]	; (8011cf8 <UART_SetConfig+0x928>)
 8011c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c72:	e00c      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c74:	4b21      	ldr	r3, [pc, #132]	; (8011cfc <UART_SetConfig+0x92c>)
 8011c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c78:	e009      	b.n	8011c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c80:	e005      	b.n	8011c8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011c82:	2300      	movs	r3, #0
 8011c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c86:	2301      	movs	r3, #1
 8011c88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 80e7 	beq.w	8011e64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	4a19      	ldr	r2, [pc, #100]	; (8011d00 <UART_SetConfig+0x930>)
 8011c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ca8:	005a      	lsls	r2, r3, #1
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	085b      	lsrs	r3, r3, #1
 8011cb0:	441a      	add	r2, r3
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbe:	2b0f      	cmp	r3, #15
 8011cc0:	d916      	bls.n	8011cf0 <UART_SetConfig+0x920>
 8011cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cc8:	d212      	bcs.n	8011cf0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	f023 030f 	bic.w	r3, r3, #15
 8011cd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd6:	085b      	lsrs	r3, r3, #1
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	f003 0307 	and.w	r3, r3, #7
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011cec:	60da      	str	r2, [r3, #12]
 8011cee:	e0b9      	b.n	8011e64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011cf6:	e0b5      	b.n	8011e64 <UART_SetConfig+0xa94>
 8011cf8:	03d09000 	.word	0x03d09000
 8011cfc:	003d0900 	.word	0x003d0900
 8011d00:	080141bc 	.word	0x080141bc
 8011d04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d0c:	2b20      	cmp	r3, #32
 8011d0e:	dc49      	bgt.n	8011da4 <UART_SetConfig+0x9d4>
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	db7c      	blt.n	8011e0e <UART_SetConfig+0xa3e>
 8011d14:	2b20      	cmp	r3, #32
 8011d16:	d87a      	bhi.n	8011e0e <UART_SetConfig+0xa3e>
 8011d18:	a201      	add	r2, pc, #4	; (adr r2, 8011d20 <UART_SetConfig+0x950>)
 8011d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1e:	bf00      	nop
 8011d20:	08011dab 	.word	0x08011dab
 8011d24:	08011db3 	.word	0x08011db3
 8011d28:	08011e0f 	.word	0x08011e0f
 8011d2c:	08011e0f 	.word	0x08011e0f
 8011d30:	08011dbb 	.word	0x08011dbb
 8011d34:	08011e0f 	.word	0x08011e0f
 8011d38:	08011e0f 	.word	0x08011e0f
 8011d3c:	08011e0f 	.word	0x08011e0f
 8011d40:	08011dcb 	.word	0x08011dcb
 8011d44:	08011e0f 	.word	0x08011e0f
 8011d48:	08011e0f 	.word	0x08011e0f
 8011d4c:	08011e0f 	.word	0x08011e0f
 8011d50:	08011e0f 	.word	0x08011e0f
 8011d54:	08011e0f 	.word	0x08011e0f
 8011d58:	08011e0f 	.word	0x08011e0f
 8011d5c:	08011e0f 	.word	0x08011e0f
 8011d60:	08011ddb 	.word	0x08011ddb
 8011d64:	08011e0f 	.word	0x08011e0f
 8011d68:	08011e0f 	.word	0x08011e0f
 8011d6c:	08011e0f 	.word	0x08011e0f
 8011d70:	08011e0f 	.word	0x08011e0f
 8011d74:	08011e0f 	.word	0x08011e0f
 8011d78:	08011e0f 	.word	0x08011e0f
 8011d7c:	08011e0f 	.word	0x08011e0f
 8011d80:	08011e0f 	.word	0x08011e0f
 8011d84:	08011e0f 	.word	0x08011e0f
 8011d88:	08011e0f 	.word	0x08011e0f
 8011d8c:	08011e0f 	.word	0x08011e0f
 8011d90:	08011e0f 	.word	0x08011e0f
 8011d94:	08011e0f 	.word	0x08011e0f
 8011d98:	08011e0f 	.word	0x08011e0f
 8011d9c:	08011e0f 	.word	0x08011e0f
 8011da0:	08011e01 	.word	0x08011e01
 8011da4:	2b40      	cmp	r3, #64	; 0x40
 8011da6:	d02e      	beq.n	8011e06 <UART_SetConfig+0xa36>
 8011da8:	e031      	b.n	8011e0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011daa:	f7f9 fc69 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 8011dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011db0:	e033      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011db2:	f7f9 fc7b 	bl	800b6ac <HAL_RCC_GetPCLK2Freq>
 8011db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011db8:	e02f      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fb fc2a 	bl	800d618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dc8:	e027      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011dca:	f107 0318 	add.w	r3, r7, #24
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fb fd76 	bl	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dd8:	e01f      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011dda:	4b2d      	ldr	r3, [pc, #180]	; (8011e90 <UART_SetConfig+0xac0>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f003 0320 	and.w	r3, r3, #32
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d009      	beq.n	8011dfa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011de6:	4b2a      	ldr	r3, [pc, #168]	; (8011e90 <UART_SetConfig+0xac0>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	08db      	lsrs	r3, r3, #3
 8011dec:	f003 0303 	and.w	r3, r3, #3
 8011df0:	4a28      	ldr	r2, [pc, #160]	; (8011e94 <UART_SetConfig+0xac4>)
 8011df2:	fa22 f303 	lsr.w	r3, r2, r3
 8011df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011df8:	e00f      	b.n	8011e1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011dfa:	4b26      	ldr	r3, [pc, #152]	; (8011e94 <UART_SetConfig+0xac4>)
 8011dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dfe:	e00c      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e00:	4b25      	ldr	r3, [pc, #148]	; (8011e98 <UART_SetConfig+0xac8>)
 8011e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e04:	e009      	b.n	8011e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e0c:	e005      	b.n	8011e1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011e12:	2301      	movs	r3, #1
 8011e14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011e18:	bf00      	nop
    }

    if (pclk != 0U)
 8011e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d021      	beq.n	8011e64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e24:	4a1d      	ldr	r2, [pc, #116]	; (8011e9c <UART_SetConfig+0xacc>)
 8011e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	085b      	lsrs	r3, r3, #1
 8011e38:	441a      	add	r2, r3
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e46:	2b0f      	cmp	r3, #15
 8011e48:	d909      	bls.n	8011e5e <UART_SetConfig+0xa8e>
 8011e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e50:	d205      	bcs.n	8011e5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	60da      	str	r2, [r3, #12]
 8011e5c:	e002      	b.n	8011e64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	2201      	movs	r2, #1
 8011e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	2201      	movs	r2, #1
 8011e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	2200      	movs	r2, #0
 8011e78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011e80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3748      	adds	r7, #72	; 0x48
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e8e:	bf00      	nop
 8011e90:	58024400 	.word	0x58024400
 8011e94:	03d09000 	.word	0x03d09000
 8011e98:	003d0900 	.word	0x003d0900
 8011e9c:	080141bc 	.word	0x080141bc

08011ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eac:	f003 0301 	and.w	r3, r3, #1
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00a      	beq.n	8011eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	430a      	orrs	r2, r1
 8011ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ece:	f003 0302 	and.w	r3, r3, #2
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d00a      	beq.n	8011eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	430a      	orrs	r2, r1
 8011eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef0:	f003 0304 	and.w	r3, r3, #4
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00a      	beq.n	8011f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	430a      	orrs	r2, r1
 8011f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f12:	f003 0308 	and.w	r3, r3, #8
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d00a      	beq.n	8011f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	430a      	orrs	r2, r1
 8011f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f34:	f003 0310 	and.w	r3, r3, #16
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00a      	beq.n	8011f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	430a      	orrs	r2, r1
 8011f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f56:	f003 0320 	and.w	r3, r3, #32
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00a      	beq.n	8011f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	430a      	orrs	r2, r1
 8011f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d01a      	beq.n	8011fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	430a      	orrs	r2, r1
 8011f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f9e:	d10a      	bne.n	8011fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	430a      	orrs	r2, r1
 8011fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00a      	beq.n	8011fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	430a      	orrs	r2, r1
 8011fd6:	605a      	str	r2, [r3, #4]
  }
}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b098      	sub	sp, #96	; 0x60
 8011fe8:	af02      	add	r7, sp, #8
 8011fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ff4:	f7f3 fe36 	bl	8005c64 <HAL_GetTick>
 8011ff8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f003 0308 	and.w	r3, r3, #8
 8012004:	2b08      	cmp	r3, #8
 8012006:	d12f      	bne.n	8012068 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012010:	2200      	movs	r2, #0
 8012012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 f88e 	bl	8012138 <UART_WaitOnFlagUntilTimeout>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d022      	beq.n	8012068 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	e853 3f00 	ldrex	r3, [r3]
 801202e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012036:	653b      	str	r3, [r7, #80]	; 0x50
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	461a      	mov	r2, r3
 801203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012040:	647b      	str	r3, [r7, #68]	; 0x44
 8012042:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012048:	e841 2300 	strex	r3, r2, [r1]
 801204c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012050:	2b00      	cmp	r3, #0
 8012052:	d1e6      	bne.n	8012022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2220      	movs	r2, #32
 8012058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012064:	2303      	movs	r3, #3
 8012066:	e063      	b.n	8012130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f003 0304 	and.w	r3, r3, #4
 8012072:	2b04      	cmp	r3, #4
 8012074:	d149      	bne.n	801210a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012076:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801207a:	9300      	str	r3, [sp, #0]
 801207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801207e:	2200      	movs	r2, #0
 8012080:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f857 	bl	8012138 <UART_WaitOnFlagUntilTimeout>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d03c      	beq.n	801210a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012098:	e853 3f00 	ldrex	r3, [r3]
 801209c:	623b      	str	r3, [r7, #32]
   return(result);
 801209e:	6a3b      	ldr	r3, [r7, #32]
 80120a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	461a      	mov	r2, r3
 80120ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ae:	633b      	str	r3, [r7, #48]	; 0x30
 80120b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120b6:	e841 2300 	strex	r3, r2, [r1]
 80120ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1e6      	bne.n	8012090 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	3308      	adds	r3, #8
 80120c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	e853 3f00 	ldrex	r3, [r3]
 80120d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f023 0301 	bic.w	r3, r3, #1
 80120d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	3308      	adds	r3, #8
 80120e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120e2:	61fa      	str	r2, [r7, #28]
 80120e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e6:	69b9      	ldr	r1, [r7, #24]
 80120e8:	69fa      	ldr	r2, [r7, #28]
 80120ea:	e841 2300 	strex	r3, r2, [r1]
 80120ee:	617b      	str	r3, [r7, #20]
   return(result);
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d1e5      	bne.n	80120c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2220      	movs	r2, #32
 80120fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2200      	movs	r2, #0
 8012102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012106:	2303      	movs	r3, #3
 8012108:	e012      	b.n	8012130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2220      	movs	r2, #32
 801210e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2220      	movs	r2, #32
 8012116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2200      	movs	r2, #0
 801212a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	3758      	adds	r7, #88	; 0x58
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	603b      	str	r3, [r7, #0]
 8012144:	4613      	mov	r3, r2
 8012146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012148:	e049      	b.n	80121de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012150:	d045      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012152:	f7f3 fd87 	bl	8005c64 <HAL_GetTick>
 8012156:	4602      	mov	r2, r0
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	69ba      	ldr	r2, [r7, #24]
 801215e:	429a      	cmp	r2, r3
 8012160:	d302      	bcc.n	8012168 <UART_WaitOnFlagUntilTimeout+0x30>
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d101      	bne.n	801216c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012168:	2303      	movs	r3, #3
 801216a:	e048      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f003 0304 	and.w	r3, r3, #4
 8012176:	2b00      	cmp	r3, #0
 8012178:	d031      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69db      	ldr	r3, [r3, #28]
 8012180:	f003 0308 	and.w	r3, r3, #8
 8012184:	2b08      	cmp	r3, #8
 8012186:	d110      	bne.n	80121aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2208      	movs	r2, #8
 801218e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f000 f921 	bl	80123d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2208      	movs	r2, #8
 801219a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80121a6:	2301      	movs	r3, #1
 80121a8:	e029      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	69db      	ldr	r3, [r3, #28]
 80121b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80121b8:	d111      	bne.n	80121de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80121c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 f907 	bl	80123d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2220      	movs	r2, #32
 80121ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80121da:	2303      	movs	r3, #3
 80121dc:	e00f      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69da      	ldr	r2, [r3, #28]
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	4013      	ands	r3, r2
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	bf0c      	ite	eq
 80121ee:	2301      	moveq	r3, #1
 80121f0:	2300      	movne	r3, #0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	461a      	mov	r2, r3
 80121f6:	79fb      	ldrb	r3, [r7, #7]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d0a6      	beq.n	801214a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80121fc:	2300      	movs	r3, #0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3710      	adds	r7, #16
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
	...

08012208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b096      	sub	sp, #88	; 0x58
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	4613      	mov	r3, r2
 8012214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	88fa      	ldrh	r2, [r7, #6]
 8012220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2200      	movs	r2, #0
 8012228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2222      	movs	r2, #34	; 0x22
 8012230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801223a:	2b00      	cmp	r3, #0
 801223c:	d02d      	beq.n	801229a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012244:	4a40      	ldr	r2, [pc, #256]	; (8012348 <UART_Start_Receive_DMA+0x140>)
 8012246:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801224e:	4a3f      	ldr	r2, [pc, #252]	; (801234c <UART_Start_Receive_DMA+0x144>)
 8012250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012258:	4a3d      	ldr	r2, [pc, #244]	; (8012350 <UART_Start_Receive_DMA+0x148>)
 801225a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012262:	2200      	movs	r2, #0
 8012264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	3324      	adds	r3, #36	; 0x24
 8012272:	4619      	mov	r1, r3
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012278:	461a      	mov	r2, r3
 801227a:	88fb      	ldrh	r3, [r7, #6]
 801227c:	f7f5 fa28 	bl	80076d0 <HAL_DMA_Start_IT>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d009      	beq.n	801229a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2210      	movs	r2, #16
 801228a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	2220      	movs	r2, #32
 8012292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8012296:	2301      	movs	r3, #1
 8012298:	e051      	b.n	801233e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d018      	beq.n	80122d4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122aa:	e853 3f00 	ldrex	r3, [r3]
 80122ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80122b6:	657b      	str	r3, [r7, #84]	; 0x54
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	461a      	mov	r2, r3
 80122be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80122c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80122c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122c8:	e841 2300 	strex	r3, r2, [r1]
 80122cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80122ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1e6      	bne.n	80122a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	3308      	adds	r3, #8
 80122da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122de:	e853 3f00 	ldrex	r3, [r3]
 80122e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	f043 0301 	orr.w	r3, r3, #1
 80122ea:	653b      	str	r3, [r7, #80]	; 0x50
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	3308      	adds	r3, #8
 80122f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80122f4:	637a      	str	r2, [r7, #52]	; 0x34
 80122f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122fc:	e841 2300 	strex	r3, r2, [r1]
 8012300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012304:	2b00      	cmp	r3, #0
 8012306:	d1e5      	bne.n	80122d4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3308      	adds	r3, #8
 801230e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	e853 3f00 	ldrex	r3, [r3]
 8012316:	613b      	str	r3, [r7, #16]
   return(result);
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801231e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3308      	adds	r3, #8
 8012326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012328:	623a      	str	r2, [r7, #32]
 801232a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232c:	69f9      	ldr	r1, [r7, #28]
 801232e:	6a3a      	ldr	r2, [r7, #32]
 8012330:	e841 2300 	strex	r3, r2, [r1]
 8012334:	61bb      	str	r3, [r7, #24]
   return(result);
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1e5      	bne.n	8012308 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3758      	adds	r7, #88	; 0x58
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	08012557 	.word	0x08012557
 801234c:	0801267f 	.word	0x0801267f
 8012350:	080126bd 	.word	0x080126bd

08012354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012354:	b480      	push	{r7}
 8012356:	b08f      	sub	sp, #60	; 0x3c
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	e853 3f00 	ldrex	r3, [r3]
 8012368:	61fb      	str	r3, [r7, #28]
   return(result);
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012370:	637b      	str	r3, [r7, #52]	; 0x34
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	461a      	mov	r2, r3
 8012378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801237a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801237c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801237e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012382:	e841 2300 	strex	r3, r2, [r1]
 8012386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1e6      	bne.n	801235c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	3308      	adds	r3, #8
 8012394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	e853 3f00 	ldrex	r3, [r3]
 801239c:	60bb      	str	r3, [r7, #8]
   return(result);
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80123a4:	633b      	str	r3, [r7, #48]	; 0x30
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3308      	adds	r3, #8
 80123ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123ae:	61ba      	str	r2, [r7, #24]
 80123b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b2:	6979      	ldr	r1, [r7, #20]
 80123b4:	69ba      	ldr	r2, [r7, #24]
 80123b6:	e841 2300 	strex	r3, r2, [r1]
 80123ba:	613b      	str	r3, [r7, #16]
   return(result);
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1e5      	bne.n	801238e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2220      	movs	r2, #32
 80123c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80123ca:	bf00      	nop
 80123cc:	373c      	adds	r7, #60	; 0x3c
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr
	...

080123d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80123d8:	b480      	push	{r7}
 80123da:	b095      	sub	sp, #84	; 0x54
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e8:	e853 3f00 	ldrex	r3, [r3]
 80123ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	461a      	mov	r2, r3
 80123fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fe:	643b      	str	r3, [r7, #64]	; 0x40
 8012400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012406:	e841 2300 	strex	r3, r2, [r1]
 801240a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240e:	2b00      	cmp	r3, #0
 8012410:	d1e6      	bne.n	80123e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3308      	adds	r3, #8
 8012418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801241a:	6a3b      	ldr	r3, [r7, #32]
 801241c:	e853 3f00 	ldrex	r3, [r3]
 8012420:	61fb      	str	r3, [r7, #28]
   return(result);
 8012422:	69fa      	ldr	r2, [r7, #28]
 8012424:	4b1e      	ldr	r3, [pc, #120]	; (80124a0 <UART_EndRxTransfer+0xc8>)
 8012426:	4013      	ands	r3, r2
 8012428:	64bb      	str	r3, [r7, #72]	; 0x48
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	3308      	adds	r3, #8
 8012430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801243a:	e841 2300 	strex	r3, r2, [r1]
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1e5      	bne.n	8012412 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801244a:	2b01      	cmp	r3, #1
 801244c:	d118      	bne.n	8012480 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	e853 3f00 	ldrex	r3, [r3]
 801245a:	60bb      	str	r3, [r7, #8]
   return(result);
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	f023 0310 	bic.w	r3, r3, #16
 8012462:	647b      	str	r3, [r7, #68]	; 0x44
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	461a      	mov	r2, r3
 801246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801246c:	61bb      	str	r3, [r7, #24]
 801246e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012470:	6979      	ldr	r1, [r7, #20]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	e841 2300 	strex	r3, r2, [r1]
 8012478:	613b      	str	r3, [r7, #16]
   return(result);
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e6      	bne.n	801244e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2220      	movs	r2, #32
 8012484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012494:	bf00      	nop
 8012496:	3754      	adds	r7, #84	; 0x54
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	effffffe 	.word	0xeffffffe

080124a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b090      	sub	sp, #64	; 0x40
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	69db      	ldr	r3, [r3, #28]
 80124b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124ba:	d037      	beq.n	801252c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80124bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124be:	2200      	movs	r2, #0
 80124c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80124c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	3308      	adds	r3, #8
 80124ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	e853 3f00 	ldrex	r3, [r3]
 80124d2:	623b      	str	r3, [r7, #32]
   return(result);
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124da:	63bb      	str	r3, [r7, #56]	; 0x38
 80124dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	3308      	adds	r3, #8
 80124e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e4:	633a      	str	r2, [r7, #48]	; 0x30
 80124e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124ec:	e841 2300 	strex	r3, r2, [r1]
 80124f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d1e5      	bne.n	80124c4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80124f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	e853 3f00 	ldrex	r3, [r3]
 8012504:	60fb      	str	r3, [r7, #12]
   return(result);
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801250c:	637b      	str	r3, [r7, #52]	; 0x34
 801250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012516:	61fb      	str	r3, [r7, #28]
 8012518:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251a:	69b9      	ldr	r1, [r7, #24]
 801251c:	69fa      	ldr	r2, [r7, #28]
 801251e:	e841 2300 	strex	r3, r2, [r1]
 8012522:	617b      	str	r3, [r7, #20]
   return(result);
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1e6      	bne.n	80124f8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801252a:	e002      	b.n	8012532 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801252c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801252e:	f7f1 f9ef 	bl	8003910 <HAL_UART_TxCpltCallback>
}
 8012532:	bf00      	nop
 8012534:	3740      	adds	r7, #64	; 0x40
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801253a:	b580      	push	{r7, lr}
 801253c:	b084      	sub	sp, #16
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012546:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f7fe ff21 	bl	8011390 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801254e:	bf00      	nop
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b09c      	sub	sp, #112	; 0x70
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012562:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	69db      	ldr	r3, [r3, #28]
 8012568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801256c:	d071      	beq.n	8012652 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012570:	2200      	movs	r2, #0
 8012572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801257e:	e853 3f00 	ldrex	r3, [r3]
 8012582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801258a:	66bb      	str	r3, [r7, #104]	; 0x68
 801258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	461a      	mov	r2, r3
 8012592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012594:	65bb      	str	r3, [r7, #88]	; 0x58
 8012596:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801259a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801259c:	e841 2300 	strex	r3, r2, [r1]
 80125a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80125a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1e6      	bne.n	8012576 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	3308      	adds	r3, #8
 80125ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b2:	e853 3f00 	ldrex	r3, [r3]
 80125b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80125b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ba:	f023 0301 	bic.w	r3, r3, #1
 80125be:	667b      	str	r3, [r7, #100]	; 0x64
 80125c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3308      	adds	r3, #8
 80125c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80125c8:	647a      	str	r2, [r7, #68]	; 0x44
 80125ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80125ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125d0:	e841 2300 	strex	r3, r2, [r1]
 80125d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80125d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d1e5      	bne.n	80125a8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80125dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	3308      	adds	r3, #8
 80125e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	e853 3f00 	ldrex	r3, [r3]
 80125ea:	623b      	str	r3, [r7, #32]
   return(result);
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125f2:	663b      	str	r3, [r7, #96]	; 0x60
 80125f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	3308      	adds	r3, #8
 80125fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125fc:	633a      	str	r2, [r7, #48]	; 0x30
 80125fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012604:	e841 2300 	strex	r3, r2, [r1]
 8012608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1e5      	bne.n	80125dc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012612:	2220      	movs	r2, #32
 8012614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801261a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801261c:	2b01      	cmp	r3, #1
 801261e:	d118      	bne.n	8012652 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	e853 3f00 	ldrex	r3, [r3]
 801262c:	60fb      	str	r3, [r7, #12]
   return(result);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	f023 0310 	bic.w	r3, r3, #16
 8012634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	461a      	mov	r2, r3
 801263c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012642:	69b9      	ldr	r1, [r7, #24]
 8012644:	69fa      	ldr	r2, [r7, #28]
 8012646:	e841 2300 	strex	r3, r2, [r1]
 801264a:	617b      	str	r3, [r7, #20]
   return(result);
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1e6      	bne.n	8012620 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012654:	2200      	movs	r2, #0
 8012656:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801265c:	2b01      	cmp	r3, #1
 801265e:	d107      	bne.n	8012670 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012666:	4619      	mov	r1, r3
 8012668:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801266a:	f7fe fea5 	bl	80113b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801266e:	e002      	b.n	8012676 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8012670:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012672:	f7f1 f965 	bl	8003940 <HAL_UART_RxCpltCallback>
}
 8012676:	bf00      	nop
 8012678:	3770      	adds	r7, #112	; 0x70
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b084      	sub	sp, #16
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801268a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2201      	movs	r2, #1
 8012690:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012696:	2b01      	cmp	r3, #1
 8012698:	d109      	bne.n	80126ae <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126a0:	085b      	lsrs	r3, r3, #1
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	4619      	mov	r1, r3
 80126a6:	68f8      	ldr	r0, [r7, #12]
 80126a8:	f7fe fe86 	bl	80113b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80126ac:	e002      	b.n	80126b4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f7fe fe78 	bl	80113a4 <HAL_UART_RxHalfCpltCallback>
}
 80126b4:	bf00      	nop
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126d8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126e4:	2b80      	cmp	r3, #128	; 0x80
 80126e6:	d109      	bne.n	80126fc <UART_DMAError+0x40>
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	2b21      	cmp	r3, #33	; 0x21
 80126ec:	d106      	bne.n	80126fc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2200      	movs	r2, #0
 80126f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80126f6:	6978      	ldr	r0, [r7, #20]
 80126f8:	f7ff fe2c 	bl	8012354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012706:	2b40      	cmp	r3, #64	; 0x40
 8012708:	d109      	bne.n	801271e <UART_DMAError+0x62>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2b22      	cmp	r3, #34	; 0x22
 801270e:	d106      	bne.n	801271e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	2200      	movs	r2, #0
 8012714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012718:	6978      	ldr	r0, [r7, #20]
 801271a:	f7ff fe5d 	bl	80123d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012724:	f043 0210 	orr.w	r2, r3, #16
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801272e:	6978      	ldr	r0, [r7, #20]
 8012730:	f7f1 f936 	bl	80039a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012734:	bf00      	nop
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2200      	movs	r2, #0
 801274e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2200      	movs	r2, #0
 8012756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7f1 f920 	bl	80039a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012760:	bf00      	nop
 8012762:	3710      	adds	r7, #16
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b088      	sub	sp, #32
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	e853 3f00 	ldrex	r3, [r3]
 801277c:	60bb      	str	r3, [r7, #8]
   return(result);
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012784:	61fb      	str	r3, [r7, #28]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	461a      	mov	r2, r3
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	61bb      	str	r3, [r7, #24]
 8012790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012792:	6979      	ldr	r1, [r7, #20]
 8012794:	69ba      	ldr	r2, [r7, #24]
 8012796:	e841 2300 	strex	r3, r2, [r1]
 801279a:	613b      	str	r3, [r7, #16]
   return(result);
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1e6      	bne.n	8012770 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2220      	movs	r2, #32
 80127a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7f1 f8ad 	bl	8003910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80127b6:	bf00      	nop
 80127b8:	3720      	adds	r7, #32
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80127be:	b480      	push	{r7}
 80127c0:	b083      	sub	sp, #12
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80127c6:	bf00      	nop
 80127c8:	370c      	adds	r7, #12
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80127d2:	b480      	push	{r7}
 80127d4:	b083      	sub	sp, #12
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80127da:	bf00      	nop
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80127e6:	b480      	push	{r7}
 80127e8:	b083      	sub	sp, #12
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80127ee:	bf00      	nop
 80127f0:	370c      	adds	r7, #12
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr

080127fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80127fa:	b480      	push	{r7}
 80127fc:	b085      	sub	sp, #20
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012808:	2b01      	cmp	r3, #1
 801280a:	d101      	bne.n	8012810 <HAL_UARTEx_DisableFifoMode+0x16>
 801280c:	2302      	movs	r3, #2
 801280e:	e027      	b.n	8012860 <HAL_UARTEx_DisableFifoMode+0x66>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2201      	movs	r2, #1
 8012814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2224      	movs	r2, #36	; 0x24
 801281c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f022 0201 	bic.w	r2, r2, #1
 8012836:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801283e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	68fa      	ldr	r2, [r7, #12]
 801284c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2220      	movs	r2, #32
 8012852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2200      	movs	r2, #0
 801285a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3714      	adds	r7, #20
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801287c:	2b01      	cmp	r3, #1
 801287e:	d101      	bne.n	8012884 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012880:	2302      	movs	r3, #2
 8012882:	e02d      	b.n	80128e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2201      	movs	r2, #1
 8012888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2224      	movs	r2, #36	; 0x24
 8012890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f022 0201 	bic.w	r2, r2, #1
 80128aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	683a      	ldr	r2, [r7, #0]
 80128bc:	430a      	orrs	r2, r1
 80128be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f84f 	bl	8012964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2220      	movs	r2, #32
 80128d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d101      	bne.n	8012900 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80128fc:	2302      	movs	r3, #2
 80128fe:	e02d      	b.n	801295c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2224      	movs	r2, #36	; 0x24
 801290c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f022 0201 	bic.w	r2, r2, #1
 8012926:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	683a      	ldr	r2, [r7, #0]
 8012938:	430a      	orrs	r2, r1
 801293a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 f811 	bl	8012964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	68fa      	ldr	r2, [r7, #12]
 8012948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2220      	movs	r2, #32
 801294e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2200      	movs	r2, #0
 8012956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012970:	2b00      	cmp	r3, #0
 8012972:	d108      	bne.n	8012986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2201      	movs	r2, #1
 8012978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2201      	movs	r2, #1
 8012980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012984:	e031      	b.n	80129ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012986:	2310      	movs	r3, #16
 8012988:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801298a:	2310      	movs	r3, #16
 801298c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	689b      	ldr	r3, [r3, #8]
 8012994:	0e5b      	lsrs	r3, r3, #25
 8012996:	b2db      	uxtb	r3, r3
 8012998:	f003 0307 	and.w	r3, r3, #7
 801299c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	0f5b      	lsrs	r3, r3, #29
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	f003 0307 	and.w	r3, r3, #7
 80129ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80129ae:	7bbb      	ldrb	r3, [r7, #14]
 80129b0:	7b3a      	ldrb	r2, [r7, #12]
 80129b2:	4911      	ldr	r1, [pc, #68]	; (80129f8 <UARTEx_SetNbDataToProcess+0x94>)
 80129b4:	5c8a      	ldrb	r2, [r1, r2]
 80129b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80129ba:	7b3a      	ldrb	r2, [r7, #12]
 80129bc:	490f      	ldr	r1, [pc, #60]	; (80129fc <UARTEx_SetNbDataToProcess+0x98>)
 80129be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80129c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80129cc:	7bfb      	ldrb	r3, [r7, #15]
 80129ce:	7b7a      	ldrb	r2, [r7, #13]
 80129d0:	4909      	ldr	r1, [pc, #36]	; (80129f8 <UARTEx_SetNbDataToProcess+0x94>)
 80129d2:	5c8a      	ldrb	r2, [r1, r2]
 80129d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80129d8:	7b7a      	ldrb	r2, [r7, #13]
 80129da:	4908      	ldr	r1, [pc, #32]	; (80129fc <UARTEx_SetNbDataToProcess+0x98>)
 80129dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80129de:	fb93 f3f2 	sdiv	r3, r3, r2
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80129ea:	bf00      	nop
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	080141d4 	.word	0x080141d4
 80129fc:	080141dc 	.word	0x080141dc

08012a00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012a00:	b084      	sub	sp, #16
 8012a02:	b480      	push	{r7}
 8012a04:	b085      	sub	sp, #20
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
 8012a0a:	f107 001c 	add.w	r0, r7, #28
 8012a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012a16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012a18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012a1a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012a1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012a22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012a26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	4b07      	ldr	r3, [pc, #28]	; (8012a50 <SDMMC_Init+0x50>)
 8012a34:	4013      	ands	r3, r2
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	431a      	orrs	r2, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	b004      	add	sp, #16
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	ffc02c00 	.word	0xffc02c00

08012a54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	370c      	adds	r7, #12
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr

08012a6e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012a6e:	b480      	push	{r7}
 8012a70:	b083      	sub	sp, #12
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f043 0203 	orr.w	r2, r3, #3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f003 0303 	and.w	r3, r3, #3
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	370c      	adds	r7, #12
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aaa:	4770      	bx	lr

08012aac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b085      	sub	sp, #20
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012aca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012ad0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012ad6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	4313      	orrs	r3, r2
 8012adc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	68da      	ldr	r2, [r3, #12]
 8012ae2:	4b06      	ldr	r3, [pc, #24]	; (8012afc <SDMMC_SendCommand+0x50>)
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	431a      	orrs	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012aee:	2300      	movs	r3, #0
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3714      	adds	r7, #20
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr
 8012afc:	fffee0c0 	.word	0xfffee0c0

08012b00 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	691b      	ldr	r3, [r3, #16]
 8012b0c:	b2db      	uxtb	r3, r3
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr

08012b1a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012b1a:	b480      	push	{r7}
 8012b1c:	b085      	sub	sp, #20
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	3314      	adds	r3, #20
 8012b28:	461a      	mov	r2, r3
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b66:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012b6c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012b72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	4313      	orrs	r3, r2
 8012b78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	431a      	orrs	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012b8a:	2300      	movs	r3, #0

}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3714      	adds	r7, #20
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b088      	sub	sp, #32
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012ba6:	2310      	movs	r3, #16
 8012ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bba:	f107 0308 	add.w	r3, r7, #8
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7ff ff73 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bca:	2110      	movs	r1, #16
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f000 f995 	bl	8012efc <SDMMC_GetCmdResp1>
 8012bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bd4:	69fb      	ldr	r3, [r7, #28]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3720      	adds	r7, #32
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b088      	sub	sp, #32
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012bec:	2307      	movs	r3, #7
 8012bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c00:	f107 0308 	add.w	r3, r7, #8
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7ff ff50 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c10:	2107      	movs	r1, #7
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f972 	bl	8012efc <SDMMC_GetCmdResp1>
 8012c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c1a:	69fb      	ldr	r3, [r7, #28]
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3720      	adds	r7, #32
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b088      	sub	sp, #32
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012c30:	2300      	movs	r3, #0
 8012c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012c34:	2300      	movs	r3, #0
 8012c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c42:	f107 0308 	add.w	r3, r7, #8
 8012c46:	4619      	mov	r1, r3
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7ff ff2f 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 fb96 	bl	8013380 <SDMMC_GetCmdError>
 8012c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c56:	69fb      	ldr	r3, [r7, #28]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3720      	adds	r7, #32
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b088      	sub	sp, #32
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012c68:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012c6e:	2308      	movs	r3, #8
 8012c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c82:	f107 0308 	add.w	r3, r7, #8
 8012c86:	4619      	mov	r1, r3
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ff ff0f 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 fb28 	bl	80132e4 <SDMMC_GetCmdResp7>
 8012c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c96:	69fb      	ldr	r3, [r7, #28]
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3720      	adds	r7, #32
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b088      	sub	sp, #32
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012cae:	2337      	movs	r3, #55	; 0x37
 8012cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cc2:	f107 0308 	add.w	r3, r7, #8
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7ff feef 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cd2:	2137      	movs	r1, #55	; 0x37
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f000 f911 	bl	8012efc <SDMMC_GetCmdResp1>
 8012cda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cdc:	69fb      	ldr	r3, [r7, #28]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3720      	adds	r7, #32
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b088      	sub	sp, #32
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
 8012cee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012cf4:	2329      	movs	r3, #41	; 0x29
 8012cf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d08:	f107 0308 	add.w	r3, r7, #8
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7ff fecc 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fa2d 	bl	8013174 <SDMMC_GetCmdResp3>
 8012d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d1c:	69fb      	ldr	r3, [r7, #28]
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3720      	adds	r7, #32
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b088      	sub	sp, #32
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012d34:	2306      	movs	r3, #6
 8012d36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d48:	f107 0308 	add.w	r3, r7, #8
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7ff feac 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d58:	2106      	movs	r1, #6
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 f8ce 	bl	8012efc <SDMMC_GetCmdResp1>
 8012d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d62:	69fb      	ldr	r3, [r7, #28]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3720      	adds	r7, #32
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b088      	sub	sp, #32
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012d74:	2300      	movs	r3, #0
 8012d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012d78:	2333      	movs	r3, #51	; 0x33
 8012d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d82:	2300      	movs	r3, #0
 8012d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d8c:	f107 0308 	add.w	r3, r7, #8
 8012d90:	4619      	mov	r1, r3
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7ff fe8a 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d9c:	2133      	movs	r1, #51	; 0x33
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f000 f8ac 	bl	8012efc <SDMMC_GetCmdResp1>
 8012da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012da6:	69fb      	ldr	r3, [r7, #28]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3720      	adds	r7, #32
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b088      	sub	sp, #32
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012db8:	2300      	movs	r3, #0
 8012dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012dbc:	2302      	movs	r3, #2
 8012dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dd0:	f107 0308 	add.w	r3, r7, #8
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f7ff fe68 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f000 f97f 	bl	80130e0 <SDMMC_GetCmdResp2>
 8012de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012de4:	69fb      	ldr	r3, [r7, #28]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3720      	adds	r7, #32
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b088      	sub	sp, #32
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
 8012df6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012dfc:	2309      	movs	r3, #9
 8012dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e06:	2300      	movs	r3, #0
 8012e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e10:	f107 0308 	add.w	r3, r7, #8
 8012e14:	4619      	mov	r1, r3
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7ff fe48 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 f95f 	bl	80130e0 <SDMMC_GetCmdResp2>
 8012e22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e24:	69fb      	ldr	r3, [r7, #28]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3720      	adds	r7, #32
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b088      	sub	sp, #32
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
 8012e36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012e3c:	2303      	movs	r3, #3
 8012e3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e46:	2300      	movs	r3, #0
 8012e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e50:	f107 0308 	add.w	r3, r7, #8
 8012e54:	4619      	mov	r1, r3
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7ff fe28 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	2103      	movs	r1, #3
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 f9c7 	bl	80131f4 <SDMMC_GetCmdResp6>
 8012e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e68:	69fb      	ldr	r3, [r7, #28]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3720      	adds	r7, #32
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}

08012e72 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e72:	b580      	push	{r7, lr}
 8012e74:	b088      	sub	sp, #32
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	6078      	str	r0, [r7, #4]
 8012e7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012e80:	230d      	movs	r3, #13
 8012e82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e94:	f107 0308 	add.w	r3, r7, #8
 8012e98:	4619      	mov	r1, r3
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f7ff fe06 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ea4:	210d      	movs	r1, #13
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 f828 	bl	8012efc <SDMMC_GetCmdResp1>
 8012eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eae:	69fb      	ldr	r3, [r7, #28]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3720      	adds	r7, #32
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b088      	sub	sp, #32
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012ec4:	230d      	movs	r3, #13
 8012ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ed8:	f107 0308 	add.w	r3, r7, #8
 8012edc:	4619      	mov	r1, r3
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7ff fde4 	bl	8012aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ee8:	210d      	movs	r1, #13
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 f806 	bl	8012efc <SDMMC_GetCmdResp1>
 8012ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ef2:	69fb      	ldr	r3, [r7, #28]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3720      	adds	r7, #32
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b088      	sub	sp, #32
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	460b      	mov	r3, r1
 8012f06:	607a      	str	r2, [r7, #4]
 8012f08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012f0a:	4b70      	ldr	r3, [pc, #448]	; (80130cc <SDMMC_GetCmdResp1+0x1d0>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a70      	ldr	r2, [pc, #448]	; (80130d0 <SDMMC_GetCmdResp1+0x1d4>)
 8012f10:	fba2 2303 	umull	r2, r3, r2, r3
 8012f14:	0a5a      	lsrs	r2, r3, #9
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	fb02 f303 	mul.w	r3, r2, r3
 8012f1c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	1e5a      	subs	r2, r3, #1
 8012f22:	61fa      	str	r2, [r7, #28]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d102      	bne.n	8012f2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f2c:	e0c9      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f32:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012f34:	69ba      	ldr	r2, [r7, #24]
 8012f36:	4b67      	ldr	r3, [pc, #412]	; (80130d4 <SDMMC_GetCmdResp1+0x1d8>)
 8012f38:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d0ef      	beq.n	8012f1e <SDMMC_GetCmdResp1+0x22>
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1ea      	bne.n	8012f1e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f4c:	f003 0304 	and.w	r3, r3, #4
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d004      	beq.n	8012f5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2204      	movs	r2, #4
 8012f58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f5a:	2304      	movs	r3, #4
 8012f5c:	e0b1      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f62:	f003 0301 	and.w	r3, r3, #1
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f70:	2301      	movs	r3, #1
 8012f72:	e0a6      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	4a58      	ldr	r2, [pc, #352]	; (80130d8 <SDMMC_GetCmdResp1+0x1dc>)
 8012f78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f7ff fdc0 	bl	8012b00 <SDMMC_GetCommandResponse>
 8012f80:	4603      	mov	r3, r0
 8012f82:	461a      	mov	r2, r3
 8012f84:	7afb      	ldrb	r3, [r7, #11]
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d001      	beq.n	8012f8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e099      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f8e:	2100      	movs	r1, #0
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f7ff fdc2 	bl	8012b1a <SDMMC_GetResponse>
 8012f96:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012f98:	697a      	ldr	r2, [r7, #20]
 8012f9a:	4b50      	ldr	r3, [pc, #320]	; (80130dc <SDMMC_GetCmdResp1+0x1e0>)
 8012f9c:	4013      	ands	r3, r2
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d101      	bne.n	8012fa6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e08d      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	da02      	bge.n	8012fb2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012fb0:	e087      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012fbc:	2340      	movs	r3, #64	; 0x40
 8012fbe:	e080      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d001      	beq.n	8012fce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012fca:	2380      	movs	r3, #128	; 0x80
 8012fcc:	e079      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d002      	beq.n	8012fde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fdc:	e071      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fec:	e069      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ffc:	e061      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013004:	2b00      	cmp	r3, #0
 8013006:	d002      	beq.n	801300e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801300c:	e059      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801301c:	e051      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013024:	2b00      	cmp	r3, #0
 8013026:	d002      	beq.n	801302e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801302c:	e049      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013034:	2b00      	cmp	r3, #0
 8013036:	d002      	beq.n	801303e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801303c:	e041      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013044:	2b00      	cmp	r3, #0
 8013046:	d002      	beq.n	801304e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801304c:	e039      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013054:	2b00      	cmp	r3, #0
 8013056:	d002      	beq.n	801305e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801305c:	e031      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013064:	2b00      	cmp	r3, #0
 8013066:	d002      	beq.n	801306e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013068:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801306c:	e029      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013074:	2b00      	cmp	r3, #0
 8013076:	d002      	beq.n	801307e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013078:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801307c:	e021      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013088:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801308c:	e019      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013094:	2b00      	cmp	r3, #0
 8013096:	d002      	beq.n	801309e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013098:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801309c:	e011      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d002      	beq.n	80130ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80130a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80130ac:	e009      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	f003 0308 	and.w	r3, r3, #8
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d002      	beq.n	80130be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80130b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80130bc:	e001      	b.n	80130c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80130be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3720      	adds	r7, #32
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	2400003c 	.word	0x2400003c
 80130d0:	10624dd3 	.word	0x10624dd3
 80130d4:	00200045 	.word	0x00200045
 80130d8:	002000c5 	.word	0x002000c5
 80130dc:	fdffe008 	.word	0xfdffe008

080130e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b085      	sub	sp, #20
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130e8:	4b1f      	ldr	r3, [pc, #124]	; (8013168 <SDMMC_GetCmdResp2+0x88>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	4a1f      	ldr	r2, [pc, #124]	; (801316c <SDMMC_GetCmdResp2+0x8c>)
 80130ee:	fba2 2303 	umull	r2, r3, r2, r3
 80130f2:	0a5b      	lsrs	r3, r3, #9
 80130f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80130f8:	fb02 f303 	mul.w	r3, r2, r3
 80130fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	1e5a      	subs	r2, r3, #1
 8013102:	60fa      	str	r2, [r7, #12]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d102      	bne.n	801310e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801310c:	e026      	b.n	801315c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013112:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801311a:	2b00      	cmp	r3, #0
 801311c:	d0ef      	beq.n	80130fe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1ea      	bne.n	80130fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801312c:	f003 0304 	and.w	r3, r3, #4
 8013130:	2b00      	cmp	r3, #0
 8013132:	d004      	beq.n	801313e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2204      	movs	r2, #4
 8013138:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801313a:	2304      	movs	r3, #4
 801313c:	e00e      	b.n	801315c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013142:	f003 0301 	and.w	r3, r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	d004      	beq.n	8013154 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2201      	movs	r2, #1
 801314e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013150:	2301      	movs	r3, #1
 8013152:	e003      	b.n	801315c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	4a06      	ldr	r2, [pc, #24]	; (8013170 <SDMMC_GetCmdResp2+0x90>)
 8013158:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801315a:	2300      	movs	r3, #0
}
 801315c:	4618      	mov	r0, r3
 801315e:	3714      	adds	r7, #20
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	2400003c 	.word	0x2400003c
 801316c:	10624dd3 	.word	0x10624dd3
 8013170:	002000c5 	.word	0x002000c5

08013174 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013174:	b480      	push	{r7}
 8013176:	b085      	sub	sp, #20
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801317c:	4b1a      	ldr	r3, [pc, #104]	; (80131e8 <SDMMC_GetCmdResp3+0x74>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a1a      	ldr	r2, [pc, #104]	; (80131ec <SDMMC_GetCmdResp3+0x78>)
 8013182:	fba2 2303 	umull	r2, r3, r2, r3
 8013186:	0a5b      	lsrs	r3, r3, #9
 8013188:	f241 3288 	movw	r2, #5000	; 0x1388
 801318c:	fb02 f303 	mul.w	r3, r2, r3
 8013190:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	1e5a      	subs	r2, r3, #1
 8013196:	60fa      	str	r2, [r7, #12]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801319c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131a0:	e01b      	b.n	80131da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d0ef      	beq.n	8013192 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d1ea      	bne.n	8013192 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131c0:	f003 0304 	and.w	r3, r3, #4
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d004      	beq.n	80131d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2204      	movs	r2, #4
 80131cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131ce:	2304      	movs	r3, #4
 80131d0:	e003      	b.n	80131da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4a06      	ldr	r2, [pc, #24]	; (80131f0 <SDMMC_GetCmdResp3+0x7c>)
 80131d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	2400003c 	.word	0x2400003c
 80131ec:	10624dd3 	.word	0x10624dd3
 80131f0:	002000c5 	.word	0x002000c5

080131f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	460b      	mov	r3, r1
 80131fe:	607a      	str	r2, [r7, #4]
 8013200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013202:	4b35      	ldr	r3, [pc, #212]	; (80132d8 <SDMMC_GetCmdResp6+0xe4>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4a35      	ldr	r2, [pc, #212]	; (80132dc <SDMMC_GetCmdResp6+0xe8>)
 8013208:	fba2 2303 	umull	r2, r3, r2, r3
 801320c:	0a5b      	lsrs	r3, r3, #9
 801320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013212:	fb02 f303 	mul.w	r3, r2, r3
 8013216:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	1e5a      	subs	r2, r3, #1
 801321c:	61fa      	str	r2, [r7, #28]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d102      	bne.n	8013228 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013226:	e052      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801322c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013234:	2b00      	cmp	r3, #0
 8013236:	d0ef      	beq.n	8013218 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013238:	69bb      	ldr	r3, [r7, #24]
 801323a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801323e:	2b00      	cmp	r3, #0
 8013240:	d1ea      	bne.n	8013218 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013246:	f003 0304 	and.w	r3, r3, #4
 801324a:	2b00      	cmp	r3, #0
 801324c:	d004      	beq.n	8013258 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2204      	movs	r2, #4
 8013252:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013254:	2304      	movs	r3, #4
 8013256:	e03a      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801325c:	f003 0301 	and.w	r3, r3, #1
 8013260:	2b00      	cmp	r3, #0
 8013262:	d004      	beq.n	801326e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2201      	movs	r2, #1
 8013268:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801326a:	2301      	movs	r3, #1
 801326c:	e02f      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff fc46 	bl	8012b00 <SDMMC_GetCommandResponse>
 8013274:	4603      	mov	r3, r0
 8013276:	461a      	mov	r2, r3
 8013278:	7afb      	ldrb	r3, [r7, #11]
 801327a:	4293      	cmp	r3, r2
 801327c:	d001      	beq.n	8013282 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801327e:	2301      	movs	r3, #1
 8013280:	e025      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	4a16      	ldr	r2, [pc, #88]	; (80132e0 <SDMMC_GetCmdResp6+0xec>)
 8013286:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013288:	2100      	movs	r1, #0
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7ff fc45 	bl	8012b1a <SDMMC_GetResponse>
 8013290:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013298:	2b00      	cmp	r3, #0
 801329a:	d106      	bne.n	80132aa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	0c1b      	lsrs	r3, r3, #16
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80132a6:	2300      	movs	r3, #0
 80132a8:	e011      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80132b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80132b8:	e009      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132c8:	e001      	b.n	80132ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80132ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3720      	adds	r7, #32
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	2400003c 	.word	0x2400003c
 80132dc:	10624dd3 	.word	0x10624dd3
 80132e0:	002000c5 	.word	0x002000c5

080132e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80132e4:	b480      	push	{r7}
 80132e6:	b085      	sub	sp, #20
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132ec:	4b22      	ldr	r3, [pc, #136]	; (8013378 <SDMMC_GetCmdResp7+0x94>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a22      	ldr	r2, [pc, #136]	; (801337c <SDMMC_GetCmdResp7+0x98>)
 80132f2:	fba2 2303 	umull	r2, r3, r2, r3
 80132f6:	0a5b      	lsrs	r3, r3, #9
 80132f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80132fc:	fb02 f303 	mul.w	r3, r2, r3
 8013300:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	1e5a      	subs	r2, r3, #1
 8013306:	60fa      	str	r2, [r7, #12]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801330c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013310:	e02c      	b.n	801336c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013316:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801331e:	2b00      	cmp	r3, #0
 8013320:	d0ef      	beq.n	8013302 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013328:	2b00      	cmp	r3, #0
 801332a:	d1ea      	bne.n	8013302 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013330:	f003 0304 	and.w	r3, r3, #4
 8013334:	2b00      	cmp	r3, #0
 8013336:	d004      	beq.n	8013342 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2204      	movs	r2, #4
 801333c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801333e:	2304      	movs	r3, #4
 8013340:	e014      	b.n	801336c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013346:	f003 0301 	and.w	r3, r3, #1
 801334a:	2b00      	cmp	r3, #0
 801334c:	d004      	beq.n	8013358 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2201      	movs	r2, #1
 8013352:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013354:	2301      	movs	r3, #1
 8013356:	e009      	b.n	801336c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013360:	2b00      	cmp	r3, #0
 8013362:	d002      	beq.n	801336a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2240      	movs	r2, #64	; 0x40
 8013368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801336a:	2300      	movs	r3, #0

}
 801336c:	4618      	mov	r0, r3
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	2400003c 	.word	0x2400003c
 801337c:	10624dd3 	.word	0x10624dd3

08013380 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013380:	b480      	push	{r7}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013388:	4b11      	ldr	r3, [pc, #68]	; (80133d0 <SDMMC_GetCmdError+0x50>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a11      	ldr	r2, [pc, #68]	; (80133d4 <SDMMC_GetCmdError+0x54>)
 801338e:	fba2 2303 	umull	r2, r3, r2, r3
 8013392:	0a5b      	lsrs	r3, r3, #9
 8013394:	f241 3288 	movw	r2, #5000	; 0x1388
 8013398:	fb02 f303 	mul.w	r3, r2, r3
 801339c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	1e5a      	subs	r2, r3, #1
 80133a2:	60fa      	str	r2, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133ac:	e009      	b.n	80133c2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d0f1      	beq.n	801339e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	4a06      	ldr	r2, [pc, #24]	; (80133d8 <SDMMC_GetCmdError+0x58>)
 80133be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80133c0:	2300      	movs	r3, #0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3714      	adds	r7, #20
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	2400003c 	.word	0x2400003c
 80133d4:	10624dd3 	.word	0x10624dd3
 80133d8:	002000c5 	.word	0x002000c5

080133dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80133dc:	b084      	sub	sp, #16
 80133de:	b580      	push	{r7, lr}
 80133e0:	b084      	sub	sp, #16
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	f107 001c 	add.w	r0, r7, #28
 80133ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d120      	bne.n	8013436 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	68da      	ldr	r2, [r3, #12]
 8013404:	4b2a      	ldr	r3, [pc, #168]	; (80134b0 <USB_CoreInit+0xd4>)
 8013406:	4013      	ands	r3, r2
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801341a:	2b01      	cmp	r3, #1
 801341c:	d105      	bne.n	801342a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 faac 	bl	8013988 <USB_CoreReset>
 8013430:	4603      	mov	r3, r0
 8013432:	73fb      	strb	r3, [r7, #15]
 8013434:	e01a      	b.n	801346c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f000 faa0 	bl	8013988 <USB_CoreReset>
 8013448:	4603      	mov	r3, r0
 801344a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801344e:	2b00      	cmp	r3, #0
 8013450:	d106      	bne.n	8013460 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013456:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	639a      	str	r2, [r3, #56]	; 0x38
 801345e:	e005      	b.n	801346c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	2b01      	cmp	r3, #1
 8013470:	d116      	bne.n	80134a0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013476:	b29a      	uxth	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013480:	4b0c      	ldr	r3, [pc, #48]	; (80134b4 <USB_CoreInit+0xd8>)
 8013482:	4313      	orrs	r3, r2
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	689b      	ldr	r3, [r3, #8]
 801348c:	f043 0206 	orr.w	r2, r3, #6
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	f043 0220 	orr.w	r2, r3, #32
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80134a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80134ac:	b004      	add	sp, #16
 80134ae:	4770      	bx	lr
 80134b0:	ffbdffbf 	.word	0xffbdffbf
 80134b4:	03ee0000 	.word	0x03ee0000

080134b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	f023 0201 	bic.w	r2, r3, #1
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b084      	sub	sp, #16
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
 80134e2:	460b      	mov	r3, r1
 80134e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80134e6:	2300      	movs	r3, #0
 80134e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80134f6:	78fb      	ldrb	r3, [r7, #3]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d115      	bne.n	8013528 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013508:	2001      	movs	r0, #1
 801350a:	f7f2 fbb7 	bl	8005c7c <HAL_Delay>
      ms++;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3301      	adds	r3, #1
 8013512:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fa29 	bl	801396c <USB_GetMode>
 801351a:	4603      	mov	r3, r0
 801351c:	2b01      	cmp	r3, #1
 801351e:	d01e      	beq.n	801355e <USB_SetCurrentMode+0x84>
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2b31      	cmp	r3, #49	; 0x31
 8013524:	d9f0      	bls.n	8013508 <USB_SetCurrentMode+0x2e>
 8013526:	e01a      	b.n	801355e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013528:	78fb      	ldrb	r3, [r7, #3]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d115      	bne.n	801355a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801353a:	2001      	movs	r0, #1
 801353c:	f7f2 fb9e 	bl	8005c7c <HAL_Delay>
      ms++;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	3301      	adds	r3, #1
 8013544:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 fa10 	bl	801396c <USB_GetMode>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d005      	beq.n	801355e <USB_SetCurrentMode+0x84>
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b31      	cmp	r3, #49	; 0x31
 8013556:	d9f0      	bls.n	801353a <USB_SetCurrentMode+0x60>
 8013558:	e001      	b.n	801355e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801355a:	2301      	movs	r3, #1
 801355c:	e005      	b.n	801356a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2b32      	cmp	r3, #50	; 0x32
 8013562:	d101      	bne.n	8013568 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013564:	2301      	movs	r3, #1
 8013566:	e000      	b.n	801356a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013568:	2300      	movs	r3, #0
}
 801356a:	4618      	mov	r0, r3
 801356c:	3710      	adds	r7, #16
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
	...

08013574 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013574:	b084      	sub	sp, #16
 8013576:	b580      	push	{r7, lr}
 8013578:	b086      	sub	sp, #24
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
 801357e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013586:	2300      	movs	r3, #0
 8013588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801358e:	2300      	movs	r3, #0
 8013590:	613b      	str	r3, [r7, #16]
 8013592:	e009      	b.n	80135a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013594:	687a      	ldr	r2, [r7, #4]
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	3340      	adds	r3, #64	; 0x40
 801359a:	009b      	lsls	r3, r3, #2
 801359c:	4413      	add	r3, r2
 801359e:	2200      	movs	r2, #0
 80135a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	3301      	adds	r3, #1
 80135a6:	613b      	str	r3, [r7, #16]
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	2b0e      	cmp	r3, #14
 80135ac:	d9f2      	bls.n	8013594 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80135ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d11c      	bne.n	80135ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	68fa      	ldr	r2, [r7, #12]
 80135be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80135c2:	f043 0302 	orr.w	r3, r3, #2
 80135c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	e005      	b.n	80135fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013600:	461a      	mov	r2, r3
 8013602:	2300      	movs	r3, #0
 8013604:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801360c:	4619      	mov	r1, r3
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013614:	461a      	mov	r2, r3
 8013616:	680b      	ldr	r3, [r1, #0]
 8013618:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361c:	2b01      	cmp	r3, #1
 801361e:	d10c      	bne.n	801363a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013622:	2b00      	cmp	r3, #0
 8013624:	d104      	bne.n	8013630 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013626:	2100      	movs	r1, #0
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 f965 	bl	80138f8 <USB_SetDevSpeed>
 801362e:	e008      	b.n	8013642 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013630:	2101      	movs	r1, #1
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 f960 	bl	80138f8 <USB_SetDevSpeed>
 8013638:	e003      	b.n	8013642 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801363a:	2103      	movs	r1, #3
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f000 f95b 	bl	80138f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013642:	2110      	movs	r1, #16
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f000 f8f3 	bl	8013830 <USB_FlushTxFifo>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d001      	beq.n	8013654 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013650:	2301      	movs	r3, #1
 8013652:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 f91f 	bl	8013898 <USB_FlushRxFifo>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d001      	beq.n	8013664 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013660:	2301      	movs	r3, #1
 8013662:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801366a:	461a      	mov	r2, r3
 801366c:	2300      	movs	r3, #0
 801366e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013676:	461a      	mov	r2, r3
 8013678:	2300      	movs	r3, #0
 801367a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013682:	461a      	mov	r2, r3
 8013684:	2300      	movs	r3, #0
 8013686:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013688:	2300      	movs	r3, #0
 801368a:	613b      	str	r3, [r7, #16]
 801368c:	e043      	b.n	8013716 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136a4:	d118      	bne.n	80136d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d10a      	bne.n	80136c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	015a      	lsls	r2, r3, #5
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	4413      	add	r3, r2
 80136b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136b8:	461a      	mov	r2, r3
 80136ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80136be:	6013      	str	r3, [r2, #0]
 80136c0:	e013      	b.n	80136ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	015a      	lsls	r2, r3, #5
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	4413      	add	r3, r2
 80136ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ce:	461a      	mov	r2, r3
 80136d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	e008      	b.n	80136ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	015a      	lsls	r2, r3, #5
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	4413      	add	r3, r2
 80136e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136e4:	461a      	mov	r2, r3
 80136e6:	2300      	movs	r3, #0
 80136e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	015a      	lsls	r2, r3, #5
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	4413      	add	r3, r2
 80136f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f6:	461a      	mov	r2, r3
 80136f8:	2300      	movs	r3, #0
 80136fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	015a      	lsls	r2, r3, #5
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	4413      	add	r3, r2
 8013704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013708:	461a      	mov	r2, r3
 801370a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801370e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	3301      	adds	r3, #1
 8013714:	613b      	str	r3, [r7, #16]
 8013716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013718:	693a      	ldr	r2, [r7, #16]
 801371a:	429a      	cmp	r2, r3
 801371c:	d3b7      	bcc.n	801368e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801371e:	2300      	movs	r3, #0
 8013720:	613b      	str	r3, [r7, #16]
 8013722:	e043      	b.n	80137ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	015a      	lsls	r2, r3, #5
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	4413      	add	r3, r2
 801372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801373a:	d118      	bne.n	801376e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d10a      	bne.n	8013758 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	015a      	lsls	r2, r3, #5
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	4413      	add	r3, r2
 801374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374e:	461a      	mov	r2, r3
 8013750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013754:	6013      	str	r3, [r2, #0]
 8013756:	e013      	b.n	8013780 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	015a      	lsls	r2, r3, #5
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	4413      	add	r3, r2
 8013760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013764:	461a      	mov	r2, r3
 8013766:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801376a:	6013      	str	r3, [r2, #0]
 801376c:	e008      	b.n	8013780 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	015a      	lsls	r2, r3, #5
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	4413      	add	r3, r2
 8013776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801377a:	461a      	mov	r2, r3
 801377c:	2300      	movs	r3, #0
 801377e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	015a      	lsls	r2, r3, #5
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	4413      	add	r3, r2
 8013788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801378c:	461a      	mov	r2, r3
 801378e:	2300      	movs	r3, #0
 8013790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	015a      	lsls	r2, r3, #5
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	4413      	add	r3, r2
 801379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801379e:	461a      	mov	r2, r3
 80137a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80137a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	3301      	adds	r3, #1
 80137aa:	613b      	str	r3, [r7, #16]
 80137ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d3b7      	bcc.n	8013724 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	68fa      	ldr	r2, [r7, #12]
 80137be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80137c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80137c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80137d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d105      	bne.n	80137e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	699b      	ldr	r3, [r3, #24]
 80137e0:	f043 0210 	orr.w	r2, r3, #16
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	699a      	ldr	r2, [r3, #24]
 80137ec:	4b0e      	ldr	r3, [pc, #56]	; (8013828 <USB_DevInit+0x2b4>)
 80137ee:	4313      	orrs	r3, r2
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80137f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d005      	beq.n	8013806 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	699b      	ldr	r3, [r3, #24]
 80137fe:	f043 0208 	orr.w	r2, r3, #8
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013808:	2b01      	cmp	r3, #1
 801380a:	d105      	bne.n	8013818 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	699a      	ldr	r2, [r3, #24]
 8013810:	4b06      	ldr	r3, [pc, #24]	; (801382c <USB_DevInit+0x2b8>)
 8013812:	4313      	orrs	r3, r2
 8013814:	687a      	ldr	r2, [r7, #4]
 8013816:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013818:	7dfb      	ldrb	r3, [r7, #23]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3718      	adds	r7, #24
 801381e:	46bd      	mov	sp, r7
 8013820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013824:	b004      	add	sp, #16
 8013826:	4770      	bx	lr
 8013828:	803c3800 	.word	0x803c3800
 801382c:	40000004 	.word	0x40000004

08013830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801383a:	2300      	movs	r3, #0
 801383c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	3301      	adds	r3, #1
 8013842:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	4a13      	ldr	r2, [pc, #76]	; (8013894 <USB_FlushTxFifo+0x64>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d901      	bls.n	8013850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801384c:	2303      	movs	r3, #3
 801384e:	e01b      	b.n	8013888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	691b      	ldr	r3, [r3, #16]
 8013854:	2b00      	cmp	r3, #0
 8013856:	daf2      	bge.n	801383e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013858:	2300      	movs	r3, #0
 801385a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	019b      	lsls	r3, r3, #6
 8013860:	f043 0220 	orr.w	r2, r3, #32
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	3301      	adds	r3, #1
 801386c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	4a08      	ldr	r2, [pc, #32]	; (8013894 <USB_FlushTxFifo+0x64>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d901      	bls.n	801387a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013876:	2303      	movs	r3, #3
 8013878:	e006      	b.n	8013888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	f003 0320 	and.w	r3, r3, #32
 8013882:	2b20      	cmp	r3, #32
 8013884:	d0f0      	beq.n	8013868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013886:	2300      	movs	r3, #0
}
 8013888:	4618      	mov	r0, r3
 801388a:	3714      	adds	r7, #20
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr
 8013894:	00030d40 	.word	0x00030d40

08013898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013898:	b480      	push	{r7}
 801389a:	b085      	sub	sp, #20
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80138a0:	2300      	movs	r3, #0
 80138a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	3301      	adds	r3, #1
 80138a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	4a11      	ldr	r2, [pc, #68]	; (80138f4 <USB_FlushRxFifo+0x5c>)
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d901      	bls.n	80138b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80138b2:	2303      	movs	r3, #3
 80138b4:	e018      	b.n	80138e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	691b      	ldr	r3, [r3, #16]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	daf2      	bge.n	80138a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80138be:	2300      	movs	r3, #0
 80138c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2210      	movs	r2, #16
 80138c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	3301      	adds	r3, #1
 80138cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	4a08      	ldr	r2, [pc, #32]	; (80138f4 <USB_FlushRxFifo+0x5c>)
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d901      	bls.n	80138da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80138d6:	2303      	movs	r3, #3
 80138d8:	e006      	b.n	80138e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	f003 0310 	and.w	r3, r3, #16
 80138e2:	2b10      	cmp	r3, #16
 80138e4:	d0f0      	beq.n	80138c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3714      	adds	r7, #20
 80138ec:	46bd      	mov	sp, r7
 80138ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f2:	4770      	bx	lr
 80138f4:	00030d40 	.word	0x00030d40

080138f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b085      	sub	sp, #20
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	460b      	mov	r3, r1
 8013902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	78fb      	ldrb	r3, [r7, #3]
 8013912:	68f9      	ldr	r1, [r7, #12]
 8013914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013918:	4313      	orrs	r3, r2
 801391a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3714      	adds	r7, #20
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr

0801392a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801392a:	b480      	push	{r7}
 801392c:	b085      	sub	sp, #20
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013944:	f023 0303 	bic.w	r3, r3, #3
 8013948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013958:	f043 0302 	orr.w	r3, r3, #2
 801395c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801395e:	2300      	movs	r3, #0
}
 8013960:	4618      	mov	r0, r3
 8013962:	3714      	adds	r7, #20
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801396c:	b480      	push	{r7}
 801396e:	b083      	sub	sp, #12
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	695b      	ldr	r3, [r3, #20]
 8013978:	f003 0301 	and.w	r3, r3, #1
}
 801397c:	4618      	mov	r0, r3
 801397e:	370c      	adds	r7, #12
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013988:	b480      	push	{r7}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013990:	2300      	movs	r3, #0
 8013992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3301      	adds	r3, #1
 8013998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	4a13      	ldr	r2, [pc, #76]	; (80139ec <USB_CoreReset+0x64>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d901      	bls.n	80139a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80139a2:	2303      	movs	r3, #3
 80139a4:	e01b      	b.n	80139de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	691b      	ldr	r3, [r3, #16]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	daf2      	bge.n	8013994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	f043 0201 	orr.w	r2, r3, #1
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	3301      	adds	r3, #1
 80139c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	4a09      	ldr	r2, [pc, #36]	; (80139ec <USB_CoreReset+0x64>)
 80139c8:	4293      	cmp	r3, r2
 80139ca:	d901      	bls.n	80139d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80139cc:	2303      	movs	r3, #3
 80139ce:	e006      	b.n	80139de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	691b      	ldr	r3, [r3, #16]
 80139d4:	f003 0301 	and.w	r3, r3, #1
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d0f0      	beq.n	80139be <USB_CoreReset+0x36>

  return HAL_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3714      	adds	r7, #20
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	00030d40 	.word	0x00030d40

080139f0 <sbrk_aligned>:
 80139f0:	b570      	push	{r4, r5, r6, lr}
 80139f2:	4e0e      	ldr	r6, [pc, #56]	; (8013a2c <sbrk_aligned+0x3c>)
 80139f4:	460c      	mov	r4, r1
 80139f6:	6831      	ldr	r1, [r6, #0]
 80139f8:	4605      	mov	r5, r0
 80139fa:	b911      	cbnz	r1, 8013a02 <sbrk_aligned+0x12>
 80139fc:	f000 f8e4 	bl	8013bc8 <_sbrk_r>
 8013a00:	6030      	str	r0, [r6, #0]
 8013a02:	4621      	mov	r1, r4
 8013a04:	4628      	mov	r0, r5
 8013a06:	f000 f8df 	bl	8013bc8 <_sbrk_r>
 8013a0a:	1c43      	adds	r3, r0, #1
 8013a0c:	d00a      	beq.n	8013a24 <sbrk_aligned+0x34>
 8013a0e:	1cc4      	adds	r4, r0, #3
 8013a10:	f024 0403 	bic.w	r4, r4, #3
 8013a14:	42a0      	cmp	r0, r4
 8013a16:	d007      	beq.n	8013a28 <sbrk_aligned+0x38>
 8013a18:	1a21      	subs	r1, r4, r0
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	f000 f8d4 	bl	8013bc8 <_sbrk_r>
 8013a20:	3001      	adds	r0, #1
 8013a22:	d101      	bne.n	8013a28 <sbrk_aligned+0x38>
 8013a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013a28:	4620      	mov	r0, r4
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}
 8013a2c:	240019f4 	.word	0x240019f4

08013a30 <_malloc_r>:
 8013a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a34:	1ccd      	adds	r5, r1, #3
 8013a36:	f025 0503 	bic.w	r5, r5, #3
 8013a3a:	3508      	adds	r5, #8
 8013a3c:	2d0c      	cmp	r5, #12
 8013a3e:	bf38      	it	cc
 8013a40:	250c      	movcc	r5, #12
 8013a42:	2d00      	cmp	r5, #0
 8013a44:	4607      	mov	r7, r0
 8013a46:	db01      	blt.n	8013a4c <_malloc_r+0x1c>
 8013a48:	42a9      	cmp	r1, r5
 8013a4a:	d905      	bls.n	8013a58 <_malloc_r+0x28>
 8013a4c:	230c      	movs	r3, #12
 8013a4e:	603b      	str	r3, [r7, #0]
 8013a50:	2600      	movs	r6, #0
 8013a52:	4630      	mov	r0, r6
 8013a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013b2c <_malloc_r+0xfc>
 8013a5c:	f000 f868 	bl	8013b30 <__malloc_lock>
 8013a60:	f8d8 3000 	ldr.w	r3, [r8]
 8013a64:	461c      	mov	r4, r3
 8013a66:	bb5c      	cbnz	r4, 8013ac0 <_malloc_r+0x90>
 8013a68:	4629      	mov	r1, r5
 8013a6a:	4638      	mov	r0, r7
 8013a6c:	f7ff ffc0 	bl	80139f0 <sbrk_aligned>
 8013a70:	1c43      	adds	r3, r0, #1
 8013a72:	4604      	mov	r4, r0
 8013a74:	d155      	bne.n	8013b22 <_malloc_r+0xf2>
 8013a76:	f8d8 4000 	ldr.w	r4, [r8]
 8013a7a:	4626      	mov	r6, r4
 8013a7c:	2e00      	cmp	r6, #0
 8013a7e:	d145      	bne.n	8013b0c <_malloc_r+0xdc>
 8013a80:	2c00      	cmp	r4, #0
 8013a82:	d048      	beq.n	8013b16 <_malloc_r+0xe6>
 8013a84:	6823      	ldr	r3, [r4, #0]
 8013a86:	4631      	mov	r1, r6
 8013a88:	4638      	mov	r0, r7
 8013a8a:	eb04 0903 	add.w	r9, r4, r3
 8013a8e:	f000 f89b 	bl	8013bc8 <_sbrk_r>
 8013a92:	4581      	cmp	r9, r0
 8013a94:	d13f      	bne.n	8013b16 <_malloc_r+0xe6>
 8013a96:	6821      	ldr	r1, [r4, #0]
 8013a98:	1a6d      	subs	r5, r5, r1
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	f7ff ffa7 	bl	80139f0 <sbrk_aligned>
 8013aa2:	3001      	adds	r0, #1
 8013aa4:	d037      	beq.n	8013b16 <_malloc_r+0xe6>
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	442b      	add	r3, r5
 8013aaa:	6023      	str	r3, [r4, #0]
 8013aac:	f8d8 3000 	ldr.w	r3, [r8]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d038      	beq.n	8013b26 <_malloc_r+0xf6>
 8013ab4:	685a      	ldr	r2, [r3, #4]
 8013ab6:	42a2      	cmp	r2, r4
 8013ab8:	d12b      	bne.n	8013b12 <_malloc_r+0xe2>
 8013aba:	2200      	movs	r2, #0
 8013abc:	605a      	str	r2, [r3, #4]
 8013abe:	e00f      	b.n	8013ae0 <_malloc_r+0xb0>
 8013ac0:	6822      	ldr	r2, [r4, #0]
 8013ac2:	1b52      	subs	r2, r2, r5
 8013ac4:	d41f      	bmi.n	8013b06 <_malloc_r+0xd6>
 8013ac6:	2a0b      	cmp	r2, #11
 8013ac8:	d917      	bls.n	8013afa <_malloc_r+0xca>
 8013aca:	1961      	adds	r1, r4, r5
 8013acc:	42a3      	cmp	r3, r4
 8013ace:	6025      	str	r5, [r4, #0]
 8013ad0:	bf18      	it	ne
 8013ad2:	6059      	strne	r1, [r3, #4]
 8013ad4:	6863      	ldr	r3, [r4, #4]
 8013ad6:	bf08      	it	eq
 8013ad8:	f8c8 1000 	streq.w	r1, [r8]
 8013adc:	5162      	str	r2, [r4, r5]
 8013ade:	604b      	str	r3, [r1, #4]
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f104 060b 	add.w	r6, r4, #11
 8013ae6:	f000 f829 	bl	8013b3c <__malloc_unlock>
 8013aea:	f026 0607 	bic.w	r6, r6, #7
 8013aee:	1d23      	adds	r3, r4, #4
 8013af0:	1af2      	subs	r2, r6, r3
 8013af2:	d0ae      	beq.n	8013a52 <_malloc_r+0x22>
 8013af4:	1b9b      	subs	r3, r3, r6
 8013af6:	50a3      	str	r3, [r4, r2]
 8013af8:	e7ab      	b.n	8013a52 <_malloc_r+0x22>
 8013afa:	42a3      	cmp	r3, r4
 8013afc:	6862      	ldr	r2, [r4, #4]
 8013afe:	d1dd      	bne.n	8013abc <_malloc_r+0x8c>
 8013b00:	f8c8 2000 	str.w	r2, [r8]
 8013b04:	e7ec      	b.n	8013ae0 <_malloc_r+0xb0>
 8013b06:	4623      	mov	r3, r4
 8013b08:	6864      	ldr	r4, [r4, #4]
 8013b0a:	e7ac      	b.n	8013a66 <_malloc_r+0x36>
 8013b0c:	4634      	mov	r4, r6
 8013b0e:	6876      	ldr	r6, [r6, #4]
 8013b10:	e7b4      	b.n	8013a7c <_malloc_r+0x4c>
 8013b12:	4613      	mov	r3, r2
 8013b14:	e7cc      	b.n	8013ab0 <_malloc_r+0x80>
 8013b16:	230c      	movs	r3, #12
 8013b18:	603b      	str	r3, [r7, #0]
 8013b1a:	4638      	mov	r0, r7
 8013b1c:	f000 f80e 	bl	8013b3c <__malloc_unlock>
 8013b20:	e797      	b.n	8013a52 <_malloc_r+0x22>
 8013b22:	6025      	str	r5, [r4, #0]
 8013b24:	e7dc      	b.n	8013ae0 <_malloc_r+0xb0>
 8013b26:	605b      	str	r3, [r3, #4]
 8013b28:	deff      	udf	#255	; 0xff
 8013b2a:	bf00      	nop
 8013b2c:	240019f0 	.word	0x240019f0

08013b30 <__malloc_lock>:
 8013b30:	4801      	ldr	r0, [pc, #4]	; (8013b38 <__malloc_lock+0x8>)
 8013b32:	f000 b883 	b.w	8013c3c <__retarget_lock_acquire_recursive>
 8013b36:	bf00      	nop
 8013b38:	24001b34 	.word	0x24001b34

08013b3c <__malloc_unlock>:
 8013b3c:	4801      	ldr	r0, [pc, #4]	; (8013b44 <__malloc_unlock+0x8>)
 8013b3e:	f000 b87e 	b.w	8013c3e <__retarget_lock_release_recursive>
 8013b42:	bf00      	nop
 8013b44:	24001b34 	.word	0x24001b34

08013b48 <realloc>:
 8013b48:	4b02      	ldr	r3, [pc, #8]	; (8013b54 <realloc+0xc>)
 8013b4a:	460a      	mov	r2, r1
 8013b4c:	4601      	mov	r1, r0
 8013b4e:	6818      	ldr	r0, [r3, #0]
 8013b50:	f000 b802 	b.w	8013b58 <_realloc_r>
 8013b54:	24000098 	.word	0x24000098

08013b58 <_realloc_r>:
 8013b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5c:	4680      	mov	r8, r0
 8013b5e:	4614      	mov	r4, r2
 8013b60:	460e      	mov	r6, r1
 8013b62:	b921      	cbnz	r1, 8013b6e <_realloc_r+0x16>
 8013b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b68:	4611      	mov	r1, r2
 8013b6a:	f7ff bf61 	b.w	8013a30 <_malloc_r>
 8013b6e:	b92a      	cbnz	r2, 8013b7c <_realloc_r+0x24>
 8013b70:	f000 f874 	bl	8013c5c <_free_r>
 8013b74:	4625      	mov	r5, r4
 8013b76:	4628      	mov	r0, r5
 8013b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b7c:	f000 f8ba 	bl	8013cf4 <_malloc_usable_size_r>
 8013b80:	4284      	cmp	r4, r0
 8013b82:	4607      	mov	r7, r0
 8013b84:	d802      	bhi.n	8013b8c <_realloc_r+0x34>
 8013b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b8a:	d812      	bhi.n	8013bb2 <_realloc_r+0x5a>
 8013b8c:	4621      	mov	r1, r4
 8013b8e:	4640      	mov	r0, r8
 8013b90:	f7ff ff4e 	bl	8013a30 <_malloc_r>
 8013b94:	4605      	mov	r5, r0
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d0ed      	beq.n	8013b76 <_realloc_r+0x1e>
 8013b9a:	42bc      	cmp	r4, r7
 8013b9c:	4622      	mov	r2, r4
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	bf28      	it	cs
 8013ba2:	463a      	movcs	r2, r7
 8013ba4:	f000 f84c 	bl	8013c40 <memcpy>
 8013ba8:	4631      	mov	r1, r6
 8013baa:	4640      	mov	r0, r8
 8013bac:	f000 f856 	bl	8013c5c <_free_r>
 8013bb0:	e7e1      	b.n	8013b76 <_realloc_r+0x1e>
 8013bb2:	4635      	mov	r5, r6
 8013bb4:	e7df      	b.n	8013b76 <_realloc_r+0x1e>

08013bb6 <memset>:
 8013bb6:	4402      	add	r2, r0
 8013bb8:	4603      	mov	r3, r0
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d100      	bne.n	8013bc0 <memset+0xa>
 8013bbe:	4770      	bx	lr
 8013bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8013bc4:	e7f9      	b.n	8013bba <memset+0x4>
	...

08013bc8 <_sbrk_r>:
 8013bc8:	b538      	push	{r3, r4, r5, lr}
 8013bca:	4d06      	ldr	r5, [pc, #24]	; (8013be4 <_sbrk_r+0x1c>)
 8013bcc:	2300      	movs	r3, #0
 8013bce:	4604      	mov	r4, r0
 8013bd0:	4608      	mov	r0, r1
 8013bd2:	602b      	str	r3, [r5, #0]
 8013bd4:	f7f1 feac 	bl	8005930 <_sbrk>
 8013bd8:	1c43      	adds	r3, r0, #1
 8013bda:	d102      	bne.n	8013be2 <_sbrk_r+0x1a>
 8013bdc:	682b      	ldr	r3, [r5, #0]
 8013bde:	b103      	cbz	r3, 8013be2 <_sbrk_r+0x1a>
 8013be0:	6023      	str	r3, [r4, #0]
 8013be2:	bd38      	pop	{r3, r4, r5, pc}
 8013be4:	24001b30 	.word	0x24001b30

08013be8 <__errno>:
 8013be8:	4b01      	ldr	r3, [pc, #4]	; (8013bf0 <__errno+0x8>)
 8013bea:	6818      	ldr	r0, [r3, #0]
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop
 8013bf0:	24000098 	.word	0x24000098

08013bf4 <__libc_init_array>:
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	4d0d      	ldr	r5, [pc, #52]	; (8013c2c <__libc_init_array+0x38>)
 8013bf8:	4c0d      	ldr	r4, [pc, #52]	; (8013c30 <__libc_init_array+0x3c>)
 8013bfa:	1b64      	subs	r4, r4, r5
 8013bfc:	10a4      	asrs	r4, r4, #2
 8013bfe:	2600      	movs	r6, #0
 8013c00:	42a6      	cmp	r6, r4
 8013c02:	d109      	bne.n	8013c18 <__libc_init_array+0x24>
 8013c04:	4d0b      	ldr	r5, [pc, #44]	; (8013c34 <__libc_init_array+0x40>)
 8013c06:	4c0c      	ldr	r4, [pc, #48]	; (8013c38 <__libc_init_array+0x44>)
 8013c08:	f000 f87c 	bl	8013d04 <_init>
 8013c0c:	1b64      	subs	r4, r4, r5
 8013c0e:	10a4      	asrs	r4, r4, #2
 8013c10:	2600      	movs	r6, #0
 8013c12:	42a6      	cmp	r6, r4
 8013c14:	d105      	bne.n	8013c22 <__libc_init_array+0x2e>
 8013c16:	bd70      	pop	{r4, r5, r6, pc}
 8013c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c1c:	4798      	blx	r3
 8013c1e:	3601      	adds	r6, #1
 8013c20:	e7ee      	b.n	8013c00 <__libc_init_array+0xc>
 8013c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c26:	4798      	blx	r3
 8013c28:	3601      	adds	r6, #1
 8013c2a:	e7f2      	b.n	8013c12 <__libc_init_array+0x1e>
 8013c2c:	080141ec 	.word	0x080141ec
 8013c30:	080141ec 	.word	0x080141ec
 8013c34:	080141ec 	.word	0x080141ec
 8013c38:	080141f4 	.word	0x080141f4

08013c3c <__retarget_lock_acquire_recursive>:
 8013c3c:	4770      	bx	lr

08013c3e <__retarget_lock_release_recursive>:
 8013c3e:	4770      	bx	lr

08013c40 <memcpy>:
 8013c40:	440a      	add	r2, r1
 8013c42:	4291      	cmp	r1, r2
 8013c44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013c48:	d100      	bne.n	8013c4c <memcpy+0xc>
 8013c4a:	4770      	bx	lr
 8013c4c:	b510      	push	{r4, lr}
 8013c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c56:	4291      	cmp	r1, r2
 8013c58:	d1f9      	bne.n	8013c4e <memcpy+0xe>
 8013c5a:	bd10      	pop	{r4, pc}

08013c5c <_free_r>:
 8013c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c5e:	2900      	cmp	r1, #0
 8013c60:	d044      	beq.n	8013cec <_free_r+0x90>
 8013c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c66:	9001      	str	r0, [sp, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8013c6e:	bfb8      	it	lt
 8013c70:	18e4      	addlt	r4, r4, r3
 8013c72:	f7ff ff5d 	bl	8013b30 <__malloc_lock>
 8013c76:	4a1e      	ldr	r2, [pc, #120]	; (8013cf0 <_free_r+0x94>)
 8013c78:	9801      	ldr	r0, [sp, #4]
 8013c7a:	6813      	ldr	r3, [r2, #0]
 8013c7c:	b933      	cbnz	r3, 8013c8c <_free_r+0x30>
 8013c7e:	6063      	str	r3, [r4, #4]
 8013c80:	6014      	str	r4, [r2, #0]
 8013c82:	b003      	add	sp, #12
 8013c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c88:	f7ff bf58 	b.w	8013b3c <__malloc_unlock>
 8013c8c:	42a3      	cmp	r3, r4
 8013c8e:	d908      	bls.n	8013ca2 <_free_r+0x46>
 8013c90:	6825      	ldr	r5, [r4, #0]
 8013c92:	1961      	adds	r1, r4, r5
 8013c94:	428b      	cmp	r3, r1
 8013c96:	bf01      	itttt	eq
 8013c98:	6819      	ldreq	r1, [r3, #0]
 8013c9a:	685b      	ldreq	r3, [r3, #4]
 8013c9c:	1949      	addeq	r1, r1, r5
 8013c9e:	6021      	streq	r1, [r4, #0]
 8013ca0:	e7ed      	b.n	8013c7e <_free_r+0x22>
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	b10b      	cbz	r3, 8013cac <_free_r+0x50>
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	d9fa      	bls.n	8013ca2 <_free_r+0x46>
 8013cac:	6811      	ldr	r1, [r2, #0]
 8013cae:	1855      	adds	r5, r2, r1
 8013cb0:	42a5      	cmp	r5, r4
 8013cb2:	d10b      	bne.n	8013ccc <_free_r+0x70>
 8013cb4:	6824      	ldr	r4, [r4, #0]
 8013cb6:	4421      	add	r1, r4
 8013cb8:	1854      	adds	r4, r2, r1
 8013cba:	42a3      	cmp	r3, r4
 8013cbc:	6011      	str	r1, [r2, #0]
 8013cbe:	d1e0      	bne.n	8013c82 <_free_r+0x26>
 8013cc0:	681c      	ldr	r4, [r3, #0]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	6053      	str	r3, [r2, #4]
 8013cc6:	440c      	add	r4, r1
 8013cc8:	6014      	str	r4, [r2, #0]
 8013cca:	e7da      	b.n	8013c82 <_free_r+0x26>
 8013ccc:	d902      	bls.n	8013cd4 <_free_r+0x78>
 8013cce:	230c      	movs	r3, #12
 8013cd0:	6003      	str	r3, [r0, #0]
 8013cd2:	e7d6      	b.n	8013c82 <_free_r+0x26>
 8013cd4:	6825      	ldr	r5, [r4, #0]
 8013cd6:	1961      	adds	r1, r4, r5
 8013cd8:	428b      	cmp	r3, r1
 8013cda:	bf04      	itt	eq
 8013cdc:	6819      	ldreq	r1, [r3, #0]
 8013cde:	685b      	ldreq	r3, [r3, #4]
 8013ce0:	6063      	str	r3, [r4, #4]
 8013ce2:	bf04      	itt	eq
 8013ce4:	1949      	addeq	r1, r1, r5
 8013ce6:	6021      	streq	r1, [r4, #0]
 8013ce8:	6054      	str	r4, [r2, #4]
 8013cea:	e7ca      	b.n	8013c82 <_free_r+0x26>
 8013cec:	b003      	add	sp, #12
 8013cee:	bd30      	pop	{r4, r5, pc}
 8013cf0:	240019f0 	.word	0x240019f0

08013cf4 <_malloc_usable_size_r>:
 8013cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cf8:	1f18      	subs	r0, r3, #4
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	bfbc      	itt	lt
 8013cfe:	580b      	ldrlt	r3, [r1, r0]
 8013d00:	18c0      	addlt	r0, r0, r3
 8013d02:	4770      	bx	lr

08013d04 <_init>:
 8013d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d06:	bf00      	nop
 8013d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d0a:	bc08      	pop	{r3}
 8013d0c:	469e      	mov	lr, r3
 8013d0e:	4770      	bx	lr

08013d10 <_fini>:
 8013d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d12:	bf00      	nop
 8013d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d16:	bc08      	pop	{r3}
 8013d18:	469e      	mov	lr, r3
 8013d1a:	4770      	bx	lr
